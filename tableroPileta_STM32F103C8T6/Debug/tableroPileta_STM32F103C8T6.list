
tableroPileta_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08007f4c  08007f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008254  08008254  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08008254  08008254  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008254  08008254  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008254  08008254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008258  08008258  00018258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800825c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000100  0800835c  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  0800835c  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e45  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c1e  00000000  00000000  00035f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  0003afd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001857e  00000000  00000000  0003c200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013255  00000000  00000000  0005477e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c207  00000000  00000000  000679d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3bda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f4  00000000  00000000  000e3c58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	08007f34 	.word	0x08007f34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	08007f34 	.word	0x08007f34

0800014c <spi_74HC165_init>:
 * La función de inicialización está modificada para trabajar con dos
 * integrados 74HC165 a la vez, tratándolos como distintos esclavos SPI.
 * Cada integrado contará con su propia función de lectura, así como sus
 * propias señales CE.
 */
void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CEport, uint16_t CEpin){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 800015c:	4a09      	ldr	r2, [pc, #36]	; (8000184 <spi_74HC165_init+0x38>)
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 8000162:	4a09      	ldr	r2, [pc, #36]	; (8000188 <spi_74HC165_init+0x3c>)
 8000164:	68bb      	ldr	r3, [r7, #8]
 8000166:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 8000168:	4a08      	ldr	r2, [pc, #32]	; (800018c <spi_74HC165_init+0x40>)
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	8013      	strh	r3, [r2, #0]

	portCE = CEport;
 800016e:	4a08      	ldr	r2, [pc, #32]	; (8000190 <spi_74HC165_init+0x44>)
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	6013      	str	r3, [r2, #0]
	pinCE = CEpin;
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <spi_74HC165_init+0x48>)
 8000176:	8b3b      	ldrh	r3, [r7, #24]
 8000178:	8013      	strh	r3, [r2, #0]

}
 800017a:	bf00      	nop
 800017c:	3714      	adds	r7, #20
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000168 	.word	0x20000168
 8000188:	20000170 	.word	0x20000170
 800018c:	2000016c 	.word	0x2000016c
 8000190:	20000178 	.word	0x20000178
 8000194:	20000174 	.word	0x20000174

08000198 <spi_74HC165_receiveBotones>:


void spi_74HC165_receiveBotones (uint8_t* pdata, uint16_t sizeData){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 80001a4:	4b15      	ldr	r3, [pc, #84]	; (80001fc <spi_74HC165_receiveBotones+0x64>)
 80001a6:	6818      	ldr	r0, [r3, #0]
 80001a8:	4b15      	ldr	r3, [pc, #84]	; (8000200 <spi_74HC165_receiveBotones+0x68>)
 80001aa:	881b      	ldrh	r3, [r3, #0]
 80001ac:	2200      	movs	r2, #0
 80001ae:	4619      	mov	r1, r3
 80001b0:	f004 fc11 	bl	80049d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <spi_74HC165_receiveBotones+0x64>)
 80001b6:	6818      	ldr	r0, [r3, #0]
 80001b8:	4b11      	ldr	r3, [pc, #68]	; (8000200 <spi_74HC165_receiveBotones+0x68>)
 80001ba:	881b      	ldrh	r3, [r3, #0]
 80001bc:	2201      	movs	r2, #1
 80001be:	4619      	mov	r1, r3
 80001c0:	f004 fc09 	bl	80049d6 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 80001c4:	4b0f      	ldr	r3, [pc, #60]	; (8000204 <spi_74HC165_receiveBotones+0x6c>)
 80001c6:	6818      	ldr	r0, [r3, #0]
 80001c8:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <spi_74HC165_receiveBotones+0x70>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	2200      	movs	r2, #0
 80001ce:	4619      	mov	r1, r3
 80001d0:	f004 fc01 	bl	80049d6 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 80001d4:	4b0d      	ldr	r3, [pc, #52]	; (800020c <spi_74HC165_receiveBotones+0x74>)
 80001d6:	6818      	ldr	r0, [r3, #0]
 80001d8:	887a      	ldrh	r2, [r7, #2]
 80001da:	2364      	movs	r3, #100	; 0x64
 80001dc:	6879      	ldr	r1, [r7, #4]
 80001de:	f006 fa16 	bl	800660e <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 80001e2:	4b08      	ldr	r3, [pc, #32]	; (8000204 <spi_74HC165_receiveBotones+0x6c>)
 80001e4:	6818      	ldr	r0, [r3, #0]
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <spi_74HC165_receiveBotones+0x70>)
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	2201      	movs	r2, #1
 80001ec:	4619      	mov	r1, r3
 80001ee:	f004 fbf2 	bl	80049d6 <HAL_GPIO_WritePin>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000170 	.word	0x20000170
 8000200:	2000016c 	.word	0x2000016c
 8000204:	20000178 	.word	0x20000178
 8000208:	20000174 	.word	0x20000174
 800020c:	20000168 	.word	0x20000168

08000210 <spi_74HC165_receiveTeclado>:
//
//	//clock disable
//	HAL_GPIO_WritePin(portCE2, pinCE2, 1);
//}

void spi_74HC165_receiveTeclado (uint8_t* pdata, uint16_t sizeData){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	460b      	mov	r3, r1
 800021a:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 800021c:	4b17      	ldr	r3, [pc, #92]	; (800027c <spi_74HC165_receiveTeclado+0x6c>)
 800021e:	6818      	ldr	r0, [r3, #0]
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <spi_74HC165_receiveTeclado+0x70>)
 8000222:	881b      	ldrh	r3, [r3, #0]
 8000224:	2200      	movs	r2, #0
 8000226:	4619      	mov	r1, r3
 8000228:	f004 fbd5 	bl	80049d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 800022c:	4b13      	ldr	r3, [pc, #76]	; (800027c <spi_74HC165_receiveTeclado+0x6c>)
 800022e:	6818      	ldr	r0, [r3, #0]
 8000230:	4b13      	ldr	r3, [pc, #76]	; (8000280 <spi_74HC165_receiveTeclado+0x70>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	2201      	movs	r2, #1
 8000236:	4619      	mov	r1, r3
 8000238:	f004 fbcd 	bl	80049d6 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <spi_74HC165_receiveTeclado+0x74>)
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <spi_74HC165_receiveTeclado+0x78>)
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	2200      	movs	r2, #0
 8000246:	4619      	mov	r1, r3
 8000248:	f004 fbc5 	bl	80049d6 <HAL_GPIO_WritePin>

	uint8_t auxData[2];

	//SPI
	HAL_SPI_Receive(spi_handler, auxData, 2, 100);
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <spi_74HC165_receiveTeclado+0x7c>)
 800024e:	6818      	ldr	r0, [r3, #0]
 8000250:	f107 010c 	add.w	r1, r7, #12
 8000254:	2364      	movs	r3, #100	; 0x64
 8000256:	2202      	movs	r2, #2
 8000258:	f006 f9d9 	bl	800660e <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <spi_74HC165_receiveTeclado+0x74>)
 800025e:	6818      	ldr	r0, [r3, #0]
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <spi_74HC165_receiveTeclado+0x78>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	2201      	movs	r2, #1
 8000266:	4619      	mov	r1, r3
 8000268:	f004 fbb5 	bl	80049d6 <HAL_GPIO_WritePin>

	*pdata = auxData[1];
 800026c:	7b7a      	ldrb	r2, [r7, #13]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	701a      	strb	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000170 	.word	0x20000170
 8000280:	2000016c 	.word	0x2000016c
 8000284:	20000178 	.word	0x20000178
 8000288:	20000174 	.word	0x20000174
 800028c:	20000168 	.word	0x20000168

08000290 <spi_74HC595_init>:
SPI_HandleTypeDef* spi_handler;
GPIO_TypeDef* portST;
uint16_t pinST;


void spi_74HC595_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* STport, uint16_t STpin){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	80fb      	strh	r3, [r7, #6]

	spi_handler =hspi;
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <spi_74HC595_init+0x38>)
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	6013      	str	r3, [r2, #0]

	portST = STport;
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <spi_74HC595_init+0x3c>)
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	6013      	str	r3, [r2, #0]
	pinST = STpin;
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <spi_74HC595_init+0x40>)
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(portST, pinST, 0);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <spi_74HC595_init+0x3c>)
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <spi_74HC595_init+0x40>)
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	f004 fb8b 	bl	80049d6 <HAL_GPIO_WritePin>

} //end spi_74HC595_init()
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000168 	.word	0x20000168
 80002cc:	20000180 	.word	0x20000180
 80002d0:	2000017c 	.word	0x2000017c

080002d4 <spi_74HC595_Transmit>:


void spi_74HC595_Transmit (uint8_t* pdata, uint16_t sizeData){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(spi_handler, pdata, sizeData, 100);
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <spi_74HC595_Transmit+0x44>)
 80002e2:	6818      	ldr	r0, [r3, #0]
 80002e4:	887a      	ldrh	r2, [r7, #2]
 80002e6:	2364      	movs	r3, #100	; 0x64
 80002e8:	6879      	ldr	r1, [r7, #4]
 80002ea:	f006 f85c 	bl	80063a6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(portST, pinST, 1);
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <spi_74HC595_Transmit+0x48>)
 80002f0:	6818      	ldr	r0, [r3, #0]
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <spi_74HC595_Transmit+0x4c>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	2201      	movs	r2, #1
 80002f8:	4619      	mov	r1, r3
 80002fa:	f004 fb6c 	bl	80049d6 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(portST, pinST, 0);
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <spi_74HC595_Transmit+0x48>)
 8000300:	6818      	ldr	r0, [r3, #0]
 8000302:	4b07      	ldr	r3, [pc, #28]	; (8000320 <spi_74HC595_Transmit+0x4c>)
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	2200      	movs	r2, #0
 8000308:	4619      	mov	r1, r3
 800030a:	f004 fb64 	bl	80049d6 <HAL_GPIO_WritePin>

} //end spi_74HC595_transmit()
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000168 	.word	0x20000168
 800031c:	20000180 	.word	0x20000180
 8000320:	2000017c 	.word	0x2000017c

08000324 <turnONFila>:
uint32_t read_input, last_input, fall_input, rise_input;

uint16_t write_output;


void turnONFila (uint8_t filaNum){
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]

	switch (filaNum){
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d862      	bhi.n	80003fa <turnONFila+0xd6>
 8000334:	a201      	add	r2, pc, #4	; (adr r2, 800033c <turnONFila+0x18>)
 8000336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033a:	bf00      	nop
 800033c:	0800034d 	.word	0x0800034d
 8000340:	08000379 	.word	0x08000379
 8000344:	080003a5 	.word	0x080003a5
 8000348:	080003d1 	.word	0x080003d1
		case 0:
			//pongo en 0 la fila 0; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 800034c:	2201      	movs	r2, #1
 800034e:	2120      	movs	r1, #32
 8000350:	482c      	ldr	r0, [pc, #176]	; (8000404 <turnONFila+0xe0>)
 8000352:	f004 fb40 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 8000356:	2201      	movs	r2, #1
 8000358:	2110      	movs	r1, #16
 800035a:	482a      	ldr	r0, [pc, #168]	; (8000404 <turnONFila+0xe0>)
 800035c:	f004 fb3b 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	2108      	movs	r1, #8
 8000364:	4827      	ldr	r0, [pc, #156]	; (8000404 <turnONFila+0xe0>)
 8000366:	f004 fb36 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000370:	4825      	ldr	r0, [pc, #148]	; (8000408 <turnONFila+0xe4>)
 8000372:	f004 fb30 	bl	80049d6 <HAL_GPIO_WritePin>
		break;
 8000376:	e041      	b.n	80003fc <turnONFila+0xd8>
		case 1:
			//pongo en 0 la fila 1; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 8000378:	2201      	movs	r2, #1
 800037a:	2120      	movs	r1, #32
 800037c:	4821      	ldr	r0, [pc, #132]	; (8000404 <turnONFila+0xe0>)
 800037e:	f004 fb2a 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	2110      	movs	r1, #16
 8000386:	481f      	ldr	r0, [pc, #124]	; (8000404 <turnONFila+0xe0>)
 8000388:	f004 fb25 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2108      	movs	r1, #8
 8000390:	481c      	ldr	r0, [pc, #112]	; (8000404 <turnONFila+0xe0>)
 8000392:	f004 fb20 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 8000396:	2201      	movs	r2, #1
 8000398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800039c:	481a      	ldr	r0, [pc, #104]	; (8000408 <turnONFila+0xe4>)
 800039e:	f004 fb1a 	bl	80049d6 <HAL_GPIO_WritePin>
		break;
 80003a2:	e02b      	b.n	80003fc <turnONFila+0xd8>
		case 2:
			//pongo en 0 la fila 2; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2120      	movs	r1, #32
 80003a8:	4816      	ldr	r0, [pc, #88]	; (8000404 <turnONFila+0xe0>)
 80003aa:	f004 fb14 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	4814      	ldr	r0, [pc, #80]	; (8000404 <turnONFila+0xe0>)
 80003b4:	f004 fb0f 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2108      	movs	r1, #8
 80003bc:	4811      	ldr	r0, [pc, #68]	; (8000404 <turnONFila+0xe0>)
 80003be:	f004 fb0a 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c8:	480f      	ldr	r0, [pc, #60]	; (8000408 <turnONFila+0xe4>)
 80003ca:	f004 fb04 	bl	80049d6 <HAL_GPIO_WritePin>
		break;
 80003ce:	e015      	b.n	80003fc <turnONFila+0xd8>
		case 3:
			//pongo en 0 la fila 3; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2120      	movs	r1, #32
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <turnONFila+0xe0>)
 80003d6:	f004 fafe 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 80003da:	2201      	movs	r2, #1
 80003dc:	2110      	movs	r1, #16
 80003de:	4809      	ldr	r0, [pc, #36]	; (8000404 <turnONFila+0xe0>)
 80003e0:	f004 faf9 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2108      	movs	r1, #8
 80003e8:	4806      	ldr	r0, [pc, #24]	; (8000404 <turnONFila+0xe0>)
 80003ea:	f004 faf4 	bl	80049d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <turnONFila+0xe4>)
 80003f6:	f004 faee 	bl	80049d6 <HAL_GPIO_WritePin>
		default:
		break;
 80003fa:	bf00      	nop
	}//end witch
}//end turnONFila
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40010c00 	.word	0x40010c00
 8000408:	40010800 	.word	0x40010800

0800040c <lecturaTeclas>:


void lecturaTeclas (void){
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

//	last_input = read_input;

	//pulsadores:
	spi_74HC165_receiveBotones (&read_teclas, 1);
 8000412:	2101      	movs	r1, #1
 8000414:	481a      	ldr	r0, [pc, #104]	; (8000480 <lecturaTeclas+0x74>)
 8000416:	f7ff febf 	bl	8000198 <spi_74HC165_receiveBotones>

	//teclado matricial:

	for (uint8_t i = 0; i < 4; i++){
 800041a:	2300      	movs	r3, #0
 800041c:	71fb      	strb	r3, [r7, #7]
 800041e:	e00d      	b.n	800043c <lecturaTeclas+0x30>
		turnONFila(i);
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff7e 	bl	8000324 <turnONFila>
		spi_74HC165_receiveTeclado(&read_teclado[i], 1);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	4a16      	ldr	r2, [pc, #88]	; (8000484 <lecturaTeclas+0x78>)
 800042c:	4413      	add	r3, r2
 800042e:	2101      	movs	r1, #1
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff feed 	bl	8000210 <spi_74HC165_receiveTeclado>
	for (uint8_t i = 0; i < 4; i++){
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	3301      	adds	r3, #1
 800043a:	71fb      	strb	r3, [r7, #7]
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2b03      	cmp	r3, #3
 8000440:	d9ee      	bls.n	8000420 <lecturaTeclas+0x14>
//							(read_teclado[0] << 6) |
//							(read_teclado[1] << 10) |
//							(read_teclado[2] << 14) |
//							(read_teclado[3] << 18));

	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <lecturaTeclas+0x78>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	f003 020f 	and.w	r2, r3, #15
							( (read_teclado[1] & 0b1111) << 4) |
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <lecturaTeclas+0x78>)
 800044c:	785b      	ldrb	r3, [r3, #1]
 800044e:	011b      	lsls	r3, r3, #4
 8000450:	b2db      	uxtb	r3, r3
	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000452:	431a      	orrs	r2, r3
							( (read_teclado[2] & 0b1111) << 8) |
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <lecturaTeclas+0x78>)
 8000456:	789b      	ldrb	r3, [r3, #2]
 8000458:	021b      	lsls	r3, r3, #8
 800045a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
							( (read_teclado[1] & 0b1111) << 4) |
 800045e:	431a      	orrs	r2, r3
							( (read_teclado[3] & 0b1111) << 12) |
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <lecturaTeclas+0x78>)
 8000462:	78db      	ldrb	r3, [r3, #3]
 8000464:	031b      	lsls	r3, r3, #12
 8000466:	b29b      	uxth	r3, r3
							( (read_teclado[2] & 0b1111) << 8) |
 8000468:	431a      	orrs	r2, r3
							(read_teclas << 16) );
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <lecturaTeclas+0x74>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	041b      	lsls	r3, r3, #16
							( (read_teclado[3] & 0b1111) << 12) |
 8000470:	4313      	orrs	r3, r2
	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000472:	461a      	mov	r2, r3
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <lecturaTeclas+0x7c>)
 8000476:	601a      	str	r2, [r3, #0]


} //end lecturaTeclas()
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	200001b4 	.word	0x200001b4
 8000484:	20000188 	.word	0x20000188
 8000488:	2000018c 	.word	0x2000018c

0800048c <update_teclas>:


void update_teclas(void){ //ESTADO DE LAS TECLAS CON LOGICA NEGATIVA
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0


	fall_input = last_input & ~read_input;
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <update_teclas+0x34>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	43da      	mvns	r2, r3
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <update_teclas+0x38>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4013      	ands	r3, r2
 800049c:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <update_teclas+0x3c>)
 800049e:	6013      	str	r3, [r2, #0]
	rise_input = ~last_input & read_input;
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <update_teclas+0x38>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	43da      	mvns	r2, r3
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <update_teclas+0x34>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4013      	ands	r3, r2
 80004ac:	4a07      	ldr	r2, [pc, #28]	; (80004cc <update_teclas+0x40>)
 80004ae:	6013      	str	r3, [r2, #0]

	last_input = read_input;
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <update_teclas+0x34>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <update_teclas+0x38>)
 80004b6:	6013      	str	r3, [r2, #0]

} //end teclas
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	2000018c 	.word	0x2000018c
 80004c4:	200001b0 	.word	0x200001b0
 80004c8:	20000190 	.word	0x20000190
 80004cc:	20000194 	.word	0x20000194

080004d0 <getStatBoton>:


T_INPUT getStatBoton (T_POS_INPUT b){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]

	if ( (fall_input & (1 << b)) != 0)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2201      	movs	r2, #1
 80004de:	fa02 f303 	lsl.w	r3, r2, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <getStatBoton+0x60>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4013      	ands	r3, r2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <getStatBoton+0x22>
		return FALL;
 80004ee:	2302      	movs	r3, #2
 80004f0:	e018      	b.n	8000524 <getStatBoton+0x54>

	if ( (rise_input & (1 << b)) != 0)
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2201      	movs	r2, #1
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <getStatBoton+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4013      	ands	r3, r2
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <getStatBoton+0x3a>
		return RISE;
 8000506:	2303      	movs	r3, #3
 8000508:	e00c      	b.n	8000524 <getStatBoton+0x54>

	if ( (read_input & (1 << b)) != 0)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2201      	movs	r2, #1
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	461a      	mov	r2, r3
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <getStatBoton+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4013      	ands	r3, r2
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <getStatBoton+0x52>
		return HIGH_L;
 800051e:	2301      	movs	r3, #1
 8000520:	e000      	b.n	8000524 <getStatBoton+0x54>

	return LOW_L;
 8000522:	2300      	movs	r3, #0

} //end getStatBoton()
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000190 	.word	0x20000190
 8000534:	20000194 	.word	0x20000194
 8000538:	2000018c 	.word	0x2000018c

0800053c <getNumber>:


int8_t getNumber (void){
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

	if (fall_input & (1 << IN_0))
 8000540:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <getNumber+0xb0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <getNumber+0x14>
			return 0;
 800054c:	2300      	movs	r3, #0
 800054e:	e049      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_1))
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <getNumber+0xb0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <getNumber+0x24>
			return 1;
 800055c:	2301      	movs	r3, #1
 800055e:	e041      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_2))
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <getNumber+0xb0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f003 0302 	and.w	r3, r3, #2
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <getNumber+0x34>
			return 2;
 800056c:	2302      	movs	r3, #2
 800056e:	e039      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_3))
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <getNumber+0xb0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <getNumber+0x44>
			return 3;
 800057c:	2303      	movs	r3, #3
 800057e:	e031      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_4))
 8000580:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <getNumber+0xb0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f003 0310 	and.w	r3, r3, #16
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <getNumber+0x54>
			return 4;
 800058c:	2304      	movs	r3, #4
 800058e:	e029      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_5))
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <getNumber+0xb0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f003 0320 	and.w	r3, r3, #32
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <getNumber+0x64>
			return 5;
 800059c:	2305      	movs	r3, #5
 800059e:	e021      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_6))
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <getNumber+0xb0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <getNumber+0x74>
			return 6;
 80005ac:	2306      	movs	r3, #6
 80005ae:	e019      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_7))
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <getNumber+0xb0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <getNumber+0x84>
			return 7;
 80005bc:	2307      	movs	r3, #7
 80005be:	e011      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_8))
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <getNumber+0xb0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <getNumber+0x94>
			return 8;
 80005cc:	2308      	movs	r3, #8
 80005ce:	e009      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_9))
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <getNumber+0xb0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <getNumber+0xa4>
			return 9;
 80005dc:	2309      	movs	r3, #9
 80005de:	e001      	b.n	80005e4 <getNumber+0xa8>

	return -1;
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
} //end getNumber()
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000190 	.word	0x20000190

080005f0 <setOutput>:


void setOutput (T_POS_OUTPUT s, uint8_t val){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	460a      	mov	r2, r1
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	71bb      	strb	r3, [r7, #6]

	if (val != 0){
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00b      	beq.n	800061e <setOutput+0x2e>
		write_output |= (uint16_t)(1 << s);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2201      	movs	r2, #1
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	b29a      	uxth	r2, r3
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <setOutput+0x54>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	4313      	orrs	r3, r2
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <setOutput+0x54>)
 800061a:	801a      	strh	r2, [r3, #0]
		return;
 800061c:	e00e      	b.n	800063c <setOutput+0x4c>
	}else{
		write_output &= ~( (uint16_t)(1 << s) );
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2201      	movs	r2, #1
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	b21b      	sxth	r3, r3
 8000628:	43db      	mvns	r3, r3
 800062a:	b21a      	sxth	r2, r3
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <setOutput+0x54>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	b21b      	sxth	r3, r3
 8000632:	4013      	ands	r3, r2
 8000634:	b21b      	sxth	r3, r3
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b02      	ldr	r3, [pc, #8]	; (8000644 <setOutput+0x54>)
 800063a:	801a      	strh	r2, [r3, #0]
	}

} //end setOutput()
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000184 	.word	0x20000184

08000648 <toggleOutput>:

void toggleOutput (T_POS_OUTPUT s){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

	write_output ^= (uint16_t)(1 << s);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2201      	movs	r2, #1
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	b29a      	uxth	r2, r3
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <toggleOutput+0x2c>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	4053      	eors	r3, r2
 8000662:	b29a      	uxth	r2, r3
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <toggleOutput+0x2c>)
 8000666:	801a      	strh	r2, [r3, #0]

} //end toggleOutput()
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000184 	.word	0x20000184

08000678 <update_outputs>:


void update_outputs (void){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

	spi_74HC595_Transmit( (uint8_t*)&write_output, 2); // 2 bytes.
 800067c:	2102      	movs	r1, #2
 800067e:	4802      	ldr	r0, [pc, #8]	; (8000688 <update_outputs+0x10>)
 8000680:	f7ff fe28 	bl	80002d4 <spi_74HC595_Transmit>

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000184 	.word	0x20000184

0800068c <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e01f      	b.n	80006dc <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d005      	beq.n	80006b8 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 80006ac:	2201      	movs	r2, #1
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	480e      	ldr	r0, [pc, #56]	; (80006ec <SendByteSPI+0x60>)
 80006b2:	f004 f990 	bl	80049d6 <HAL_GPIO_WritePin>
 80006b6:	e004      	b.n	80006c2 <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 80006b8:	2200      	movs	r2, #0
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <SendByteSPI+0x60>)
 80006be:	f004 f98a 	bl	80049d6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <SendByteSPI+0x60>)
 80006c8:	f004 f985 	bl	80049d6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 80006cc:	2201      	movs	r2, #1
 80006ce:	2120      	movs	r1, #32
 80006d0:	4806      	ldr	r0, [pc, #24]	; (80006ec <SendByteSPI+0x60>)
 80006d2:	f004 f980 	bl	80049d6 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b07      	cmp	r3, #7
 80006e0:	dddc      	ble.n	800069c <SendByteSPI+0x10>

	}
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40010800 	.word	0x40010800

080006f0 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80006fa:	2201      	movs	r2, #1
 80006fc:	2140      	movs	r1, #64	; 0x40
 80006fe:	480f      	ldr	r0, [pc, #60]	; (800073c <ST7920_SendCmd+0x4c>)
 8000700:	f004 f969 	bl	80049d6 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 8000704:	20f8      	movs	r0, #248	; 0xf8
 8000706:	f7ff ffc1 	bl	800068c <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f023 030f 	bic.w	r3, r3, #15
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ffba 	bl	800068c <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	011b      	lsls	r3, r3, #4
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffb4 	bl	800068c <SendByteSPI>
	delay_us(50);
 8000724:	2032      	movs	r0, #50	; 0x32
 8000726:	f000 fa05 	bl	8000b34 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800072a:	2200      	movs	r2, #0
 800072c:	2140      	movs	r1, #64	; 0x40
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <ST7920_SendCmd+0x4c>)
 8000730:	f004 f951 	bl	80049d6 <HAL_GPIO_WritePin>

}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40010800 	.word	0x40010800

08000740 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800074a:	2201      	movs	r2, #1
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	480f      	ldr	r0, [pc, #60]	; (800078c <ST7920_SendData+0x4c>)
 8000750:	f004 f941 	bl	80049d6 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8000754:	20fa      	movs	r0, #250	; 0xfa
 8000756:	f7ff ff99 	bl	800068c <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f023 030f 	bic.w	r3, r3, #15
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff92 	bl	800068c <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff8c 	bl	800068c <SendByteSPI>
	delay_us(50);
 8000774:	2032      	movs	r0, #50	; 0x32
 8000776:	f000 f9dd 	bl	8000b34 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800077a:	2200      	movs	r2, #0
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <ST7920_SendData+0x4c>)
 8000780:	f004 f929 	bl	80049d6 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40010800 	.word	0x40010800

08000790 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
    switch (row)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d81e      	bhi.n	80007e0 <ST7920_SendString+0x50>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <ST7920_SendString+0x18>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	080007b9 	.word	0x080007b9
 80007ac:	080007c3 	.word	0x080007c3
 80007b0:	080007cd 	.word	0x080007cd
 80007b4:	080007d7 	.word	0x080007d7
    {
        case 0:
            col |= 0x80;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007be:	60bb      	str	r3, [r7, #8]
            break;
 80007c0:	e013      	b.n	80007ea <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80007c8:	60bb      	str	r3, [r7, #8]
            break;
 80007ca:	e00e      	b.n	80007ea <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80007d2:	60bb      	str	r3, [r7, #8]
            break;
 80007d4:	e009      	b.n	80007ea <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 80007dc:	60bb      	str	r3, [r7, #8]
            break;
 80007de:	e004      	b.n	80007ea <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e6:	60bb      	str	r3, [r7, #8]
            break;
 80007e8:	bf00      	nop
    }

    ST7920_SendCmd(col);
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff7e 	bl	80006f0 <ST7920_SendCmd>

    while (*string)
 80007f4:	e006      	b.n	8000804 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff9e 	bl	8000740 <ST7920_SendData>
    while (*string)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1f4      	bne.n	80007f6 <ST7920_SendString+0x66>
    	}
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <ST7920_DrawBitmap>:
		Graphic_Check = 0;  // update the variable
	}
}

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 800081c:	2300      	movs	r3, #0
 800081e:	73bb      	strb	r3, [r7, #14]
 8000820:	e06a      	b.n	80008f8 <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	2b1f      	cmp	r3, #31
 8000826:	d830      	bhi.n	800088a <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	e029      	b.n	8000882 <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff5a 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff53 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 800084a:	7bfa      	ldrb	r2, [r7, #15]
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	4413      	add	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	461a      	mov	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff6f 	bl	8000740 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	4413      	add	r3, r2
 800086e:	461a      	mov	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff62 	bl	8000740 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	3301      	adds	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	2b07      	cmp	r3, #7
 8000886:	d9d2      	bls.n	800082e <ST7920_DrawBitmap+0x1a>
 8000888:	e033      	b.n	80008f2 <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]
 800088e:	e02d      	b.n	80008ec <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	3b20      	subs	r3, #32
 8000894:	b2db      	uxtb	r3, r3
 8000896:	b25b      	sxtb	r3, r3
 8000898:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800089c:	b25b      	sxtb	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff25 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	f063 0377 	orn	r3, r3, #119	; 0x77
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff1e 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 80008b4:	7bfa      	ldrb	r2, [r7, #15]
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	4413      	add	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	461a      	mov	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4413      	add	r3, r2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff3a 	bl	8000740 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	011b      	lsls	r3, r3, #4
 80008d6:	4413      	add	r3, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff2d 	bl	8000740 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	3301      	adds	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	d9ce      	bls.n	8000890 <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	3301      	adds	r3, #1
 80008f6:	73bb      	strb	r3, [r7, #14]
 80008f8:	7bbb      	ldrb	r3, [r7, #14]
 80008fa:	2b3f      	cmp	r3, #63	; 0x3f
 80008fc:	d991      	bls.n	8000822 <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <ST7920_Update+0x10>)
 800090e:	f7ff ff81 	bl	8000814 <ST7920_DrawBitmap>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200001bc 	.word	0x200001bc

0800091c <ST7920_Clear>:



void ST7920_Clear()
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <ST7920_Clear+0x8c>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d134      	bne.n	8000994 <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 800092a:	2300      	movs	r3, #0
 800092c:	71bb      	strb	r3, [r7, #6]
 800092e:	e02d      	b.n	800098c <ST7920_Clear+0x70>
		{
			if(y < 32)
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	2b1f      	cmp	r3, #31
 8000934:	d80a      	bhi.n	800094c <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fed6 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000944:	2080      	movs	r0, #128	; 0x80
 8000946:	f7ff fed3 	bl	80006f0 <ST7920_SendCmd>
 800094a:	e00d      	b.n	8000968 <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	3b20      	subs	r3, #32
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b25b      	sxtb	r3, r3
 8000954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000958:	b25b      	sxtb	r3, r3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec7 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8000962:	2088      	movs	r0, #136	; 0x88
 8000964:	f7ff fec4 	bl	80006f0 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 8000968:	2300      	movs	r3, #0
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	e008      	b.n	8000980 <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fee6 	bl	8000740 <ST7920_SendData>
				ST7920_SendData(0);
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fee3 	bl	8000740 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	3301      	adds	r3, #1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b07      	cmp	r3, #7
 8000984:	d9f3      	bls.n	800096e <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 8000986:	79bb      	ldrb	r3, [r7, #6]
 8000988:	3301      	adds	r3, #1
 800098a:	71bb      	strb	r3, [r7, #6]
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	2b3f      	cmp	r3, #63	; 0x3f
 8000990:	d9ce      	bls.n	8000930 <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 8000992:	e005      	b.n	80009a0 <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);   // clear the display using command
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff feab 	bl	80006f0 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 800099a:	2002      	movs	r0, #2
 800099c:	f003 fb70 	bl	8004080 <HAL_Delay>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000011c 	.word	0x2000011c

080009ac <ST7920_Init>:


void ST7920_Init (void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80009b0:	2200      	movs	r2, #0
 80009b2:	2101      	movs	r1, #1
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <ST7920_Init+0x7c>)
 80009b6:	f004 f80e 	bl	80049d6 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 80009ba:	200a      	movs	r0, #10
 80009bc:	f003 fb60 	bl	8004080 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <ST7920_Init+0x7c>)
 80009c6:	f004 f806 	bl	80049d6 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 80009ca:	2032      	movs	r0, #50	; 0x32
 80009cc:	f003 fb58 	bl	8004080 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 80009d0:	2030      	movs	r0, #48	; 0x30
 80009d2:	f7ff fe8d 	bl	80006f0 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 80009d6:	206e      	movs	r0, #110	; 0x6e
 80009d8:	f000 f8ac 	bl	8000b34 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 80009dc:	2030      	movs	r0, #48	; 0x30
 80009de:	f7ff fe87 	bl	80006f0 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 80009e2:	2028      	movs	r0, #40	; 0x28
 80009e4:	f000 f8a6 	bl	8000b34 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 80009e8:	2008      	movs	r0, #8
 80009ea:	f7ff fe81 	bl	80006f0 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 80009ee:	206e      	movs	r0, #110	; 0x6e
 80009f0:	f000 f8a0 	bl	8000b34 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fe7b 	bl	80006f0 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 80009fa:	200c      	movs	r0, #12
 80009fc:	f003 fb40 	bl	8004080 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000a00:	2006      	movs	r0, #6
 8000a02:	f7ff fe75 	bl	80006f0 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000a06:	2001      	movs	r0, #1
 8000a08:	f003 fb3a 	bl	8004080 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000a0c:	200c      	movs	r0, #12
 8000a0e:	f7ff fe6f 	bl	80006f0 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000a12:	2001      	movs	r0, #1
 8000a14:	f003 fb34 	bl	8004080 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f7ff fe69 	bl	80006f0 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f003 fb2e 	bl	8004080 <HAL_Delay>

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a3e:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <MX_ADC1_Init+0x78>)
 8000a40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a6a:	f003 fb2b 	bl	80040c4 <HAL_ADC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a74:	f002 f8fa 	bl	8002c6c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a8a:	f003 fbf3 	bl	8004274 <HAL_ADC_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a94:	f002 f8ea 	bl	8002c6c <Error_Handler>
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200005c0 	.word	0x200005c0
 8000aa4:	40012400 	.word	0x40012400

08000aa8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_ADC_MspInit+0x6c>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d121      	bne.n	8000b0c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af8:	2301      	movs	r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	2303      	movs	r3, #3
 8000afe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_ADC_MspInit+0x74>)
 8000b08:	f003 fdf4 	bl	80046f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40012400 	.word	0x40012400
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <delay_init>:

extern TIM_HandleTypeDef htim3;


void delay_init ()
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim3);  // change this according to ur setup
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <delay_init+0x10>)
 8000b26:	f006 f922 	bl	8006d6e <HAL_TIM_Base_Start>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200006d8 	.word	0x200006d8

08000b34 <delay_us>:

void delay_us (uint16_t delay)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);  // reset the counter
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <delay_us+0x2c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<delay);  // wait for the delay to complete
 8000b46:	bf00      	nop
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <delay_us+0x2c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d3f9      	bcc.n	8000b48 <delay_us+0x14>
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200006d8 	.word	0x200006d8

08000b64 <init_pantalla>:
#include "ST7920_SERIAL.h"
#include "delay.h"

uint8_t flag_pantalla = 0;

void init_pantalla (void){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	delay_init();
 8000b68:	f7ff ffda 	bl	8000b20 <delay_init>
	ST7920_Init();
 8000b6c:	f7ff ff1e 	bl	80009ac <ST7920_Init>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <set_pantalla>:
//	ST7920_Clear();
//	ST7920_SendString(0, 0, texto);
//	//flag_pantalla = 1;
//}

void set_pantalla (T_PANTALLA p){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	ST7920_Clear();
 8000b7e:	f7ff fecd 	bl	800091c <ST7920_Clear>
	switch (p){
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b15      	cmp	r3, #21
 8000b86:	f200 8135 	bhi.w	8000df4 <set_pantalla+0x280>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <set_pantalla+0x1c>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000be9 	.word	0x08000be9
 8000b94:	08000bff 	.word	0x08000bff
 8000b98:	08000c15 	.word	0x08000c15
 8000b9c:	08000c2b 	.word	0x08000c2b
 8000ba0:	08000c4b 	.word	0x08000c4b
 8000ba4:	08000c61 	.word	0x08000c61
 8000ba8:	08000c6d 	.word	0x08000c6d
 8000bac:	08000c8d 	.word	0x08000c8d
 8000bb0:	08000ca3 	.word	0x08000ca3
 8000bb4:	08000cb9 	.word	0x08000cb9
 8000bb8:	08000cd9 	.word	0x08000cd9
 8000bbc:	08000cef 	.word	0x08000cef
 8000bc0:	08000d05 	.word	0x08000d05
 8000bc4:	08000d11 	.word	0x08000d11
 8000bc8:	08000d1d 	.word	0x08000d1d
 8000bcc:	08000d3d 	.word	0x08000d3d
 8000bd0:	08000d5d 	.word	0x08000d5d
 8000bd4:	08000d7d 	.word	0x08000d7d
 8000bd8:	08000d93 	.word	0x08000d93
 8000bdc:	08000da9 	.word	0x08000da9
 8000be0:	08000dc9 	.word	0x08000dc9
 8000be4:	08000ddf 	.word	0x08000ddf
		case PANT_init_menuPrincipal:
			ST7920_SendString(0, 0, "Estoy en el menu");
 8000be8:	4a84      	ldr	r2, [pc, #528]	; (8000dfc <set_pantalla+0x288>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fdcf 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "principal.");
 8000bf2:	4a83      	ldr	r2, [pc, #524]	; (8000e00 <set_pantalla+0x28c>)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff fdca 	bl	8000790 <ST7920_SendString>
		break;
 8000bfc:	e0fa      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_sensor_conectado:
			ST7920_SendString(0, 0, "Sensor");
 8000bfe:	4a81      	ldr	r2, [pc, #516]	; (8000e04 <set_pantalla+0x290>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff fdc4 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "conectado?");
 8000c08:	4a7f      	ldr	r2, [pc, #508]	; (8000e08 <set_pantalla+0x294>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff fdbf 	bl	8000790 <ST7920_SendString>
		break;
 8000c12:	e0ef      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_llenando_terminar:
			ST7920_SendString(0, 0, "Llenando.");
 8000c14:	4a7d      	ldr	r2, [pc, #500]	; (8000e0c <set_pantalla+0x298>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fdb9 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "Terminar?");
 8000c1e:	4a7c      	ldr	r2, [pc, #496]	; (8000e10 <set_pantalla+0x29c>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff fdb4 	bl	8000790 <ST7920_SendString>
		break;
 8000c28:	e0e4      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_init_skimmer:
			ST7920_SendString(0, 0, "COMPRUEBE EL");
 8000c2a:	4a7a      	ldr	r2, [pc, #488]	; (8000e14 <set_pantalla+0x2a0>)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff fdae 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "ESTADO DE LA");
 8000c34:	4a78      	ldr	r2, [pc, #480]	; (8000e18 <set_pantalla+0x2a4>)
 8000c36:	2100      	movs	r1, #0
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff fda9 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "BOMBA");
 8000c3e:	4a77      	ldr	r2, [pc, #476]	; (8000e1c <set_pantalla+0x2a8>)
 8000c40:	2100      	movs	r1, #0
 8000c42:	2002      	movs	r0, #2
 8000c44:	f7ff fda4 	bl	8000790 <ST7920_SendString>
		break;
 8000c48:	e0d4      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_init_hidro:
			ST7920_SendString(0, 0, "defina el tiempo");
 8000c4a:	4a75      	ldr	r2, [pc, #468]	; (8000e20 <set_pantalla+0x2ac>)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fd9e 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "del hidromasaje:");
 8000c54:	4a73      	ldr	r2, [pc, #460]	; (8000e24 <set_pantalla+0x2b0>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fd99 	bl	8000790 <ST7920_SendString>
		break;
 8000c5e:	e0c9      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_init_lucesExt:
			ST7920_SendString(0, 0, "LIMITE DE TIEMPO");
 8000c60:	4a71      	ldr	r2, [pc, #452]	; (8000e28 <set_pantalla+0x2b4>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fd93 	bl	8000790 <ST7920_SendString>
		break;
 8000c6a:	e0c3      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_init_setLlenado:
			ST7920_SendString(0, 0, "Config. llenado");
 8000c6c:	4a6f      	ldr	r2, [pc, #444]	; (8000e2c <set_pantalla+0x2b8>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fd8d 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "1: duracion ON");
 8000c76:	4a6e      	ldr	r2, [pc, #440]	; (8000e30 <set_pantalla+0x2bc>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff fd88 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "2: duracion OFF");
 8000c80:	4a6c      	ldr	r2, [pc, #432]	; (8000e34 <set_pantalla+0x2c0>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff fd83 	bl	8000790 <ST7920_SendString>
		break;
 8000c8a:	e0b3      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PERIODO_ON_LLENADO:
			ST7920_SendString(0, 0, "defina el tiempo");
 8000c8c:	4a64      	ldr	r2, [pc, #400]	; (8000e20 <set_pantalla+0x2ac>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fd7d 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion ON:");
 8000c96:	4a68      	ldr	r2, [pc, #416]	; (8000e38 <set_pantalla+0x2c4>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fd78 	bl	8000790 <ST7920_SendString>
		break;
 8000ca0:	e0a8      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PERIODO_OFF_LLENADO:
			ST7920_SendString(0, 0, "defina el tiempo");
 8000ca2:	4a5f      	ldr	r2, [pc, #380]	; (8000e20 <set_pantalla+0x2ac>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fd72 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion OFF:");
 8000cac:	4a63      	ldr	r2, [pc, #396]	; (8000e3c <set_pantalla+0x2c8>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fd6d 	bl	8000790 <ST7920_SendString>
		break;
 8000cb6:	e09d      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_COMPRUEBE_SENSOR:
			ST7920_SendString(0, 0, "COMPRUEBE EL");
 8000cb8:	4a56      	ldr	r2, [pc, #344]	; (8000e14 <set_pantalla+0x2a0>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fd67 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "SENSOR Y PULSE");
 8000cc2:	4a5f      	ldr	r2, [pc, #380]	; (8000e40 <set_pantalla+0x2cc>)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff fd62 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "EL BOTON...");
 8000ccc:	4a5d      	ldr	r2, [pc, #372]	; (8000e44 <set_pantalla+0x2d0>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff fd5d 	bl	8000790 <ST7920_SendString>
		break;
 8000cd6:	e08d      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_CONECTE_SENSOR:
			ST7920_SendString(0, 0, "CONECTE EL");
 8000cd8:	4a5b      	ldr	r2, [pc, #364]	; (8000e48 <set_pantalla+0x2d4>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fd57 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "SENSOR");
 8000ce2:	4a5a      	ldr	r2, [pc, #360]	; (8000e4c <set_pantalla+0x2d8>)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fd52 	bl	8000790 <ST7920_SendString>
		break;
 8000cec:	e082      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PREGUNTA_SENSOR:
			ST7920_SendString(0, 0, "Sensor");
 8000cee:	4a45      	ldr	r2, [pc, #276]	; (8000e04 <set_pantalla+0x290>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fd4c 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "conectado?");
 8000cf8:	4a43      	ldr	r2, [pc, #268]	; (8000e08 <set_pantalla+0x294>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff fd47 	bl	8000790 <ST7920_SendString>
		break;
 8000d02:	e077      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_LLENANDO:
			ST7920_SendString(0, 0, "Llenando...");
 8000d04:	4a52      	ldr	r2, [pc, #328]	; (8000e50 <set_pantalla+0x2dc>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fd41 	bl	8000790 <ST7920_SendString>
		break;
 8000d0e:	e071      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PILETA_LLENA:
			ST7920_SendString(0, 0, "Pileta llena.");
 8000d10:	4a50      	ldr	r2, [pc, #320]	; (8000e54 <set_pantalla+0x2e0>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fd3b 	bl	8000790 <ST7920_SendString>
		break;
 8000d1a:	e06b      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_OPCIONES_SKIMMER:
			ST7920_SendString(0, 0, "Config. del skimmer:");
 8000d1c:	4a4e      	ldr	r2, [pc, #312]	; (8000e58 <set_pantalla+0x2e4>)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fd35 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "1) Frecuencia");
 8000d26:	4a4d      	ldr	r2, [pc, #308]	; (8000e5c <set_pantalla+0x2e8>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff fd30 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "2) Horario");
 8000d30:	4a4b      	ldr	r2, [pc, #300]	; (8000e60 <set_pantalla+0x2ec>)
 8000d32:	2100      	movs	r1, #0
 8000d34:	2002      	movs	r0, #2
 8000d36:	f7ff fd2b 	bl	8000790 <ST7920_SendString>
		break;
 8000d3a:	e05b      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_ELIJE_FRECUENCIA_SKIMMER:
			ST7920_SendString(0, 0, "Frec. de skimmer");
 8000d3c:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <set_pantalla+0x2f0>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff fd25 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "1) Tiempo en ON");
 8000d46:	4a48      	ldr	r2, [pc, #288]	; (8000e68 <set_pantalla+0x2f4>)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff fd20 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "2) Tiempo en OFF");
 8000d50:	4a46      	ldr	r2, [pc, #280]	; (8000e6c <set_pantalla+0x2f8>)
 8000d52:	2100      	movs	r1, #0
 8000d54:	2002      	movs	r0, #2
 8000d56:	f7ff fd1b 	bl	8000790 <ST7920_SendString>
		break;
 8000d5a:	e04b      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_ELIJE_PROGRAMA_SKIMMER:
			ST7920_SendString(0, 0, "Elija un programa");
 8000d5c:	4a44      	ldr	r2, [pc, #272]	; (8000e70 <set_pantalla+0x2fc>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff fd15 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "1) Programa 1");
 8000d66:	4a43      	ldr	r2, [pc, #268]	; (8000e74 <set_pantalla+0x300>)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff fd10 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "2) Programa 2");
 8000d70:	4a41      	ldr	r2, [pc, #260]	; (8000e78 <set_pantalla+0x304>)
 8000d72:	2100      	movs	r1, #0
 8000d74:	2002      	movs	r0, #2
 8000d76:	f7ff fd0b 	bl	8000790 <ST7920_SendString>
		break;
 8000d7a:	e03b      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PERIODO_ON_SKIMMER:
			ST7920_SendString(0, 0, "Defina el tiempo");
 8000d7c:	4a3f      	ldr	r2, [pc, #252]	; (8000e7c <set_pantalla+0x308>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fd05 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion ON:");
 8000d86:	4a2c      	ldr	r2, [pc, #176]	; (8000e38 <set_pantalla+0x2c4>)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fd00 	bl	8000790 <ST7920_SendString>
		break;
 8000d90:	e030      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PERIODO_OFF_SKIMMER:
			ST7920_SendString(0, 0, "Defina el tiempo");
 8000d92:	4a3a      	ldr	r2, [pc, #232]	; (8000e7c <set_pantalla+0x308>)
 8000d94:	2100      	movs	r1, #0
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff fcfa 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion OFF:");
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <set_pantalla+0x2c8>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fcf5 	bl	8000790 <ST7920_SendString>
		break;
 8000da6:	e025      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_ELIJE_ON_OFF_HORARIO_SKIMMER:
			ST7920_SendString(0, 0, "Elije horario:");
 8000da8:	4a35      	ldr	r2, [pc, #212]	; (8000e80 <set_pantalla+0x30c>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fcef 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "1) Horario ON");
 8000db2:	4a34      	ldr	r2, [pc, #208]	; (8000e84 <set_pantalla+0x310>)
 8000db4:	2100      	movs	r1, #0
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff fcea 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "2) Horario OFF");
 8000dbc:	4a32      	ldr	r2, [pc, #200]	; (8000e88 <set_pantalla+0x314>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f7ff fce5 	bl	8000790 <ST7920_SendString>
		break;
 8000dc6:	e015      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_HORARIO_ON_SKIMMER:
			ST7920_SendString(0, 0, "Defina el");
 8000dc8:	4a30      	ldr	r2, [pc, #192]	; (8000e8c <set_pantalla+0x318>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fcdf 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "horario ON");
 8000dd2:	4a2f      	ldr	r2, [pc, #188]	; (8000e90 <set_pantalla+0x31c>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f7ff fcda 	bl	8000790 <ST7920_SendString>
		break;
 8000ddc:	e00a      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_HORARIO_OFF_SKIMMER:
			ST7920_SendString(0, 0, "Defina el");
 8000dde:	4a2b      	ldr	r2, [pc, #172]	; (8000e8c <set_pantalla+0x318>)
 8000de0:	2100      	movs	r1, #0
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fcd4 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "horario OFF");
 8000de8:	4a2a      	ldr	r2, [pc, #168]	; (8000e94 <set_pantalla+0x320>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff fccf 	bl	8000790 <ST7920_SendString>
		break;
 8000df2:	bf00      	nop

	} //end switch p
//	flag_pantalla = 1;
} //end set_pantalla()
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	08007f4c 	.word	0x08007f4c
 8000e00:	08007f60 	.word	0x08007f60
 8000e04:	08007f6c 	.word	0x08007f6c
 8000e08:	08007f74 	.word	0x08007f74
 8000e0c:	08007f80 	.word	0x08007f80
 8000e10:	08007f8c 	.word	0x08007f8c
 8000e14:	08007f98 	.word	0x08007f98
 8000e18:	08007fa8 	.word	0x08007fa8
 8000e1c:	08007fb8 	.word	0x08007fb8
 8000e20:	08007fc0 	.word	0x08007fc0
 8000e24:	08007fd4 	.word	0x08007fd4
 8000e28:	08007fe8 	.word	0x08007fe8
 8000e2c:	08007ffc 	.word	0x08007ffc
 8000e30:	0800800c 	.word	0x0800800c
 8000e34:	0800801c 	.word	0x0800801c
 8000e38:	0800802c 	.word	0x0800802c
 8000e3c:	0800803c 	.word	0x0800803c
 8000e40:	08008050 	.word	0x08008050
 8000e44:	08008060 	.word	0x08008060
 8000e48:	0800806c 	.word	0x0800806c
 8000e4c:	08008078 	.word	0x08008078
 8000e50:	08008080 	.word	0x08008080
 8000e54:	0800808c 	.word	0x0800808c
 8000e58:	0800809c 	.word	0x0800809c
 8000e5c:	080080b4 	.word	0x080080b4
 8000e60:	080080c4 	.word	0x080080c4
 8000e64:	080080d0 	.word	0x080080d0
 8000e68:	080080e4 	.word	0x080080e4
 8000e6c:	080080f4 	.word	0x080080f4
 8000e70:	08008108 	.word	0x08008108
 8000e74:	0800811c 	.word	0x0800811c
 8000e78:	0800812c 	.word	0x0800812c
 8000e7c:	0800813c 	.word	0x0800813c
 8000e80:	08008150 	.word	0x08008150
 8000e84:	08008160 	.word	0x08008160
 8000e88:	08008170 	.word	0x08008170
 8000e8c:	08008180 	.word	0x08008180
 8000e90:	0800818c 	.word	0x0800818c
 8000e94:	08008198 	.word	0x08008198

08000e98 <setTexto_pantalla>:

void setTexto_pantalla (char* texto){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	//ST7920_Clear();
	ST7920_SendString(2, 0, texto);
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f7ff fc73 	bl	8000790 <ST7920_SendString>
	//flag_pantalla = 1;
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <pantallaUpdate>:

void pantallaLista(void){
	flag_pantalla = 1;
}

void pantallaUpdate(void){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	if (flag_pantalla != 0){
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <pantallaUpdate+0x1c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d004      	beq.n	8000eca <pantallaUpdate+0x16>
		ST7920_Update();
 8000ec0:	f7ff fd22 	bl	8000908 <ST7920_Update>
		flag_pantalla = 0;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <pantallaUpdate+0x1c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	}
} //end pantallaUpdate()
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000011d 	.word	0x2000011d

08000ed4 <setProg_hidro>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

T_PROG_OUTPUT setProg_hidro (T_PROG_CMD cmd){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]

	int8_t newNumber = getNumber();
 8000ede:	f7ff fb2d 	bl	800053c <getNumber>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]

	switch (statusTiempoHidro) {
 8000ee6:	4b90      	ldr	r3, [pc, #576]	; (8001128 <setProg_hidro+0x254>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	f000 80a6 	beq.w	800103c <setProg_hidro+0x168>
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	dc04      	bgt.n	8000efe <setProg_hidro+0x2a>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d02e      	beq.n	8000f56 <setProg_hidro+0x82>
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d050      	beq.n	8000f9e <setProg_hidro+0xca>
 8000efc:	e105      	b.n	800110a <setProg_hidro+0x236>
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	f000 80f9 	beq.w	80010f6 <setProg_hidro+0x222>
 8000f04:	2b63      	cmp	r3, #99	; 0x63
 8000f06:	f040 8100 	bne.w	800110a <setProg_hidro+0x236>
		case 99: //imprime al entrar al sub-menu

			tiempoHidroAux = tiempoHidro;
 8000f0a:	4b88      	ldr	r3, [pc, #544]	; (800112c <setProg_hidro+0x258>)
 8000f0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f10:	4b87      	ldr	r3, [pc, #540]	; (8001130 <setProg_hidro+0x25c>)
 8000f12:	801a      	strh	r2, [r3, #0]
			sprintf(texto, "%d min.", tiempoHidroAux);
 8000f14:	4b86      	ldr	r3, [pc, #536]	; (8001130 <setProg_hidro+0x25c>)
 8000f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4985      	ldr	r1, [pc, #532]	; (8001134 <setProg_hidro+0x260>)
 8000f1e:	4886      	ldr	r0, [pc, #536]	; (8001138 <setProg_hidro+0x264>)
 8000f20:	f006 fbf6 	bl	8007710 <siprintf>
			setTexto_pantalla(texto);
 8000f24:	4884      	ldr	r0, [pc, #528]	; (8001138 <setProg_hidro+0x264>)
 8000f26:	f7ff ffb7 	bl	8000e98 <setTexto_pantalla>
			if (!tiempoHidroAux){
 8000f2a:	4b81      	ldr	r3, [pc, #516]	; (8001130 <setProg_hidro+0x25c>)
 8000f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d103      	bne.n	8000f3c <setProg_hidro+0x68>
				statusTiempoHidro = 0;
 8000f34:	4b7c      	ldr	r3, [pc, #496]	; (8001128 <setProg_hidro+0x254>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
				break;
 8000f3a:	e0ef      	b.n	800111c <setProg_hidro+0x248>
			}else if (tiempoHidroAux < 10){
 8000f3c:	4b7c      	ldr	r3, [pc, #496]	; (8001130 <setProg_hidro+0x25c>)
 8000f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f42:	2b09      	cmp	r3, #9
 8000f44:	dc03      	bgt.n	8000f4e <setProg_hidro+0x7a>
				statusTiempoHidro = 1;
 8000f46:	4b78      	ldr	r3, [pc, #480]	; (8001128 <setProg_hidro+0x254>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
				break;
 8000f4c:	e0e6      	b.n	800111c <setProg_hidro+0x248>
			}else{
				statusTiempoHidro = 2;
 8000f4e:	4b76      	ldr	r3, [pc, #472]	; (8001128 <setProg_hidro+0x254>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	701a      	strb	r2, [r3, #0]
				break;
 8000f54:	e0e2      	b.n	800111c <setProg_hidro+0x248>
			}
		break;
		case 0: //tiempo en 0.
			if (getStatBoton(IN_AST) == FALL) {
 8000f56:	200c      	movs	r0, #12
 8000f58:	f7ff faba 	bl	80004d0 <getStatBoton>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d104      	bne.n	8000f6c <setProg_hidro+0x98>
				statusTiempoHidro = 99;
 8000f62:	4b71      	ldr	r3, [pc, #452]	; (8001128 <setProg_hidro+0x254>)
 8000f64:	2263      	movs	r2, #99	; 0x63
 8000f66:	701a      	strb	r2, [r3, #0]
				return PROG_IDLE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0d8      	b.n	800111e <setProg_hidro+0x24a>
			}

			if (newNumber > 0) {
 8000f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f340 80cc 	ble.w	800110e <setProg_hidro+0x23a>
				tiempoHidroAux = newNumber;
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	4b6c      	ldr	r3, [pc, #432]	; (8001130 <setProg_hidro+0x25c>)
 8000f7e:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000f80:	4b6b      	ldr	r3, [pc, #428]	; (8001130 <setProg_hidro+0x25c>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	461a      	mov	r2, r3
 8000f88:	496a      	ldr	r1, [pc, #424]	; (8001134 <setProg_hidro+0x260>)
 8000f8a:	486b      	ldr	r0, [pc, #428]	; (8001138 <setProg_hidro+0x264>)
 8000f8c:	f006 fbc0 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8000f90:	4869      	ldr	r0, [pc, #420]	; (8001138 <setProg_hidro+0x264>)
 8000f92:	f7ff ff81 	bl	8000e98 <setTexto_pantalla>
				statusTiempoHidro = 1;
 8000f96:	4b64      	ldr	r3, [pc, #400]	; (8001128 <setProg_hidro+0x254>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000f9c:	e0b7      	b.n	800110e <setProg_hidro+0x23a>
		case 1: //lote entre 1 y 9.
			if (getStatBoton(IN_AST) == FALL) {
 8000f9e:	200c      	movs	r0, #12
 8000fa0:	f7ff fa96 	bl	80004d0 <getStatBoton>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d111      	bne.n	8000fce <setProg_hidro+0xfa>
				tiempoHidroAux = 0;
 8000faa:	4b61      	ldr	r3, [pc, #388]	; (8001130 <setProg_hidro+0x25c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000fb0:	4b5f      	ldr	r3, [pc, #380]	; (8001130 <setProg_hidro+0x25c>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	495e      	ldr	r1, [pc, #376]	; (8001134 <setProg_hidro+0x260>)
 8000fba:	485f      	ldr	r0, [pc, #380]	; (8001138 <setProg_hidro+0x264>)
 8000fbc:	f006 fba8 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8000fc0:	485d      	ldr	r0, [pc, #372]	; (8001138 <setProg_hidro+0x264>)
 8000fc2:	f7ff ff69 	bl	8000e98 <setTexto_pantalla>
				statusTiempoHidro = 0;
 8000fc6:	4b58      	ldr	r3, [pc, #352]	; (8001128 <setProg_hidro+0x254>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
				break;
 8000fcc:	e0a6      	b.n	800111c <setProg_hidro+0x248>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8000fce:	200e      	movs	r0, #14
 8000fd0:	f7ff fa7e 	bl	80004d0 <getStatBoton>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d103      	bne.n	8000fe2 <setProg_hidro+0x10e>
				statusTiempoHidro = 3;
 8000fda:	4b53      	ldr	r3, [pc, #332]	; (8001128 <setProg_hidro+0x254>)
 8000fdc:	2203      	movs	r2, #3
 8000fde:	701a      	strb	r2, [r3, #0]
				break;
 8000fe0:	e09c      	b.n	800111c <setProg_hidro+0x248>
			}

			if (newNumber != -1) {
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fea:	f000 8092 	beq.w	8001112 <setProg_hidro+0x23e>
				tiempoHidroAux *= 10;
 8000fee:	4b50      	ldr	r3, [pc, #320]	; (8001130 <setProg_hidro+0x25c>)
 8000ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <setProg_hidro+0x25c>)
 8001004:	801a      	strh	r2, [r3, #0]
				tiempoHidroAux += newNumber;
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b48      	ldr	r3, [pc, #288]	; (8001130 <setProg_hidro+0x25c>)
 800100e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001012:	b29b      	uxth	r3, r3
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	b21a      	sxth	r2, r3
 800101a:	4b45      	ldr	r3, [pc, #276]	; (8001130 <setProg_hidro+0x25c>)
 800101c:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 800101e:	4b44      	ldr	r3, [pc, #272]	; (8001130 <setProg_hidro+0x25c>)
 8001020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001024:	461a      	mov	r2, r3
 8001026:	4943      	ldr	r1, [pc, #268]	; (8001134 <setProg_hidro+0x260>)
 8001028:	4843      	ldr	r0, [pc, #268]	; (8001138 <setProg_hidro+0x264>)
 800102a:	f006 fb71 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 800102e:	4842      	ldr	r0, [pc, #264]	; (8001138 <setProg_hidro+0x264>)
 8001030:	f7ff ff32 	bl	8000e98 <setTexto_pantalla>
				statusTiempoHidro = 2;
 8001034:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <setProg_hidro+0x254>)
 8001036:	2202      	movs	r2, #2
 8001038:	701a      	strb	r2, [r3, #0]
				break;
 800103a:	e06f      	b.n	800111c <setProg_hidro+0x248>
			}

		break;
		case 2: //lote en 10 o más...
			if (getStatBoton(IN_AST) == FALL) {
 800103c:	200c      	movs	r0, #12
 800103e:	f7ff fa47 	bl	80004d0 <getStatBoton>
 8001042:	4603      	mov	r3, r0
 8001044:	2b02      	cmp	r3, #2
 8001046:	d11e      	bne.n	8001086 <setProg_hidro+0x1b2>
				tiempoHidroAux /= 10;
 8001048:	4b39      	ldr	r3, [pc, #228]	; (8001130 <setProg_hidro+0x25c>)
 800104a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104e:	4a3b      	ldr	r2, [pc, #236]	; (800113c <setProg_hidro+0x268>)
 8001050:	fb82 1203 	smull	r1, r2, r2, r3
 8001054:	1092      	asrs	r2, r2, #2
 8001056:	17db      	asrs	r3, r3, #31
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <setProg_hidro+0x25c>)
 800105e:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8001060:	4b33      	ldr	r3, [pc, #204]	; (8001130 <setProg_hidro+0x25c>)
 8001062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001066:	461a      	mov	r2, r3
 8001068:	4932      	ldr	r1, [pc, #200]	; (8001134 <setProg_hidro+0x260>)
 800106a:	4833      	ldr	r0, [pc, #204]	; (8001138 <setProg_hidro+0x264>)
 800106c:	f006 fb50 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8001070:	4831      	ldr	r0, [pc, #196]	; (8001138 <setProg_hidro+0x264>)
 8001072:	f7ff ff11 	bl	8000e98 <setTexto_pantalla>
				if (statusTiempoHidro < 10) {
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <setProg_hidro+0x254>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b09      	cmp	r3, #9
 800107c:	d84b      	bhi.n	8001116 <setProg_hidro+0x242>
					statusTiempoHidro = 1;
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <setProg_hidro+0x254>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001084:	e047      	b.n	8001116 <setProg_hidro+0x242>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001086:	200e      	movs	r0, #14
 8001088:	f7ff fa22 	bl	80004d0 <getStatBoton>
 800108c:	4603      	mov	r3, r0
 800108e:	2b02      	cmp	r3, #2
 8001090:	d103      	bne.n	800109a <setProg_hidro+0x1c6>
				statusTiempoHidro = 3;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <setProg_hidro+0x254>)
 8001094:	2203      	movs	r2, #3
 8001096:	701a      	strb	r2, [r3, #0]
				break;
 8001098:	e040      	b.n	800111c <setProg_hidro+0x248>
			}

			if (tiempoHidroAux < 120) {
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <setProg_hidro+0x25c>)
 800109c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a0:	2b77      	cmp	r3, #119	; 0x77
 80010a2:	dc3a      	bgt.n	800111a <setProg_hidro+0x246>
				if (newNumber != -1) {
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ac:	d035      	beq.n	800111a <setProg_hidro+0x246>
					tiempoHidroAux *= 10;
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <setProg_hidro+0x25c>)
 80010b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	b29b      	uxth	r3, r3
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <setProg_hidro+0x25c>)
 80010c4:	801a      	strh	r2, [r3, #0]
					tiempoHidroAux += newNumber;
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <setProg_hidro+0x25c>)
 80010ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <setProg_hidro+0x25c>)
 80010dc:	801a      	strh	r2, [r3, #0]
					sprintf(texto, "%d min.", tiempoHidroAux);
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <setProg_hidro+0x25c>)
 80010e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4913      	ldr	r1, [pc, #76]	; (8001134 <setProg_hidro+0x260>)
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <setProg_hidro+0x264>)
 80010ea:	f006 fb11 	bl	8007710 <siprintf>
					setTexto_pantalla(texto);
 80010ee:	4812      	ldr	r0, [pc, #72]	; (8001138 <setProg_hidro+0x264>)
 80010f0:	f7ff fed2 	bl	8000e98 <setTexto_pantalla>
					break;
 80010f4:	e012      	b.n	800111c <setProg_hidro+0x248>
			}

		break;
		case 3: //retorna y graba el valor

			tiempoHidro = tiempoHidroAux;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <setProg_hidro+0x25c>)
 80010f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <setProg_hidro+0x258>)
 80010fe:	801a      	strh	r2, [r3, #0]
			statusTiempoHidro = 99;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <setProg_hidro+0x254>)
 8001102:	2263      	movs	r2, #99	; 0x63
 8001104:	701a      	strb	r2, [r3, #0]

			return PROG_FINISHED;
 8001106:	2303      	movs	r3, #3
 8001108:	e009      	b.n	800111e <setProg_hidro+0x24a>
		break;

		default:
			return PROG_ERROR;
 800110a:	2300      	movs	r3, #0
 800110c:	e007      	b.n	800111e <setProg_hidro+0x24a>
		break;
 800110e:	bf00      	nop
 8001110:	e004      	b.n	800111c <setProg_hidro+0x248>
		break;
 8001112:	bf00      	nop
 8001114:	e002      	b.n	800111c <setProg_hidro+0x248>
				break;
 8001116:	bf00      	nop
 8001118:	e000      	b.n	800111c <setProg_hidro+0x248>
		break;
 800111a:	bf00      	nop
		break;
	} //end switch statusTiempoHidro.

	return PROG_BUSY;
 800111c:	2302      	movs	r3, #2

} //end setProg_hidro()
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000003 	.word	0x20000003
 800112c:	20000120 	.word	0x20000120
 8001130:	2000011e 	.word	0x2000011e
 8001134:	080081a4 	.word	0x080081a4
 8001138:	200005f4 	.word	0x200005f4
 800113c:	66666667 	.word	0x66666667

08001140 <setProg_llenado>:


T_PROG_OUTPUT setProg_llenado (T_PROG_CMD cmd){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]

	int8_t newNumber = getNumber();
 800114a:	f7ff f9f7 	bl	800053c <getNumber>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]

	switch (statusTiempoLlenado) {
 8001152:	4bad      	ldr	r3, [pc, #692]	; (8001408 <setProg_llenado+0x2c8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b02      	cmp	r3, #2
 8001158:	f000 80b3 	beq.w	80012c2 <setProg_llenado+0x182>
 800115c:	2b02      	cmp	r3, #2
 800115e:	dc04      	bgt.n	800116a <setProg_llenado+0x2a>
 8001160:	2b00      	cmp	r3, #0
 8001162:	d03b      	beq.n	80011dc <setProg_llenado+0x9c>
 8001164:	2b01      	cmp	r3, #1
 8001166:	d05d      	beq.n	8001224 <setProg_llenado+0xe4>
 8001168:	e167      	b.n	800143a <setProg_llenado+0x2fa>
 800116a:	2b03      	cmp	r3, #3
 800116c:	f000 8140 	beq.w	80013f0 <setProg_llenado+0x2b0>
 8001170:	2b63      	cmp	r3, #99	; 0x63
 8001172:	f040 8162 	bne.w	800143a <setProg_llenado+0x2fa>
		case 99: //imprime al entrar al sub-menu
			switch (cmd) {
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b04      	cmp	r3, #4
 800117a:	d002      	beq.n	8001182 <setProg_llenado+0x42>
 800117c:	2b05      	cmp	r3, #5
 800117e:	d006      	beq.n	800118e <setProg_llenado+0x4e>
					tiempoLlenadoAux = tiempoLlenado_ON;
				break;
				case PROG_SET2:
					tiempoLlenadoAux = tiempoLlenado_OFF;
				default:
				break;
 8001180:	e00a      	b.n	8001198 <setProg_llenado+0x58>
					tiempoLlenadoAux = tiempoLlenado_ON;
 8001182:	4ba2      	ldr	r3, [pc, #648]	; (800140c <setProg_llenado+0x2cc>)
 8001184:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001188:	4ba1      	ldr	r3, [pc, #644]	; (8001410 <setProg_llenado+0x2d0>)
 800118a:	801a      	strh	r2, [r3, #0]
				break;
 800118c:	e005      	b.n	800119a <setProg_llenado+0x5a>
					tiempoLlenadoAux = tiempoLlenado_OFF;
 800118e:	4ba1      	ldr	r3, [pc, #644]	; (8001414 <setProg_llenado+0x2d4>)
 8001190:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001194:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <setProg_llenado+0x2d0>)
 8001196:	801a      	strh	r2, [r3, #0]
				break;
 8001198:	bf00      	nop
			} //end switch cmd
			sprintf(texto, "%d min.", tiempoLlenadoAux);
 800119a:	4b9d      	ldr	r3, [pc, #628]	; (8001410 <setProg_llenado+0x2d0>)
 800119c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a0:	461a      	mov	r2, r3
 80011a2:	499d      	ldr	r1, [pc, #628]	; (8001418 <setProg_llenado+0x2d8>)
 80011a4:	489d      	ldr	r0, [pc, #628]	; (800141c <setProg_llenado+0x2dc>)
 80011a6:	f006 fab3 	bl	8007710 <siprintf>
			setTexto_pantalla(texto);
 80011aa:	489c      	ldr	r0, [pc, #624]	; (800141c <setProg_llenado+0x2dc>)
 80011ac:	f7ff fe74 	bl	8000e98 <setTexto_pantalla>
			if (!tiempoLlenadoAux){
 80011b0:	4b97      	ldr	r3, [pc, #604]	; (8001410 <setProg_llenado+0x2d0>)
 80011b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <setProg_llenado+0x82>
				statusTiempoLlenado = 0;
 80011ba:	4b93      	ldr	r3, [pc, #588]	; (8001408 <setProg_llenado+0x2c8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
				break;
 80011c0:	e142      	b.n	8001448 <setProg_llenado+0x308>
			}else if (tiempoLlenadoAux < 10){
 80011c2:	4b93      	ldr	r3, [pc, #588]	; (8001410 <setProg_llenado+0x2d0>)
 80011c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c8:	2b09      	cmp	r3, #9
 80011ca:	dc03      	bgt.n	80011d4 <setProg_llenado+0x94>
				statusTiempoLlenado = 1;
 80011cc:	4b8e      	ldr	r3, [pc, #568]	; (8001408 <setProg_llenado+0x2c8>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
				break;
 80011d2:	e139      	b.n	8001448 <setProg_llenado+0x308>
			}else{
				statusTiempoLlenado = 2;
 80011d4:	4b8c      	ldr	r3, [pc, #560]	; (8001408 <setProg_llenado+0x2c8>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
				break;
 80011da:	e135      	b.n	8001448 <setProg_llenado+0x308>
			}
		break;
		case 0: //tiempo en 0.
			if (getStatBoton(IN_AST) == FALL) {
 80011dc:	200c      	movs	r0, #12
 80011de:	f7ff f977 	bl	80004d0 <getStatBoton>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d104      	bne.n	80011f2 <setProg_llenado+0xb2>
				statusTiempoLlenado = 99;
 80011e8:	4b87      	ldr	r3, [pc, #540]	; (8001408 <setProg_llenado+0x2c8>)
 80011ea:	2263      	movs	r2, #99	; 0x63
 80011ec:	701a      	strb	r2, [r3, #0]
				return PROG_IDLE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e12b      	b.n	800144a <setProg_llenado+0x30a>
			}

			if (newNumber > 0) {
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f340 8121 	ble.w	800143e <setProg_llenado+0x2fe>
				tiempoLlenadoAux = newNumber;
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b83      	ldr	r3, [pc, #524]	; (8001410 <setProg_llenado+0x2d0>)
 8001204:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoLlenadoAux);
 8001206:	4b82      	ldr	r3, [pc, #520]	; (8001410 <setProg_llenado+0x2d0>)
 8001208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120c:	461a      	mov	r2, r3
 800120e:	4982      	ldr	r1, [pc, #520]	; (8001418 <setProg_llenado+0x2d8>)
 8001210:	4882      	ldr	r0, [pc, #520]	; (800141c <setProg_llenado+0x2dc>)
 8001212:	f006 fa7d 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8001216:	4881      	ldr	r0, [pc, #516]	; (800141c <setProg_llenado+0x2dc>)
 8001218:	f7ff fe3e 	bl	8000e98 <setTexto_pantalla>
				statusTiempoLlenado = 1;
 800121c:	4b7a      	ldr	r3, [pc, #488]	; (8001408 <setProg_llenado+0x2c8>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001222:	e10c      	b.n	800143e <setProg_llenado+0x2fe>
		case 1: //lote entre 1 y 9.
			if (getStatBoton(IN_AST) == FALL) {
 8001224:	200c      	movs	r0, #12
 8001226:	f7ff f953 	bl	80004d0 <getStatBoton>
 800122a:	4603      	mov	r3, r0
 800122c:	2b02      	cmp	r3, #2
 800122e:	d111      	bne.n	8001254 <setProg_llenado+0x114>
				tiempoLlenadoAux = 0;
 8001230:	4b77      	ldr	r3, [pc, #476]	; (8001410 <setProg_llenado+0x2d0>)
 8001232:	2200      	movs	r2, #0
 8001234:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoLlenadoAux);
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <setProg_llenado+0x2d0>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	461a      	mov	r2, r3
 800123e:	4976      	ldr	r1, [pc, #472]	; (8001418 <setProg_llenado+0x2d8>)
 8001240:	4876      	ldr	r0, [pc, #472]	; (800141c <setProg_llenado+0x2dc>)
 8001242:	f006 fa65 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8001246:	4875      	ldr	r0, [pc, #468]	; (800141c <setProg_llenado+0x2dc>)
 8001248:	f7ff fe26 	bl	8000e98 <setTexto_pantalla>
				statusTiempoLlenado = 0;
 800124c:	4b6e      	ldr	r3, [pc, #440]	; (8001408 <setProg_llenado+0x2c8>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
				break;
 8001252:	e0f9      	b.n	8001448 <setProg_llenado+0x308>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001254:	200e      	movs	r0, #14
 8001256:	f7ff f93b 	bl	80004d0 <getStatBoton>
 800125a:	4603      	mov	r3, r0
 800125c:	2b02      	cmp	r3, #2
 800125e:	d103      	bne.n	8001268 <setProg_llenado+0x128>
				statusTiempoLlenado = 3;
 8001260:	4b69      	ldr	r3, [pc, #420]	; (8001408 <setProg_llenado+0x2c8>)
 8001262:	2203      	movs	r2, #3
 8001264:	701a      	strb	r2, [r3, #0]
				break;
 8001266:	e0ef      	b.n	8001448 <setProg_llenado+0x308>
			}

			if (newNumber != -1) {
 8001268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001270:	f000 80e7 	beq.w	8001442 <setProg_llenado+0x302>
				tiempoLlenadoAux *= 10;
 8001274:	4b66      	ldr	r3, [pc, #408]	; (8001410 <setProg_llenado+0x2d0>)
 8001276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127a:	b29b      	uxth	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4413      	add	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	b29b      	uxth	r3, r3
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b61      	ldr	r3, [pc, #388]	; (8001410 <setProg_llenado+0x2d0>)
 800128a:	801a      	strh	r2, [r3, #0]
				tiempoLlenadoAux += newNumber;
 800128c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b5f      	ldr	r3, [pc, #380]	; (8001410 <setProg_llenado+0x2d0>)
 8001294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4413      	add	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	b21a      	sxth	r2, r3
 80012a0:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <setProg_llenado+0x2d0>)
 80012a2:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoLlenadoAux);
 80012a4:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <setProg_llenado+0x2d0>)
 80012a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012aa:	461a      	mov	r2, r3
 80012ac:	495a      	ldr	r1, [pc, #360]	; (8001418 <setProg_llenado+0x2d8>)
 80012ae:	485b      	ldr	r0, [pc, #364]	; (800141c <setProg_llenado+0x2dc>)
 80012b0:	f006 fa2e 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 80012b4:	4859      	ldr	r0, [pc, #356]	; (800141c <setProg_llenado+0x2dc>)
 80012b6:	f7ff fdef 	bl	8000e98 <setTexto_pantalla>
				statusTiempoLlenado = 2;
 80012ba:	4b53      	ldr	r3, [pc, #332]	; (8001408 <setProg_llenado+0x2c8>)
 80012bc:	2202      	movs	r2, #2
 80012be:	701a      	strb	r2, [r3, #0]
				break;
 80012c0:	e0c2      	b.n	8001448 <setProg_llenado+0x308>
			}

		break;
		case 2: //lote en 10 o más...
			if (getStatBoton(IN_AST) == FALL) {
 80012c2:	200c      	movs	r0, #12
 80012c4:	f7ff f904 	bl	80004d0 <getStatBoton>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d120      	bne.n	8001310 <setProg_llenado+0x1d0>
				tiempoLlenadoAux /= 10;
 80012ce:	4b50      	ldr	r3, [pc, #320]	; (8001410 <setProg_llenado+0x2d0>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4a52      	ldr	r2, [pc, #328]	; (8001420 <setProg_llenado+0x2e0>)
 80012d6:	fb82 1203 	smull	r1, r2, r2, r3
 80012da:	1092      	asrs	r2, r2, #2
 80012dc:	17db      	asrs	r3, r3, #31
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b4b      	ldr	r3, [pc, #300]	; (8001410 <setProg_llenado+0x2d0>)
 80012e4:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoLlenadoAux);
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <setProg_llenado+0x2d0>)
 80012e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ec:	461a      	mov	r2, r3
 80012ee:	494a      	ldr	r1, [pc, #296]	; (8001418 <setProg_llenado+0x2d8>)
 80012f0:	484a      	ldr	r0, [pc, #296]	; (800141c <setProg_llenado+0x2dc>)
 80012f2:	f006 fa0d 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 80012f6:	4849      	ldr	r0, [pc, #292]	; (800141c <setProg_llenado+0x2dc>)
 80012f8:	f7ff fdce 	bl	8000e98 <setTexto_pantalla>
				if (tiempoLlenadoAux < 10) {
 80012fc:	4b44      	ldr	r3, [pc, #272]	; (8001410 <setProg_llenado+0x2d0>)
 80012fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001302:	2b09      	cmp	r3, #9
 8001304:	f300 809f 	bgt.w	8001446 <setProg_llenado+0x306>
					statusTiempoLlenado = 1;
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <setProg_llenado+0x2c8>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800130e:	e09a      	b.n	8001446 <setProg_llenado+0x306>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001310:	200e      	movs	r0, #14
 8001312:	f7ff f8dd 	bl	80004d0 <getStatBoton>
 8001316:	4603      	mov	r3, r0
 8001318:	2b02      	cmp	r3, #2
 800131a:	d103      	bne.n	8001324 <setProg_llenado+0x1e4>
				statusTiempoLlenado = 3;
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <setProg_llenado+0x2c8>)
 800131e:	2203      	movs	r2, #3
 8001320:	701a      	strb	r2, [r3, #0]
				break;
 8001322:	e091      	b.n	8001448 <setProg_llenado+0x308>
			}

			switch (cmd) {
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b04      	cmp	r3, #4
 8001328:	d002      	beq.n	8001330 <setProg_llenado+0x1f0>
 800132a:	2b05      	cmp	r3, #5
 800132c:	d02e      	beq.n	800138c <setProg_llenado+0x24c>
							break;
						} //end if newNumber...
					} //end iftiempoLlenadoAux...
				break;
				default:
				break;
 800132e:	e05e      	b.n	80013ee <setProg_llenado+0x2ae>
					if (tiempoLlenadoAux < 30) {
 8001330:	4b37      	ldr	r3, [pc, #220]	; (8001410 <setProg_llenado+0x2d0>)
 8001332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001336:	2b1d      	cmp	r3, #29
 8001338:	dc56      	bgt.n	80013e8 <setProg_llenado+0x2a8>
						if (newNumber != -1) {
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001342:	d051      	beq.n	80013e8 <setProg_llenado+0x2a8>
							tiempoLlenadoAux *= 10;
 8001344:	4b32      	ldr	r3, [pc, #200]	; (8001410 <setProg_llenado+0x2d0>)
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	b29b      	uxth	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4413      	add	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	b29b      	uxth	r3, r3
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <setProg_llenado+0x2d0>)
 800135a:	801a      	strh	r2, [r3, #0]
							tiempoLlenadoAux += newNumber;
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <setProg_llenado+0x2d0>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4413      	add	r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <setProg_llenado+0x2d0>)
 8001372:	801a      	strh	r2, [r3, #0]
							sprintf(texto, "%d min.", tiempoLlenadoAux);
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <setProg_llenado+0x2d0>)
 8001376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137a:	461a      	mov	r2, r3
 800137c:	4926      	ldr	r1, [pc, #152]	; (8001418 <setProg_llenado+0x2d8>)
 800137e:	4827      	ldr	r0, [pc, #156]	; (800141c <setProg_llenado+0x2dc>)
 8001380:	f006 f9c6 	bl	8007710 <siprintf>
							setTexto_pantalla(texto);
 8001384:	4825      	ldr	r0, [pc, #148]	; (800141c <setProg_llenado+0x2dc>)
 8001386:	f7ff fd87 	bl	8000e98 <setTexto_pantalla>
							break;
 800138a:	e030      	b.n	80013ee <setProg_llenado+0x2ae>
					if (tiempoLlenadoAux < 15) {
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <setProg_llenado+0x2d0>)
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	2b0e      	cmp	r3, #14
 8001394:	dc2a      	bgt.n	80013ec <setProg_llenado+0x2ac>
						if (newNumber != -1) {
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800139e:	d025      	beq.n	80013ec <setProg_llenado+0x2ac>
							tiempoLlenadoAux *= 10;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <setProg_llenado+0x2d0>)
 80013a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <setProg_llenado+0x2d0>)
 80013b6:	801a      	strh	r2, [r3, #0]
							tiempoLlenadoAux += newNumber;
 80013b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <setProg_llenado+0x2d0>)
 80013c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <setProg_llenado+0x2d0>)
 80013ce:	801a      	strh	r2, [r3, #0]
							sprintf(texto, "%d min.", tiempoLlenadoAux);
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <setProg_llenado+0x2d0>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	461a      	mov	r2, r3
 80013d8:	490f      	ldr	r1, [pc, #60]	; (8001418 <setProg_llenado+0x2d8>)
 80013da:	4810      	ldr	r0, [pc, #64]	; (800141c <setProg_llenado+0x2dc>)
 80013dc:	f006 f998 	bl	8007710 <siprintf>
							setTexto_pantalla(texto);
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <setProg_llenado+0x2dc>)
 80013e2:	f7ff fd59 	bl	8000e98 <setTexto_pantalla>
							break;
 80013e6:	e002      	b.n	80013ee <setProg_llenado+0x2ae>
				break;
 80013e8:	bf00      	nop
 80013ea:	e02d      	b.n	8001448 <setProg_llenado+0x308>
				break;
 80013ec:	bf00      	nop
			} //end switch cmd

		break;
 80013ee:	e02b      	b.n	8001448 <setProg_llenado+0x308>
		case 3: //retorna y graba el valor

			switch (cmd) {
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d002      	beq.n	80013fc <setProg_llenado+0x2bc>
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d014      	beq.n	8001424 <setProg_llenado+0x2e4>
					tiempoLlenado_ON = tiempoLlenadoAux;
				break;
				case PROG_SET2:
					tiempoLlenado_OFF = tiempoLlenadoAux;
				default:
				break;
 80013fa:	e018      	b.n	800142e <setProg_llenado+0x2ee>
					tiempoLlenado_ON = tiempoLlenadoAux;
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <setProg_llenado+0x2d0>)
 80013fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001402:	4b02      	ldr	r3, [pc, #8]	; (800140c <setProg_llenado+0x2cc>)
 8001404:	801a      	strh	r2, [r3, #0]
				break;
 8001406:	e013      	b.n	8001430 <setProg_llenado+0x2f0>
 8001408:	20000005 	.word	0x20000005
 800140c:	20000124 	.word	0x20000124
 8001410:	20000122 	.word	0x20000122
 8001414:	20000126 	.word	0x20000126
 8001418:	080081a4 	.word	0x080081a4
 800141c:	200005f4 	.word	0x200005f4
 8001420:	66666667 	.word	0x66666667
					tiempoLlenado_OFF = tiempoLlenadoAux;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <setProg_llenado+0x314>)
 8001426:	f9b3 2000 	ldrsh.w	r2, [r3]
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <setProg_llenado+0x318>)
 800142c:	801a      	strh	r2, [r3, #0]
				break;
 800142e:	bf00      	nop
			} //end switch cmd

			statusTiempoLlenado = 99;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <setProg_llenado+0x31c>)
 8001432:	2263      	movs	r2, #99	; 0x63
 8001434:	701a      	strb	r2, [r3, #0]
			return PROG_FINISHED;
 8001436:	2303      	movs	r3, #3
 8001438:	e007      	b.n	800144a <setProg_llenado+0x30a>

		break;
		default:
			return PROG_ERROR;
 800143a:	2300      	movs	r3, #0
 800143c:	e005      	b.n	800144a <setProg_llenado+0x30a>
		break;
 800143e:	bf00      	nop
 8001440:	e002      	b.n	8001448 <setProg_llenado+0x308>
		break;
 8001442:	bf00      	nop
 8001444:	e000      	b.n	8001448 <setProg_llenado+0x308>
				break;
 8001446:	bf00      	nop
		break;
	} //end switch statusTiempoLlenado.

	return PROG_BUSY;
 8001448:	2302      	movs	r3, #2

} //end setProg_llenado()
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000122 	.word	0x20000122
 8001458:	20000126 	.word	0x20000126
 800145c:	20000005 	.word	0x20000005

08001460 <setProg_skimmer>:


T_PROG_OUTPUT setProg_skimmer (T_PROG_CMD cmd){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]

	int8_t newNumber = getNumber();
 800146a:	f7ff f867 	bl	800053c <getNumber>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]

	switch (statusTiempoSkimmer) {
 8001472:	4bd2      	ldr	r3, [pc, #840]	; (80017bc <setProg_skimmer+0x35c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b63      	cmp	r3, #99	; 0x63
 8001478:	f200 85c8 	bhi.w	800200c <setProg_skimmer+0xbac>
 800147c:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <setProg_skimmer+0x24>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	080018e5 	.word	0x080018e5
 8001488:	0800192d 	.word	0x0800192d
 800148c:	080019cb 	.word	0x080019cb
 8001490:	08001b21 	.word	0x08001b21
 8001494:	0800200d 	.word	0x0800200d
 8001498:	0800200d 	.word	0x0800200d
 800149c:	0800200d 	.word	0x0800200d
 80014a0:	0800200d 	.word	0x0800200d
 80014a4:	0800200d 	.word	0x0800200d
 80014a8:	0800200d 	.word	0x0800200d
 80014ac:	08001b4f 	.word	0x08001b4f
 80014b0:	08001bdd 	.word	0x08001bdd
 80014b4:	08001ce3 	.word	0x08001ce3
 80014b8:	08001e1f 	.word	0x08001e1f
 80014bc:	08001f25 	.word	0x08001f25
 80014c0:	0800200d 	.word	0x0800200d
 80014c4:	0800200d 	.word	0x0800200d
 80014c8:	0800200d 	.word	0x0800200d
 80014cc:	0800200d 	.word	0x0800200d
 80014d0:	0800200d 	.word	0x0800200d
 80014d4:	0800200d 	.word	0x0800200d
 80014d8:	0800200d 	.word	0x0800200d
 80014dc:	0800200d 	.word	0x0800200d
 80014e0:	0800200d 	.word	0x0800200d
 80014e4:	0800200d 	.word	0x0800200d
 80014e8:	0800200d 	.word	0x0800200d
 80014ec:	0800200d 	.word	0x0800200d
 80014f0:	0800200d 	.word	0x0800200d
 80014f4:	0800200d 	.word	0x0800200d
 80014f8:	0800200d 	.word	0x0800200d
 80014fc:	0800200d 	.word	0x0800200d
 8001500:	0800200d 	.word	0x0800200d
 8001504:	0800200d 	.word	0x0800200d
 8001508:	08001fb3 	.word	0x08001fb3
 800150c:	0800200d 	.word	0x0800200d
 8001510:	0800200d 	.word	0x0800200d
 8001514:	0800200d 	.word	0x0800200d
 8001518:	0800200d 	.word	0x0800200d
 800151c:	0800200d 	.word	0x0800200d
 8001520:	0800200d 	.word	0x0800200d
 8001524:	0800200d 	.word	0x0800200d
 8001528:	0800200d 	.word	0x0800200d
 800152c:	0800200d 	.word	0x0800200d
 8001530:	0800200d 	.word	0x0800200d
 8001534:	0800200d 	.word	0x0800200d
 8001538:	0800200d 	.word	0x0800200d
 800153c:	0800200d 	.word	0x0800200d
 8001540:	0800200d 	.word	0x0800200d
 8001544:	0800200d 	.word	0x0800200d
 8001548:	0800200d 	.word	0x0800200d
 800154c:	0800200d 	.word	0x0800200d
 8001550:	0800200d 	.word	0x0800200d
 8001554:	0800200d 	.word	0x0800200d
 8001558:	0800200d 	.word	0x0800200d
 800155c:	0800200d 	.word	0x0800200d
 8001560:	0800200d 	.word	0x0800200d
 8001564:	0800200d 	.word	0x0800200d
 8001568:	0800200d 	.word	0x0800200d
 800156c:	0800200d 	.word	0x0800200d
 8001570:	0800200d 	.word	0x0800200d
 8001574:	0800200d 	.word	0x0800200d
 8001578:	0800200d 	.word	0x0800200d
 800157c:	0800200d 	.word	0x0800200d
 8001580:	0800200d 	.word	0x0800200d
 8001584:	0800200d 	.word	0x0800200d
 8001588:	0800200d 	.word	0x0800200d
 800158c:	0800200d 	.word	0x0800200d
 8001590:	0800200d 	.word	0x0800200d
 8001594:	0800200d 	.word	0x0800200d
 8001598:	0800200d 	.word	0x0800200d
 800159c:	0800200d 	.word	0x0800200d
 80015a0:	0800200d 	.word	0x0800200d
 80015a4:	0800200d 	.word	0x0800200d
 80015a8:	0800200d 	.word	0x0800200d
 80015ac:	0800200d 	.word	0x0800200d
 80015b0:	0800200d 	.word	0x0800200d
 80015b4:	0800200d 	.word	0x0800200d
 80015b8:	0800200d 	.word	0x0800200d
 80015bc:	0800200d 	.word	0x0800200d
 80015c0:	0800200d 	.word	0x0800200d
 80015c4:	0800200d 	.word	0x0800200d
 80015c8:	0800200d 	.word	0x0800200d
 80015cc:	0800200d 	.word	0x0800200d
 80015d0:	0800200d 	.word	0x0800200d
 80015d4:	0800200d 	.word	0x0800200d
 80015d8:	0800200d 	.word	0x0800200d
 80015dc:	0800200d 	.word	0x0800200d
 80015e0:	0800200d 	.word	0x0800200d
 80015e4:	0800200d 	.word	0x0800200d
 80015e8:	0800200d 	.word	0x0800200d
 80015ec:	0800200d 	.word	0x0800200d
 80015f0:	0800200d 	.word	0x0800200d
 80015f4:	0800200d 	.word	0x0800200d
 80015f8:	0800200d 	.word	0x0800200d
 80015fc:	0800200d 	.word	0x0800200d
 8001600:	0800200d 	.word	0x0800200d
 8001604:	0800200d 	.word	0x0800200d
 8001608:	0800200d 	.word	0x0800200d
 800160c:	0800200d 	.word	0x0800200d
 8001610:	08001615 	.word	0x08001615
		case 99: //imprime al entrar al sub-menu
			switch (cmd) {
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	3b04      	subs	r3, #4
 8001618:	2b05      	cmp	r3, #5
 800161a:	f200 8161 	bhi.w	80018e0 <setProg_skimmer+0x480>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <setProg_skimmer+0x1c4>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	0800163d 	.word	0x0800163d
 8001628:	08001689 	.word	0x08001689
 800162c:	080016d5 	.word	0x080016d5
 8001630:	0800174d 	.word	0x0800174d
 8001634:	080017f1 	.word	0x080017f1
 8001638:	08001869 	.word	0x08001869
				case PROG_SET1:
					tiempoSkimmerAux = tiempoSkimmer_ON;
 800163c:	4b60      	ldr	r3, [pc, #384]	; (80017c0 <setProg_skimmer+0x360>)
 800163e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001642:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <setProg_skimmer+0x364>)
 8001644:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "%d min.  ", tiempoSkimmerAux);
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <setProg_skimmer+0x364>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	461a      	mov	r2, r3
 800164e:	495e      	ldr	r1, [pc, #376]	; (80017c8 <setProg_skimmer+0x368>)
 8001650:	485e      	ldr	r0, [pc, #376]	; (80017cc <setProg_skimmer+0x36c>)
 8001652:	f006 f85d 	bl	8007710 <siprintf>
					setTexto_pantalla(texto);
 8001656:	485d      	ldr	r0, [pc, #372]	; (80017cc <setProg_skimmer+0x36c>)
 8001658:	f7ff fc1e 	bl	8000e98 <setTexto_pantalla>
					if (!tiempoSkimmerAux){
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <setProg_skimmer+0x364>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d103      	bne.n	800166e <setProg_skimmer+0x20e>
						statusTiempoSkimmer = 0;
 8001666:	4b55      	ldr	r3, [pc, #340]	; (80017bc <setProg_skimmer+0x35c>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
						break;
 800166c:	e139      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (tiempoSkimmerAux < 10){
 800166e:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <setProg_skimmer+0x364>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	2b09      	cmp	r3, #9
 8001676:	dc03      	bgt.n	8001680 <setProg_skimmer+0x220>
						statusTiempoSkimmer = 1;
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <setProg_skimmer+0x35c>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
						break;
 800167e:	e130      	b.n	80018e2 <setProg_skimmer+0x482>
					}else{
						statusTiempoSkimmer = 2;
 8001680:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <setProg_skimmer+0x35c>)
 8001682:	2202      	movs	r2, #2
 8001684:	701a      	strb	r2, [r3, #0]
						break;
 8001686:	e12c      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				break;
				case PROG_SET2:
					tiempoSkimmerAux = tiempoSkimmer_OFF;
 8001688:	4b51      	ldr	r3, [pc, #324]	; (80017d0 <setProg_skimmer+0x370>)
 800168a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800168e:	4b4d      	ldr	r3, [pc, #308]	; (80017c4 <setProg_skimmer+0x364>)
 8001690:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "%d min.  ", tiempoSkimmerAux);
 8001692:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <setProg_skimmer+0x364>)
 8001694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001698:	461a      	mov	r2, r3
 800169a:	494b      	ldr	r1, [pc, #300]	; (80017c8 <setProg_skimmer+0x368>)
 800169c:	484b      	ldr	r0, [pc, #300]	; (80017cc <setProg_skimmer+0x36c>)
 800169e:	f006 f837 	bl	8007710 <siprintf>
					setTexto_pantalla(texto);
 80016a2:	484a      	ldr	r0, [pc, #296]	; (80017cc <setProg_skimmer+0x36c>)
 80016a4:	f7ff fbf8 	bl	8000e98 <setTexto_pantalla>
					if (!tiempoSkimmerAux){
 80016a8:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <setProg_skimmer+0x364>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <setProg_skimmer+0x25a>
						statusTiempoSkimmer = 0;
 80016b2:	4b42      	ldr	r3, [pc, #264]	; (80017bc <setProg_skimmer+0x35c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
						break;
 80016b8:	e113      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (tiempoSkimmerAux < 10){
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <setProg_skimmer+0x364>)
 80016bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c0:	2b09      	cmp	r3, #9
 80016c2:	dc03      	bgt.n	80016cc <setProg_skimmer+0x26c>
						statusTiempoSkimmer = 1;
 80016c4:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <setProg_skimmer+0x35c>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
						break;
 80016ca:	e10a      	b.n	80018e2 <setProg_skimmer+0x482>
					}else{
						statusTiempoSkimmer = 2;
 80016cc:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <setProg_skimmer+0x35c>)
 80016ce:	2202      	movs	r2, #2
 80016d0:	701a      	strb	r2, [r3, #0]
						break;
 80016d2:	e106      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				break;
				case PROG_SET3:
					progSkimmerAux = prog1_Skimmer_ON;
 80016d4:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <setProg_skimmer+0x374>)
 80016d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016da:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <setProg_skimmer+0x378>)
 80016dc:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 80016de:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <setProg_skimmer+0x378>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	4a3d      	ldr	r2, [pc, #244]	; (80017dc <setProg_skimmer+0x37c>)
 80016e6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ea:	1152      	asrs	r2, r2, #5
 80016ec:	17db      	asrs	r3, r3, #31
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <setProg_skimmer+0x378>)
 80016f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fa:	4a38      	ldr	r2, [pc, #224]	; (80017dc <setProg_skimmer+0x37c>)
 80016fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001700:	1151      	asrs	r1, r2, #5
 8001702:	17da      	asrs	r2, r3, #31
 8001704:	1a8a      	subs	r2, r1, r2
 8001706:	2164      	movs	r1, #100	; 0x64
 8001708:	fb01 f202 	mul.w	r2, r1, r2
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	b21b      	sxth	r3, r3
 8001710:	4602      	mov	r2, r0
 8001712:	4933      	ldr	r1, [pc, #204]	; (80017e0 <setProg_skimmer+0x380>)
 8001714:	482d      	ldr	r0, [pc, #180]	; (80017cc <setProg_skimmer+0x36c>)
 8001716:	f005 fffb 	bl	8007710 <siprintf>
					setTexto_pantalla(texto);
 800171a:	482c      	ldr	r0, [pc, #176]	; (80017cc <setProg_skimmer+0x36c>)
 800171c:	f7ff fbbc 	bl	8000e98 <setTexto_pantalla>
					if (!progSkimmerAux){
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <setProg_skimmer+0x378>)
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d103      	bne.n	8001732 <setProg_skimmer+0x2d2>
						statusTiempoSkimmer = 10;
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <setProg_skimmer+0x35c>)
 800172c:	220a      	movs	r2, #10
 800172e:	701a      	strb	r2, [r3, #0]
						break;
 8001730:	e0d7      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (progSkimmerAux < 10){
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <setProg_skimmer+0x378>)
 8001734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001738:	2b09      	cmp	r3, #9
 800173a:	dc03      	bgt.n	8001744 <setProg_skimmer+0x2e4>
						statusTiempoSkimmer = 11;
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <setProg_skimmer+0x35c>)
 800173e:	220b      	movs	r2, #11
 8001740:	701a      	strb	r2, [r3, #0]
						break;
 8001742:	e0ce      	b.n	80018e2 <setProg_skimmer+0x482>
					}else{
						statusTiempoSkimmer = 12;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <setProg_skimmer+0x35c>)
 8001746:	220c      	movs	r2, #12
 8001748:	701a      	strb	r2, [r3, #0]
						break;
 800174a:	e0ca      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				break;
				case PROG_SET4:
					progSkimmerAux = prog1_Skimmer_OFF;
 800174c:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <setProg_skimmer+0x384>)
 800174e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <setProg_skimmer+0x378>)
 8001754:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <setProg_skimmer+0x378>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <setProg_skimmer+0x37c>)
 800175e:	fb82 1203 	smull	r1, r2, r2, r3
 8001762:	1152      	asrs	r2, r2, #5
 8001764:	17db      	asrs	r3, r3, #31
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	b21b      	sxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <setProg_skimmer+0x378>)
 800176e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001772:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <setProg_skimmer+0x37c>)
 8001774:	fb82 1203 	smull	r1, r2, r2, r3
 8001778:	1151      	asrs	r1, r2, #5
 800177a:	17da      	asrs	r2, r3, #31
 800177c:	1a8a      	subs	r2, r1, r2
 800177e:	2164      	movs	r1, #100	; 0x64
 8001780:	fb01 f202 	mul.w	r2, r1, r2
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	b21b      	sxth	r3, r3
 8001788:	4602      	mov	r2, r0
 800178a:	4915      	ldr	r1, [pc, #84]	; (80017e0 <setProg_skimmer+0x380>)
 800178c:	480f      	ldr	r0, [pc, #60]	; (80017cc <setProg_skimmer+0x36c>)
 800178e:	f005 ffbf 	bl	8007710 <siprintf>
					setTexto_pantalla(texto);
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <setProg_skimmer+0x36c>)
 8001794:	f7ff fb80 	bl	8000e98 <setTexto_pantalla>
					if (!progSkimmerAux){
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <setProg_skimmer+0x378>)
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d103      	bne.n	80017aa <setProg_skimmer+0x34a>
						statusTiempoSkimmer = 10;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <setProg_skimmer+0x35c>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	701a      	strb	r2, [r3, #0]
						break;
 80017a8:	e09b      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (progSkimmerAux < 10){
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <setProg_skimmer+0x378>)
 80017ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	dc19      	bgt.n	80017e8 <setProg_skimmer+0x388>
						statusTiempoSkimmer = 11;
 80017b4:	4b01      	ldr	r3, [pc, #4]	; (80017bc <setProg_skimmer+0x35c>)
 80017b6:	220b      	movs	r2, #11
 80017b8:	701a      	strb	r2, [r3, #0]
						break;
 80017ba:	e092      	b.n	80018e2 <setProg_skimmer+0x482>
 80017bc:	20000007 	.word	0x20000007
 80017c0:	2000012c 	.word	0x2000012c
 80017c4:	2000012a 	.word	0x2000012a
 80017c8:	080081ac 	.word	0x080081ac
 80017cc:	200005f4 	.word	0x200005f4
 80017d0:	2000012e 	.word	0x2000012e
 80017d4:	20000132 	.word	0x20000132
 80017d8:	20000130 	.word	0x20000130
 80017dc:	51eb851f 	.word	0x51eb851f
 80017e0:	080081b8 	.word	0x080081b8
 80017e4:	20000134 	.word	0x20000134
					}else{
						statusTiempoSkimmer = 12;
 80017e8:	4baa      	ldr	r3, [pc, #680]	; (8001a94 <setProg_skimmer+0x634>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	701a      	strb	r2, [r3, #0]
						break;
 80017ee:	e078      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				break;
				case PROG_SET5:
					progSkimmerAux = prog2_Skimmer_ON;
 80017f0:	4ba9      	ldr	r3, [pc, #676]	; (8001a98 <setProg_skimmer+0x638>)
 80017f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017f6:	4ba9      	ldr	r3, [pc, #676]	; (8001a9c <setProg_skimmer+0x63c>)
 80017f8:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 80017fa:	4ba8      	ldr	r3, [pc, #672]	; (8001a9c <setProg_skimmer+0x63c>)
 80017fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001800:	4aa7      	ldr	r2, [pc, #668]	; (8001aa0 <setProg_skimmer+0x640>)
 8001802:	fb82 1203 	smull	r1, r2, r2, r3
 8001806:	1152      	asrs	r2, r2, #5
 8001808:	17db      	asrs	r3, r3, #31
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	b21b      	sxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	4ba2      	ldr	r3, [pc, #648]	; (8001a9c <setProg_skimmer+0x63c>)
 8001812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001816:	4aa2      	ldr	r2, [pc, #648]	; (8001aa0 <setProg_skimmer+0x640>)
 8001818:	fb82 1203 	smull	r1, r2, r2, r3
 800181c:	1151      	asrs	r1, r2, #5
 800181e:	17da      	asrs	r2, r3, #31
 8001820:	1a8a      	subs	r2, r1, r2
 8001822:	2164      	movs	r1, #100	; 0x64
 8001824:	fb01 f202 	mul.w	r2, r1, r2
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	b21b      	sxth	r3, r3
 800182c:	4602      	mov	r2, r0
 800182e:	499d      	ldr	r1, [pc, #628]	; (8001aa4 <setProg_skimmer+0x644>)
 8001830:	489d      	ldr	r0, [pc, #628]	; (8001aa8 <setProg_skimmer+0x648>)
 8001832:	f005 ff6d 	bl	8007710 <siprintf>
					setTexto_pantalla(texto);
 8001836:	489c      	ldr	r0, [pc, #624]	; (8001aa8 <setProg_skimmer+0x648>)
 8001838:	f7ff fb2e 	bl	8000e98 <setTexto_pantalla>
					if (!progSkimmerAux){
 800183c:	4b97      	ldr	r3, [pc, #604]	; (8001a9c <setProg_skimmer+0x63c>)
 800183e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d103      	bne.n	800184e <setProg_skimmer+0x3ee>
						statusTiempoSkimmer = 10;
 8001846:	4b93      	ldr	r3, [pc, #588]	; (8001a94 <setProg_skimmer+0x634>)
 8001848:	220a      	movs	r2, #10
 800184a:	701a      	strb	r2, [r3, #0]
						break;
 800184c:	e049      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (progSkimmerAux < 10){
 800184e:	4b93      	ldr	r3, [pc, #588]	; (8001a9c <setProg_skimmer+0x63c>)
 8001850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001854:	2b09      	cmp	r3, #9
 8001856:	dc03      	bgt.n	8001860 <setProg_skimmer+0x400>
						statusTiempoSkimmer = 11;
 8001858:	4b8e      	ldr	r3, [pc, #568]	; (8001a94 <setProg_skimmer+0x634>)
 800185a:	220b      	movs	r2, #11
 800185c:	701a      	strb	r2, [r3, #0]
						break;
 800185e:	e040      	b.n	80018e2 <setProg_skimmer+0x482>
					}else{
						statusTiempoSkimmer = 12;
 8001860:	4b8c      	ldr	r3, [pc, #560]	; (8001a94 <setProg_skimmer+0x634>)
 8001862:	220c      	movs	r2, #12
 8001864:	701a      	strb	r2, [r3, #0]
						break;
 8001866:	e03c      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				break;
				case PROG_SET6:
					progSkimmerAux = prog2_Skimmer_OFF;
 8001868:	4b90      	ldr	r3, [pc, #576]	; (8001aac <setProg_skimmer+0x64c>)
 800186a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800186e:	4b8b      	ldr	r3, [pc, #556]	; (8001a9c <setProg_skimmer+0x63c>)
 8001870:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001872:	4b8a      	ldr	r3, [pc, #552]	; (8001a9c <setProg_skimmer+0x63c>)
 8001874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001878:	4a89      	ldr	r2, [pc, #548]	; (8001aa0 <setProg_skimmer+0x640>)
 800187a:	fb82 1203 	smull	r1, r2, r2, r3
 800187e:	1152      	asrs	r2, r2, #5
 8001880:	17db      	asrs	r3, r3, #31
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b21b      	sxth	r3, r3
 8001886:	4618      	mov	r0, r3
 8001888:	4b84      	ldr	r3, [pc, #528]	; (8001a9c <setProg_skimmer+0x63c>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	4a84      	ldr	r2, [pc, #528]	; (8001aa0 <setProg_skimmer+0x640>)
 8001890:	fb82 1203 	smull	r1, r2, r2, r3
 8001894:	1151      	asrs	r1, r2, #5
 8001896:	17da      	asrs	r2, r3, #31
 8001898:	1a8a      	subs	r2, r1, r2
 800189a:	2164      	movs	r1, #100	; 0x64
 800189c:	fb01 f202 	mul.w	r2, r1, r2
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	4602      	mov	r2, r0
 80018a6:	497f      	ldr	r1, [pc, #508]	; (8001aa4 <setProg_skimmer+0x644>)
 80018a8:	487f      	ldr	r0, [pc, #508]	; (8001aa8 <setProg_skimmer+0x648>)
 80018aa:	f005 ff31 	bl	8007710 <siprintf>
					setTexto_pantalla(texto);
 80018ae:	487e      	ldr	r0, [pc, #504]	; (8001aa8 <setProg_skimmer+0x648>)
 80018b0:	f7ff faf2 	bl	8000e98 <setTexto_pantalla>
					if (!progSkimmerAux){
 80018b4:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <setProg_skimmer+0x63c>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d103      	bne.n	80018c6 <setProg_skimmer+0x466>
						statusTiempoSkimmer = 10;
 80018be:	4b75      	ldr	r3, [pc, #468]	; (8001a94 <setProg_skimmer+0x634>)
 80018c0:	220a      	movs	r2, #10
 80018c2:	701a      	strb	r2, [r3, #0]
						break;
 80018c4:	e00d      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (progSkimmerAux < 10){
 80018c6:	4b75      	ldr	r3, [pc, #468]	; (8001a9c <setProg_skimmer+0x63c>)
 80018c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018cc:	2b09      	cmp	r3, #9
 80018ce:	dc03      	bgt.n	80018d8 <setProg_skimmer+0x478>
						statusTiempoSkimmer = 11;
 80018d0:	4b70      	ldr	r3, [pc, #448]	; (8001a94 <setProg_skimmer+0x634>)
 80018d2:	220b      	movs	r2, #11
 80018d4:	701a      	strb	r2, [r3, #0]
						break;
 80018d6:	e004      	b.n	80018e2 <setProg_skimmer+0x482>
					}else{
						statusTiempoSkimmer = 12;
 80018d8:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <setProg_skimmer+0x634>)
 80018da:	220c      	movs	r2, #12
 80018dc:	701a      	strb	r2, [r3, #0]
						break;
 80018de:	e000      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				default:
				break;
 80018e0:	bf00      	nop
			} //end switch cmd

		break;
 80018e2:	e3a0      	b.n	8002026 <setProg_skimmer+0xbc6>
		case 0: //tiempo en 0.
			if (getStatBoton(IN_AST) == FALL) {
 80018e4:	200c      	movs	r0, #12
 80018e6:	f7fe fdf3 	bl	80004d0 <getStatBoton>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d104      	bne.n	80018fa <setProg_skimmer+0x49a>
				statusTiempoSkimmer = 99;
 80018f0:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <setProg_skimmer+0x634>)
 80018f2:	2263      	movs	r2, #99	; 0x63
 80018f4:	701a      	strb	r2, [r3, #0]
				return PROG_IDLE;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e396      	b.n	8002028 <setProg_skimmer+0xbc8>
			}

			if (newNumber > 0) {
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f340 8386 	ble.w	8002010 <setProg_skimmer+0xbb0>
				tiempoSkimmerAux = newNumber;
 8001904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001908:	b21a      	sxth	r2, r3
 800190a:	4b69      	ldr	r3, [pc, #420]	; (8001ab0 <setProg_skimmer+0x650>)
 800190c:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.  ", tiempoSkimmerAux);
 800190e:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <setProg_skimmer+0x650>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	461a      	mov	r2, r3
 8001916:	4967      	ldr	r1, [pc, #412]	; (8001ab4 <setProg_skimmer+0x654>)
 8001918:	4863      	ldr	r0, [pc, #396]	; (8001aa8 <setProg_skimmer+0x648>)
 800191a:	f005 fef9 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 800191e:	4862      	ldr	r0, [pc, #392]	; (8001aa8 <setProg_skimmer+0x648>)
 8001920:	f7ff faba 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 1;
 8001924:	4b5b      	ldr	r3, [pc, #364]	; (8001a94 <setProg_skimmer+0x634>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
			}
		break;
 800192a:	e371      	b.n	8002010 <setProg_skimmer+0xbb0>
		case 1: //lote entre 1 y 9.
			if (getStatBoton(IN_AST) == FALL) {
 800192c:	200c      	movs	r0, #12
 800192e:	f7fe fdcf 	bl	80004d0 <getStatBoton>
 8001932:	4603      	mov	r3, r0
 8001934:	2b02      	cmp	r3, #2
 8001936:	d111      	bne.n	800195c <setProg_skimmer+0x4fc>
				tiempoSkimmerAux = 0;
 8001938:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <setProg_skimmer+0x650>)
 800193a:	2200      	movs	r2, #0
 800193c:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.  ", tiempoSkimmerAux);
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <setProg_skimmer+0x650>)
 8001940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001944:	461a      	mov	r2, r3
 8001946:	495b      	ldr	r1, [pc, #364]	; (8001ab4 <setProg_skimmer+0x654>)
 8001948:	4857      	ldr	r0, [pc, #348]	; (8001aa8 <setProg_skimmer+0x648>)
 800194a:	f005 fee1 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 800194e:	4856      	ldr	r0, [pc, #344]	; (8001aa8 <setProg_skimmer+0x648>)
 8001950:	f7ff faa2 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 0;
 8001954:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <setProg_skimmer+0x634>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
				break;
 800195a:	e364      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 800195c:	200e      	movs	r0, #14
 800195e:	f7fe fdb7 	bl	80004d0 <getStatBoton>
 8001962:	4603      	mov	r3, r0
 8001964:	2b02      	cmp	r3, #2
 8001966:	d103      	bne.n	8001970 <setProg_skimmer+0x510>
				statusTiempoSkimmer = 3;
 8001968:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <setProg_skimmer+0x634>)
 800196a:	2203      	movs	r2, #3
 800196c:	701a      	strb	r2, [r3, #0]
				break;
 800196e:	e35a      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

			if (newNumber != -1) {
 8001970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001978:	f000 834c 	beq.w	8002014 <setProg_skimmer+0xbb4>
				tiempoSkimmerAux *= 10;
 800197c:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <setProg_skimmer+0x650>)
 800197e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4413      	add	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	b29b      	uxth	r3, r3
 800198e:	b21a      	sxth	r2, r3
 8001990:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <setProg_skimmer+0x650>)
 8001992:	801a      	strh	r2, [r3, #0]
				tiempoSkimmerAux += newNumber;
 8001994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b45      	ldr	r3, [pc, #276]	; (8001ab0 <setProg_skimmer+0x650>)
 800199c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <setProg_skimmer+0x650>)
 80019aa:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.  ", tiempoSkimmerAux);
 80019ac:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <setProg_skimmer+0x650>)
 80019ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b2:	461a      	mov	r2, r3
 80019b4:	493f      	ldr	r1, [pc, #252]	; (8001ab4 <setProg_skimmer+0x654>)
 80019b6:	483c      	ldr	r0, [pc, #240]	; (8001aa8 <setProg_skimmer+0x648>)
 80019b8:	f005 feaa 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 80019bc:	483a      	ldr	r0, [pc, #232]	; (8001aa8 <setProg_skimmer+0x648>)
 80019be:	f7ff fa6b 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 2;
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <setProg_skimmer+0x634>)
 80019c4:	2202      	movs	r2, #2
 80019c6:	701a      	strb	r2, [r3, #0]
				break;
 80019c8:	e32d      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

		break;
		case 2: //lote en 10 o más...
			if (getStatBoton(IN_AST) == FALL) {
 80019ca:	200c      	movs	r0, #12
 80019cc:	f7fe fd80 	bl	80004d0 <getStatBoton>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d120      	bne.n	8001a18 <setProg_skimmer+0x5b8>
				tiempoSkimmerAux /= 10;
 80019d6:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <setProg_skimmer+0x650>)
 80019d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019dc:	4a36      	ldr	r2, [pc, #216]	; (8001ab8 <setProg_skimmer+0x658>)
 80019de:	fb82 1203 	smull	r1, r2, r2, r3
 80019e2:	1092      	asrs	r2, r2, #2
 80019e4:	17db      	asrs	r3, r3, #31
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <setProg_skimmer+0x650>)
 80019ec:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.  ", tiempoSkimmerAux);
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <setProg_skimmer+0x650>)
 80019f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f4:	461a      	mov	r2, r3
 80019f6:	492f      	ldr	r1, [pc, #188]	; (8001ab4 <setProg_skimmer+0x654>)
 80019f8:	482b      	ldr	r0, [pc, #172]	; (8001aa8 <setProg_skimmer+0x648>)
 80019fa:	f005 fe89 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 80019fe:	482a      	ldr	r0, [pc, #168]	; (8001aa8 <setProg_skimmer+0x648>)
 8001a00:	f7ff fa4a 	bl	8000e98 <setTexto_pantalla>
				if (tiempoSkimmerAux < 10) {
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	f300 8304 	bgt.w	8002018 <setProg_skimmer+0xbb8>
					statusTiempoSkimmer = 1;
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <setProg_skimmer+0x634>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001a16:	e2ff      	b.n	8002018 <setProg_skimmer+0xbb8>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001a18:	200e      	movs	r0, #14
 8001a1a:	f7fe fd59 	bl	80004d0 <getStatBoton>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d103      	bne.n	8001a2c <setProg_skimmer+0x5cc>
				statusTiempoSkimmer = 3;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <setProg_skimmer+0x634>)
 8001a26:	2203      	movs	r2, #3
 8001a28:	701a      	strb	r2, [r3, #0]
				break;
 8001a2a:	e2fc      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

			switch (cmd) {
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d002      	beq.n	8001a38 <setProg_skimmer+0x5d8>
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d042      	beq.n	8001abc <setProg_skimmer+0x65c>
							break;
						} //end if newNumber...
					} //end iftiempoSkimmerAux...
				break;
				default:
				break;
 8001a36:	e072      	b.n	8001b1e <setProg_skimmer+0x6be>
					if (tiempoSkimmerAux < 30) {
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	2b1d      	cmp	r3, #29
 8001a40:	dc6a      	bgt.n	8001b18 <setProg_skimmer+0x6b8>
						if (newNumber != -1) {
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a4a:	d065      	beq.n	8001b18 <setProg_skimmer+0x6b8>
							tiempoSkimmerAux *= 10;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a62:	801a      	strh	r2, [r3, #0]
							tiempoSkimmerAux += newNumber;
 8001a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a7a:	801a      	strh	r2, [r3, #0]
							sprintf(texto, "%d min.  ", tiempoSkimmerAux);
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a82:	461a      	mov	r2, r3
 8001a84:	490b      	ldr	r1, [pc, #44]	; (8001ab4 <setProg_skimmer+0x654>)
 8001a86:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <setProg_skimmer+0x648>)
 8001a88:	f005 fe42 	bl	8007710 <siprintf>
							setTexto_pantalla(texto);
 8001a8c:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <setProg_skimmer+0x648>)
 8001a8e:	f7ff fa03 	bl	8000e98 <setTexto_pantalla>
							break;
 8001a92:	e044      	b.n	8001b1e <setProg_skimmer+0x6be>
 8001a94:	20000007 	.word	0x20000007
 8001a98:	20000136 	.word	0x20000136
 8001a9c:	20000130 	.word	0x20000130
 8001aa0:	51eb851f 	.word	0x51eb851f
 8001aa4:	080081b8 	.word	0x080081b8
 8001aa8:	200005f4 	.word	0x200005f4
 8001aac:	20000138 	.word	0x20000138
 8001ab0:	2000012a 	.word	0x2000012a
 8001ab4:	080081ac 	.word	0x080081ac
 8001ab8:	66666667 	.word	0x66666667
					if (tiempoSkimmerAux < 15) {
 8001abc:	4bae      	ldr	r3, [pc, #696]	; (8001d78 <setProg_skimmer+0x918>)
 8001abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac2:	2b0e      	cmp	r3, #14
 8001ac4:	dc2a      	bgt.n	8001b1c <setProg_skimmer+0x6bc>
						if (newNumber != -1) {
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ace:	d025      	beq.n	8001b1c <setProg_skimmer+0x6bc>
							tiempoSkimmerAux *= 10;
 8001ad0:	4ba9      	ldr	r3, [pc, #676]	; (8001d78 <setProg_skimmer+0x918>)
 8001ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4ba4      	ldr	r3, [pc, #656]	; (8001d78 <setProg_skimmer+0x918>)
 8001ae6:	801a      	strh	r2, [r3, #0]
							tiempoSkimmerAux += newNumber;
 8001ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4ba2      	ldr	r3, [pc, #648]	; (8001d78 <setProg_skimmer+0x918>)
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	4b9e      	ldr	r3, [pc, #632]	; (8001d78 <setProg_skimmer+0x918>)
 8001afe:	801a      	strh	r2, [r3, #0]
							sprintf(texto, "%d min.  ", tiempoSkimmerAux);
 8001b00:	4b9d      	ldr	r3, [pc, #628]	; (8001d78 <setProg_skimmer+0x918>)
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	461a      	mov	r2, r3
 8001b08:	499c      	ldr	r1, [pc, #624]	; (8001d7c <setProg_skimmer+0x91c>)
 8001b0a:	489d      	ldr	r0, [pc, #628]	; (8001d80 <setProg_skimmer+0x920>)
 8001b0c:	f005 fe00 	bl	8007710 <siprintf>
							setTexto_pantalla(texto);
 8001b10:	489b      	ldr	r0, [pc, #620]	; (8001d80 <setProg_skimmer+0x920>)
 8001b12:	f7ff f9c1 	bl	8000e98 <setTexto_pantalla>
							break;
 8001b16:	e002      	b.n	8001b1e <setProg_skimmer+0x6be>
				break;
 8001b18:	bf00      	nop
 8001b1a:	e284      	b.n	8002026 <setProg_skimmer+0xbc6>
				break;
 8001b1c:	bf00      	nop
			} //end switch cmd

		break;
 8001b1e:	e282      	b.n	8002026 <setProg_skimmer+0xbc6>
		case 3: //retorna y graba el valor

			switch (cmd) {
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d002      	beq.n	8001b2c <setProg_skimmer+0x6cc>
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d006      	beq.n	8001b38 <setProg_skimmer+0x6d8>
					tiempoSkimmer_ON = tiempoSkimmerAux;
				break;
				case PROG_SET2:
					tiempoSkimmer_OFF = tiempoSkimmerAux;
				default:
				break;
 8001b2a:	e00a      	b.n	8001b42 <setProg_skimmer+0x6e2>
					tiempoSkimmer_ON = tiempoSkimmerAux;
 8001b2c:	4b92      	ldr	r3, [pc, #584]	; (8001d78 <setProg_skimmer+0x918>)
 8001b2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b32:	4b94      	ldr	r3, [pc, #592]	; (8001d84 <setProg_skimmer+0x924>)
 8001b34:	801a      	strh	r2, [r3, #0]
				break;
 8001b36:	e005      	b.n	8001b44 <setProg_skimmer+0x6e4>
					tiempoSkimmer_OFF = tiempoSkimmerAux;
 8001b38:	4b8f      	ldr	r3, [pc, #572]	; (8001d78 <setProg_skimmer+0x918>)
 8001b3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b3e:	4b92      	ldr	r3, [pc, #584]	; (8001d88 <setProg_skimmer+0x928>)
 8001b40:	801a      	strh	r2, [r3, #0]
				break;
 8001b42:	bf00      	nop
			} //end switch cmd

			statusTiempoSkimmer = 99;
 8001b44:	4b91      	ldr	r3, [pc, #580]	; (8001d8c <setProg_skimmer+0x92c>)
 8001b46:	2263      	movs	r2, #99	; 0x63
 8001b48:	701a      	strb	r2, [r3, #0]
			return PROG_FINISHED;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e26c      	b.n	8002028 <setProg_skimmer+0xbc8>

		break;
		case 10: //hora en 0. Introduce la decena de hora
			if (getStatBoton(IN_AST) == FALL) {
 8001b4e:	200c      	movs	r0, #12
 8001b50:	f7fe fcbe 	bl	80004d0 <getStatBoton>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d104      	bne.n	8001b64 <setProg_skimmer+0x704>
				statusTiempoSkimmer = 99;
 8001b5a:	4b8c      	ldr	r3, [pc, #560]	; (8001d8c <setProg_skimmer+0x92c>)
 8001b5c:	2263      	movs	r2, #99	; 0x63
 8001b5e:	701a      	strb	r2, [r3, #0]
				return PROG_IDLE;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e261      	b.n	8002028 <setProg_skimmer+0xbc8>
			}

			if (newNumber > -1 && newNumber < 3) {
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f2c0 8257 	blt.w	800201c <setProg_skimmer+0xbbc>
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	f300 8252 	bgt.w	800201c <setProg_skimmer+0xbbc>
				progSkimmerAux = newNumber * 1000;
 8001b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	0152      	lsls	r2, r2, #5
 8001b82:	1ad2      	subs	r2, r2, r3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b80      	ldr	r3, [pc, #512]	; (8001d90 <setProg_skimmer+0x930>)
 8001b90:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001b92:	4b7f      	ldr	r3, [pc, #508]	; (8001d90 <setProg_skimmer+0x930>)
 8001b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b98:	4a7e      	ldr	r2, [pc, #504]	; (8001d94 <setProg_skimmer+0x934>)
 8001b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b9e:	1152      	asrs	r2, r2, #5
 8001ba0:	17db      	asrs	r3, r3, #31
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	4b79      	ldr	r3, [pc, #484]	; (8001d90 <setProg_skimmer+0x930>)
 8001baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bae:	4a79      	ldr	r2, [pc, #484]	; (8001d94 <setProg_skimmer+0x934>)
 8001bb0:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb4:	1151      	asrs	r1, r2, #5
 8001bb6:	17da      	asrs	r2, r3, #31
 8001bb8:	1a8a      	subs	r2, r1, r2
 8001bba:	2164      	movs	r1, #100	; 0x64
 8001bbc:	fb01 f202 	mul.w	r2, r1, r2
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4974      	ldr	r1, [pc, #464]	; (8001d98 <setProg_skimmer+0x938>)
 8001bc8:	486d      	ldr	r0, [pc, #436]	; (8001d80 <setProg_skimmer+0x920>)
 8001bca:	f005 fda1 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8001bce:	486c      	ldr	r0, [pc, #432]	; (8001d80 <setProg_skimmer+0x920>)
 8001bd0:	f7ff f962 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 11;
 8001bd4:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <setProg_skimmer+0x92c>)
 8001bd6:	220b      	movs	r2, #11
 8001bd8:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001bda:	e21f      	b.n	800201c <setProg_skimmer+0xbbc>
		case 11: //introduce la unidad de hora
			if (getStatBoton(IN_AST) == FALL) {
 8001bdc:	200c      	movs	r0, #12
 8001bde:	f7fe fc77 	bl	80004d0 <getStatBoton>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d127      	bne.n	8001c38 <setProg_skimmer+0x7d8>
				progSkimmerAux = 0;
 8001be8:	4b69      	ldr	r3, [pc, #420]	; (8001d90 <setProg_skimmer+0x930>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001bee:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <setProg_skimmer+0x930>)
 8001bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf4:	4a67      	ldr	r2, [pc, #412]	; (8001d94 <setProg_skimmer+0x934>)
 8001bf6:	fb82 1203 	smull	r1, r2, r2, r3
 8001bfa:	1152      	asrs	r2, r2, #5
 8001bfc:	17db      	asrs	r3, r3, #31
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <setProg_skimmer+0x930>)
 8001c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0a:	4a62      	ldr	r2, [pc, #392]	; (8001d94 <setProg_skimmer+0x934>)
 8001c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c10:	1151      	asrs	r1, r2, #5
 8001c12:	17da      	asrs	r2, r3, #31
 8001c14:	1a8a      	subs	r2, r1, r2
 8001c16:	2164      	movs	r1, #100	; 0x64
 8001c18:	fb01 f202 	mul.w	r2, r1, r2
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	4602      	mov	r2, r0
 8001c22:	495d      	ldr	r1, [pc, #372]	; (8001d98 <setProg_skimmer+0x938>)
 8001c24:	4856      	ldr	r0, [pc, #344]	; (8001d80 <setProg_skimmer+0x920>)
 8001c26:	f005 fd73 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8001c2a:	4855      	ldr	r0, [pc, #340]	; (8001d80 <setProg_skimmer+0x920>)
 8001c2c:	f7ff f934 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 10;
 8001c30:	4b56      	ldr	r3, [pc, #344]	; (8001d8c <setProg_skimmer+0x92c>)
 8001c32:	220a      	movs	r2, #10
 8001c34:	701a      	strb	r2, [r3, #0]
				break;
 8001c36:	e1f6      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001c38:	200e      	movs	r0, #14
 8001c3a:	f7fe fc49 	bl	80004d0 <getStatBoton>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d103      	bne.n	8001c4c <setProg_skimmer+0x7ec>
				statusTiempoSkimmer = 33;
 8001c44:	4b51      	ldr	r3, [pc, #324]	; (8001d8c <setProg_skimmer+0x92c>)
 8001c46:	2221      	movs	r2, #33	; 0x21
 8001c48:	701a      	strb	r2, [r3, #0]
				break;
 8001c4a:	e1ec      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

			if (newNumber > -1) {
 8001c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f2c0 81e5 	blt.w	8002020 <setProg_skimmer+0xbc0>
				progSkimmerAux += (newNumber * 100);
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	461a      	mov	r2, r3
 8001c64:	0091      	lsls	r1, r2, #2
 8001c66:	461a      	mov	r2, r3
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <setProg_skimmer+0x930>)
 8001c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b21a      	sxth	r2, r3
 8001c7e:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <setProg_skimmer+0x930>)
 8001c80:	801a      	strh	r2, [r3, #0]
				if (progSkimmerAux > 2300) progSkimmerAux = 2300;
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <setProg_skimmer+0x930>)
 8001c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c88:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	dd03      	ble.n	8001c98 <setProg_skimmer+0x838>
 8001c90:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <setProg_skimmer+0x930>)
 8001c92:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001c96:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001c98:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <setProg_skimmer+0x930>)
 8001c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9e:	4a3d      	ldr	r2, [pc, #244]	; (8001d94 <setProg_skimmer+0x934>)
 8001ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca4:	1152      	asrs	r2, r2, #5
 8001ca6:	17db      	asrs	r3, r3, #31
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <setProg_skimmer+0x930>)
 8001cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb4:	4a37      	ldr	r2, [pc, #220]	; (8001d94 <setProg_skimmer+0x934>)
 8001cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cba:	1151      	asrs	r1, r2, #5
 8001cbc:	17da      	asrs	r2, r3, #31
 8001cbe:	1a8a      	subs	r2, r1, r2
 8001cc0:	2164      	movs	r1, #100	; 0x64
 8001cc2:	fb01 f202 	mul.w	r2, r1, r2
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4932      	ldr	r1, [pc, #200]	; (8001d98 <setProg_skimmer+0x938>)
 8001cce:	482c      	ldr	r0, [pc, #176]	; (8001d80 <setProg_skimmer+0x920>)
 8001cd0:	f005 fd1e 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8001cd4:	482a      	ldr	r0, [pc, #168]	; (8001d80 <setProg_skimmer+0x920>)
 8001cd6:	f7ff f8df 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 12;
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <setProg_skimmer+0x92c>)
 8001cdc:	220c      	movs	r2, #12
 8001cde:	701a      	strb	r2, [r3, #0]
				break;
 8001ce0:	e1a1      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

		break;
		case 12: //introduce la decena de minutos
			if (getStatBoton(IN_AST) == FALL) {
 8001ce2:	200c      	movs	r0, #12
 8001ce4:	f7fe fbf4 	bl	80004d0 <getStatBoton>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d139      	bne.n	8001d62 <setProg_skimmer+0x902>
				progSkimmerAux = (progSkimmerAux / 1000) * 1000;
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <setProg_skimmer+0x930>)
 8001cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf4:	4a29      	ldr	r2, [pc, #164]	; (8001d9c <setProg_skimmer+0x93c>)
 8001cf6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cfa:	1192      	asrs	r2, r2, #6
 8001cfc:	17db      	asrs	r3, r3, #31
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	0152      	lsls	r2, r2, #5
 8001d08:	1ad2      	subs	r2, r2, r3
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <setProg_skimmer+0x930>)
 8001d16:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <setProg_skimmer+0x930>)
 8001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1e:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <setProg_skimmer+0x934>)
 8001d20:	fb82 1203 	smull	r1, r2, r2, r3
 8001d24:	1152      	asrs	r2, r2, #5
 8001d26:	17db      	asrs	r3, r3, #31
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <setProg_skimmer+0x930>)
 8001d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <setProg_skimmer+0x934>)
 8001d36:	fb82 1203 	smull	r1, r2, r2, r3
 8001d3a:	1151      	asrs	r1, r2, #5
 8001d3c:	17da      	asrs	r2, r3, #31
 8001d3e:	1a8a      	subs	r2, r1, r2
 8001d40:	2164      	movs	r1, #100	; 0x64
 8001d42:	fb01 f202 	mul.w	r2, r1, r2
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4912      	ldr	r1, [pc, #72]	; (8001d98 <setProg_skimmer+0x938>)
 8001d4e:	480c      	ldr	r0, [pc, #48]	; (8001d80 <setProg_skimmer+0x920>)
 8001d50:	f005 fcde 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8001d54:	480a      	ldr	r0, [pc, #40]	; (8001d80 <setProg_skimmer+0x920>)
 8001d56:	f7ff f89f 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 11;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <setProg_skimmer+0x92c>)
 8001d5c:	220b      	movs	r2, #11
 8001d5e:	701a      	strb	r2, [r3, #0]
				break;
 8001d60:	e161      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001d62:	200e      	movs	r0, #14
 8001d64:	f7fe fbb4 	bl	80004d0 <getStatBoton>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d118      	bne.n	8001da0 <setProg_skimmer+0x940>
				statusTiempoSkimmer = 33;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <setProg_skimmer+0x92c>)
 8001d70:	2221      	movs	r2, #33	; 0x21
 8001d72:	701a      	strb	r2, [r3, #0]
				break;
 8001d74:	e157      	b.n	8002026 <setProg_skimmer+0xbc6>
 8001d76:	bf00      	nop
 8001d78:	2000012a 	.word	0x2000012a
 8001d7c:	080081ac 	.word	0x080081ac
 8001d80:	200005f4 	.word	0x200005f4
 8001d84:	2000012c 	.word	0x2000012c
 8001d88:	2000012e 	.word	0x2000012e
 8001d8c:	20000007 	.word	0x20000007
 8001d90:	20000130 	.word	0x20000130
 8001d94:	51eb851f 	.word	0x51eb851f
 8001d98:	080081b8 	.word	0x080081b8
 8001d9c:	10624dd3 	.word	0x10624dd3
			}

			if (newNumber != -1 && newNumber < 6) {
 8001da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da8:	d039      	beq.n	8001e1e <setProg_skimmer+0x9be>
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	dc35      	bgt.n	8001e1e <setProg_skimmer+0x9be>
				progSkimmerAux += (newNumber * 10);
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	4b9b      	ldr	r3, [pc, #620]	; (8002030 <setProg_skimmer+0xbd0>)
 8001dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	4b97      	ldr	r3, [pc, #604]	; (8002030 <setProg_skimmer+0xbd0>)
 8001dd2:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001dd4:	4b96      	ldr	r3, [pc, #600]	; (8002030 <setProg_skimmer+0xbd0>)
 8001dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dda:	4a96      	ldr	r2, [pc, #600]	; (8002034 <setProg_skimmer+0xbd4>)
 8001ddc:	fb82 1203 	smull	r1, r2, r2, r3
 8001de0:	1152      	asrs	r2, r2, #5
 8001de2:	17db      	asrs	r3, r3, #31
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	4b91      	ldr	r3, [pc, #580]	; (8002030 <setProg_skimmer+0xbd0>)
 8001dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df0:	4a90      	ldr	r2, [pc, #576]	; (8002034 <setProg_skimmer+0xbd4>)
 8001df2:	fb82 1203 	smull	r1, r2, r2, r3
 8001df6:	1151      	asrs	r1, r2, #5
 8001df8:	17da      	asrs	r2, r3, #31
 8001dfa:	1a8a      	subs	r2, r1, r2
 8001dfc:	2164      	movs	r1, #100	; 0x64
 8001dfe:	fb01 f202 	mul.w	r2, r1, r2
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4602      	mov	r2, r0
 8001e08:	498b      	ldr	r1, [pc, #556]	; (8002038 <setProg_skimmer+0xbd8>)
 8001e0a:	488c      	ldr	r0, [pc, #560]	; (800203c <setProg_skimmer+0xbdc>)
 8001e0c:	f005 fc80 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8001e10:	488a      	ldr	r0, [pc, #552]	; (800203c <setProg_skimmer+0xbdc>)
 8001e12:	f7ff f841 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 13;
 8001e16:	4b8a      	ldr	r3, [pc, #552]	; (8002040 <setProg_skimmer+0xbe0>)
 8001e18:	220d      	movs	r2, #13
 8001e1a:	701a      	strb	r2, [r3, #0]
				break;
 8001e1c:	e103      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

		case 13: //introduce la unidad de minutos
			if (getStatBoton(IN_AST) == FALL) {
 8001e1e:	200c      	movs	r0, #12
 8001e20:	f7fe fb56 	bl	80004d0 <getStatBoton>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d13c      	bne.n	8001ea4 <setProg_skimmer+0xa44>
				progSkimmerAux = (progSkimmerAux / 100) * 100;
 8001e2a:	4b81      	ldr	r3, [pc, #516]	; (8002030 <setProg_skimmer+0xbd0>)
 8001e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e30:	4a80      	ldr	r2, [pc, #512]	; (8002034 <setProg_skimmer+0xbd4>)
 8001e32:	fb82 1203 	smull	r1, r2, r2, r3
 8001e36:	1152      	asrs	r2, r2, #5
 8001e38:	17db      	asrs	r3, r3, #31
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	461a      	mov	r2, r3
 8001e48:	0091      	lsls	r1, r2, #2
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <setProg_skimmer+0xbd0>)
 8001e58:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001e5a:	4b75      	ldr	r3, [pc, #468]	; (8002030 <setProg_skimmer+0xbd0>)
 8001e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e60:	4a74      	ldr	r2, [pc, #464]	; (8002034 <setProg_skimmer+0xbd4>)
 8001e62:	fb82 1203 	smull	r1, r2, r2, r3
 8001e66:	1152      	asrs	r2, r2, #5
 8001e68:	17db      	asrs	r3, r3, #31
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <setProg_skimmer+0xbd0>)
 8001e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e76:	4a6f      	ldr	r2, [pc, #444]	; (8002034 <setProg_skimmer+0xbd4>)
 8001e78:	fb82 1203 	smull	r1, r2, r2, r3
 8001e7c:	1151      	asrs	r1, r2, #5
 8001e7e:	17da      	asrs	r2, r3, #31
 8001e80:	1a8a      	subs	r2, r1, r2
 8001e82:	2164      	movs	r1, #100	; 0x64
 8001e84:	fb01 f202 	mul.w	r2, r1, r2
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	496a      	ldr	r1, [pc, #424]	; (8002038 <setProg_skimmer+0xbd8>)
 8001e90:	486a      	ldr	r0, [pc, #424]	; (800203c <setProg_skimmer+0xbdc>)
 8001e92:	f005 fc3d 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8001e96:	4869      	ldr	r0, [pc, #420]	; (800203c <setProg_skimmer+0xbdc>)
 8001e98:	f7fe fffe 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 12;
 8001e9c:	4b68      	ldr	r3, [pc, #416]	; (8002040 <setProg_skimmer+0xbe0>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	701a      	strb	r2, [r3, #0]
				break;
 8001ea2:	e0c0      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001ea4:	200e      	movs	r0, #14
 8001ea6:	f7fe fb13 	bl	80004d0 <getStatBoton>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d103      	bne.n	8001eb8 <setProg_skimmer+0xa58>
				statusTiempoSkimmer = 33;
 8001eb0:	4b63      	ldr	r3, [pc, #396]	; (8002040 <setProg_skimmer+0xbe0>)
 8001eb2:	2221      	movs	r2, #33	; 0x21
 8001eb4:	701a      	strb	r2, [r3, #0]
				break;
 8001eb6:	e0b6      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

			if (newNumber != -1) {
 8001eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec0:	d030      	beq.n	8001f24 <setProg_skimmer+0xac4>
				progSkimmerAux += newNumber;
 8001ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	4b59      	ldr	r3, [pc, #356]	; (8002030 <setProg_skimmer+0xbd0>)
 8001eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	4b56      	ldr	r3, [pc, #344]	; (8002030 <setProg_skimmer+0xbd0>)
 8001ed8:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001eda:	4b55      	ldr	r3, [pc, #340]	; (8002030 <setProg_skimmer+0xbd0>)
 8001edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee0:	4a54      	ldr	r2, [pc, #336]	; (8002034 <setProg_skimmer+0xbd4>)
 8001ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee6:	1152      	asrs	r2, r2, #5
 8001ee8:	17db      	asrs	r3, r3, #31
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4b4f      	ldr	r3, [pc, #316]	; (8002030 <setProg_skimmer+0xbd0>)
 8001ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef6:	4a4f      	ldr	r2, [pc, #316]	; (8002034 <setProg_skimmer+0xbd4>)
 8001ef8:	fb82 1203 	smull	r1, r2, r2, r3
 8001efc:	1151      	asrs	r1, r2, #5
 8001efe:	17da      	asrs	r2, r3, #31
 8001f00:	1a8a      	subs	r2, r1, r2
 8001f02:	2164      	movs	r1, #100	; 0x64
 8001f04:	fb01 f202 	mul.w	r2, r1, r2
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	494a      	ldr	r1, [pc, #296]	; (8002038 <setProg_skimmer+0xbd8>)
 8001f10:	484a      	ldr	r0, [pc, #296]	; (800203c <setProg_skimmer+0xbdc>)
 8001f12:	f005 fbfd 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8001f16:	4849      	ldr	r0, [pc, #292]	; (800203c <setProg_skimmer+0xbdc>)
 8001f18:	f7fe ffbe 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 14;
 8001f1c:	4b48      	ldr	r3, [pc, #288]	; (8002040 <setProg_skimmer+0xbe0>)
 8001f1e:	220e      	movs	r2, #14
 8001f20:	701a      	strb	r2, [r3, #0]
				break;
 8001f22:	e080      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

		case 14: //minutos completos
			if (getStatBoton(IN_AST) == FALL) {
 8001f24:	200c      	movs	r0, #12
 8001f26:	f7fe fad3 	bl	80004d0 <getStatBoton>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d136      	bne.n	8001f9e <setProg_skimmer+0xb3e>
				progSkimmerAux = (newNumber / 10) * 10;
 8001f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f34:	4a43      	ldr	r2, [pc, #268]	; (8002044 <setProg_skimmer+0xbe4>)
 8001f36:	fb82 1203 	smull	r1, r2, r2, r3
 8001f3a:	1092      	asrs	r2, r2, #2
 8001f3c:	17db      	asrs	r3, r3, #31
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	b25b      	sxtb	r3, r3
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	b21a      	sxth	r2, r3
 8001f50:	4b37      	ldr	r3, [pc, #220]	; (8002030 <setProg_skimmer+0xbd0>)
 8001f52:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001f54:	4b36      	ldr	r3, [pc, #216]	; (8002030 <setProg_skimmer+0xbd0>)
 8001f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5a:	4a36      	ldr	r2, [pc, #216]	; (8002034 <setProg_skimmer+0xbd4>)
 8001f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f60:	1152      	asrs	r2, r2, #5
 8001f62:	17db      	asrs	r3, r3, #31
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	4b31      	ldr	r3, [pc, #196]	; (8002030 <setProg_skimmer+0xbd0>)
 8001f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f70:	4a30      	ldr	r2, [pc, #192]	; (8002034 <setProg_skimmer+0xbd4>)
 8001f72:	fb82 1203 	smull	r1, r2, r2, r3
 8001f76:	1151      	asrs	r1, r2, #5
 8001f78:	17da      	asrs	r2, r3, #31
 8001f7a:	1a8a      	subs	r2, r1, r2
 8001f7c:	2164      	movs	r1, #100	; 0x64
 8001f7e:	fb01 f202 	mul.w	r2, r1, r2
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	4602      	mov	r2, r0
 8001f88:	492b      	ldr	r1, [pc, #172]	; (8002038 <setProg_skimmer+0xbd8>)
 8001f8a:	482c      	ldr	r0, [pc, #176]	; (800203c <setProg_skimmer+0xbdc>)
 8001f8c:	f005 fbc0 	bl	8007710 <siprintf>
				setTexto_pantalla(texto);
 8001f90:	482a      	ldr	r0, [pc, #168]	; (800203c <setProg_skimmer+0xbdc>)
 8001f92:	f7fe ff81 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 13;
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <setProg_skimmer+0xbe0>)
 8001f98:	220d      	movs	r2, #13
 8001f9a:	701a      	strb	r2, [r3, #0]
				break;
 8001f9c:	e043      	b.n	8002026 <setProg_skimmer+0xbc6>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001f9e:	200e      	movs	r0, #14
 8001fa0:	f7fe fa96 	bl	80004d0 <getStatBoton>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d13c      	bne.n	8002024 <setProg_skimmer+0xbc4>
				statusTiempoSkimmer = 33;
 8001faa:	4b25      	ldr	r3, [pc, #148]	; (8002040 <setProg_skimmer+0xbe0>)
 8001fac:	2221      	movs	r2, #33	; 0x21
 8001fae:	701a      	strb	r2, [r3, #0]
				break;
 8001fb0:	e039      	b.n	8002026 <setProg_skimmer+0xbc6>
			}
		break;
		case 33: //retorna y graba el valor

			switch (cmd) {
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	3b06      	subs	r3, #6
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d822      	bhi.n	8002000 <setProg_skimmer+0xba0>
 8001fba:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <setProg_skimmer+0xb60>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	08001fd1 	.word	0x08001fd1
 8001fc4:	08001fdd 	.word	0x08001fdd
 8001fc8:	08001fe9 	.word	0x08001fe9
 8001fcc:	08001ff5 	.word	0x08001ff5
				case PROG_SET3:
					prog1_Skimmer_ON = progSkimmerAux;
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <setProg_skimmer+0xbd0>)
 8001fd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <setProg_skimmer+0xbe8>)
 8001fd8:	801a      	strh	r2, [r3, #0]
				break;
 8001fda:	e012      	b.n	8002002 <setProg_skimmer+0xba2>
				case PROG_SET4:
					prog1_Skimmer_OFF = progSkimmerAux;
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <setProg_skimmer+0xbd0>)
 8001fde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <setProg_skimmer+0xbec>)
 8001fe4:	801a      	strh	r2, [r3, #0]
				break;
 8001fe6:	e00c      	b.n	8002002 <setProg_skimmer+0xba2>
				case PROG_SET5:
					prog2_Skimmer_ON = progSkimmerAux;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <setProg_skimmer+0xbd0>)
 8001fea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <setProg_skimmer+0xbf0>)
 8001ff0:	801a      	strh	r2, [r3, #0]
				break;
 8001ff2:	e006      	b.n	8002002 <setProg_skimmer+0xba2>
				case PROG_SET6:
					prog2_Skimmer_OFF = progSkimmerAux;
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <setProg_skimmer+0xbd0>)
 8001ff6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <setProg_skimmer+0xbf4>)
 8001ffc:	801a      	strh	r2, [r3, #0]
				break;
 8001ffe:	e000      	b.n	8002002 <setProg_skimmer+0xba2>
				default:
				break;
 8002000:	bf00      	nop
			} //end switch cmd

			statusTiempoSkimmer = 99;
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <setProg_skimmer+0xbe0>)
 8002004:	2263      	movs	r2, #99	; 0x63
 8002006:	701a      	strb	r2, [r3, #0]
			return PROG_FINISHED;
 8002008:	2303      	movs	r3, #3
 800200a:	e00d      	b.n	8002028 <setProg_skimmer+0xbc8>

		break;
		default:
			return PROG_ERROR;
 800200c:	2300      	movs	r3, #0
 800200e:	e00b      	b.n	8002028 <setProg_skimmer+0xbc8>
		break;
 8002010:	bf00      	nop
 8002012:	e008      	b.n	8002026 <setProg_skimmer+0xbc6>
		break;
 8002014:	bf00      	nop
 8002016:	e006      	b.n	8002026 <setProg_skimmer+0xbc6>
				break;
 8002018:	bf00      	nop
 800201a:	e004      	b.n	8002026 <setProg_skimmer+0xbc6>
		break;
 800201c:	bf00      	nop
 800201e:	e002      	b.n	8002026 <setProg_skimmer+0xbc6>
		break;
 8002020:	bf00      	nop
 8002022:	e000      	b.n	8002026 <setProg_skimmer+0xbc6>
		break;
 8002024:	bf00      	nop
		break;
	} //end switch statusTiempoLlenado.

	return PROG_BUSY;
 8002026:	2302      	movs	r3, #2

} //end setProg_skimmer()
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000130 	.word	0x20000130
 8002034:	51eb851f 	.word	0x51eb851f
 8002038:	080081b8 	.word	0x080081b8
 800203c:	200005f4 	.word	0x200005f4
 8002040:	20000007 	.word	0x20000007
 8002044:	66666667 	.word	0x66666667
 8002048:	20000132 	.word	0x20000132
 800204c:	20000134 	.word	0x20000134
 8002050:	20000136 	.word	0x20000136
 8002054:	20000138 	.word	0x20000138

08002058 <setProg_luz>:


T_PROG_OUTPUT setProg_luz (T_PROG_CMD cmd){
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
	__NOP();
 8002062:	bf00      	nop
} //end setProg_luz()
 8002064:	bf00      	nop
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <runProg_hidro>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

T_PROG_OUTPUT runProg_hidro (T_PROG_CMD cmd){
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]

	switch (cmd) {
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d005      	beq.n	800208c <runProg_hidro+0x1c>
 8002080:	2b03      	cmp	r3, #3
 8002082:	f000 80c1 	beq.w	8002208 <runProg_hidro+0x198>
 8002086:	2b01      	cmp	r3, #1
 8002088:	d051      	beq.n	800212e <runProg_hidro+0xbe>
//			return PROG_FINISHED;
			status_progHidro = PROG_IDLE;
		break;

		default:
		break;
 800208a:	e0cc      	b.n	8002226 <runProg_hidro+0x1b6>
			setOutput(OUT_rele_jet, 1); //logica positiva
 800208c:	2101      	movs	r1, #1
 800208e:	200c      	movs	r0, #12
 8002090:	f7fe faae 	bl	80005f0 <setOutput>
			set_led(OUT_led_jet, TITILA_LENTO);
 8002094:	2102      	movs	r1, #2
 8002096:	2002      	movs	r0, #2
 8002098:	f000 fcd2 	bl	8002a40 <set_led>
			fecha_hidro = get_fecha();
 800209c:	f000 fbf2 	bl	8002884 <get_fecha>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b64      	ldr	r3, [pc, #400]	; (8002234 <runProg_hidro+0x1c4>)
 80020a4:	4611      	mov	r1, r2
 80020a6:	7019      	strb	r1, [r3, #0]
 80020a8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80020ac:	7059      	strb	r1, [r3, #1]
 80020ae:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80020b2:	7099      	strb	r1, [r3, #2]
 80020b4:	f3c2 6207 	ubfx	r2, r2, #24, #8
 80020b8:	70da      	strb	r2, [r3, #3]
			hora_hidro = get_hora();
 80020ba:	f000 fbc9 	bl	8002850 <get_hora>
 80020be:	4602      	mov	r2, r0
 80020c0:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <runProg_hidro+0x1c8>)
 80020c2:	4611      	mov	r1, r2
 80020c4:	7019      	strb	r1, [r3, #0]
 80020c6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80020ca:	7059      	strb	r1, [r3, #1]
 80020cc:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80020d0:	709a      	strb	r2, [r3, #2]
			hora_hidro.Minutes += tiempoHidro;
 80020d2:	4b59      	ldr	r3, [pc, #356]	; (8002238 <runProg_hidro+0x1c8>)
 80020d4:	785a      	ldrb	r2, [r3, #1]
 80020d6:	4b59      	ldr	r3, [pc, #356]	; (800223c <runProg_hidro+0x1cc>)
 80020d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4413      	add	r3, r2
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4b55      	ldr	r3, [pc, #340]	; (8002238 <runProg_hidro+0x1c8>)
 80020e4:	705a      	strb	r2, [r3, #1]
			if (hora_hidro.Minutes > 59){
 80020e6:	4b54      	ldr	r3, [pc, #336]	; (8002238 <runProg_hidro+0x1c8>)
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	2b3b      	cmp	r3, #59	; 0x3b
 80020ec:	d91b      	bls.n	8002126 <runProg_hidro+0xb6>
				hora_hidro.Minutes -= 59;
 80020ee:	4b52      	ldr	r3, [pc, #328]	; (8002238 <runProg_hidro+0x1c8>)
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	3b3b      	subs	r3, #59	; 0x3b
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b50      	ldr	r3, [pc, #320]	; (8002238 <runProg_hidro+0x1c8>)
 80020f8:	705a      	strb	r2, [r3, #1]
				hora_hidro.Hours++;
 80020fa:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <runProg_hidro+0x1c8>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <runProg_hidro+0x1c8>)
 8002104:	701a      	strb	r2, [r3, #0]
				if (hora_hidro.Hours > 23){
 8002106:	4b4c      	ldr	r3, [pc, #304]	; (8002238 <runProg_hidro+0x1c8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b17      	cmp	r3, #23
 800210c:	d90b      	bls.n	8002126 <runProg_hidro+0xb6>
					hora_hidro.Hours -= 23;
 800210e:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <runProg_hidro+0x1c8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	3b17      	subs	r3, #23
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b48      	ldr	r3, [pc, #288]	; (8002238 <runProg_hidro+0x1c8>)
 8002118:	701a      	strb	r2, [r3, #0]
					fecha_hidro.Date++;
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <runProg_hidro+0x1c4>)
 800211c:	789b      	ldrb	r3, [r3, #2]
 800211e:	3301      	adds	r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b44      	ldr	r3, [pc, #272]	; (8002234 <runProg_hidro+0x1c4>)
 8002124:	709a      	strb	r2, [r3, #2]
			status_progHidro = PROG_BUSY;
 8002126:	4b46      	ldr	r3, [pc, #280]	; (8002240 <runProg_hidro+0x1d0>)
 8002128:	2202      	movs	r2, #2
 800212a:	701a      	strb	r2, [r3, #0]
		break;
 800212c:	e07b      	b.n	8002226 <runProg_hidro+0x1b6>
			if (status_progHidro == PROG_IDLE){
 800212e:	4b44      	ldr	r3, [pc, #272]	; (8002240 <runProg_hidro+0x1d0>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d074      	beq.n	8002220 <runProg_hidro+0x1b0>
			auxFecha = get_fecha();
 8002136:	f000 fba5 	bl	8002884 <get_fecha>
 800213a:	4602      	mov	r2, r0
 800213c:	4b41      	ldr	r3, [pc, #260]	; (8002244 <runProg_hidro+0x1d4>)
 800213e:	4611      	mov	r1, r2
 8002140:	7019      	strb	r1, [r3, #0]
 8002142:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002146:	7059      	strb	r1, [r3, #1]
 8002148:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800214c:	7099      	strb	r1, [r3, #2]
 800214e:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8002152:	70da      	strb	r2, [r3, #3]
			auxHora = get_hora();
 8002154:	f000 fb7c 	bl	8002850 <get_hora>
 8002158:	4602      	mov	r2, r0
 800215a:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <runProg_hidro+0x1d8>)
 800215c:	4611      	mov	r1, r2
 800215e:	7019      	strb	r1, [r3, #0]
 8002160:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002164:	7059      	strb	r1, [r3, #1]
 8002166:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800216a:	709a      	strb	r2, [r3, #2]
			if (fecha_hidro.Date < auxFecha.Date){
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <runProg_hidro+0x1c4>)
 800216e:	789a      	ldrb	r2, [r3, #2]
 8002170:	4b34      	ldr	r3, [pc, #208]	; (8002244 <runProg_hidro+0x1d4>)
 8002172:	789b      	ldrb	r3, [r3, #2]
 8002174:	429a      	cmp	r2, r3
 8002176:	d20b      	bcs.n	8002190 <runProg_hidro+0x120>
				setOutput(OUT_rele_jet, 0); //logica positiva
 8002178:	2100      	movs	r1, #0
 800217a:	200c      	movs	r0, #12
 800217c:	f7fe fa38 	bl	80005f0 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 8002180:	2100      	movs	r1, #0
 8002182:	2002      	movs	r0, #2
 8002184:	f000 fc5c 	bl	8002a40 <set_led>
				status_progHidro = PROG_IDLE;
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <runProg_hidro+0x1d0>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
				break;
 800218e:	e04a      	b.n	8002226 <runProg_hidro+0x1b6>
			if (hora_hidro.Hours < auxHora.Hours){
 8002190:	4b29      	ldr	r3, [pc, #164]	; (8002238 <runProg_hidro+0x1c8>)
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <runProg_hidro+0x1d8>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d20b      	bcs.n	80021b4 <runProg_hidro+0x144>
				setOutput(OUT_rele_jet, 0); //logica positiva
 800219c:	2100      	movs	r1, #0
 800219e:	200c      	movs	r0, #12
 80021a0:	f7fe fa26 	bl	80005f0 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 80021a4:	2100      	movs	r1, #0
 80021a6:	2002      	movs	r0, #2
 80021a8:	f000 fc4a 	bl	8002a40 <set_led>
				status_progHidro = PROG_IDLE;
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <runProg_hidro+0x1d0>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
				break;
 80021b2:	e038      	b.n	8002226 <runProg_hidro+0x1b6>
			if (hora_hidro.Minutes < auxHora.Minutes){
 80021b4:	4b20      	ldr	r3, [pc, #128]	; (8002238 <runProg_hidro+0x1c8>)
 80021b6:	785a      	ldrb	r2, [r3, #1]
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <runProg_hidro+0x1d8>)
 80021ba:	785b      	ldrb	r3, [r3, #1]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d20b      	bcs.n	80021d8 <runProg_hidro+0x168>
				setOutput(OUT_rele_jet, 0); //logica positiva
 80021c0:	2100      	movs	r1, #0
 80021c2:	200c      	movs	r0, #12
 80021c4:	f7fe fa14 	bl	80005f0 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 80021c8:	2100      	movs	r1, #0
 80021ca:	2002      	movs	r0, #2
 80021cc:	f000 fc38 	bl	8002a40 <set_led>
				status_progHidro = PROG_IDLE;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <runProg_hidro+0x1d0>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
				break;
 80021d6:	e026      	b.n	8002226 <runProg_hidro+0x1b6>
			if (hora_hidro.Minutes == auxHora.Minutes){
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <runProg_hidro+0x1c8>)
 80021da:	785a      	ldrb	r2, [r3, #1]
 80021dc:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <runProg_hidro+0x1d8>)
 80021de:	785b      	ldrb	r3, [r3, #1]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d11f      	bne.n	8002224 <runProg_hidro+0x1b4>
				if (hora_hidro.Seconds < auxHora.Seconds){
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <runProg_hidro+0x1c8>)
 80021e6:	789a      	ldrb	r2, [r3, #2]
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <runProg_hidro+0x1d8>)
 80021ea:	789b      	ldrb	r3, [r3, #2]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d219      	bcs.n	8002224 <runProg_hidro+0x1b4>
					setOutput(OUT_rele_jet, 0); //logica positiva
 80021f0:	2100      	movs	r1, #0
 80021f2:	200c      	movs	r0, #12
 80021f4:	f7fe f9fc 	bl	80005f0 <setOutput>
					set_led(OUT_led_jet, APAGADO);
 80021f8:	2100      	movs	r1, #0
 80021fa:	2002      	movs	r0, #2
 80021fc:	f000 fc20 	bl	8002a40 <set_led>
					status_progHidro = PROG_IDLE;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <runProg_hidro+0x1d0>)
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
					break;
 8002206:	e00e      	b.n	8002226 <runProg_hidro+0x1b6>
			setOutput(OUT_rele_jet, 0); //logica positiva
 8002208:	2100      	movs	r1, #0
 800220a:	200c      	movs	r0, #12
 800220c:	f7fe f9f0 	bl	80005f0 <setOutput>
			set_led(OUT_led_jet, APAGADO);
 8002210:	2100      	movs	r1, #0
 8002212:	2002      	movs	r0, #2
 8002214:	f000 fc14 	bl	8002a40 <set_led>
			status_progHidro = PROG_IDLE;
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <runProg_hidro+0x1d0>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
		break;
 800221e:	e002      	b.n	8002226 <runProg_hidro+0x1b6>
				break;
 8002220:	bf00      	nop
 8002222:	e000      	b.n	8002226 <runProg_hidro+0x1b6>
		break;
 8002224:	bf00      	nop
	} //end switch progCmd_hidro

	return status_progHidro;
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <runProg_hidro+0x1d0>)
 8002228:	781b      	ldrb	r3, [r3, #0]
} //end runProg_hidro()
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200005f0 	.word	0x200005f0
 8002238:	20000640 	.word	0x20000640
 800223c:	20000120 	.word	0x20000120
 8002240:	20000002 	.word	0x20000002
 8002244:	2000063c 	.word	0x2000063c
 8002248:	20000650 	.word	0x20000650

0800224c <runProg_llenado>:

T_PROG_OUTPUT runProg_llenado (T_PROG_CMD cmd){
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]

	switch (cmd) {
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d005      	beq.n	8002268 <runProg_llenado+0x1c>
 800225c:	2b03      	cmp	r3, #3
 800225e:	f000 81c3 	beq.w	80025e8 <runProg_llenado+0x39c>
 8002262:	2b01      	cmp	r3, #1
 8002264:	d054      	beq.n	8002310 <runProg_llenado+0xc4>

			status_progLlenado = PROG_IDLE;
		break;

		default:
		break;
 8002266:	e1cc      	b.n	8002602 <runProg_llenado+0x3b6>
			setOutput(OUT_rele_napa, 1); //logica positiva
 8002268:	2101      	movs	r1, #1
 800226a:	200b      	movs	r0, #11
 800226c:	f7fe f9c0 	bl	80005f0 <setOutput>
			set_led(OUT_led_napa, TITILA_LENTO);
 8002270:	2102      	movs	r1, #2
 8002272:	2001      	movs	r0, #1
 8002274:	f000 fbe4 	bl	8002a40 <set_led>
			flag_bombaNapa = 1;
 8002278:	4b85      	ldr	r3, [pc, #532]	; (8002490 <runProg_llenado+0x244>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
			fecha_llenadoOn = get_fecha();
 800227e:	f000 fb01 	bl	8002884 <get_fecha>
 8002282:	4602      	mov	r2, r0
 8002284:	4b83      	ldr	r3, [pc, #524]	; (8002494 <runProg_llenado+0x248>)
 8002286:	4611      	mov	r1, r2
 8002288:	7019      	strb	r1, [r3, #0]
 800228a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800228e:	7059      	strb	r1, [r3, #1]
 8002290:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8002294:	7099      	strb	r1, [r3, #2]
 8002296:	f3c2 6207 	ubfx	r2, r2, #24, #8
 800229a:	70da      	strb	r2, [r3, #3]
			hora_llenadoOn = get_hora();
 800229c:	f000 fad8 	bl	8002850 <get_hora>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <runProg_llenado+0x24c>)
 80022a4:	4611      	mov	r1, r2
 80022a6:	7019      	strb	r1, [r3, #0]
 80022a8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80022ac:	7059      	strb	r1, [r3, #1]
 80022ae:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80022b2:	709a      	strb	r2, [r3, #2]
			hora_llenadoOn.Minutes += tiempoLlenado_ON;
 80022b4:	4b78      	ldr	r3, [pc, #480]	; (8002498 <runProg_llenado+0x24c>)
 80022b6:	785a      	ldrb	r2, [r3, #1]
 80022b8:	4b78      	ldr	r3, [pc, #480]	; (800249c <runProg_llenado+0x250>)
 80022ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b74      	ldr	r3, [pc, #464]	; (8002498 <runProg_llenado+0x24c>)
 80022c6:	705a      	strb	r2, [r3, #1]
			if (hora_llenadoOn.Minutes > 59) {
 80022c8:	4b73      	ldr	r3, [pc, #460]	; (8002498 <runProg_llenado+0x24c>)
 80022ca:	785b      	ldrb	r3, [r3, #1]
 80022cc:	2b3b      	cmp	r3, #59	; 0x3b
 80022ce:	d91b      	bls.n	8002308 <runProg_llenado+0xbc>
				hora_llenadoOn.Minutes -= 59;
 80022d0:	4b71      	ldr	r3, [pc, #452]	; (8002498 <runProg_llenado+0x24c>)
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	3b3b      	subs	r3, #59	; 0x3b
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <runProg_llenado+0x24c>)
 80022da:	705a      	strb	r2, [r3, #1]
				hora_llenadoOn.Hours++;
 80022dc:	4b6e      	ldr	r3, [pc, #440]	; (8002498 <runProg_llenado+0x24c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b6c      	ldr	r3, [pc, #432]	; (8002498 <runProg_llenado+0x24c>)
 80022e6:	701a      	strb	r2, [r3, #0]
				if (hora_llenadoOn.Hours > 23) {
 80022e8:	4b6b      	ldr	r3, [pc, #428]	; (8002498 <runProg_llenado+0x24c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b17      	cmp	r3, #23
 80022ee:	d90b      	bls.n	8002308 <runProg_llenado+0xbc>
					hora_llenadoOn.Hours -= 23;
 80022f0:	4b69      	ldr	r3, [pc, #420]	; (8002498 <runProg_llenado+0x24c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	3b17      	subs	r3, #23
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b67      	ldr	r3, [pc, #412]	; (8002498 <runProg_llenado+0x24c>)
 80022fa:	701a      	strb	r2, [r3, #0]
					fecha_llenadoOn.Date++;
 80022fc:	4b65      	ldr	r3, [pc, #404]	; (8002494 <runProg_llenado+0x248>)
 80022fe:	789b      	ldrb	r3, [r3, #2]
 8002300:	3301      	adds	r3, #1
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b63      	ldr	r3, [pc, #396]	; (8002494 <runProg_llenado+0x248>)
 8002306:	709a      	strb	r2, [r3, #2]
			status_progLlenado = PROG_BUSY;
 8002308:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <runProg_llenado+0x254>)
 800230a:	2202      	movs	r2, #2
 800230c:	701a      	strb	r2, [r3, #0]
		break;
 800230e:	e178      	b.n	8002602 <runProg_llenado+0x3b6>
			if (status_progLlenado == PROG_IDLE) {
 8002310:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <runProg_llenado+0x254>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	f000 8173 	beq.w	8002600 <runProg_llenado+0x3b4>
			auxFecha = get_fecha();
 800231a:	f000 fab3 	bl	8002884 <get_fecha>
 800231e:	4602      	mov	r2, r0
 8002320:	4b60      	ldr	r3, [pc, #384]	; (80024a4 <runProg_llenado+0x258>)
 8002322:	4611      	mov	r1, r2
 8002324:	7019      	strb	r1, [r3, #0]
 8002326:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800232a:	7059      	strb	r1, [r3, #1]
 800232c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8002330:	7099      	strb	r1, [r3, #2]
 8002332:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8002336:	70da      	strb	r2, [r3, #3]
			auxHora = get_hora();
 8002338:	f000 fa8a 	bl	8002850 <get_hora>
 800233c:	4602      	mov	r2, r0
 800233e:	4b5a      	ldr	r3, [pc, #360]	; (80024a8 <runProg_llenado+0x25c>)
 8002340:	4611      	mov	r1, r2
 8002342:	7019      	strb	r1, [r3, #0]
 8002344:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002348:	7059      	strb	r1, [r3, #1]
 800234a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800234e:	709a      	strb	r2, [r3, #2]
			switch (flag_bombaNapa) {
 8002350:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <runProg_llenado+0x244>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80af 	beq.w	80024b8 <runProg_llenado+0x26c>
 800235a:	2b01      	cmp	r3, #1
 800235c:	d000      	beq.n	8002360 <runProg_llenado+0x114>
				break;
 800235e:	e141      	b.n	80025e4 <runProg_llenado+0x398>
					if (fecha_llenadoOn.Date < auxFecha.Date) {
 8002360:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <runProg_llenado+0x248>)
 8002362:	789a      	ldrb	r2, [r3, #2]
 8002364:	4b4f      	ldr	r3, [pc, #316]	; (80024a4 <runProg_llenado+0x258>)
 8002366:	789b      	ldrb	r3, [r3, #2]
 8002368:	429a      	cmp	r2, r3
 800236a:	d20a      	bcs.n	8002382 <runProg_llenado+0x136>
						setOutput(OUT_rele_napa, 0); //logica positiva
 800236c:	2100      	movs	r1, #0
 800236e:	200b      	movs	r0, #11
 8002370:	f7fe f93e 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 8002374:	2101      	movs	r1, #1
 8002376:	2001      	movs	r0, #1
 8002378:	f000 fb62 	bl	8002a40 <set_led>
						flag_bombaNapa = 0;
 800237c:	4b44      	ldr	r3, [pc, #272]	; (8002490 <runProg_llenado+0x244>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOn.Hours < auxHora.Hours) {
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <runProg_llenado+0x24c>)
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <runProg_llenado+0x25c>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d20a      	bcs.n	80023a4 <runProg_llenado+0x158>
						setOutput(OUT_rele_napa, 0); //logica positiva
 800238e:	2100      	movs	r1, #0
 8002390:	200b      	movs	r0, #11
 8002392:	f7fe f92d 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 8002396:	2101      	movs	r1, #1
 8002398:	2001      	movs	r0, #1
 800239a:	f000 fb51 	bl	8002a40 <set_led>
						flag_bombaNapa = 0;
 800239e:	4b3c      	ldr	r3, [pc, #240]	; (8002490 <runProg_llenado+0x244>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOn.Minutes < auxHora.Minutes) {
 80023a4:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <runProg_llenado+0x24c>)
 80023a6:	785a      	ldrb	r2, [r3, #1]
 80023a8:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <runProg_llenado+0x25c>)
 80023aa:	785b      	ldrb	r3, [r3, #1]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d20a      	bcs.n	80023c6 <runProg_llenado+0x17a>
						setOutput(OUT_rele_napa, 0); //logica positiva
 80023b0:	2100      	movs	r1, #0
 80023b2:	200b      	movs	r0, #11
 80023b4:	f7fe f91c 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 80023b8:	2101      	movs	r1, #1
 80023ba:	2001      	movs	r0, #1
 80023bc:	f000 fb40 	bl	8002a40 <set_led>
						flag_bombaNapa = 0;
 80023c0:	4b33      	ldr	r3, [pc, #204]	; (8002490 <runProg_llenado+0x244>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOn.Minutes == auxHora.Minutes) {
 80023c6:	4b34      	ldr	r3, [pc, #208]	; (8002498 <runProg_llenado+0x24c>)
 80023c8:	785a      	ldrb	r2, [r3, #1]
 80023ca:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <runProg_llenado+0x25c>)
 80023cc:	785b      	ldrb	r3, [r3, #1]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d110      	bne.n	80023f4 <runProg_llenado+0x1a8>
						if (hora_llenadoOn.Seconds < auxHora.Seconds) {
 80023d2:	4b31      	ldr	r3, [pc, #196]	; (8002498 <runProg_llenado+0x24c>)
 80023d4:	789a      	ldrb	r2, [r3, #2]
 80023d6:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <runProg_llenado+0x25c>)
 80023d8:	789b      	ldrb	r3, [r3, #2]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d20a      	bcs.n	80023f4 <runProg_llenado+0x1a8>
							setOutput(OUT_rele_napa, 0); //logica positiva
 80023de:	2100      	movs	r1, #0
 80023e0:	200b      	movs	r0, #11
 80023e2:	f7fe f905 	bl	80005f0 <setOutput>
							set_led(OUT_led_napa, PRENDIDO);
 80023e6:	2101      	movs	r1, #1
 80023e8:	2001      	movs	r0, #1
 80023ea:	f000 fb29 	bl	8002a40 <set_led>
							flag_bombaNapa = 0;
 80023ee:	4b28      	ldr	r3, [pc, #160]	; (8002490 <runProg_llenado+0x244>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
					if (!flag_bombaNapa) {
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <runProg_llenado+0x244>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f040 80f1 	bne.w	80025e0 <runProg_llenado+0x394>
						fecha_llenadoOff = get_fecha();
 80023fe:	f000 fa41 	bl	8002884 <get_fecha>
 8002402:	4602      	mov	r2, r0
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <runProg_llenado+0x260>)
 8002406:	4611      	mov	r1, r2
 8002408:	7019      	strb	r1, [r3, #0]
 800240a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800240e:	7059      	strb	r1, [r3, #1]
 8002410:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8002414:	7099      	strb	r1, [r3, #2]
 8002416:	f3c2 6207 	ubfx	r2, r2, #24, #8
 800241a:	70da      	strb	r2, [r3, #3]
						hora_llenadoOff = get_hora();
 800241c:	f000 fa18 	bl	8002850 <get_hora>
 8002420:	4602      	mov	r2, r0
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <runProg_llenado+0x264>)
 8002424:	4611      	mov	r1, r2
 8002426:	7019      	strb	r1, [r3, #0]
 8002428:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800242c:	7059      	strb	r1, [r3, #1]
 800242e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8002432:	709a      	strb	r2, [r3, #2]
						hora_llenadoOff.Minutes += tiempoLlenado_OFF;
 8002434:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <runProg_llenado+0x264>)
 8002436:	785a      	ldrb	r2, [r3, #1]
 8002438:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <runProg_llenado+0x268>)
 800243a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4413      	add	r3, r2
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <runProg_llenado+0x264>)
 8002446:	705a      	strb	r2, [r3, #1]
						if (hora_llenadoOff.Minutes > 59) {
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <runProg_llenado+0x264>)
 800244a:	785b      	ldrb	r3, [r3, #1]
 800244c:	2b3b      	cmp	r3, #59	; 0x3b
 800244e:	f240 80c7 	bls.w	80025e0 <runProg_llenado+0x394>
							hora_llenadoOff.Minutes -= 59;
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <runProg_llenado+0x264>)
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	3b3b      	subs	r3, #59	; 0x3b
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <runProg_llenado+0x264>)
 800245c:	705a      	strb	r2, [r3, #1]
							hora_llenadoOff.Hours++;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <runProg_llenado+0x264>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <runProg_llenado+0x264>)
 8002468:	701a      	strb	r2, [r3, #0]
							if (hora_llenadoOff.Hours > 23) {
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <runProg_llenado+0x264>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b17      	cmp	r3, #23
 8002470:	f240 80b6 	bls.w	80025e0 <runProg_llenado+0x394>
								hora_llenadoOff.Hours -= 23;
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <runProg_llenado+0x264>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	3b17      	subs	r3, #23
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <runProg_llenado+0x264>)
 800247e:	701a      	strb	r2, [r3, #0]
								fecha_llenadoOff.Date++;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <runProg_llenado+0x260>)
 8002482:	789b      	ldrb	r3, [r3, #2]
 8002484:	3301      	adds	r3, #1
 8002486:	b2da      	uxtb	r2, r3
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <runProg_llenado+0x260>)
 800248a:	709a      	strb	r2, [r3, #2]
				break;
 800248c:	e0a8      	b.n	80025e0 <runProg_llenado+0x394>
 800248e:	bf00      	nop
 8002490:	20000128 	.word	0x20000128
 8002494:	20000630 	.word	0x20000630
 8002498:	2000060c 	.word	0x2000060c
 800249c:	20000124 	.word	0x20000124
 80024a0:	20000004 	.word	0x20000004
 80024a4:	2000063c 	.word	0x2000063c
 80024a8:	20000650 	.word	0x20000650
 80024ac:	20000620 	.word	0x20000620
 80024b0:	20000614 	.word	0x20000614
 80024b4:	20000126 	.word	0x20000126
					if (fecha_llenadoOff.Date < auxFecha.Date) {
 80024b8:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <runProg_llenado+0x3e4>)
 80024ba:	789a      	ldrb	r2, [r3, #2]
 80024bc:	4b5d      	ldr	r3, [pc, #372]	; (8002634 <runProg_llenado+0x3e8>)
 80024be:	789b      	ldrb	r3, [r3, #2]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d20a      	bcs.n	80024da <runProg_llenado+0x28e>
						setOutput(OUT_rele_napa, 1); //logica positiva
 80024c4:	2101      	movs	r1, #1
 80024c6:	200b      	movs	r0, #11
 80024c8:	f7fe f892 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 80024cc:	2102      	movs	r1, #2
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 fab6 	bl	8002a40 <set_led>
						flag_bombaNapa = 1;
 80024d4:	4b58      	ldr	r3, [pc, #352]	; (8002638 <runProg_llenado+0x3ec>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOff.Hours < auxHora.Hours) {
 80024da:	4b58      	ldr	r3, [pc, #352]	; (800263c <runProg_llenado+0x3f0>)
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	4b58      	ldr	r3, [pc, #352]	; (8002640 <runProg_llenado+0x3f4>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d20a      	bcs.n	80024fc <runProg_llenado+0x2b0>
						setOutput(OUT_rele_napa, 1); //logica positiva
 80024e6:	2101      	movs	r1, #1
 80024e8:	200b      	movs	r0, #11
 80024ea:	f7fe f881 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 80024ee:	2102      	movs	r1, #2
 80024f0:	2001      	movs	r0, #1
 80024f2:	f000 faa5 	bl	8002a40 <set_led>
						flag_bombaNapa = 1;
 80024f6:	4b50      	ldr	r3, [pc, #320]	; (8002638 <runProg_llenado+0x3ec>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOff.Minutes < auxHora.Minutes) {
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <runProg_llenado+0x3f0>)
 80024fe:	785a      	ldrb	r2, [r3, #1]
 8002500:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <runProg_llenado+0x3f4>)
 8002502:	785b      	ldrb	r3, [r3, #1]
 8002504:	429a      	cmp	r2, r3
 8002506:	d20a      	bcs.n	800251e <runProg_llenado+0x2d2>
						setOutput(OUT_rele_napa, 1); //logica positiva
 8002508:	2101      	movs	r1, #1
 800250a:	200b      	movs	r0, #11
 800250c:	f7fe f870 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 8002510:	2102      	movs	r1, #2
 8002512:	2001      	movs	r0, #1
 8002514:	f000 fa94 	bl	8002a40 <set_led>
						flag_bombaNapa = 1;
 8002518:	4b47      	ldr	r3, [pc, #284]	; (8002638 <runProg_llenado+0x3ec>)
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOff.Minutes == auxHora.Minutes) {
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <runProg_llenado+0x3f0>)
 8002520:	785a      	ldrb	r2, [r3, #1]
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <runProg_llenado+0x3f4>)
 8002524:	785b      	ldrb	r3, [r3, #1]
 8002526:	429a      	cmp	r2, r3
 8002528:	d110      	bne.n	800254c <runProg_llenado+0x300>
						if (hora_llenadoOff.Seconds < auxHora.Seconds){
 800252a:	4b44      	ldr	r3, [pc, #272]	; (800263c <runProg_llenado+0x3f0>)
 800252c:	789a      	ldrb	r2, [r3, #2]
 800252e:	4b44      	ldr	r3, [pc, #272]	; (8002640 <runProg_llenado+0x3f4>)
 8002530:	789b      	ldrb	r3, [r3, #2]
 8002532:	429a      	cmp	r2, r3
 8002534:	d20a      	bcs.n	800254c <runProg_llenado+0x300>
							setOutput(OUT_rele_napa, 1); //logica positiva
 8002536:	2101      	movs	r1, #1
 8002538:	200b      	movs	r0, #11
 800253a:	f7fe f859 	bl	80005f0 <setOutput>
							set_led(OUT_led_napa, TITILA_LENTO);
 800253e:	2102      	movs	r1, #2
 8002540:	2001      	movs	r0, #1
 8002542:	f000 fa7d 	bl	8002a40 <set_led>
							flag_bombaNapa = 1;
 8002546:	4b3c      	ldr	r3, [pc, #240]	; (8002638 <runProg_llenado+0x3ec>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
					if (flag_bombaNapa != 0) {
 800254c:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <runProg_llenado+0x3ec>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d047      	beq.n	80025e4 <runProg_llenado+0x398>
						fecha_llenadoOn = get_fecha();
 8002554:	f000 f996 	bl	8002884 <get_fecha>
 8002558:	4602      	mov	r2, r0
 800255a:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <runProg_llenado+0x3f8>)
 800255c:	4611      	mov	r1, r2
 800255e:	7019      	strb	r1, [r3, #0]
 8002560:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002564:	7059      	strb	r1, [r3, #1]
 8002566:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800256a:	7099      	strb	r1, [r3, #2]
 800256c:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8002570:	70da      	strb	r2, [r3, #3]
						hora_llenadoOn = get_hora();
 8002572:	f000 f96d 	bl	8002850 <get_hora>
 8002576:	4602      	mov	r2, r0
 8002578:	4b33      	ldr	r3, [pc, #204]	; (8002648 <runProg_llenado+0x3fc>)
 800257a:	4611      	mov	r1, r2
 800257c:	7019      	strb	r1, [r3, #0]
 800257e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002582:	7059      	strb	r1, [r3, #1]
 8002584:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8002588:	709a      	strb	r2, [r3, #2]
						hora_llenadoOn.Minutes += tiempoLlenado_ON;
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <runProg_llenado+0x3fc>)
 800258c:	785a      	ldrb	r2, [r3, #1]
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <runProg_llenado+0x400>)
 8002590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4413      	add	r3, r2
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <runProg_llenado+0x3fc>)
 800259c:	705a      	strb	r2, [r3, #1]
						if (hora_llenadoOn.Minutes > 59) {
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <runProg_llenado+0x3fc>)
 80025a0:	785b      	ldrb	r3, [r3, #1]
 80025a2:	2b3b      	cmp	r3, #59	; 0x3b
 80025a4:	d91e      	bls.n	80025e4 <runProg_llenado+0x398>
							hora_llenadoOn.Minutes -= 59;
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <runProg_llenado+0x3fc>)
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	3b3b      	subs	r3, #59	; 0x3b
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <runProg_llenado+0x3fc>)
 80025b0:	705a      	strb	r2, [r3, #1]
							hora_llenadoOn.Hours++;
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <runProg_llenado+0x3fc>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <runProg_llenado+0x3fc>)
 80025bc:	701a      	strb	r2, [r3, #0]
							if (hora_llenadoOn.Hours > 23) {
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <runProg_llenado+0x3fc>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b17      	cmp	r3, #23
 80025c4:	d90e      	bls.n	80025e4 <runProg_llenado+0x398>
								hora_llenadoOn.Hours -= 23;
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <runProg_llenado+0x3fc>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	3b17      	subs	r3, #23
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <runProg_llenado+0x3fc>)
 80025d0:	701a      	strb	r2, [r3, #0]
								fecha_llenadoOn.Date++;
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <runProg_llenado+0x3f8>)
 80025d4:	789b      	ldrb	r3, [r3, #2]
 80025d6:	3301      	adds	r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <runProg_llenado+0x3f8>)
 80025dc:	709a      	strb	r2, [r3, #2]
				break;
 80025de:	e001      	b.n	80025e4 <runProg_llenado+0x398>
				break;
 80025e0:	bf00      	nop
 80025e2:	e00e      	b.n	8002602 <runProg_llenado+0x3b6>
				break;
 80025e4:	bf00      	nop
		break;
 80025e6:	e00c      	b.n	8002602 <runProg_llenado+0x3b6>
			setOutput(OUT_rele_napa, 0); //logica positiva
 80025e8:	2100      	movs	r1, #0
 80025ea:	200b      	movs	r0, #11
 80025ec:	f7fe f800 	bl	80005f0 <setOutput>
			set_led(OUT_led_napa, APAGADO);
 80025f0:	2100      	movs	r1, #0
 80025f2:	2001      	movs	r0, #1
 80025f4:	f000 fa24 	bl	8002a40 <set_led>
			status_progLlenado = PROG_IDLE;
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <runProg_llenado+0x404>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
		break;
 80025fe:	e000      	b.n	8002602 <runProg_llenado+0x3b6>
				break;
 8002600:	bf00      	nop
	} //end switch cmd

	if (!HAL_GPIO_ReadPin(IN_nivelAgua_GPIO_Port, IN_nivelAgua_Pin)) { //LOGICA NEGATIVA
 8002602:	2104      	movs	r1, #4
 8002604:	4813      	ldr	r0, [pc, #76]	; (8002654 <runProg_llenado+0x408>)
 8002606:	f002 f9cf 	bl	80049a8 <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <runProg_llenado+0x3d8>
		setOutput(OUT_rele_napa, 0); //logica positiva
 8002610:	2100      	movs	r1, #0
 8002612:	200b      	movs	r0, #11
 8002614:	f7fd ffec 	bl	80005f0 <setOutput>
		set_led(OUT_led_napa, APAGADO);
 8002618:	2100      	movs	r1, #0
 800261a:	2001      	movs	r0, #1
 800261c:	f000 fa10 	bl	8002a40 <set_led>
		return PROG_FINISHED;
 8002620:	2303      	movs	r3, #3
 8002622:	e000      	b.n	8002626 <runProg_llenado+0x3da>
	}
	return PROG_BUSY;
 8002624:	2302      	movs	r3, #2

} //end runProg_llenado()
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000620 	.word	0x20000620
 8002634:	2000063c 	.word	0x2000063c
 8002638:	20000128 	.word	0x20000128
 800263c:	20000614 	.word	0x20000614
 8002640:	20000650 	.word	0x20000650
 8002644:	20000630 	.word	0x20000630
 8002648:	2000060c 	.word	0x2000060c
 800264c:	20000124 	.word	0x20000124
 8002650:	20000004 	.word	0x20000004
 8002654:	40010800 	.word	0x40010800

08002658 <runProg_skimmer>:

T_PROG_OUTPUT runProg_skimmer (T_PROG_CMD cmd){
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	__NOP();
 8002662:	bf00      	nop

	switch (cmd) {
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	3b01      	subs	r3, #1
 8002668:	2b04      	cmp	r3, #4
 800266a:	d84a      	bhi.n	8002702 <runProg_skimmer+0xaa>
 800266c:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <runProg_skimmer+0x1c>)
 800266e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002672:	bf00      	nop
 8002674:	080026d3 	.word	0x080026d3
 8002678:	08002703 	.word	0x08002703
 800267c:	080026b5 	.word	0x080026b5
 8002680:	08002689 	.word	0x08002689
 8002684:	0800269f 	.word	0x0800269f
		case PROG_SET1: //con programa
			status_modoPileta = 1;
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <runProg_skimmer+0xbc>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_BUSY;
 800268e:	4b22      	ldr	r3, [pc, #136]	; (8002718 <runProg_skimmer+0xc0>)
 8002690:	2202      	movs	r2, #2
 8002692:	701a      	strb	r2, [r3, #0]
			set_led(OUT_led_pileta, TITILA_LENTO);
 8002694:	2102      	movs	r1, #2
 8002696:	2003      	movs	r0, #3
 8002698:	f000 f9d2 	bl	8002a40 <set_led>
			break;
 800269c:	e034      	b.n	8002708 <runProg_skimmer+0xb0>
		case PROG_SET2: //sin programa
			status_modoPileta = 2;
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <runProg_skimmer+0xbc>)
 80026a0:	2202      	movs	r2, #2
 80026a2:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_BUSY;
 80026a4:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <runProg_skimmer+0xc0>)
 80026a6:	2202      	movs	r2, #2
 80026a8:	701a      	strb	r2, [r3, #0]
			set_led(OUT_led_pileta, TITILA_RAPIDO);
 80026aa:	2103      	movs	r1, #3
 80026ac:	2003      	movs	r0, #3
 80026ae:	f000 f9c7 	bl	8002a40 <set_led>
			break;
 80026b2:	e029      	b.n	8002708 <runProg_skimmer+0xb0>
		case PROG_STOP:
			setOutput(OUT_rele_pileta, 0); //LOGICA POSITIVA
 80026b4:	2100      	movs	r1, #0
 80026b6:	200d      	movs	r0, #13
 80026b8:	f7fd ff9a 	bl	80005f0 <setOutput>
			set_led(OUT_led_pileta, APAGADO);
 80026bc:	2100      	movs	r1, #0
 80026be:	2003      	movs	r0, #3
 80026c0:	f000 f9be 	bl	8002a40 <set_led>
			status_modoPileta = 0;
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <runProg_skimmer+0xbc>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_IDLE;
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <runProg_skimmer+0xc0>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
			break;
 80026d0:	e01a      	b.n	8002708 <runProg_skimmer+0xb0>
		case PROG_CHECK:
			if (status_progPileta == PROG_IDLE){
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <runProg_skimmer+0xc0>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d015      	beq.n	8002706 <runProg_skimmer+0xae>
				//return PROG_IDLE;
				break;
			}

			switch (status_modoPileta) {
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <runProg_skimmer+0xbc>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d004      	beq.n	80026ec <runProg_skimmer+0x94>
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d007      	beq.n	80026f6 <runProg_skimmer+0x9e>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <runProg_skimmer+0xa8>
					break;
				case 2:
					setOutput(OUT_rele_pileta, 1); //logica positiva
					break;
				default:
					break;
 80026ea:	e00a      	b.n	8002702 <runProg_skimmer+0xaa>
					setOutput(OUT_rele_pileta, 1); //logica positiva
 80026ec:	2101      	movs	r1, #1
 80026ee:	200d      	movs	r0, #13
 80026f0:	f7fd ff7e 	bl	80005f0 <setOutput>
					break;
 80026f4:	e005      	b.n	8002702 <runProg_skimmer+0xaa>
					setOutput(OUT_rele_pileta, 1); //logica positiva
 80026f6:	2101      	movs	r1, #1
 80026f8:	200d      	movs	r0, #13
 80026fa:	f7fd ff79 	bl	80005f0 <setOutput>
					break;
 80026fe:	e000      	b.n	8002702 <runProg_skimmer+0xaa>
					break;
 8002700:	bf00      	nop
			}

		default:
			break;
 8002702:	bf00      	nop
 8002704:	e000      	b.n	8002708 <runProg_skimmer+0xb0>
				break;
 8002706:	bf00      	nop
	} //end switch cmd

	return status_progPileta;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <runProg_skimmer+0xc0>)
 800270a:	781b      	ldrb	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000129 	.word	0x20000129
 8002718:	20000006 	.word	0x20000006

0800271c <runProg_luz>:

T_PROG_OUTPUT runProg_luz (T_PROG_CMD cmd){
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
	__NOP();
 8002726:	bf00      	nop
}
 8002728:	bf00      	nop
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	f107 0310 	add.w	r3, r7, #16
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002748:	4b34      	ldr	r3, [pc, #208]	; (800281c <MX_GPIO_Init+0xe8>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a33      	ldr	r2, [pc, #204]	; (800281c <MX_GPIO_Init+0xe8>)
 800274e:	f043 0310 	orr.w	r3, r3, #16
 8002752:	6193      	str	r3, [r2, #24]
 8002754:	4b31      	ldr	r3, [pc, #196]	; (800281c <MX_GPIO_Init+0xe8>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002760:	4b2e      	ldr	r3, [pc, #184]	; (800281c <MX_GPIO_Init+0xe8>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a2d      	ldr	r2, [pc, #180]	; (800281c <MX_GPIO_Init+0xe8>)
 8002766:	f043 0320 	orr.w	r3, r3, #32
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <MX_GPIO_Init+0xe8>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <MX_GPIO_Init+0xe8>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a27      	ldr	r2, [pc, #156]	; (800281c <MX_GPIO_Init+0xe8>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <MX_GPIO_Init+0xe8>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <MX_GPIO_Init+0xe8>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a21      	ldr	r2, [pc, #132]	; (800281c <MX_GPIO_Init+0xe8>)
 8002796:	f043 0308 	orr.w	r3, r3, #8
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b1f      	ldr	r3, [pc, #124]	; (800281c <MX_GPIO_Init+0xe8>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE_Pin
 80027a8:	2200      	movs	r2, #0
 80027aa:	f248 31e0 	movw	r1, #33760	; 0x83e0
 80027ae:	481c      	ldr	r0, [pc, #112]	; (8002820 <MX_GPIO_Init+0xec>)
 80027b0:	f002 f911 	bl	80049d6 <HAL_GPIO_WritePin>
                          |OUT_PL_Pin|OUT_fila3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_GLCD_RST_Pin|OUT_ST_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 80027b4:	2200      	movs	r2, #0
 80027b6:	f241 0139 	movw	r1, #4153	; 0x1039
 80027ba:	481a      	ldr	r0, [pc, #104]	; (8002824 <MX_GPIO_Init+0xf0>)
 80027bc:	f002 f90b 	bl	80049d6 <HAL_GPIO_WritePin>
                          |OUT_fila0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_nivelAgua_Pin;
 80027c0:	2304      	movs	r3, #4
 80027c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c8:	2301      	movs	r3, #1
 80027ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN_nivelAgua_GPIO_Port, &GPIO_InitStruct);
 80027cc:	f107 0310 	add.w	r3, r7, #16
 80027d0:	4619      	mov	r1, r3
 80027d2:	4813      	ldr	r0, [pc, #76]	; (8002820 <MX_GPIO_Init+0xec>)
 80027d4:	f001 ff8e 	bl	80046f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE_Pin
 80027d8:	f248 33e0 	movw	r3, #33760	; 0x83e0
 80027dc:	613b      	str	r3, [r7, #16]
                          |OUT_PL_Pin|OUT_fila3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027de:	2301      	movs	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	4619      	mov	r1, r3
 80027f0:	480b      	ldr	r0, [pc, #44]	; (8002820 <MX_GPIO_Init+0xec>)
 80027f2:	f001 ff7f 	bl	80046f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_GLCD_RST_Pin|OUT_ST_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 80027f6:	f241 0339 	movw	r3, #4153	; 0x1039
 80027fa:	613b      	str	r3, [r7, #16]
                          |OUT_fila0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fc:	2301      	movs	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2302      	movs	r3, #2
 8002806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	4619      	mov	r1, r3
 800280e:	4805      	ldr	r0, [pc, #20]	; (8002824 <MX_GPIO_Init+0xf0>)
 8002810:	f001 ff70 	bl	80046f4 <HAL_GPIO_Init>

}
 8002814:	bf00      	nop
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	40010800 	.word	0x40010800
 8002824:	40010c00 	.word	0x40010c00

08002828 <update_horaFecha>:
#include "hora_tablero.h"

RTC_TimeTypeDef hora;
RTC_DateTypeDef aux_fecha;

void update_horaFecha (void){
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	 //segun el proyecto "MAQUINA_MD":
	  HAL_RTC_GetTime(&hrtc, &hora, RTC_FORMAT_BIN);
 800282c:	2200      	movs	r2, #0
 800282e:	4905      	ldr	r1, [pc, #20]	; (8002844 <update_horaFecha+0x1c>)
 8002830:	4805      	ldr	r0, [pc, #20]	; (8002848 <update_horaFecha+0x20>)
 8002832:	f002 ffb1 	bl	8005798 <HAL_RTC_GetTime>
	  //HAL_RTC_GetTime(&hrtc, &aux_tiempo, RTC_FORMAT_BIN);
	  HAL_RTC_GetDate(&hrtc, &aux_fecha, RTC_FORMAT_BIN);
 8002836:	2200      	movs	r2, #0
 8002838:	4904      	ldr	r1, [pc, #16]	; (800284c <update_horaFecha+0x24>)
 800283a:	4803      	ldr	r0, [pc, #12]	; (8002848 <update_horaFecha+0x20>)
 800283c:	f003 f93a 	bl	8005ab4 <HAL_RTC_GetDate>
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000654 	.word	0x20000654
 8002848:	2000066c 	.word	0x2000066c
 800284c:	2000014c 	.word	0x2000014c

08002850 <get_hora>:

void set_fecha (void){
	__NOP();
}

RTC_TimeTypeDef get_hora (void){
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
	return hora;
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <get_hora+0x30>)
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	8811      	ldrh	r1, [r2, #0]
 800285c:	7892      	ldrb	r2, [r2, #2]
 800285e:	8019      	strh	r1, [r3, #0]
 8002860:	709a      	strb	r2, [r3, #2]
 8002862:	2300      	movs	r3, #0
 8002864:	793a      	ldrb	r2, [r7, #4]
 8002866:	f362 0307 	bfi	r3, r2, #0, #8
 800286a:	797a      	ldrb	r2, [r7, #5]
 800286c:	f362 230f 	bfi	r3, r2, #8, #8
 8002870:	79ba      	ldrb	r2, [r7, #6]
 8002872:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	20000654 	.word	0x20000654

08002884 <get_fecha>:

RTC_DateTypeDef get_fecha (void){
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
	return aux_fecha;
 800288a:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <get_fecha+0x34>)
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	6810      	ldr	r0, [r2, #0]
 8002890:	6018      	str	r0, [r3, #0]
 8002892:	2300      	movs	r3, #0
 8002894:	793a      	ldrb	r2, [r7, #4]
 8002896:	f362 0307 	bfi	r3, r2, #0, #8
 800289a:	797a      	ldrb	r2, [r7, #5]
 800289c:	f362 230f 	bfi	r3, r2, #8, #8
 80028a0:	79ba      	ldrb	r2, [r7, #6]
 80028a2:	f362 4317 	bfi	r3, r2, #16, #8
 80028a6:	79fa      	ldrb	r2, [r7, #7]
 80028a8:	f362 631f 	bfi	r3, r2, #24, #8
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	2000014c 	.word	0x2000014c

080028bc <update_leds>:

uint8_t demora_rapida = 19; //equivale a 200 ms: (valor + 1)*10ms
uint8_t demora_lenta = 49; //equivale a 500 ms: (valor + 1)*10ms


void update_leds (void){ //LOGICA NEGATIVA
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0

	for (uint8_t i=0; i < 4; i++){
 80028c2:	2300      	movs	r3, #0
 80028c4:	71fb      	strb	r3, [r7, #7]
 80028c6:	e035      	b.n	8002934 <update_leds+0x78>

		switch (status_led[i]) {
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	4a5a      	ldr	r2, [pc, #360]	; (8002a34 <update_leds+0x178>)
 80028cc:	5cd3      	ldrb	r3, [r2, r3]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d828      	bhi.n	8002924 <update_leds+0x68>
 80028d2:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <update_leds+0x1c>)
 80028d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d8:	080028e9 	.word	0x080028e9
 80028dc:	080028f5 	.word	0x080028f5
 80028e0:	08002901 	.word	0x08002901
 80028e4:	08002913 	.word	0x08002913
			case APAGADO:
				setOutput(i, 0); //APAGA LED
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fe7f 	bl	80005f0 <setOutput>
			break;
 80028f2:	e01c      	b.n	800292e <update_leds+0x72>
			case PRENDIDO:
				setOutput(i, 1); //PRENDE LED
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	2101      	movs	r1, #1
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fe79 	bl	80005f0 <setOutput>
			break;
 80028fe:	e016      	b.n	800292e <update_leds+0x72>
			case TITILA_LENTO:
				if (!demora_lenta){
 8002900:	4b4d      	ldr	r3, [pc, #308]	; (8002a38 <update_leds+0x17c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10f      	bne.n	8002928 <update_leds+0x6c>
					toggleOutput (i);
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fe9c 	bl	8000648 <toggleOutput>
					break;
 8002910:	e00d      	b.n	800292e <update_leds+0x72>
				}
			break;
			case TITILA_RAPIDO:
				if (!demora_rapida){
 8002912:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <update_leds+0x180>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d108      	bne.n	800292c <update_leds+0x70>
					toggleOutput (i);
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fe93 	bl	8000648 <toggleOutput>
					break;
 8002922:	e004      	b.n	800292e <update_leds+0x72>
				}
			break;
			default:
			break;
 8002924:	bf00      	nop
 8002926:	e002      	b.n	800292e <update_leds+0x72>
			break;
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <update_leds+0x72>
			break;
 800292c:	bf00      	nop
	for (uint8_t i=0; i < 4; i++){
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	3301      	adds	r3, #1
 8002932:	71fb      	strb	r3, [r7, #7]
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d9c6      	bls.n	80028c8 <update_leds+0xc>
		} //end switch status_led

	} //end for uint8_t i...

	switch (status_led[14]) {
 800293a:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <update_leds+0x178>)
 800293c:	7b9b      	ldrb	r3, [r3, #14]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d824      	bhi.n	800298c <update_leds+0xd0>
 8002942:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <update_leds+0x8c>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	08002959 	.word	0x08002959
 800294c:	08002963 	.word	0x08002963
 8002950:	0800296d 	.word	0x0800296d
 8002954:	0800297d 	.word	0x0800297d
		case APAGADO:
			setOutput(OUT_led_luces, 0); //APAGA LED
 8002958:	2100      	movs	r1, #0
 800295a:	200e      	movs	r0, #14
 800295c:	f7fd fe48 	bl	80005f0 <setOutput>
		break;
 8002960:	e019      	b.n	8002996 <update_leds+0xda>
		case PRENDIDO:
			setOutput(OUT_led_luces, 1); //PRENDE LED
 8002962:	2101      	movs	r1, #1
 8002964:	200e      	movs	r0, #14
 8002966:	f7fd fe43 	bl	80005f0 <setOutput>
		break;
 800296a:	e014      	b.n	8002996 <update_leds+0xda>
		case TITILA_LENTO:
			if (!demora_lenta){
 800296c:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <update_leds+0x17c>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10d      	bne.n	8002990 <update_leds+0xd4>
				toggleOutput (OUT_led_luces);
 8002974:	200e      	movs	r0, #14
 8002976:	f7fd fe67 	bl	8000648 <toggleOutput>
				break;
 800297a:	e00c      	b.n	8002996 <update_leds+0xda>
			}
		break;
		case TITILA_RAPIDO:
			if (!demora_rapida){
 800297c:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <update_leds+0x180>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <update_leds+0xd8>
				toggleOutput (OUT_led_luces);
 8002984:	200e      	movs	r0, #14
 8002986:	f7fd fe5f 	bl	8000648 <toggleOutput>
				break;
 800298a:	e004      	b.n	8002996 <update_leds+0xda>
			}
		break;
		default:
		break;
 800298c:	bf00      	nop
 800298e:	e002      	b.n	8002996 <update_leds+0xda>
		break;
 8002990:	bf00      	nop
 8002992:	e000      	b.n	8002996 <update_leds+0xda>
		break;
 8002994:	bf00      	nop
	} //end switch status_led

	switch (status_led[15]) {
 8002996:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <update_leds+0x178>)
 8002998:	7bdb      	ldrb	r3, [r3, #15]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d824      	bhi.n	80029e8 <update_leds+0x12c>
 800299e:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <update_leds+0xe8>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029bf 	.word	0x080029bf
 80029ac:	080029c9 	.word	0x080029c9
 80029b0:	080029d9 	.word	0x080029d9
		case APAGADO:
			setOutput(OUT_led_tomas, 0); //APAGA LED
 80029b4:	2100      	movs	r1, #0
 80029b6:	200f      	movs	r0, #15
 80029b8:	f7fd fe1a 	bl	80005f0 <setOutput>
		break;
 80029bc:	e019      	b.n	80029f2 <update_leds+0x136>
		case PRENDIDO:
			setOutput(OUT_led_tomas, 1); //PRENDE LED
 80029be:	2101      	movs	r1, #1
 80029c0:	200f      	movs	r0, #15
 80029c2:	f7fd fe15 	bl	80005f0 <setOutput>
		break;
 80029c6:	e014      	b.n	80029f2 <update_leds+0x136>
		case TITILA_LENTO:
			if (!demora_lenta){
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <update_leds+0x17c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10d      	bne.n	80029ec <update_leds+0x130>
				toggleOutput (OUT_led_tomas);
 80029d0:	200f      	movs	r0, #15
 80029d2:	f7fd fe39 	bl	8000648 <toggleOutput>
				break;
 80029d6:	e00c      	b.n	80029f2 <update_leds+0x136>
			}
		break;
		case TITILA_RAPIDO:
			if (!demora_rapida){
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <update_leds+0x180>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <update_leds+0x134>
				toggleOutput (OUT_led_tomas);
 80029e0:	200f      	movs	r0, #15
 80029e2:	f7fd fe31 	bl	8000648 <toggleOutput>
				break;
 80029e6:	e004      	b.n	80029f2 <update_leds+0x136>
			}
		break;
		default:
		break;
 80029e8:	bf00      	nop
 80029ea:	e002      	b.n	80029f2 <update_leds+0x136>
		break;
 80029ec:	bf00      	nop
 80029ee:	e000      	b.n	80029f2 <update_leds+0x136>
		break;
 80029f0:	bf00      	nop
	} //end switch status_led

	if (demora_lenta != 0){
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <update_leds+0x17c>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <update_leds+0x14c>
		demora_lenta--;
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <update_leds+0x17c>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <update_leds+0x17c>)
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	e002      	b.n	8002a0e <update_leds+0x152>
	}else{
		demora_lenta = 4; // por 10 ms.
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <update_leds+0x17c>)
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	701a      	strb	r2, [r3, #0]
	}

	if (demora_rapida != 0){
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <update_leds+0x180>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <update_leds+0x168>
		demora_rapida--;
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <update_leds+0x180>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <update_leds+0x180>)
 8002a20:	701a      	strb	r2, [r3, #0]
	}else{
		demora_rapida = 0; // por 10 ms.
	}

} //end update_leds()
 8002a22:	e002      	b.n	8002a2a <update_leds+0x16e>
		demora_rapida = 0; // por 10 ms.
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <update_leds+0x180>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
} //end update_leds()
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	2000013c 	.word	0x2000013c
 8002a38:	20000009 	.word	0x20000009
 8002a3c:	20000008 	.word	0x20000008

08002a40 <set_led>:


void set_led (T_POS_OUTPUT l, T_STATUS_LED val){
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	460a      	mov	r2, r1
 8002a4a:	71fb      	strb	r3, [r7, #7]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	71bb      	strb	r3, [r7, #6]

	status_led [l] = val;
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	4904      	ldr	r1, [pc, #16]	; (8002a64 <set_led+0x24>)
 8002a54:	79ba      	ldrb	r2, [r7, #6]
 8002a56:	54ca      	strb	r2, [r1, r3]

} //end set_led()
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	2000013c 	.word	0x2000013c

08002a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a6e:	f001 faa5 	bl	8003fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a72:	f000 f87d 	bl	8002b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a76:	f7ff fe5d 	bl	8002734 <MX_GPIO_Init>
  MX_RTC_Init();
 8002a7a:	f000 ff25 	bl	80038c8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002a7e:	f001 f9f3 	bl	8003e68 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002a82:	f001 f91f 	bl	8003cc4 <MX_TIM2_Init>
  MX_SPI2_Init();
 8002a86:	f000 ffb7 	bl	80039f8 <MX_SPI2_Init>
  MX_ADC1_Init();
 8002a8a:	f7fd ffcf 	bl	8000a2c <MX_ADC1_Init>
  MX_TIM3_Init();
 8002a8e:	f001 f965 	bl	8003d5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  spi_74HC165_init(&hspi2, OUT_PL_GPIO_Port, OUT_PL_Pin, OUT_CE_GPIO_Port, OUT_CE_Pin);
 8002a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <main+0xe8>)
 8002a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9e:	492c      	ldr	r1, [pc, #176]	; (8002b50 <main+0xe8>)
 8002aa0:	482c      	ldr	r0, [pc, #176]	; (8002b54 <main+0xec>)
 8002aa2:	f7fd fb53 	bl	800014c <spi_74HC165_init>
  spi_74HC595_init(&hspi2, OUT_ST_GPIO_Port, OUT_ST_Pin);
 8002aa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002aaa:	492b      	ldr	r1, [pc, #172]	; (8002b58 <main+0xf0>)
 8002aac:	4829      	ldr	r0, [pc, #164]	; (8002b54 <main+0xec>)
 8002aae:	f7fd fbef 	bl	8000290 <spi_74HC595_init>

  HAL_TIM_Base_Start_IT(&htim2); //ticks every 10 ms.
 8002ab2:	482a      	ldr	r0, [pc, #168]	; (8002b5c <main+0xf4>)
 8002ab4:	f004 f97e 	bl	8006db4 <HAL_TIM_Base_Start_IT>


  start_menu();
 8002ab8:	f000 f8de 	bl	8002c78 <start_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  update_teclas();
 8002abc:	f7fd fce6 	bl	800048c <update_teclas>

//	  uint8_t pruebaNumero = getNumber();

	  if (flag_tick){ //ticks every 10 ms.
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <main+0xf8>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d031      	beq.n	8002b2c <main+0xc4>

		  update_horaFecha();
 8002ac8:	f7ff feae 	bl	8002828 <update_horaFecha>
		  check_duracionPulsadores();
 8002acc:	f000 f8ee 	bl	8002cac <check_duracionPulsadores>

		  if (flag_lecturas != 0){ //para demorar las lecturas de teclas cada 30 ms.
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <main+0xfc>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d006      	beq.n	8002ae6 <main+0x7e>
			  flag_lecturas--;
 8002ad8:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <main+0xfc>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <main+0xfc>)
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e004      	b.n	8002af0 <main+0x88>
		  }else{
			  lecturaTeclas();
 8002ae6:	f7fd fc91 	bl	800040c <lecturaTeclas>

			  flag_lecturas = 2;
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <main+0xfc>)
 8002aec:	2202      	movs	r2, #2
 8002aee:	701a      	strb	r2, [r3, #0]
		  }

		  if (flag_salidas != 0){ //para demorar la escritura de las salidas cada 100 ms.
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <main+0x100>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d006      	beq.n	8002b06 <main+0x9e>
			  flag_salidas--;
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <main+0x100>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <main+0x100>)
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e006      	b.n	8002b14 <main+0xac>
		  }else{
			  update_leds();
 8002b06:	f7ff fed9 	bl	80028bc <update_leds>
			  update_outputs();
 8002b0a:	f7fd fdb5 	bl	8000678 <update_outputs>

//			  uint8_t datoPrueba[2] = {0xFF, 0xFF};
//			  spi_74HC595_Transmit(datoPrueba, 2);

			  flag_salidas = 9;
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <main+0x100>)
 8002b10:	2209      	movs	r2, #9
 8002b12:	701a      	strb	r2, [r3, #0]
		  }

		  if (refresh_pantalla != 0){ //refresca cada 300 ms
 8002b14:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <main+0x104>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <main+0xbe>
			  pantallaUpdate();
 8002b1c:	f7fe f9ca 	bl	8000eb4 <pantallaUpdate>
			  refresh_pantalla = 29;
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <main+0x104>)
 8002b22:	221d      	movs	r2, #29
 8002b24:	701a      	strb	r2, [r3, #0]
		  }

		  flag_tick = 0;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <main+0xf8>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
	  }//end if flag_tick

	  check_pulsadores();
 8002b2c:	f000 f8dc 	bl	8002ce8 <check_pulsadores>
	  check_menu();
 8002b30:	f000 f8b2 	bl	8002c98 <check_menu>
	  runProg_hidro(PROG_CHECK);
 8002b34:	2001      	movs	r0, #1
 8002b36:	f7ff fa9b 	bl	8002070 <runProg_hidro>
	  runProg_llenado(PROG_CHECK);
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f7ff fb86 	bl	800224c <runProg_llenado>
	  runProg_luz(PROG_CHECK);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff fdeb 	bl	800271c <runProg_luz>
	  runProg_skimmer(PROG_CHECK);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7ff fd86 	bl	8002658 <runProg_skimmer>
	  update_teclas();
 8002b4c:	e7b6      	b.n	8002abc <main+0x54>
 8002b4e:	bf00      	nop
 8002b50:	40010800 	.word	0x40010800
 8002b54:	20000680 	.word	0x20000680
 8002b58:	40010c00 	.word	0x40010c00
 8002b5c:	20000718 	.word	0x20000718
 8002b60:	20000150 	.word	0x20000150
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000001 	.word	0x20000001
 8002b6c:	2000000a 	.word	0x2000000a

08002b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b094      	sub	sp, #80	; 0x50
 8002b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b7a:	2228      	movs	r2, #40	; 0x28
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f004 fdbe 	bl	8007700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ba0:	2309      	movs	r3, #9
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002baa:	2300      	movs	r3, #0
 8002bac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002bc0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 ff28 	bl	8004a20 <HAL_RCC_OscConfig>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002bd6:	f000 f849 	bl	8002c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bda:	230f      	movs	r3, #15
 8002bdc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bde:	2302      	movs	r3, #2
 8002be0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 f992 	bl	8004f20 <HAL_RCC_ClockConfig>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002c02:	f000 f833 	bl	8002c6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002c06:	2303      	movs	r3, #3
 8002c08:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c0e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c14:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f002 fb1d 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002c24:	f000 f822 	bl	8002c6c <Error_Handler>
  }
}
 8002c28:	bf00      	nop
 8002c2a:	3750      	adds	r7, #80	; 0x50
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d102      	bne.n	8002c48 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tick = 1;
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
	}
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000150 	.word	0x20000150

08002c58 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	__NOP();
 8002c60:	bf00      	nop
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <start_menu>:
T_STATUS_LUCESEXT status_menuLucesExt = LIMITE_TIEMPO_LUCESEXT;

/////////////////////////////////////////
//         FUNCIONES PUBLICAS          //
/////////////////////////////////////////
void start_menu (void){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
	init_pantalla();
 8002c7c:	f7fd ff72 	bl	8000b64 <init_pantalla>
	init_menuPrincipal();
 8002c80:	f000 f8d4 	bl	8002e2c <init_menuPrincipal>
	menuActual = &menu[MENU_PRINCIPAL];
 8002c84:	4b02      	ldr	r3, [pc, #8]	; (8002c90 <start_menu+0x18>)
 8002c86:	4a03      	ldr	r2, [pc, #12]	; (8002c94 <start_menu+0x1c>)
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000658 	.word	0x20000658
 8002c94:	2000000c 	.word	0x2000000c

08002c98 <check_menu>:

void check_menu (void){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	menuActual->accion();
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <check_menu+0x10>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4798      	blx	r3
}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000658 	.word	0x20000658

08002cac <check_duracionPulsadores>:

void check_duracionPulsadores (void){
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0

	if (pulsoLargo_skimmer != 0){
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <check_duracionPulsadores+0x34>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <check_duracionPulsadores+0x18>
		pulsoLargo_skimmer--;
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <check_duracionPulsadores+0x34>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <check_duracionPulsadores+0x34>)
 8002cc2:	701a      	strb	r2, [r3, #0]
	}

	if (pulsoLargo_luz != 0){
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <check_duracionPulsadores+0x38>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <check_duracionPulsadores+0x2c>
		pulsoLargo_luz--;
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <check_duracionPulsadores+0x38>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <check_duracionPulsadores+0x38>)
 8002cd6:	701a      	strb	r2, [r3, #0]
	}
} //end check_duracionPulsadores ()
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	20000152 	.word	0x20000152
 8002ce4:	20000153 	.word	0x20000153

08002ce8 <check_pulsadores>:

void check_pulsadores (void){
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0

	if (getStatBoton(IN_jet) == FALL){
 8002cec:	2014      	movs	r0, #20
 8002cee:	f7fd fbef 	bl	80004d0 <getStatBoton>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d112      	bne.n	8002d1e <check_pulsadores+0x36>
		if (runProg_hidro(PROG_CHECK) == PROG_BUSY){
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f7ff f9b9 	bl	8002070 <runProg_hidro>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d103      	bne.n	8002d0c <check_pulsadores+0x24>
			runProg_hidro(PROG_STOP);
 8002d04:	2003      	movs	r0, #3
 8002d06:	f7ff f9b3 	bl	8002070 <runProg_hidro>
 8002d0a:	e008      	b.n	8002d1e <check_pulsadores+0x36>
		}else if(runProg_hidro(PROG_CHECK) == PROG_IDLE){
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f7ff f9af 	bl	8002070 <runProg_hidro>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d102      	bne.n	8002d1e <check_pulsadores+0x36>
			runProg_hidro(PROG_RUN);
 8002d18:	2002      	movs	r0, #2
 8002d1a:	f7ff f9a9 	bl	8002070 <runProg_hidro>
		}
	} //end if getStatBoton IN_jet

	if (getStatBoton(IN_napa) == FALL){
 8002d1e:	2013      	movs	r0, #19
 8002d20:	f7fd fbd6 	bl	80004d0 <getStatBoton>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d10e      	bne.n	8002d48 <check_pulsadores+0x60>

		menuAux = menuActual;
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <check_pulsadores+0x128>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a39      	ldr	r2, [pc, #228]	; (8002e14 <check_pulsadores+0x12c>)
 8002d30:	6013      	str	r3, [r2, #0]
		menuActual = &menu[MENU_LLENADO];
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <check_pulsadores+0x128>)
 8002d34:	4a38      	ldr	r2, [pc, #224]	; (8002e18 <check_pulsadores+0x130>)
 8002d36:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8002d38:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <check_pulsadores+0x128>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a37      	ldr	r2, [pc, #220]	; (8002e1c <check_pulsadores+0x134>)
 8002d3e:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8002d40:	4b33      	ldr	r3, [pc, #204]	; (8002e10 <check_pulsadores+0x128>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	4798      	blx	r3
	} //end if getStatBoton(IN_napa)...

	if (getStatBoton(IN_tomas) == FALL){
 8002d48:	2010      	movs	r0, #16
 8002d4a:	f7fd fbc1 	bl	80004d0 <getStatBoton>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d11a      	bne.n	8002d8a <check_pulsadores+0xa2>
		if (!flag_tomas){
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <check_pulsadores+0x138>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <check_pulsadores+0x8c>
			setOutput(OUT_rele_tomas, 1); //logica positiva
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	2008      	movs	r0, #8
 8002d60:	f7fd fc46 	bl	80005f0 <setOutput>
			set_led(OUT_led_tomas, PRENDIDO);
 8002d64:	2101      	movs	r1, #1
 8002d66:	200f      	movs	r0, #15
 8002d68:	f7ff fe6a 	bl	8002a40 <set_led>
			flag_tomas = 1;
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <check_pulsadores+0x138>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e00a      	b.n	8002d8a <check_pulsadores+0xa2>
		}else{
			setOutput(OUT_rele_tomas, 0); //logica positiva
 8002d74:	2100      	movs	r1, #0
 8002d76:	2008      	movs	r0, #8
 8002d78:	f7fd fc3a 	bl	80005f0 <setOutput>
			set_led(OUT_led_tomas, APAGADO);
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	200f      	movs	r0, #15
 8002d80:	f7ff fe5e 	bl	8002a40 <set_led>
			flag_tomas = 0;
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <check_pulsadores+0x138>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
		}
	} //end if IN_tomas

	if (getStatBoton(IN_pileta) == FALL){
 8002d8a:	2015      	movs	r0, #21
 8002d8c:	f7fd fba0 	bl	80004d0 <getStatBoton>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d118      	bne.n	8002dc8 <check_pulsadores+0xe0>
		aux_progOutput = runProg_skimmer(PROG_CHECK);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7ff fc5e 	bl	8002658 <runProg_skimmer>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <check_pulsadores+0x13c>)
 8002da2:	701a      	strb	r2, [r3, #0]

		if (aux_progOutput == PROG_IDLE){
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <check_pulsadores+0x13c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d103      	bne.n	8002db4 <check_pulsadores+0xcc>
			pulsoLargo_skimmer = 150; //en 10 * ms.
 8002dac:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <check_pulsadores+0x140>)
 8002dae:	2296      	movs	r2, #150	; 0x96
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e009      	b.n	8002dc8 <check_pulsadores+0xe0>
		}else if(aux_progOutput == PROG_BUSY){
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <check_pulsadores+0x13c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d105      	bne.n	8002dc8 <check_pulsadores+0xe0>
			pulsoLargo_skimmer = 0;
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <check_pulsadores+0x140>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
			runProg_skimmer(PROG_STOP);
 8002dc2:	2003      	movs	r0, #3
 8002dc4:	f7ff fc48 	bl	8002658 <runProg_skimmer>
		}


	} //end if getStatBoton(IN_pileta)

	if (pulsoLargo_skimmer != 0){
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <check_pulsadores+0x140>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d019      	beq.n	8002e04 <check_pulsadores+0x11c>

		if (getStatBoton(IN_pileta) == HIGH_L){ //pulso corto
 8002dd0:	2015      	movs	r0, #21
 8002dd2:	f7fd fb7d 	bl	80004d0 <getStatBoton>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <check_pulsadores+0x100>
			runProg_skimmer(PROG_SET1); //con programa
 8002ddc:	2004      	movs	r0, #4
 8002dde:	f7ff fc3b 	bl	8002658 <runProg_skimmer>
			pulsoLargo_skimmer = 0;
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <check_pulsadores+0x140>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
		}

		if (pulsoLargo_skimmer == 1){ //pulso largo, justo 10 ms antes de terminar
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <check_pulsadores+0x140>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d10c      	bne.n	8002e0a <check_pulsadores+0x122>
			if (getStatBoton(IN_pileta) == LOW_L){ //doble check
 8002df0:	2015      	movs	r0, #21
 8002df2:	f7fd fb6d 	bl	80004d0 <getStatBoton>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d106      	bne.n	8002e0a <check_pulsadores+0x122>
				runProg_skimmer(PROG_SET2); //sin programa
 8002dfc:	2005      	movs	r0, #5
 8002dfe:	f7ff fc2b 	bl	8002658 <runProg_skimmer>

//	if (getStatBoton(IN_pileta) == LOW_L){
//		__NOP();
//	}

} //end check_pulsadores ()
 8002e02:	e002      	b.n	8002e0a <check_pulsadores+0x122>
		if (getStatBoton(IN_pileta) == LOW_L){
 8002e04:	2015      	movs	r0, #21
 8002e06:	f7fd fb63 	bl	80004d0 <getStatBoton>
} //end check_pulsadores ()
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000658 	.word	0x20000658
 8002e14:	20000660 	.word	0x20000660
 8002e18:	2000001c 	.word	0x2000001c
 8002e1c:	2000000c 	.word	0x2000000c
 8002e20:	20000151 	.word	0x20000151
 8002e24:	20000668 	.word	0x20000668
 8002e28:	20000152 	.word	0x20000152

08002e2c <init_menuPrincipal>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

void init_menuPrincipal (void){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af02      	add	r7, sp, #8

	auxFecha = get_fecha();
 8002e32:	f7ff fd27 	bl	8002884 <get_fecha>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <init_menuPrincipal+0x88>)
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	7019      	strb	r1, [r3, #0]
 8002e3e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002e42:	7059      	strb	r1, [r3, #1]
 8002e44:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8002e48:	7099      	strb	r1, [r3, #2]
 8002e4a:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8002e4e:	70da      	strb	r2, [r3, #3]
	auxHora = get_hora();
 8002e50:	f7ff fcfe 	bl	8002850 <get_hora>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <init_menuPrincipal+0x8c>)
 8002e58:	4611      	mov	r1, r2
 8002e5a:	7019      	strb	r1, [r3, #0]
 8002e5c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002e60:	7059      	strb	r1, [r3, #1]
 8002e62:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8002e66:	709a      	strb	r2, [r3, #2]

	lastFecha = auxFecha;
 8002e68:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <init_menuPrincipal+0x90>)
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <init_menuPrincipal+0x88>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6013      	str	r3, [r2, #0]
	lastHora = auxHora;
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <init_menuPrincipal+0x94>)
 8002e72:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <init_menuPrincipal+0x8c>)
 8002e74:	8811      	ldrh	r1, [r2, #0]
 8002e76:	7892      	ldrb	r2, [r2, #2]
 8002e78:	8019      	strh	r1, [r3, #0]
 8002e7a:	709a      	strb	r2, [r3, #2]

	sprintf(texto, "%02i  %02i:%02i:%02i", auxFecha.Date, auxHora.Hours, auxHora.Minutes, auxHora.Seconds );
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <init_menuPrincipal+0x88>)
 8002e7e:	789b      	ldrb	r3, [r3, #2]
 8002e80:	4619      	mov	r1, r3
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <init_menuPrincipal+0x8c>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <init_menuPrincipal+0x8c>)
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <init_menuPrincipal+0x8c>)
 8002e90:	789b      	ldrb	r3, [r3, #2]
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	9200      	str	r2, [sp, #0]
 8002e96:	4603      	mov	r3, r0
 8002e98:	460a      	mov	r2, r1
 8002e9a:	490a      	ldr	r1, [pc, #40]	; (8002ec4 <init_menuPrincipal+0x98>)
 8002e9c:	480a      	ldr	r0, [pc, #40]	; (8002ec8 <init_menuPrincipal+0x9c>)
 8002e9e:	f004 fc37 	bl	8007710 <siprintf>

	set_pantalla(PANT_init_menuPrincipal);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fd fe66 	bl	8000b74 <set_pantalla>
//	menuActual = &menu[MENU_PRINCIPAL];

	setTexto_pantalla(texto);
 8002ea8:	4807      	ldr	r0, [pc, #28]	; (8002ec8 <init_menuPrincipal+0x9c>)
 8002eaa:	f7fd fff5 	bl	8000e98 <setTexto_pantalla>
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	2000063c 	.word	0x2000063c
 8002eb8:	20000650 	.word	0x20000650
 8002ebc:	20000664 	.word	0x20000664
 8002ec0:	2000065c 	.word	0x2000065c
 8002ec4:	080081c8 	.word	0x080081c8
 8002ec8:	200005f4 	.word	0x200005f4

08002ecc <init_setLlenado>:


void init_setLlenado (void){
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0

	set_pantalla(PANT_init_setLlenado);
 8002ed0:	2006      	movs	r0, #6
 8002ed2:	f7fd fe4f 	bl	8000b74 <set_pantalla>
	status_menuSetLlenado = ELIJE_ON_OFF_LLENADO;
 8002ed6:	4b02      	ldr	r3, [pc, #8]	; (8002ee0 <init_setLlenado+0x14>)
 8002ed8:	2206      	movs	r2, #6
 8002eda:	701a      	strb	r2, [r3, #0]

} //end init_llenado()
 8002edc:	bf00      	nop
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	2000008c 	.word	0x2000008c

08002ee4 <init_llenado>:


void init_llenado (void){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <init_llenado+0x44>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d010      	beq.n	8002f12 <init_llenado+0x2e>
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d00a      	beq.n	8002f0a <init_llenado+0x26>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d000      	beq.n	8002efa <init_llenado+0x16>
		break;
		case CONECTE_SENSOR:
			set_pantalla(PANT_CONECTE_SENSOR);
			set_led(OUT_led_napa, PRENDIDO);
		default:
		break;
 8002ef8:	e012      	b.n	8002f20 <init_llenado+0x3c>
			set_led(OUT_led_napa, PRENDIDO);
 8002efa:	2101      	movs	r1, #1
 8002efc:	2001      	movs	r0, #1
 8002efe:	f7ff fd9f 	bl	8002a40 <set_led>
			set_pantalla(PANT_sensor_conectado);
 8002f02:	2001      	movs	r0, #1
 8002f04:	f7fd fe36 	bl	8000b74 <set_pantalla>
		break;
 8002f08:	e00b      	b.n	8002f22 <init_llenado+0x3e>
			set_pantalla(PANT_llenando_terminar);
 8002f0a:	2002      	movs	r0, #2
 8002f0c:	f7fd fe32 	bl	8000b74 <set_pantalla>
		break;
 8002f10:	e007      	b.n	8002f22 <init_llenado+0x3e>
			set_pantalla(PANT_CONECTE_SENSOR);
 8002f12:	200a      	movs	r0, #10
 8002f14:	f7fd fe2e 	bl	8000b74 <set_pantalla>
			set_led(OUT_led_napa, PRENDIDO);
 8002f18:	2101      	movs	r1, #1
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f7ff fd90 	bl	8002a40 <set_led>
		break;
 8002f20:	bf00      	nop
	} //end switch status_menuTablero

} //end init_llenado()
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000155 	.word	0x20000155

08002f2c <init_skimmer>:


void init_skimmer (void){
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_skimmer);
 8002f30:	2003      	movs	r0, #3
 8002f32:	f7fd fe1f 	bl	8000b74 <set_pantalla>
	status_menuSkimmer = COMPRUEBE_BOMBA;
 8002f36:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <init_skimmer+0x14>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000156 	.word	0x20000156

08002f44 <init_hidro>:


void init_hidro (void){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_hidro);
 8002f48:	2004      	movs	r0, #4
 8002f4a:	f7fd fe13 	bl	8000b74 <set_pantalla>
	status_menuHidro = ELIJE_TIEMPO_HIDRO;
 8002f4e:	4b02      	ldr	r3, [pc, #8]	; (8002f58 <init_hidro+0x14>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000157 	.word	0x20000157

08002f5c <init_lucesExt>:


void init_lucesExt (void){
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_lucesExt);
 8002f60:	2005      	movs	r0, #5
 8002f62:	f7fd fe07 	bl	8000b74 <set_pantalla>
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <init_lucesLed>:


void init_lucesLed (void){
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0

}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <init_config>:


void init_config (void){
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0

}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
	...

08002f84 <acc_menuPrincipal>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

void acc_menuPrincipal (void){
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af02      	add	r7, sp, #8
//		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
//		menuActual->inicia_menu();
//		return;
//	}

	if (getStatBoton(IN_jet)==FALL){
 8002f8a:	2014      	movs	r0, #20
 8002f8c:	f7fd faa0 	bl	80004d0 <getStatBoton>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d100      	bne.n	8002f98 <acc_menuPrincipal+0x14>
		__NOP();
 8002f96:	bf00      	nop
	}

	if (getStatBoton(IN_A)==FALL){
 8002f98:	2003      	movs	r0, #3
 8002f9a:	f7fd fa99 	bl	80004d0 <getStatBoton>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d10e      	bne.n	8002fc2 <acc_menuPrincipal+0x3e>
		menuAux = menuActual;
 8002fa4:	4b85      	ldr	r3, [pc, #532]	; (80031bc <acc_menuPrincipal+0x238>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a85      	ldr	r2, [pc, #532]	; (80031c0 <acc_menuPrincipal+0x23c>)
 8002faa:	6013      	str	r3, [r2, #0]
		menuActual = &menu[MENU_SET_LLENADO];
 8002fac:	4b83      	ldr	r3, [pc, #524]	; (80031bc <acc_menuPrincipal+0x238>)
 8002fae:	4a85      	ldr	r2, [pc, #532]	; (80031c4 <acc_menuPrincipal+0x240>)
 8002fb0:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8002fb2:	4b82      	ldr	r3, [pc, #520]	; (80031bc <acc_menuPrincipal+0x238>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a84      	ldr	r2, [pc, #528]	; (80031c8 <acc_menuPrincipal+0x244>)
 8002fb8:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8002fba:	4b80      	ldr	r3, [pc, #512]	; (80031bc <acc_menuPrincipal+0x238>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4798      	blx	r3
	} //end if getStatBoton(IN_A)

	if (getStatBoton(IN_B)==FALL){
 8002fc2:	2007      	movs	r0, #7
 8002fc4:	f7fd fa84 	bl	80004d0 <getStatBoton>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d10b      	bne.n	8002fe6 <acc_menuPrincipal+0x62>
		menuActual = &menu[MENU_HIDRO];
 8002fce:	4b7b      	ldr	r3, [pc, #492]	; (80031bc <acc_menuPrincipal+0x238>)
 8002fd0:	4a7e      	ldr	r2, [pc, #504]	; (80031cc <acc_menuPrincipal+0x248>)
 8002fd2:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8002fd4:	4b79      	ldr	r3, [pc, #484]	; (80031bc <acc_menuPrincipal+0x238>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a7b      	ldr	r2, [pc, #492]	; (80031c8 <acc_menuPrincipal+0x244>)
 8002fda:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8002fdc:	4b77      	ldr	r3, [pc, #476]	; (80031bc <acc_menuPrincipal+0x238>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4798      	blx	r3
		return;
 8002fe4:	e0e7      	b.n	80031b6 <acc_menuPrincipal+0x232>
	} //end if getStatBoton(IN_B)

	if (getStatBoton(IN_C)==FALL){
 8002fe6:	200b      	movs	r0, #11
 8002fe8:	f7fd fa72 	bl	80004d0 <getStatBoton>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d10b      	bne.n	800300a <acc_menuPrincipal+0x86>
		menuActual = &menu[MENU_SKIMMER];
 8002ff2:	4b72      	ldr	r3, [pc, #456]	; (80031bc <acc_menuPrincipal+0x238>)
 8002ff4:	4a76      	ldr	r2, [pc, #472]	; (80031d0 <acc_menuPrincipal+0x24c>)
 8002ff6:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8002ff8:	4b70      	ldr	r3, [pc, #448]	; (80031bc <acc_menuPrincipal+0x238>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a72      	ldr	r2, [pc, #456]	; (80031c8 <acc_menuPrincipal+0x244>)
 8002ffe:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8003000:	4b6e      	ldr	r3, [pc, #440]	; (80031bc <acc_menuPrincipal+0x238>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	4798      	blx	r3
		return;
 8003008:	e0d5      	b.n	80031b6 <acc_menuPrincipal+0x232>
	}

	if (getStatBoton(IN_D)==FALL){
 800300a:	200f      	movs	r0, #15
 800300c:	f7fd fa60 	bl	80004d0 <getStatBoton>
 8003010:	4603      	mov	r3, r0
 8003012:	2b02      	cmp	r3, #2
 8003014:	d10b      	bne.n	800302e <acc_menuPrincipal+0xaa>
		menuActual = &menu[MENU_LUCES_EXT];
 8003016:	4b69      	ldr	r3, [pc, #420]	; (80031bc <acc_menuPrincipal+0x238>)
 8003018:	4a6e      	ldr	r2, [pc, #440]	; (80031d4 <acc_menuPrincipal+0x250>)
 800301a:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 800301c:	4b67      	ldr	r3, [pc, #412]	; (80031bc <acc_menuPrincipal+0x238>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a69      	ldr	r2, [pc, #420]	; (80031c8 <acc_menuPrincipal+0x244>)
 8003022:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8003024:	4b65      	ldr	r3, [pc, #404]	; (80031bc <acc_menuPrincipal+0x238>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	4798      	blx	r3
		return;
 800302c:	e0c3      	b.n	80031b6 <acc_menuPrincipal+0x232>
	}

	if (runProg_llenado(PROG_CHECK) == PROG_FINISHED){
 800302e:	2001      	movs	r0, #1
 8003030:	f7ff f90c 	bl	800224c <runProg_llenado>
 8003034:	4603      	mov	r3, r0
 8003036:	2b03      	cmp	r3, #3
 8003038:	d10a      	bne.n	8003050 <acc_menuPrincipal+0xcc>
		menuActual = &menu[MENU_LLENADO];
 800303a:	4b60      	ldr	r3, [pc, #384]	; (80031bc <acc_menuPrincipal+0x238>)
 800303c:	4a66      	ldr	r2, [pc, #408]	; (80031d8 <acc_menuPrincipal+0x254>)
 800303e:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8003040:	4b5e      	ldr	r3, [pc, #376]	; (80031bc <acc_menuPrincipal+0x238>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a60      	ldr	r2, [pc, #384]	; (80031c8 <acc_menuPrincipal+0x244>)
 8003046:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8003048:	4b5c      	ldr	r3, [pc, #368]	; (80031bc <acc_menuPrincipal+0x238>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	4798      	blx	r3
	}


	//prueba hora

	auxFecha = get_fecha();
 8003050:	f7ff fc18 	bl	8002884 <get_fecha>
 8003054:	4602      	mov	r2, r0
 8003056:	4b61      	ldr	r3, [pc, #388]	; (80031dc <acc_menuPrincipal+0x258>)
 8003058:	4611      	mov	r1, r2
 800305a:	7019      	strb	r1, [r3, #0]
 800305c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003060:	7059      	strb	r1, [r3, #1]
 8003062:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8003066:	7099      	strb	r1, [r3, #2]
 8003068:	f3c2 6207 	ubfx	r2, r2, #24, #8
 800306c:	70da      	strb	r2, [r3, #3]
	auxHora = get_hora();
 800306e:	f7ff fbef 	bl	8002850 <get_hora>
 8003072:	4602      	mov	r2, r0
 8003074:	4b5a      	ldr	r3, [pc, #360]	; (80031e0 <acc_menuPrincipal+0x25c>)
 8003076:	4611      	mov	r1, r2
 8003078:	7019      	strb	r1, [r3, #0]
 800307a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800307e:	7059      	strb	r1, [r3, #1]
 8003080:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8003084:	709a      	strb	r2, [r3, #2]

	if (lastFecha.Date < auxFecha.Date) {
 8003086:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <acc_menuPrincipal+0x260>)
 8003088:	789a      	ldrb	r2, [r3, #2]
 800308a:	4b54      	ldr	r3, [pc, #336]	; (80031dc <acc_menuPrincipal+0x258>)
 800308c:	789b      	ldrb	r3, [r3, #2]
 800308e:	429a      	cmp	r2, r3
 8003090:	d21f      	bcs.n	80030d2 <acc_menuPrincipal+0x14e>
		lastFecha = auxFecha;
 8003092:	4a54      	ldr	r2, [pc, #336]	; (80031e4 <acc_menuPrincipal+0x260>)
 8003094:	4b51      	ldr	r3, [pc, #324]	; (80031dc <acc_menuPrincipal+0x258>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6013      	str	r3, [r2, #0]
		lastHora = auxHora;
 800309a:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <acc_menuPrincipal+0x264>)
 800309c:	4a50      	ldr	r2, [pc, #320]	; (80031e0 <acc_menuPrincipal+0x25c>)
 800309e:	8811      	ldrh	r1, [r2, #0]
 80030a0:	7892      	ldrb	r2, [r2, #2]
 80030a2:	8019      	strh	r1, [r3, #0]
 80030a4:	709a      	strb	r2, [r3, #2]
		sprintf(texto, "%02i  %02i:%02i:%02i", auxFecha.Date, auxHora.Hours, auxHora.Minutes, auxHora.Seconds );
 80030a6:	4b4d      	ldr	r3, [pc, #308]	; (80031dc <acc_menuPrincipal+0x258>)
 80030a8:	789b      	ldrb	r3, [r3, #2]
 80030aa:	4619      	mov	r1, r3
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <acc_menuPrincipal+0x25c>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <acc_menuPrincipal+0x25c>)
 80030b4:	785b      	ldrb	r3, [r3, #1]
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <acc_menuPrincipal+0x25c>)
 80030ba:	789b      	ldrb	r3, [r3, #2]
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	4603      	mov	r3, r0
 80030c2:	460a      	mov	r2, r1
 80030c4:	4949      	ldr	r1, [pc, #292]	; (80031ec <acc_menuPrincipal+0x268>)
 80030c6:	484a      	ldr	r0, [pc, #296]	; (80031f0 <acc_menuPrincipal+0x26c>)
 80030c8:	f004 fb22 	bl	8007710 <siprintf>
		setTexto_pantalla(texto);
 80030cc:	4848      	ldr	r0, [pc, #288]	; (80031f0 <acc_menuPrincipal+0x26c>)
 80030ce:	f7fd fee3 	bl	8000e98 <setTexto_pantalla>
	}

	if (lastHora.Hours < auxHora.Hours) {
 80030d2:	4b45      	ldr	r3, [pc, #276]	; (80031e8 <acc_menuPrincipal+0x264>)
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <acc_menuPrincipal+0x25c>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d21f      	bcs.n	800311e <acc_menuPrincipal+0x19a>
		lastFecha = auxFecha;
 80030de:	4a41      	ldr	r2, [pc, #260]	; (80031e4 <acc_menuPrincipal+0x260>)
 80030e0:	4b3e      	ldr	r3, [pc, #248]	; (80031dc <acc_menuPrincipal+0x258>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6013      	str	r3, [r2, #0]
		lastHora = auxHora;
 80030e6:	4b40      	ldr	r3, [pc, #256]	; (80031e8 <acc_menuPrincipal+0x264>)
 80030e8:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <acc_menuPrincipal+0x25c>)
 80030ea:	8811      	ldrh	r1, [r2, #0]
 80030ec:	7892      	ldrb	r2, [r2, #2]
 80030ee:	8019      	strh	r1, [r3, #0]
 80030f0:	709a      	strb	r2, [r3, #2]
		sprintf(texto, "%02i  %02i:%02i:%02i", auxFecha.Date, auxHora.Hours, auxHora.Minutes, auxHora.Seconds );
 80030f2:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <acc_menuPrincipal+0x258>)
 80030f4:	789b      	ldrb	r3, [r3, #2]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <acc_menuPrincipal+0x25c>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <acc_menuPrincipal+0x25c>)
 8003100:	785b      	ldrb	r3, [r3, #1]
 8003102:	461a      	mov	r2, r3
 8003104:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <acc_menuPrincipal+0x25c>)
 8003106:	789b      	ldrb	r3, [r3, #2]
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	9200      	str	r2, [sp, #0]
 800310c:	4603      	mov	r3, r0
 800310e:	460a      	mov	r2, r1
 8003110:	4936      	ldr	r1, [pc, #216]	; (80031ec <acc_menuPrincipal+0x268>)
 8003112:	4837      	ldr	r0, [pc, #220]	; (80031f0 <acc_menuPrincipal+0x26c>)
 8003114:	f004 fafc 	bl	8007710 <siprintf>
		setTexto_pantalla(texto);
 8003118:	4835      	ldr	r0, [pc, #212]	; (80031f0 <acc_menuPrincipal+0x26c>)
 800311a:	f7fd febd 	bl	8000e98 <setTexto_pantalla>
	}

	if (lastHora.Minutes < auxHora.Minutes) {
 800311e:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <acc_menuPrincipal+0x264>)
 8003120:	785a      	ldrb	r2, [r3, #1]
 8003122:	4b2f      	ldr	r3, [pc, #188]	; (80031e0 <acc_menuPrincipal+0x25c>)
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	429a      	cmp	r2, r3
 8003128:	d21f      	bcs.n	800316a <acc_menuPrincipal+0x1e6>
		lastFecha = auxFecha;
 800312a:	4a2e      	ldr	r2, [pc, #184]	; (80031e4 <acc_menuPrincipal+0x260>)
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <acc_menuPrincipal+0x258>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6013      	str	r3, [r2, #0]
		lastHora = auxHora;
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <acc_menuPrincipal+0x264>)
 8003134:	4a2a      	ldr	r2, [pc, #168]	; (80031e0 <acc_menuPrincipal+0x25c>)
 8003136:	8811      	ldrh	r1, [r2, #0]
 8003138:	7892      	ldrb	r2, [r2, #2]
 800313a:	8019      	strh	r1, [r3, #0]
 800313c:	709a      	strb	r2, [r3, #2]
		sprintf(texto, "%02i  %02i:%02i:%02i", auxFecha.Date, auxHora.Hours, auxHora.Minutes, auxHora.Seconds);
 800313e:	4b27      	ldr	r3, [pc, #156]	; (80031dc <acc_menuPrincipal+0x258>)
 8003140:	789b      	ldrb	r3, [r3, #2]
 8003142:	4619      	mov	r1, r3
 8003144:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <acc_menuPrincipal+0x25c>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <acc_menuPrincipal+0x25c>)
 800314c:	785b      	ldrb	r3, [r3, #1]
 800314e:	461a      	mov	r2, r3
 8003150:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <acc_menuPrincipal+0x25c>)
 8003152:	789b      	ldrb	r3, [r3, #2]
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	9200      	str	r2, [sp, #0]
 8003158:	4603      	mov	r3, r0
 800315a:	460a      	mov	r2, r1
 800315c:	4923      	ldr	r1, [pc, #140]	; (80031ec <acc_menuPrincipal+0x268>)
 800315e:	4824      	ldr	r0, [pc, #144]	; (80031f0 <acc_menuPrincipal+0x26c>)
 8003160:	f004 fad6 	bl	8007710 <siprintf>
		setTexto_pantalla(texto);
 8003164:	4822      	ldr	r0, [pc, #136]	; (80031f0 <acc_menuPrincipal+0x26c>)
 8003166:	f7fd fe97 	bl	8000e98 <setTexto_pantalla>
	}

	if (lastHora.Seconds < auxHora.Seconds) {
 800316a:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <acc_menuPrincipal+0x264>)
 800316c:	789a      	ldrb	r2, [r3, #2]
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <acc_menuPrincipal+0x25c>)
 8003170:	789b      	ldrb	r3, [r3, #2]
 8003172:	429a      	cmp	r2, r3
 8003174:	d21f      	bcs.n	80031b6 <acc_menuPrincipal+0x232>
		lastFecha = auxFecha;
 8003176:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <acc_menuPrincipal+0x260>)
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <acc_menuPrincipal+0x258>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6013      	str	r3, [r2, #0]
		lastHora = auxHora;
 800317e:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <acc_menuPrincipal+0x264>)
 8003180:	4a17      	ldr	r2, [pc, #92]	; (80031e0 <acc_menuPrincipal+0x25c>)
 8003182:	8811      	ldrh	r1, [r2, #0]
 8003184:	7892      	ldrb	r2, [r2, #2]
 8003186:	8019      	strh	r1, [r3, #0]
 8003188:	709a      	strb	r2, [r3, #2]
		sprintf(texto, "%02i  %02i:%02i:%02i", auxFecha.Date, auxHora.Hours, auxHora.Minutes, auxHora.Seconds);
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <acc_menuPrincipal+0x258>)
 800318c:	789b      	ldrb	r3, [r3, #2]
 800318e:	4619      	mov	r1, r3
 8003190:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <acc_menuPrincipal+0x25c>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <acc_menuPrincipal+0x25c>)
 8003198:	785b      	ldrb	r3, [r3, #1]
 800319a:	461a      	mov	r2, r3
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <acc_menuPrincipal+0x25c>)
 800319e:	789b      	ldrb	r3, [r3, #2]
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	9200      	str	r2, [sp, #0]
 80031a4:	4603      	mov	r3, r0
 80031a6:	460a      	mov	r2, r1
 80031a8:	4910      	ldr	r1, [pc, #64]	; (80031ec <acc_menuPrincipal+0x268>)
 80031aa:	4811      	ldr	r0, [pc, #68]	; (80031f0 <acc_menuPrincipal+0x26c>)
 80031ac:	f004 fab0 	bl	8007710 <siprintf>
		setTexto_pantalla(texto);
 80031b0:	480f      	ldr	r0, [pc, #60]	; (80031f0 <acc_menuPrincipal+0x26c>)
 80031b2:	f7fd fe71 	bl	8000e98 <setTexto_pantalla>
	}


} //end acc_menuPrincipal()
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000658 	.word	0x20000658
 80031c0:	20000660 	.word	0x20000660
 80031c4:	2000002c 	.word	0x2000002c
 80031c8:	2000000c 	.word	0x2000000c
 80031cc:	2000004c 	.word	0x2000004c
 80031d0:	2000003c 	.word	0x2000003c
 80031d4:	2000005c 	.word	0x2000005c
 80031d8:	2000001c 	.word	0x2000001c
 80031dc:	2000063c 	.word	0x2000063c
 80031e0:	20000650 	.word	0x20000650
 80031e4:	20000664 	.word	0x20000664
 80031e8:	2000065c 	.word	0x2000065c
 80031ec:	080081c8 	.word	0x080081c8
 80031f0:	200005f4 	.word	0x200005f4

080031f4 <acc_setLlenado>:


void acc_setLlenado (void){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0

	switch (status_menuSetLlenado) {
 80031f8:	4b38      	ldr	r3, [pc, #224]	; (80032dc <acc_setLlenado+0xe8>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b07      	cmp	r3, #7
 80031fe:	d02f      	beq.n	8003260 <acc_setLlenado+0x6c>
 8003200:	2b08      	cmp	r3, #8
 8003202:	d04a      	beq.n	800329a <acc_setLlenado+0xa6>
 8003204:	2b06      	cmp	r3, #6
 8003206:	d000      	beq.n	800320a <acc_setLlenado+0x16>
					set_pantalla(PANT_init_setLlenado);
				default:
				break;
			} //end switch aux_progOutput
		default:
		break;
 8003208:	e065      	b.n	80032d6 <acc_setLlenado+0xe2>
			if (getStatBoton(IN_1) == FALL) {
 800320a:	2000      	movs	r0, #0
 800320c:	f7fd f960 	bl	80004d0 <getStatBoton>
 8003210:	4603      	mov	r3, r0
 8003212:	2b02      	cmp	r3, #2
 8003214:	d106      	bne.n	8003224 <acc_setLlenado+0x30>
				set_pantalla(PANT_PERIODO_ON_LLENADO);
 8003216:	2007      	movs	r0, #7
 8003218:	f7fd fcac 	bl	8000b74 <set_pantalla>
				status_menuSetLlenado = PERIODO_ON_LLENADO;
 800321c:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <acc_setLlenado+0xe8>)
 800321e:	2207      	movs	r2, #7
 8003220:	701a      	strb	r2, [r3, #0]
				break;
 8003222:	e058      	b.n	80032d6 <acc_setLlenado+0xe2>
			if (getStatBoton(IN_2) == FALL) {
 8003224:	2001      	movs	r0, #1
 8003226:	f7fd f953 	bl	80004d0 <getStatBoton>
 800322a:	4603      	mov	r3, r0
 800322c:	2b02      	cmp	r3, #2
 800322e:	d106      	bne.n	800323e <acc_setLlenado+0x4a>
				set_pantalla(PANT_PERIODO_OFF_LLENADO);
 8003230:	2008      	movs	r0, #8
 8003232:	f7fd fc9f 	bl	8000b74 <set_pantalla>
				status_menuSetLlenado = PERIODO_OFF_LLENADO;
 8003236:	4b29      	ldr	r3, [pc, #164]	; (80032dc <acc_setLlenado+0xe8>)
 8003238:	2208      	movs	r2, #8
 800323a:	701a      	strb	r2, [r3, #0]
				break;
 800323c:	e04b      	b.n	80032d6 <acc_setLlenado+0xe2>
			if (getStatBoton(IN_AST) == FALL) {
 800323e:	200c      	movs	r0, #12
 8003240:	f7fd f946 	bl	80004d0 <getStatBoton>
 8003244:	4603      	mov	r3, r0
 8003246:	2b02      	cmp	r3, #2
 8003248:	d144      	bne.n	80032d4 <acc_setLlenado+0xe0>
				menuActual = &menu[MENU_PRINCIPAL];
 800324a:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <acc_setLlenado+0xec>)
 800324c:	4a25      	ldr	r2, [pc, #148]	; (80032e4 <acc_setLlenado+0xf0>)
 800324e:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <acc_setLlenado+0xec>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	4798      	blx	r3
				status_menuSetLlenado = PREGUNTA_SENSOR;
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <acc_setLlenado+0xe8>)
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
		break;
 800325e:	e039      	b.n	80032d4 <acc_setLlenado+0xe0>
			aux_progOutput = setProg_llenado(PROG_SET1);
 8003260:	2004      	movs	r0, #4
 8003262:	f7fd ff6d 	bl	8001140 <setProg_llenado>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <acc_setLlenado+0xf4>)
 800326c:	701a      	strb	r2, [r3, #0]
			switch (aux_progOutput) {
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <acc_setLlenado+0xf4>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d002      	beq.n	800327c <acc_setLlenado+0x88>
 8003276:	2b03      	cmp	r3, #3
 8003278:	d007      	beq.n	800328a <acc_setLlenado+0x96>
				break;
 800327a:	e00c      	b.n	8003296 <acc_setLlenado+0xa2>
					status_menuSetLlenado = ELIJE_ON_OFF_LLENADO;
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <acc_setLlenado+0xe8>)
 800327e:	2206      	movs	r2, #6
 8003280:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_init_setLlenado);
 8003282:	2006      	movs	r0, #6
 8003284:	f7fd fc76 	bl	8000b74 <set_pantalla>
				break;
 8003288:	e006      	b.n	8003298 <acc_setLlenado+0xa4>
					status_menuSetLlenado = ELIJE_ON_OFF_LLENADO;
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <acc_setLlenado+0xe8>)
 800328c:	2206      	movs	r2, #6
 800328e:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_init_setLlenado);
 8003290:	2006      	movs	r0, #6
 8003292:	f7fd fc6f 	bl	8000b74 <set_pantalla>
				break;
 8003296:	bf00      	nop
		break;
 8003298:	e01d      	b.n	80032d6 <acc_setLlenado+0xe2>
			aux_progOutput = setProg_llenado(PROG_SET2);
 800329a:	2005      	movs	r0, #5
 800329c:	f7fd ff50 	bl	8001140 <setProg_llenado>
 80032a0:	4603      	mov	r3, r0
 80032a2:	461a      	mov	r2, r3
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <acc_setLlenado+0xf4>)
 80032a6:	701a      	strb	r2, [r3, #0]
			switch (aux_progOutput) {
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <acc_setLlenado+0xf4>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d002      	beq.n	80032b6 <acc_setLlenado+0xc2>
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d007      	beq.n	80032c4 <acc_setLlenado+0xd0>
				break;
 80032b4:	e00c      	b.n	80032d0 <acc_setLlenado+0xdc>
					status_menuSetLlenado = ELIJE_ON_OFF_LLENADO;
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <acc_setLlenado+0xe8>)
 80032b8:	2206      	movs	r2, #6
 80032ba:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_init_setLlenado);
 80032bc:	2006      	movs	r0, #6
 80032be:	f7fd fc59 	bl	8000b74 <set_pantalla>
				break;
 80032c2:	e006      	b.n	80032d2 <acc_setLlenado+0xde>
					status_menuSetLlenado = ELIJE_ON_OFF_LLENADO;
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <acc_setLlenado+0xe8>)
 80032c6:	2206      	movs	r2, #6
 80032c8:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_init_setLlenado);
 80032ca:	2006      	movs	r0, #6
 80032cc:	f7fd fc52 	bl	8000b74 <set_pantalla>
				break;
 80032d0:	bf00      	nop
		break;
 80032d2:	e000      	b.n	80032d6 <acc_setLlenado+0xe2>
		break;
 80032d4:	bf00      	nop
	} //end switch status_menuLlenado

} //end acc_setLlenado ()
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	2000008c 	.word	0x2000008c
 80032e0:	20000658 	.word	0x20000658
 80032e4:	2000000c 	.word	0x2000000c
 80032e8:	20000668 	.word	0x20000668

080032ec <acc_llenado>:


void acc_llenado (void){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 80032f0:	4b7e      	ldr	r3, [pc, #504]	; (80034ec <acc_llenado+0x200>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	f200 80ec 	bhi.w	80034d2 <acc_llenado+0x1e6>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <acc_llenado+0x14>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003319 	.word	0x08003319
 8003304:	0800334f 	.word	0x0800334f
 8003308:	0800338f 	.word	0x0800338f
 800330c:	080033cb 	.word	0x080033cb
 8003310:	08003431 	.word	0x08003431
 8003314:	0800348f 	.word	0x0800348f
		case PREGUNTA_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8003318:	200e      	movs	r0, #14
 800331a:	f7fd f8d9 	bl	80004d0 <getStatBoton>
 800331e:	4603      	mov	r3, r0
 8003320:	2b02      	cmp	r3, #2
 8003322:	d106      	bne.n	8003332 <acc_llenado+0x46>
				set_pantalla(PANT_COMPRUEBE_SENSOR);
 8003324:	2009      	movs	r0, #9
 8003326:	f7fd fc25 	bl	8000b74 <set_pantalla>
				status_menuLlenado = COMPRUEBE_SENSOR;
 800332a:	4b70      	ldr	r3, [pc, #448]	; (80034ec <acc_llenado+0x200>)
 800332c:	2202      	movs	r2, #2
 800332e:	701a      	strb	r2, [r3, #0]
				break;
 8003330:	e0da      	b.n	80034e8 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_AST) == FALL) { //niego
 8003332:	200c      	movs	r0, #12
 8003334:	f7fd f8cc 	bl	80004d0 <getStatBoton>
 8003338:	4603      	mov	r3, r0
 800333a:	2b02      	cmp	r3, #2
 800333c:	f040 80cb 	bne.w	80034d6 <acc_llenado+0x1ea>
				set_pantalla(PANT_CONECTE_SENSOR);
 8003340:	200a      	movs	r0, #10
 8003342:	f7fd fc17 	bl	8000b74 <set_pantalla>
				status_menuLlenado = CONECTE_SENSOR;
 8003346:	4b69      	ldr	r3, [pc, #420]	; (80034ec <acc_llenado+0x200>)
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
				break;
 800334c:	e0cc      	b.n	80034e8 <acc_llenado+0x1fc>
			}

		break;
		case CONECTE_SENSOR:

			if (getStatBoton(IN_AST) == FALL) { //volver
 800334e:	200c      	movs	r0, #12
 8003350:	f7fd f8be 	bl	80004d0 <getStatBoton>
 8003354:	4603      	mov	r3, r0
 8003356:	2b02      	cmp	r3, #2
 8003358:	d10b      	bne.n	8003372 <acc_llenado+0x86>
				//vuelve al menu principal
				set_led(OUT_led_napa, APAGADO);
 800335a:	2100      	movs	r1, #0
 800335c:	2001      	movs	r0, #1
 800335e:	f7ff fb6f 	bl	8002a40 <set_led>
				menuActual = &menu[MENU_PRINCIPAL];
 8003362:	4b63      	ldr	r3, [pc, #396]	; (80034f0 <acc_llenado+0x204>)
 8003364:	4a63      	ldr	r2, [pc, #396]	; (80034f4 <acc_llenado+0x208>)
 8003366:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003368:	4b61      	ldr	r3, [pc, #388]	; (80034f0 <acc_llenado+0x204>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4798      	blx	r3
				break;
 8003370:	e0ba      	b.n	80034e8 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8003372:	200e      	movs	r0, #14
 8003374:	f7fd f8ac 	bl	80004d0 <getStatBoton>
 8003378:	4603      	mov	r3, r0
 800337a:	2b02      	cmp	r3, #2
 800337c:	f040 80ad 	bne.w	80034da <acc_llenado+0x1ee>
				set_pantalla(PANT_PREGUNTA_SENSOR);
 8003380:	200b      	movs	r0, #11
 8003382:	f7fd fbf7 	bl	8000b74 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 8003386:	4b59      	ldr	r3, [pc, #356]	; (80034ec <acc_llenado+0x200>)
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
				break;
 800338c:	e0ac      	b.n	80034e8 <acc_llenado+0x1fc>
			}
		break;
		case COMPRUEBE_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 800338e:	200e      	movs	r0, #14
 8003390:	f7fd f89e 	bl	80004d0 <getStatBoton>
 8003394:	4603      	mov	r3, r0
 8003396:	2b02      	cmp	r3, #2
 8003398:	d109      	bne.n	80033ae <acc_llenado+0xc2>
				set_pantalla(PANT_LLENANDO);
 800339a:	200c      	movs	r0, #12
 800339c:	f7fd fbea 	bl	8000b74 <set_pantalla>
				runProg_llenado(PROG_RUN);
 80033a0:	2002      	movs	r0, #2
 80033a2:	f7fe ff53 	bl	800224c <runProg_llenado>
				status_menuLlenado = LLENANDO;
 80033a6:	4b51      	ldr	r3, [pc, #324]	; (80034ec <acc_llenado+0x200>)
 80033a8:	2203      	movs	r2, #3
 80033aa:	701a      	strb	r2, [r3, #0]
				break;
 80033ac:	e09c      	b.n	80034e8 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 80033ae:	200c      	movs	r0, #12
 80033b0:	f7fd f88e 	bl	80004d0 <getStatBoton>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	f040 8091 	bne.w	80034de <acc_llenado+0x1f2>
				set_pantalla(PANT_PREGUNTA_SENSOR);
 80033bc:	200b      	movs	r0, #11
 80033be:	f7fd fbd9 	bl	8000b74 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <acc_llenado+0x200>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
				break;
 80033c8:	e08e      	b.n	80034e8 <acc_llenado+0x1fc>
			}

		break;
		case LLENANDO:
			if (runProg_llenado(PROG_CHECK) == PROG_FINISHED ) { //LOGICA NEGATIVA
 80033ca:	2001      	movs	r0, #1
 80033cc:	f7fe ff3e 	bl	800224c <runProg_llenado>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d10a      	bne.n	80033ec <acc_llenado+0x100>
				set_pantalla(PANT_PILETA_LLENA);
 80033d6:	200d      	movs	r0, #13
 80033d8:	f7fd fbcc 	bl	8000b74 <set_pantalla>
				set_led(OUT_led_napa, APAGADO);
 80033dc:	2100      	movs	r1, #0
 80033de:	2001      	movs	r0, #1
 80033e0:	f7ff fb2e 	bl	8002a40 <set_led>
				status_menuLlenado = PILETA_LLENA;
 80033e4:	4b41      	ldr	r3, [pc, #260]	; (80034ec <acc_llenado+0x200>)
 80033e6:	2205      	movs	r2, #5
 80033e8:	701a      	strb	r2, [r3, #0]
				break;
 80033ea:	e07d      	b.n	80034e8 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 80033ec:	200e      	movs	r0, #14
 80033ee:	f7fd f86f 	bl	80004d0 <getStatBoton>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d10a      	bne.n	800340e <acc_llenado+0x122>
				//vuelve al menu principal
				status_menuLlenado = LLENANDO_CHECK;
 80033f8:	4b3c      	ldr	r3, [pc, #240]	; (80034ec <acc_llenado+0x200>)
 80033fa:	2204      	movs	r2, #4
 80033fc:	701a      	strb	r2, [r3, #0]
				menuActual = &menu[MENU_PRINCIPAL];
 80033fe:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <acc_llenado+0x204>)
 8003400:	4a3c      	ldr	r2, [pc, #240]	; (80034f4 <acc_llenado+0x208>)
 8003402:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003404:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <acc_llenado+0x204>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	4798      	blx	r3
				break;
 800340c:	e06c      	b.n	80034e8 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 800340e:	200c      	movs	r0, #12
 8003410:	f7fd f85e 	bl	80004d0 <getStatBoton>
 8003414:	4603      	mov	r3, r0
 8003416:	2b02      	cmp	r3, #2
 8003418:	d163      	bne.n	80034e2 <acc_llenado+0x1f6>
				//vuelve al menu principal
				status_menuLlenado = LLENANDO_CHECK;
 800341a:	4b34      	ldr	r3, [pc, #208]	; (80034ec <acc_llenado+0x200>)
 800341c:	2204      	movs	r2, #4
 800341e:	701a      	strb	r2, [r3, #0]
				menuActual = &menu[MENU_PRINCIPAL];
 8003420:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <acc_llenado+0x204>)
 8003422:	4a34      	ldr	r2, [pc, #208]	; (80034f4 <acc_llenado+0x208>)
 8003424:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003426:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <acc_llenado+0x204>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4798      	blx	r3
				break;
 800342e:	e05b      	b.n	80034e8 <acc_llenado+0x1fc>
			}
		break;
		case LLENANDO_CHECK:
			if (runProg_llenado(PROG_CHECK) == PROG_FINISHED ) { //LOGICA NEGATIVA
 8003430:	2001      	movs	r0, #1
 8003432:	f7fe ff0b 	bl	800224c <runProg_llenado>
 8003436:	4603      	mov	r3, r0
 8003438:	2b03      	cmp	r3, #3
 800343a:	d106      	bne.n	800344a <acc_llenado+0x15e>
				set_pantalla(PANT_PILETA_LLENA);
 800343c:	200d      	movs	r0, #13
 800343e:	f7fd fb99 	bl	8000b74 <set_pantalla>
				status_menuLlenado = PILETA_LLENA;
 8003442:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <acc_llenado+0x200>)
 8003444:	2205      	movs	r2, #5
 8003446:	701a      	strb	r2, [r3, #0]
				break;
 8003448:	e04e      	b.n	80034e8 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 800344a:	200e      	movs	r0, #14
 800344c:	f7fd f840 	bl	80004d0 <getStatBoton>
 8003450:	4603      	mov	r3, r0
 8003452:	2b02      	cmp	r3, #2
 8003454:	d10d      	bne.n	8003472 <acc_llenado+0x186>
				status_menuLlenado = PREGUNTA_SENSOR;
 8003456:	4b25      	ldr	r3, [pc, #148]	; (80034ec <acc_llenado+0x200>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
				runProg_llenado(PROG_STOP);
 800345c:	2003      	movs	r0, #3
 800345e:	f7fe fef5 	bl	800224c <runProg_llenado>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8003462:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <acc_llenado+0x204>)
 8003464:	4a23      	ldr	r2, [pc, #140]	; (80034f4 <acc_llenado+0x208>)
 8003466:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <acc_llenado+0x204>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4798      	blx	r3
				break;
 8003470:	e03a      	b.n	80034e8 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8003472:	200c      	movs	r0, #12
 8003474:	f7fd f82c 	bl	80004d0 <getStatBoton>
 8003478:	4603      	mov	r3, r0
 800347a:	2b02      	cmp	r3, #2
 800347c:	d133      	bne.n	80034e6 <acc_llenado+0x1fa>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 800347e:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <acc_llenado+0x204>)
 8003480:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <acc_llenado+0x208>)
 8003482:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003484:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <acc_llenado+0x204>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	4798      	blx	r3
				break;
 800348c:	e02c      	b.n	80034e8 <acc_llenado+0x1fc>
			}
		break;
		case PILETA_LLENA:
			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 800348e:	200e      	movs	r0, #14
 8003490:	f7fd f81e 	bl	80004d0 <getStatBoton>
 8003494:	4603      	mov	r3, r0
 8003496:	2b02      	cmp	r3, #2
 8003498:	d10a      	bne.n	80034b0 <acc_llenado+0x1c4>
				status_menuLlenado = PREGUNTA_SENSOR;
 800349a:	4b14      	ldr	r3, [pc, #80]	; (80034ec <acc_llenado+0x200>)
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 80034a0:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <acc_llenado+0x204>)
 80034a2:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <acc_llenado+0x208>)
 80034a4:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <acc_llenado+0x204>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4798      	blx	r3
				break;
 80034ae:	e01b      	b.n	80034e8 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 80034b0:	200c      	movs	r0, #12
 80034b2:	f7fd f80d 	bl	80004d0 <getStatBoton>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d10a      	bne.n	80034d2 <acc_llenado+0x1e6>
				status_menuLlenado = PREGUNTA_SENSOR;
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <acc_llenado+0x200>)
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <acc_llenado+0x204>)
 80034c4:	4a0b      	ldr	r2, [pc, #44]	; (80034f4 <acc_llenado+0x208>)
 80034c6:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <acc_llenado+0x204>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4798      	blx	r3
				break;
 80034d0:	e00a      	b.n	80034e8 <acc_llenado+0x1fc>
			}

		default:
		break;
 80034d2:	bf00      	nop
 80034d4:	e008      	b.n	80034e8 <acc_llenado+0x1fc>
		break;
 80034d6:	bf00      	nop
 80034d8:	e006      	b.n	80034e8 <acc_llenado+0x1fc>
		break;
 80034da:	bf00      	nop
 80034dc:	e004      	b.n	80034e8 <acc_llenado+0x1fc>
		break;
 80034de:	bf00      	nop
 80034e0:	e002      	b.n	80034e8 <acc_llenado+0x1fc>
		break;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <acc_llenado+0x1fc>
		break;
 80034e6:	bf00      	nop
	} //end switch status_menuLlenado

} //end acc_llenado ()
 80034e8:	bf00      	nop
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000155 	.word	0x20000155
 80034f0:	20000658 	.word	0x20000658
 80034f4:	2000000c 	.word	0x2000000c

080034f8 <acc_skimmer>:


void acc_skimmer (void){
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	switch (status_menuSkimmer) {
 80034fc:	4bae      	ldr	r3, [pc, #696]	; (80037b8 <acc_skimmer+0x2c0>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	f200 8157 	bhi.w	80037b4 <acc_skimmer+0x2bc>
 8003506:	a201      	add	r2, pc, #4	; (adr r2, 800350c <acc_skimmer+0x14>)
 8003508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350c:	08003531 	.word	0x08003531
 8003510:	08003569 	.word	0x08003569
 8003514:	080035bb 	.word	0x080035bb
 8003518:	0800360b 	.word	0x0800360b
 800351c:	08003637 	.word	0x08003637
 8003520:	08003663 	.word	0x08003663
 8003524:	080036bd 	.word	0x080036bd
 8003528:	0800370b 	.word	0x0800370b
 800352c:	08003757 	.word	0x08003757
		case COMPRUEBE_BOMBA:
			if (getStatBoton(IN_AST) == FALL) {
 8003530:	200c      	movs	r0, #12
 8003532:	f7fc ffcd 	bl	80004d0 <getStatBoton>
 8003536:	4603      	mov	r3, r0
 8003538:	2b02      	cmp	r3, #2
 800353a:	d107      	bne.n	800354c <acc_skimmer+0x54>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 800353c:	4b9f      	ldr	r3, [pc, #636]	; (80037bc <acc_skimmer+0x2c4>)
 800353e:	4aa0      	ldr	r2, [pc, #640]	; (80037c0 <acc_skimmer+0x2c8>)
 8003540:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003542:	4b9e      	ldr	r3, [pc, #632]	; (80037bc <acc_skimmer+0x2c4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4798      	blx	r3
				break;
 800354a:	e133      	b.n	80037b4 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 800354c:	200e      	movs	r0, #14
 800354e:	f7fc ffbf 	bl	80004d0 <getStatBoton>
 8003552:	4603      	mov	r3, r0
 8003554:	2b02      	cmp	r3, #2
 8003556:	f040 8124 	bne.w	80037a2 <acc_skimmer+0x2aa>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 800355a:	200e      	movs	r0, #14
 800355c:	f7fd fb0a 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 8003560:	4b95      	ldr	r3, [pc, #596]	; (80037b8 <acc_skimmer+0x2c0>)
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
				break;
 8003566:	e125      	b.n	80037b4 <acc_skimmer+0x2bc>
			}
		break;
		case OPCIONES_SKIMMER:
			if (getStatBoton(IN_AST) == FALL) {
 8003568:	200c      	movs	r0, #12
 800356a:	f7fc ffb1 	bl	80004d0 <getStatBoton>
 800356e:	4603      	mov	r3, r0
 8003570:	2b02      	cmp	r3, #2
 8003572:	d107      	bne.n	8003584 <acc_skimmer+0x8c>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8003574:	4b91      	ldr	r3, [pc, #580]	; (80037bc <acc_skimmer+0x2c4>)
 8003576:	4a92      	ldr	r2, [pc, #584]	; (80037c0 <acc_skimmer+0x2c8>)
 8003578:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 800357a:	4b90      	ldr	r3, [pc, #576]	; (80037bc <acc_skimmer+0x2c4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4798      	blx	r3
				break;
 8003582:	e117      	b.n	80037b4 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_1) == FALL) {
 8003584:	2000      	movs	r0, #0
 8003586:	f7fc ffa3 	bl	80004d0 <getStatBoton>
 800358a:	4603      	mov	r3, r0
 800358c:	2b02      	cmp	r3, #2
 800358e:	d106      	bne.n	800359e <acc_skimmer+0xa6>
				set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
 8003590:	200f      	movs	r0, #15
 8003592:	f7fd faef 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
 8003596:	4b88      	ldr	r3, [pc, #544]	; (80037b8 <acc_skimmer+0x2c0>)
 8003598:	2202      	movs	r2, #2
 800359a:	701a      	strb	r2, [r3, #0]
				break;
 800359c:	e10a      	b.n	80037b4 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_2) == FALL) {
 800359e:	2001      	movs	r0, #1
 80035a0:	f7fc ff96 	bl	80004d0 <getStatBoton>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	f040 80fd 	bne.w	80037a6 <acc_skimmer+0x2ae>
				set_pantalla(PANT_ELIJE_PROGRAMA_SKIMMER);
 80035ac:	2010      	movs	r0, #16
 80035ae:	f7fd fae1 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 80035b2:	4b81      	ldr	r3, [pc, #516]	; (80037b8 <acc_skimmer+0x2c0>)
 80035b4:	2205      	movs	r2, #5
 80035b6:	701a      	strb	r2, [r3, #0]
				break;
 80035b8:	e0fc      	b.n	80037b4 <acc_skimmer+0x2bc>
			}
		break;
		case ELIJE_FRECUENCIA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 80035ba:	2000      	movs	r0, #0
 80035bc:	f7fc ff88 	bl	80004d0 <getStatBoton>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d106      	bne.n	80035d4 <acc_skimmer+0xdc>
				set_pantalla(PANT_PERIODO_ON_SKIMMER);
 80035c6:	2011      	movs	r0, #17
 80035c8:	f7fd fad4 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = PERIODO_ON_SKIMMER;
 80035cc:	4b7a      	ldr	r3, [pc, #488]	; (80037b8 <acc_skimmer+0x2c0>)
 80035ce:	2203      	movs	r2, #3
 80035d0:	701a      	strb	r2, [r3, #0]
				break;
 80035d2:	e0ef      	b.n	80037b4 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_2) == FALL) {
 80035d4:	2001      	movs	r0, #1
 80035d6:	f7fc ff7b 	bl	80004d0 <getStatBoton>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d106      	bne.n	80035ee <acc_skimmer+0xf6>
				set_pantalla(PANT_PERIODO_OFF_SKIMMER);
 80035e0:	2012      	movs	r0, #18
 80035e2:	f7fd fac7 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = PERIODO_OFF_SKIMMER;
 80035e6:	4b74      	ldr	r3, [pc, #464]	; (80037b8 <acc_skimmer+0x2c0>)
 80035e8:	2204      	movs	r2, #4
 80035ea:	701a      	strb	r2, [r3, #0]
				break;
 80035ec:	e0e2      	b.n	80037b4 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_AST) == FALL) {
 80035ee:	200c      	movs	r0, #12
 80035f0:	f7fc ff6e 	bl	80004d0 <getStatBoton>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	f040 80d7 	bne.w	80037aa <acc_skimmer+0x2b2>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 80035fc:	200e      	movs	r0, #14
 80035fe:	f7fd fab9 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 8003602:	4b6d      	ldr	r3, [pc, #436]	; (80037b8 <acc_skimmer+0x2c0>)
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
				break;
 8003608:	e0d4      	b.n	80037b4 <acc_skimmer+0x2bc>
			}
		break;
		case PERIODO_ON_SKIMMER:
			//funcion de seteo de periodo on
			aux_progOutput = setProg_skimmer(PROG_SET1);
 800360a:	2004      	movs	r0, #4
 800360c:	f7fd ff28 	bl	8001460 <setProg_skimmer>
 8003610:	4603      	mov	r3, r0
 8003612:	461a      	mov	r2, r3
 8003614:	4b6b      	ldr	r3, [pc, #428]	; (80037c4 <acc_skimmer+0x2cc>)
 8003616:	701a      	strb	r2, [r3, #0]

			switch (aux_progOutput) {
 8003618:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <acc_skimmer+0x2cc>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d002      	beq.n	8003626 <acc_skimmer+0x12e>
 8003620:	2b03      	cmp	r3, #3
 8003622:	d000      	beq.n	8003626 <acc_skimmer+0x12e>
				case PROG_IDLE:
				case PROG_FINISHED:
					status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
					set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
				default:
				break;
 8003624:	e005      	b.n	8003632 <acc_skimmer+0x13a>
					status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
 8003626:	4b64      	ldr	r3, [pc, #400]	; (80037b8 <acc_skimmer+0x2c0>)
 8003628:	2202      	movs	r2, #2
 800362a:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
 800362c:	200f      	movs	r0, #15
 800362e:	f7fd faa1 	bl	8000b74 <set_pantalla>
				break;
 8003632:	bf00      	nop
			} //end switch aux_progOutput
		break;
 8003634:	e0be      	b.n	80037b4 <acc_skimmer+0x2bc>
		case PERIODO_OFF_SKIMMER:
			//funcion de seteo de periodo off
			aux_progOutput = setProg_skimmer(PROG_SET2);
 8003636:	2005      	movs	r0, #5
 8003638:	f7fd ff12 	bl	8001460 <setProg_skimmer>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	4b60      	ldr	r3, [pc, #384]	; (80037c4 <acc_skimmer+0x2cc>)
 8003642:	701a      	strb	r2, [r3, #0]

			switch (aux_progOutput) {
 8003644:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <acc_skimmer+0x2cc>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d002      	beq.n	8003652 <acc_skimmer+0x15a>
 800364c:	2b03      	cmp	r3, #3
 800364e:	d000      	beq.n	8003652 <acc_skimmer+0x15a>
				case PROG_IDLE:
				case PROG_FINISHED:
					status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
					set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
				default:
				break;
 8003650:	e005      	b.n	800365e <acc_skimmer+0x166>
					status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
 8003652:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <acc_skimmer+0x2c0>)
 8003654:	2202      	movs	r2, #2
 8003656:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
 8003658:	200f      	movs	r0, #15
 800365a:	f7fd fa8b 	bl	8000b74 <set_pantalla>
				break;
 800365e:	bf00      	nop
			} //end switch aux_progOutput
		break;
 8003660:	e0a8      	b.n	80037b4 <acc_skimmer+0x2bc>
		case ELIJE_PROGRAMA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8003662:	2000      	movs	r0, #0
 8003664:	f7fc ff34 	bl	80004d0 <getStatBoton>
 8003668:	4603      	mov	r3, r0
 800366a:	2b02      	cmp	r3, #2
 800366c:	d109      	bne.n	8003682 <acc_skimmer+0x18a>
				seleccion_progSkimmer = 1; //modifica el programa 1
 800366e:	4b56      	ldr	r3, [pc, #344]	; (80037c8 <acc_skimmer+0x2d0>)
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
				set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 8003674:	2013      	movs	r0, #19
 8003676:	f7fd fa7d 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 800367a:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <acc_skimmer+0x2c0>)
 800367c:	2206      	movs	r2, #6
 800367e:	701a      	strb	r2, [r3, #0]
				break;
 8003680:	e098      	b.n	80037b4 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_2) == FALL) {
 8003682:	2001      	movs	r0, #1
 8003684:	f7fc ff24 	bl	80004d0 <getStatBoton>
 8003688:	4603      	mov	r3, r0
 800368a:	2b02      	cmp	r3, #2
 800368c:	d109      	bne.n	80036a2 <acc_skimmer+0x1aa>
				seleccion_progSkimmer = 2; //modifica el programa 2
 800368e:	4b4e      	ldr	r3, [pc, #312]	; (80037c8 <acc_skimmer+0x2d0>)
 8003690:	2202      	movs	r2, #2
 8003692:	701a      	strb	r2, [r3, #0]
				set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 8003694:	2013      	movs	r0, #19
 8003696:	f7fd fa6d 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <acc_skimmer+0x2c0>)
 800369c:	2206      	movs	r2, #6
 800369e:	701a      	strb	r2, [r3, #0]
				break;
 80036a0:	e088      	b.n	80037b4 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_AST) == FALL) {
 80036a2:	200c      	movs	r0, #12
 80036a4:	f7fc ff14 	bl	80004d0 <getStatBoton>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d17f      	bne.n	80037ae <acc_skimmer+0x2b6>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 80036ae:	200e      	movs	r0, #14
 80036b0:	f7fd fa60 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 80036b4:	4b40      	ldr	r3, [pc, #256]	; (80037b8 <acc_skimmer+0x2c0>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
				break;
 80036ba:	e07b      	b.n	80037b4 <acc_skimmer+0x2bc>
			}
		break;
		case ELIJE_ON_OFF_HORARIO_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 80036bc:	2000      	movs	r0, #0
 80036be:	f7fc ff07 	bl	80004d0 <getStatBoton>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d106      	bne.n	80036d6 <acc_skimmer+0x1de>
				set_pantalla(PANT_HORARIO_ON_SKIMMER);
 80036c8:	2014      	movs	r0, #20
 80036ca:	f7fd fa53 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = HORARIO_ON_SKIMMER;
 80036ce:	4b3a      	ldr	r3, [pc, #232]	; (80037b8 <acc_skimmer+0x2c0>)
 80036d0:	2207      	movs	r2, #7
 80036d2:	701a      	strb	r2, [r3, #0]
				break;
 80036d4:	e06e      	b.n	80037b4 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_2) == FALL) {
 80036d6:	2001      	movs	r0, #1
 80036d8:	f7fc fefa 	bl	80004d0 <getStatBoton>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d106      	bne.n	80036f0 <acc_skimmer+0x1f8>
				set_pantalla(PANT_HORARIO_OFF_SKIMMER);
 80036e2:	2015      	movs	r0, #21
 80036e4:	f7fd fa46 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = HORARIO_OFF_SKIMMER;
 80036e8:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <acc_skimmer+0x2c0>)
 80036ea:	2208      	movs	r2, #8
 80036ec:	701a      	strb	r2, [r3, #0]
				break;
 80036ee:	e061      	b.n	80037b4 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_AST) == FALL) {
 80036f0:	200c      	movs	r0, #12
 80036f2:	f7fc feed 	bl	80004d0 <getStatBoton>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d15a      	bne.n	80037b2 <acc_skimmer+0x2ba>
				set_pantalla(PANT_ELIJE_PROGRAMA_SKIMMER);
 80036fc:	2010      	movs	r0, #16
 80036fe:	f7fd fa39 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 8003702:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <acc_skimmer+0x2c0>)
 8003704:	2205      	movs	r2, #5
 8003706:	701a      	strb	r2, [r3, #0]
				break;
 8003708:	e054      	b.n	80037b4 <acc_skimmer+0x2bc>
			}
		break;
		case HORARIO_ON_SKIMMER:
			//funcion de seteo de horario on
			switch (seleccion_progSkimmer) {
 800370a:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <acc_skimmer+0x2d0>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d002      	beq.n	8003718 <acc_skimmer+0x220>
 8003712:	2b02      	cmp	r3, #2
 8003714:	d008      	beq.n	8003728 <acc_skimmer+0x230>
					aux_progOutput = setProg_skimmer(PROG_SET3);
				break;
				case 2:
					aux_progOutput = setProg_skimmer(PROG_SET5);
				default:
				break;
 8003716:	e00e      	b.n	8003736 <acc_skimmer+0x23e>
					aux_progOutput = setProg_skimmer(PROG_SET3);
 8003718:	2006      	movs	r0, #6
 800371a:	f7fd fea1 	bl	8001460 <setProg_skimmer>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <acc_skimmer+0x2cc>)
 8003724:	701a      	strb	r2, [r3, #0]
				break;
 8003726:	e007      	b.n	8003738 <acc_skimmer+0x240>
					aux_progOutput = setProg_skimmer(PROG_SET5);
 8003728:	2008      	movs	r0, #8
 800372a:	f7fd fe99 	bl	8001460 <setProg_skimmer>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <acc_skimmer+0x2cc>)
 8003734:	701a      	strb	r2, [r3, #0]
				break;
 8003736:	bf00      	nop
			} //end switch seleccion_progSkimmer

			switch (aux_progOutput) {
 8003738:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <acc_skimmer+0x2cc>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d002      	beq.n	8003746 <acc_skimmer+0x24e>
 8003740:	2b03      	cmp	r3, #3
 8003742:	d000      	beq.n	8003746 <acc_skimmer+0x24e>
				case PROG_IDLE:
				case PROG_FINISHED:
					status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
					set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
				default:
				break;
 8003744:	e005      	b.n	8003752 <acc_skimmer+0x25a>
					status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 8003746:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <acc_skimmer+0x2c0>)
 8003748:	2206      	movs	r2, #6
 800374a:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 800374c:	2013      	movs	r0, #19
 800374e:	f7fd fa11 	bl	8000b74 <set_pantalla>
				break;
 8003752:	bf00      	nop
			} //end switch aux_progOutput

		break;
 8003754:	e02e      	b.n	80037b4 <acc_skimmer+0x2bc>
		case HORARIO_OFF_SKIMMER:
			//funcion de seteo de horario off
			switch (seleccion_progSkimmer) {
 8003756:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <acc_skimmer+0x2d0>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d002      	beq.n	8003764 <acc_skimmer+0x26c>
 800375e:	2b02      	cmp	r3, #2
 8003760:	d008      	beq.n	8003774 <acc_skimmer+0x27c>
					aux_progOutput = setProg_skimmer(PROG_SET4);
				break;
				case 2:
					aux_progOutput = setProg_skimmer(PROG_SET6);
				default:
				break;
 8003762:	e00e      	b.n	8003782 <acc_skimmer+0x28a>
					aux_progOutput = setProg_skimmer(PROG_SET4);
 8003764:	2007      	movs	r0, #7
 8003766:	f7fd fe7b 	bl	8001460 <setProg_skimmer>
 800376a:	4603      	mov	r3, r0
 800376c:	461a      	mov	r2, r3
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <acc_skimmer+0x2cc>)
 8003770:	701a      	strb	r2, [r3, #0]
				break;
 8003772:	e007      	b.n	8003784 <acc_skimmer+0x28c>
					aux_progOutput = setProg_skimmer(PROG_SET6);
 8003774:	2009      	movs	r0, #9
 8003776:	f7fd fe73 	bl	8001460 <setProg_skimmer>
 800377a:	4603      	mov	r3, r0
 800377c:	461a      	mov	r2, r3
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <acc_skimmer+0x2cc>)
 8003780:	701a      	strb	r2, [r3, #0]
				break;
 8003782:	bf00      	nop
			} //end switch seleccion_progSkimmer

			switch (aux_progOutput) {
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <acc_skimmer+0x2cc>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d002      	beq.n	8003792 <acc_skimmer+0x29a>
 800378c:	2b03      	cmp	r3, #3
 800378e:	d000      	beq.n	8003792 <acc_skimmer+0x29a>
				case PROG_IDLE:
				case PROG_FINISHED:
					status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
					set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
				default:
				break;
 8003790:	e005      	b.n	800379e <acc_skimmer+0x2a6>
					status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <acc_skimmer+0x2c0>)
 8003794:	2206      	movs	r2, #6
 8003796:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 8003798:	2013      	movs	r0, #19
 800379a:	f7fd f9eb 	bl	8000b74 <set_pantalla>
				break;
 800379e:	bf00      	nop
			} //end switch aux_progOutput
		break;
 80037a0:	e008      	b.n	80037b4 <acc_skimmer+0x2bc>
		break;
 80037a2:	bf00      	nop
 80037a4:	e006      	b.n	80037b4 <acc_skimmer+0x2bc>
		break;
 80037a6:	bf00      	nop
 80037a8:	e004      	b.n	80037b4 <acc_skimmer+0x2bc>
		break;
 80037aa:	bf00      	nop
 80037ac:	e002      	b.n	80037b4 <acc_skimmer+0x2bc>
		break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <acc_skimmer+0x2bc>
		break;
 80037b2:	bf00      	nop
	} //end switch status_menuSkimmer
} //end acc_skimmer()
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000156 	.word	0x20000156
 80037bc:	20000658 	.word	0x20000658
 80037c0:	2000000c 	.word	0x2000000c
 80037c4:	20000668 	.word	0x20000668
 80037c8:	20000154 	.word	0x20000154

080037cc <acc_hidro>:


void acc_hidro (void){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0

	switch (status_menuHidro) {
 80037d0:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <acc_hidro+0x78>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <acc_hidro+0x12>
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d018      	beq.n	800380e <acc_hidro+0x42>
			} //end switch status_menuHidro

		break;
	} //end switch status_menuHidro

} //end acc_hidro()
 80037dc:	e02f      	b.n	800383e <acc_hidro+0x72>
			if (getStatBoton(IN_AST) == FALL) {
 80037de:	200c      	movs	r0, #12
 80037e0:	f7fc fe76 	bl	80004d0 <getStatBoton>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d107      	bne.n	80037fa <acc_hidro+0x2e>
				menuActual = &menu[MENU_PRINCIPAL];
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <acc_hidro+0x7c>)
 80037ec:	4a17      	ldr	r2, [pc, #92]	; (800384c <acc_hidro+0x80>)
 80037ee:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80037f0:	4b15      	ldr	r3, [pc, #84]	; (8003848 <acc_hidro+0x7c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4798      	blx	r3
				break;
 80037f8:	e021      	b.n	800383e <acc_hidro+0x72>
			if (getStatBoton(IN_HASH) == FALL) {
 80037fa:	200e      	movs	r0, #14
 80037fc:	f7fc fe68 	bl	80004d0 <getStatBoton>
 8003800:	4603      	mov	r3, r0
 8003802:	2b02      	cmp	r3, #2
 8003804:	d11a      	bne.n	800383c <acc_hidro+0x70>
				status_menuHidro = ELIJE_TIEMPO_HIDRO;
 8003806:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <acc_hidro+0x78>)
 8003808:	2201      	movs	r2, #1
 800380a:	701a      	strb	r2, [r3, #0]
				break;
 800380c:	e017      	b.n	800383e <acc_hidro+0x72>
			aux_progOutput = setProg_hidro(PROG_RUN);
 800380e:	2002      	movs	r0, #2
 8003810:	f7fd fb60 	bl	8000ed4 <setProg_hidro>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <acc_hidro+0x84>)
 800381a:	701a      	strb	r2, [r3, #0]
			switch (aux_progOutput) {
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <acc_hidro+0x84>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d002      	beq.n	800382a <acc_hidro+0x5e>
 8003824:	2b03      	cmp	r3, #3
 8003826:	d000      	beq.n	800382a <acc_hidro+0x5e>
				break;
 8003828:	e006      	b.n	8003838 <acc_hidro+0x6c>
					menuActual = &menu[MENU_PRINCIPAL];
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <acc_hidro+0x7c>)
 800382c:	4a07      	ldr	r2, [pc, #28]	; (800384c <acc_hidro+0x80>)
 800382e:	601a      	str	r2, [r3, #0]
					menuActual->inicia_menu();
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <acc_hidro+0x7c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4798      	blx	r3
				break;
 8003838:	bf00      	nop
		break;
 800383a:	e000      	b.n	800383e <acc_hidro+0x72>
		break;
 800383c:	bf00      	nop
} //end acc_hidro()
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000157 	.word	0x20000157
 8003848:	20000658 	.word	0x20000658
 800384c:	2000000c 	.word	0x2000000c
 8003850:	20000668 	.word	0x20000668

08003854 <acc_lucesExt>:


void acc_lucesExt (void){ //luces Amarillas
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
	switch (status_menuLucesExt) {
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <acc_lucesExt+0x50>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <acc_lucesExt+0x12>
 8003860:	2b01      	cmp	r3, #1
 8003862:	d017      	beq.n	8003894 <acc_lucesExt+0x40>
			case ELIJE_TIEMPO_LUCESEXT:
				//funcion de seteo de timepo de hidro
				setProg_luz(PROG_RUN);
			break;
		} //end switch status_menuLucesExt
} //end acc_lucesExt()
 8003864:	e01b      	b.n	800389e <acc_lucesExt+0x4a>
				if (getStatBoton(IN_AST) == FALL) {
 8003866:	200c      	movs	r0, #12
 8003868:	f7fc fe32 	bl	80004d0 <getStatBoton>
 800386c:	4603      	mov	r3, r0
 800386e:	2b02      	cmp	r3, #2
 8003870:	d106      	bne.n	8003880 <acc_lucesExt+0x2c>
					menuActual = &menu[MENU_PRINCIPAL];
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <acc_lucesExt+0x54>)
 8003874:	4a0d      	ldr	r2, [pc, #52]	; (80038ac <acc_lucesExt+0x58>)
 8003876:	601a      	str	r2, [r3, #0]
					menuActual->inicia_menu();
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <acc_lucesExt+0x54>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	4798      	blx	r3
				if (getStatBoton(IN_HASH) == FALL) {
 8003880:	200e      	movs	r0, #14
 8003882:	f7fc fe25 	bl	80004d0 <getStatBoton>
 8003886:	4603      	mov	r3, r0
 8003888:	2b02      	cmp	r3, #2
 800388a:	d107      	bne.n	800389c <acc_lucesExt+0x48>
					status_menuLucesExt = ELIJE_TIEMPO_LUCESEXT;
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <acc_lucesExt+0x50>)
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
					break;
 8003892:	e004      	b.n	800389e <acc_lucesExt+0x4a>
				setProg_luz(PROG_RUN);
 8003894:	2002      	movs	r0, #2
 8003896:	f7fe fbdf 	bl	8002058 <setProg_luz>
			break;
 800389a:	e000      	b.n	800389e <acc_lucesExt+0x4a>
			break;
 800389c:	bf00      	nop
} //end acc_lucesExt()
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000158 	.word	0x20000158
 80038a8:	20000658 	.word	0x20000658
 80038ac:	2000000c 	.word	0x2000000c

080038b0 <acc_lucesLed>:


void acc_lucesLed (void){
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0

}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <acc_config>:


void acc_config (void){
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0

}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	2100      	movs	r1, #0
 80038d4:	460a      	mov	r2, r1
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	460a      	mov	r2, r1
 80038da:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80038e0:	463b      	mov	r3, r7
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80038e8:	4b27      	ldr	r3, [pc, #156]	; (8003988 <MX_RTC_Init+0xc0>)
 80038ea:	4a28      	ldr	r2, [pc, #160]	; (800398c <MX_RTC_Init+0xc4>)
 80038ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80038ee:	4b26      	ldr	r3, [pc, #152]	; (8003988 <MX_RTC_Init+0xc0>)
 80038f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038f4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80038f6:	4b24      	ldr	r3, [pc, #144]	; (8003988 <MX_RTC_Init+0xc0>)
 80038f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038fc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80038fe:	4822      	ldr	r0, [pc, #136]	; (8003988 <MX_RTC_Init+0xc0>)
 8003900:	f001 fe1c 	bl	800553c <HAL_RTC_Init>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800390a:	f7ff f9af 	bl	8002c6c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800390e:	2312      	movs	r3, #18
 8003910:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x59;
 8003912:	2359      	movs	r3, #89	; 0x59
 8003914:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x30;
 8003916:	2330      	movs	r3, #48	; 0x30
 8003918:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800391a:	f107 030c 	add.w	r3, r7, #12
 800391e:	2201      	movs	r2, #1
 8003920:	4619      	mov	r1, r3
 8003922:	4819      	ldr	r0, [pc, #100]	; (8003988 <MX_RTC_Init+0xc0>)
 8003924:	f001 fea0 	bl	8005668 <HAL_RTC_SetTime>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800392e:	f7ff f99d 	bl	8002c6c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003932:	2301      	movs	r3, #1
 8003934:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8003936:	2305      	movs	r3, #5
 8003938:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 800393a:	2301      	movs	r3, #1
 800393c:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 800393e:	2300      	movs	r3, #0
 8003940:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8003942:	f107 0308 	add.w	r3, r7, #8
 8003946:	2201      	movs	r2, #1
 8003948:	4619      	mov	r1, r3
 800394a:	480f      	ldr	r0, [pc, #60]	; (8003988 <MX_RTC_Init+0xc0>)
 800394c:	f001 fffc 	bl	8005948 <HAL_RTC_SetDate>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003956:	f7ff f989 	bl	8002c6c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 800395a:	2313      	movs	r3, #19
 800395c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800395e:	2301      	movs	r3, #1
 8003960:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003962:	2300      	movs	r3, #0
 8003964:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800396a:	463b      	mov	r3, r7
 800396c:	2201      	movs	r2, #1
 800396e:	4619      	mov	r1, r3
 8003970:	4805      	ldr	r0, [pc, #20]	; (8003988 <MX_RTC_Init+0xc0>)
 8003972:	f002 f8f3 	bl	8005b5c <HAL_RTC_SetAlarm_IT>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800397c:	f7ff f976 	bl	8002c6c <Error_Handler>
  }

}
 8003980:	bf00      	nop
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	2000066c 	.word	0x2000066c
 800398c:	40002800 	.word	0x40002800

08003990 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a13      	ldr	r2, [pc, #76]	; (80039ec <HAL_RTC_MspInit+0x5c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d120      	bne.n	80039e4 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80039a2:	f001 f831 	bl	8004a08 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80039a6:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_RTC_MspInit+0x60>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <HAL_RTC_MspInit+0x60>)
 80039ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039b0:	61d3      	str	r3, [r2, #28]
 80039b2:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <HAL_RTC_MspInit+0x60>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <HAL_RTC_MspInit+0x64>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80039c4:	2200      	movs	r2, #0
 80039c6:	2100      	movs	r1, #0
 80039c8:	2003      	movs	r0, #3
 80039ca:	f000 fe5c 	bl	8004686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80039ce:	2003      	movs	r0, #3
 80039d0:	f000 fe75 	bl	80046be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	2029      	movs	r0, #41	; 0x29
 80039da:	f000 fe54 	bl	8004686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80039de:	2029      	movs	r0, #41	; 0x29
 80039e0:	f000 fe6d 	bl	80046be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40002800 	.word	0x40002800
 80039f0:	40021000 	.word	0x40021000
 80039f4:	4242043c 	.word	0x4242043c

080039f8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80039fc:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <MX_SPI2_Init+0x64>)
 80039fe:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <MX_SPI2_Init+0x68>)
 8003a00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a02:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a22:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a2c:	2238      	movs	r2, #56	; 0x38
 8003a2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a3c:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a44:	220a      	movs	r2, #10
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a48:	4804      	ldr	r0, [pc, #16]	; (8003a5c <MX_SPI2_Init+0x64>)
 8003a4a:	f002 fc4b 	bl	80062e4 <HAL_SPI_Init>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003a54:	f7ff f90a 	bl	8002c6c <Error_Handler>
  }

}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000680 	.word	0x20000680
 8003a60:	40003800 	.word	0x40003800

08003a64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6c:	f107 0310 	add.w	r3, r7, #16
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <HAL_SPI_MspInit+0x8c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d131      	bne.n	8003ae8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_SPI_MspInit+0x90>)
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_SPI_MspInit+0x90>)
 8003a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a8e:	61d3      	str	r3, [r2, #28]
 8003a90:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <HAL_SPI_MspInit+0x90>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9c:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_SPI_MspInit+0x90>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <HAL_SPI_MspInit+0x90>)
 8003aa2:	f043 0308 	orr.w	r3, r3, #8
 8003aa6:	6193      	str	r3, [r2, #24]
 8003aa8:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_SPI_MspInit+0x90>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003ab4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac2:	f107 0310 	add.w	r3, r7, #16
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	480b      	ldr	r0, [pc, #44]	; (8003af8 <HAL_SPI_MspInit+0x94>)
 8003aca:	f000 fe13 	bl	80046f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003ace:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003adc:	f107 0310 	add.w	r3, r7, #16
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4805      	ldr	r0, [pc, #20]	; (8003af8 <HAL_SPI_MspInit+0x94>)
 8003ae4:	f000 fe06 	bl	80046f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40003800 	.word	0x40003800
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40010c00 	.word	0x40010c00

08003afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b02:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <HAL_MspInit+0x5c>)
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <HAL_MspInit+0x5c>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6193      	str	r3, [r2, #24]
 8003b0e:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_MspInit+0x5c>)
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_MspInit+0x5c>)
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <HAL_MspInit+0x5c>)
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b24:	61d3      	str	r3, [r2, #28]
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <HAL_MspInit+0x5c>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_MspInit+0x60>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <HAL_MspInit+0x60>)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40010000 	.word	0x40010000

08003b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <HardFault_Handler+0x4>

08003b72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b76:	e7fe      	b.n	8003b76 <MemManage_Handler+0x4>

08003b78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b7c:	e7fe      	b.n	8003b7c <BusFault_Handler+0x4>

08003b7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b82:	e7fe      	b.n	8003b82 <UsageFault_Handler+0x4>

08003b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bac:	f000 fa4c 	bl	8004048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bb0:	bf00      	nop
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <RTC_IRQHandler+0x10>)
 8003bba:	f002 fb4d 	bl	8006258 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	2000066c 	.word	0x2000066c

08003bc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <TIM2_IRQHandler+0x10>)
 8003bce:	f003 f914 	bl	8006dfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000718 	.word	0x20000718

08003bdc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <RTC_Alarm_IRQHandler+0x10>)
 8003be2:	f002 f86f 	bl	8005cc4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	2000066c 	.word	0x2000066c

08003bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bf8:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <_sbrk+0x5c>)
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <_sbrk+0x60>)
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <_sbrk+0x64>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <_sbrk+0x64>)
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <_sbrk+0x68>)
 8003c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <_sbrk+0x64>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d207      	bcs.n	8003c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c20:	f003 fd44 	bl	80076ac <__errno>
 8003c24:	4602      	mov	r2, r0
 8003c26:	230c      	movs	r3, #12
 8003c28:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c2e:	e009      	b.n	8003c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c30:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <_sbrk+0x64>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <_sbrk+0x64>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <_sbrk+0x64>)
 8003c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20005000 	.word	0x20005000
 8003c50:	00000400 	.word	0x00000400
 8003c54:	2000015c 	.word	0x2000015c
 8003c58:	200007a0 	.word	0x200007a0

08003c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003c60:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <SystemInit+0x5c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <SystemInit+0x5c>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <SystemInit+0x5c>)
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	4911      	ldr	r1, [pc, #68]	; (8003cb8 <SystemInit+0x5c>)
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <SystemInit+0x60>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <SystemInit+0x5c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <SystemInit+0x5c>)
 8003c7e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c86:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <SystemInit+0x5c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <SystemInit+0x5c>)
 8003c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c92:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003c94:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <SystemInit+0x5c>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <SystemInit+0x5c>)
 8003c9a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003c9e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <SystemInit+0x5c>)
 8003ca2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003ca6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <SystemInit+0x64>)
 8003caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cae:	609a      	str	r2, [r3, #8]
#endif 
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	f8ff0000 	.word	0xf8ff0000
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cca:	f107 0308 	add.w	r3, r7, #8
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	609a      	str	r2, [r3, #8]
 8003cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cd8:	463b      	mov	r3, r7
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <MX_TIM2_Init+0x94>)
 8003ce2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ce6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <MX_TIM2_Init+0x94>)
 8003cea:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003cee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <MX_TIM2_Init+0x94>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003cf6:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <MX_TIM2_Init+0x94>)
 8003cf8:	2263      	movs	r2, #99	; 0x63
 8003cfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cfc:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <MX_TIM2_Init+0x94>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <MX_TIM2_Init+0x94>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d08:	4813      	ldr	r0, [pc, #76]	; (8003d58 <MX_TIM2_Init+0x94>)
 8003d0a:	f003 f805 	bl	8006d18 <HAL_TIM_Base_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003d14:	f7fe ffaa 	bl	8002c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	4619      	mov	r1, r3
 8003d24:	480c      	ldr	r0, [pc, #48]	; (8003d58 <MX_TIM2_Init+0x94>)
 8003d26:	f003 f970 	bl	800700a <HAL_TIM_ConfigClockSource>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003d30:	f7fe ff9c 	bl	8002c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d34:	2300      	movs	r3, #0
 8003d36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d3c:	463b      	mov	r3, r7
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4805      	ldr	r0, [pc, #20]	; (8003d58 <MX_TIM2_Init+0x94>)
 8003d42:	f003 fb35 	bl	80073b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003d4c:	f7fe ff8e 	bl	8002c6c <Error_Handler>
  }

}
 8003d50:	bf00      	nop
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000718 	.word	0x20000718

08003d5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d70:	463b      	mov	r3, r7
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8003d78:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <MX_TIM3_Init+0x94>)
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <MX_TIM3_Init+0x98>)
 8003d7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <MX_TIM3_Init+0x94>)
 8003d80:	2248      	movs	r2, #72	; 0x48
 8003d82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d84:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <MX_TIM3_Init+0x94>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003d8a:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <MX_TIM3_Init+0x94>)
 8003d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <MX_TIM3_Init+0x94>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <MX_TIM3_Init+0x94>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d9e:	4814      	ldr	r0, [pc, #80]	; (8003df0 <MX_TIM3_Init+0x94>)
 8003da0:	f002 ffba 	bl	8006d18 <HAL_TIM_Base_Init>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003daa:	f7fe ff5f 	bl	8002c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003db4:	f107 0308 	add.w	r3, r7, #8
 8003db8:	4619      	mov	r1, r3
 8003dba:	480d      	ldr	r0, [pc, #52]	; (8003df0 <MX_TIM3_Init+0x94>)
 8003dbc:	f003 f925 	bl	800700a <HAL_TIM_ConfigClockSource>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003dc6:	f7fe ff51 	bl	8002c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4806      	ldr	r0, [pc, #24]	; (8003df0 <MX_TIM3_Init+0x94>)
 8003dd8:	f003 faea 	bl	80073b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003de2:	f7fe ff43 	bl	8002c6c <Error_Handler>
  }

}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	200006d8 	.word	0x200006d8
 8003df4:	40000400 	.word	0x40000400

08003df8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e08:	d114      	bne.n	8003e34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_TIM_Base_MspInit+0x68>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <HAL_TIM_Base_MspInit+0x68>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	61d3      	str	r3, [r2, #28]
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_TIM_Base_MspInit+0x68>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e22:	2200      	movs	r2, #0
 8003e24:	2100      	movs	r1, #0
 8003e26:	201c      	movs	r0, #28
 8003e28:	f000 fc2d 	bl	8004686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e2c:	201c      	movs	r0, #28
 8003e2e:	f000 fc46 	bl	80046be <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003e32:	e010      	b.n	8003e56 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <HAL_TIM_Base_MspInit+0x6c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d10b      	bne.n	8003e56 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_TIM_Base_MspInit+0x68>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4a07      	ldr	r2, [pc, #28]	; (8003e60 <HAL_TIM_Base_MspInit+0x68>)
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	61d3      	str	r3, [r2, #28]
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_TIM_Base_MspInit+0x68>)
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40000400 	.word	0x40000400

08003e68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <MX_USART1_UART_Init+0x4c>)
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <MX_USART1_UART_Init+0x50>)
 8003e70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <MX_USART1_UART_Init+0x4c>)
 8003e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <MX_USART1_UART_Init+0x4c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <MX_USART1_UART_Init+0x4c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <MX_USART1_UART_Init+0x4c>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e8c:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <MX_USART1_UART_Init+0x4c>)
 8003e8e:	220c      	movs	r2, #12
 8003e90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e92:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <MX_USART1_UART_Init+0x4c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e98:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <MX_USART1_UART_Init+0x4c>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e9e:	4805      	ldr	r0, [pc, #20]	; (8003eb4 <MX_USART1_UART_Init+0x4c>)
 8003ea0:	f003 fadc 	bl	800745c <HAL_UART_Init>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003eaa:	f7fe fedf 	bl	8002c6c <Error_Handler>
  }

}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000758 	.word	0x20000758
 8003eb8:	40013800 	.word	0x40013800

08003ebc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	f107 0314 	add.w	r3, r7, #20
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <HAL_UART_MspInit+0xa4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d13d      	bne.n	8003f58 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003edc:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_UART_MspInit+0xa8>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <HAL_UART_MspInit+0xa8>)
 8003ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ee6:	6193      	str	r3, [r2, #24]
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_UART_MspInit+0xa8>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <HAL_UART_MspInit+0xa8>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <HAL_UART_MspInit+0xa8>)
 8003efa:	f043 0308 	orr.w	r3, r3, #8
 8003efe:	6193      	str	r3, [r2, #24]
 8003f00:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <HAL_UART_MspInit+0xa8>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f0c:	2340      	movs	r3, #64	; 0x40
 8003f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f10:	2302      	movs	r3, #2
 8003f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f14:	2303      	movs	r3, #3
 8003f16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4812      	ldr	r0, [pc, #72]	; (8003f68 <HAL_UART_MspInit+0xac>)
 8003f20:	f000 fbe8 	bl	80046f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	4619      	mov	r1, r3
 8003f36:	480c      	ldr	r0, [pc, #48]	; (8003f68 <HAL_UART_MspInit+0xac>)
 8003f38:	f000 fbdc 	bl	80046f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_UART_MspInit+0xb0>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	f043 0304 	orr.w	r3, r3, #4
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
 8003f52:	4a06      	ldr	r2, [pc, #24]	; (8003f6c <HAL_UART_MspInit+0xb0>)
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3728      	adds	r7, #40	; 0x28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40013800 	.word	0x40013800
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40010c00 	.word	0x40010c00
 8003f6c:	40010000 	.word	0x40010000

08003f70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003f70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003f72:	e003      	b.n	8003f7c <LoopCopyDataInit>

08003f74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003f76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003f78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003f7a:	3104      	adds	r1, #4

08003f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003f7c:	480a      	ldr	r0, [pc, #40]	; (8003fa8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003f80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003f82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003f84:	d3f6      	bcc.n	8003f74 <CopyDataInit>
  ldr r2, =_sbss
 8003f86:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003f88:	e002      	b.n	8003f90 <LoopFillZerobss>

08003f8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003f8a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003f8c:	f842 3b04 	str.w	r3, [r2], #4

08003f90 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003f90:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003f92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003f94:	d3f9      	bcc.n	8003f8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f96:	f7ff fe61 	bl	8003c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f9a:	f003 fb8d 	bl	80076b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f9e:	f7fe fd63 	bl	8002a68 <main>
  bx lr
 8003fa2:	4770      	bx	lr
  ldr r3, =_sidata
 8003fa4:	0800825c 	.word	0x0800825c
  ldr r0, =_sdata
 8003fa8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003fac:	20000100 	.word	0x20000100
  ldr r2, =_sbss
 8003fb0:	20000100 	.word	0x20000100
  ldr r3, = _ebss
 8003fb4:	200007a0 	.word	0x200007a0

08003fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fb8:	e7fe      	b.n	8003fb8 <ADC1_2_IRQHandler>
	...

08003fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fc0:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_Init+0x28>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <HAL_Init+0x28>)
 8003fc6:	f043 0310 	orr.w	r3, r3, #16
 8003fca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fcc:	2003      	movs	r0, #3
 8003fce:	f000 fb4f 	bl	8004670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f000 f808 	bl	8003fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fd8:	f7ff fd90 	bl	8003afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40022000 	.word	0x40022000

08003fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ff0:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_InitTick+0x54>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b12      	ldr	r3, [pc, #72]	; (8004040 <HAL_InitTick+0x58>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004002:	fbb2 f3f3 	udiv	r3, r2, r3
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fb67 	bl	80046da <HAL_SYSTICK_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e00e      	b.n	8004034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b0f      	cmp	r3, #15
 800401a:	d80a      	bhi.n	8004032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800401c:	2200      	movs	r2, #0
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004024:	f000 fb2f 	bl	8004686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004028:	4a06      	ldr	r2, [pc, #24]	; (8004044 <HAL_InitTick+0x5c>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	e000      	b.n	8004034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
}
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000090 	.word	0x20000090
 8004040:	20000098 	.word	0x20000098
 8004044:	20000094 	.word	0x20000094

08004048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_IncTick+0x1c>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_IncTick+0x20>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4413      	add	r3, r2
 8004058:	4a03      	ldr	r2, [pc, #12]	; (8004068 <HAL_IncTick+0x20>)
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	20000098 	.word	0x20000098
 8004068:	20000798 	.word	0x20000798

0800406c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return uwTick;
 8004070:	4b02      	ldr	r3, [pc, #8]	; (800407c <HAL_GetTick+0x10>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	20000798 	.word	0x20000798

08004080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004088:	f7ff fff0 	bl	800406c <HAL_GetTick>
 800408c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004098:	d005      	beq.n	80040a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <HAL_Delay+0x40>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040a6:	bf00      	nop
 80040a8:	f7ff ffe0 	bl	800406c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d8f7      	bhi.n	80040a8 <HAL_Delay+0x28>
  {
  }
}
 80040b8:	bf00      	nop
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000098 	.word	0x20000098

080040c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0be      	b.n	8004264 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fc fcd0 	bl	8000aa8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f9ab 	bl	8004464 <ADC_ConversionStop_Disable>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	f040 8099 	bne.w	8004252 <HAL_ADC_Init+0x18e>
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 8095 	bne.w	8004252 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004130:	f023 0302 	bic.w	r3, r3, #2
 8004134:	f043 0202 	orr.w	r2, r3, #2
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004144:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	7b1b      	ldrb	r3, [r3, #12]
 800414a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800414c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4313      	orrs	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415c:	d003      	beq.n	8004166 <HAL_ADC_Init+0xa2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d102      	bne.n	800416c <HAL_ADC_Init+0xa8>
 8004166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800416a:	e000      	b.n	800416e <HAL_ADC_Init+0xaa>
 800416c:	2300      	movs	r3, #0
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7d1b      	ldrb	r3, [r3, #20]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d119      	bne.n	80041b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7b1b      	ldrb	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	3b01      	subs	r3, #1
 800418a:	035a      	lsls	r2, r3, #13
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	e00b      	b.n	80041b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	f043 0201 	orr.w	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	4b28      	ldr	r3, [pc, #160]	; (800426c <HAL_ADC_Init+0x1a8>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e0:	d003      	beq.n	80041ea <HAL_ADC_Init+0x126>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d104      	bne.n	80041f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	051b      	lsls	r3, r3, #20
 80041f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	430a      	orrs	r2, r1
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	4b18      	ldr	r3, [pc, #96]	; (8004270 <HAL_ADC_Init+0x1ac>)
 8004210:	4013      	ands	r3, r2
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	d10b      	bne.n	8004230 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800422e:	e018      	b.n	8004262 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	f023 0312 	bic.w	r3, r3, #18
 8004238:	f043 0210 	orr.w	r2, r3, #16
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	f043 0201 	orr.w	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004250:	e007      	b.n	8004262 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	f043 0210 	orr.w	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004262:	7dfb      	ldrb	r3, [r7, #23]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	ffe1f7fd 	.word	0xffe1f7fd
 8004270:	ff1f0efe 	.word	0xff1f0efe

08004274 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x20>
 8004290:	2302      	movs	r3, #2
 8004292:	e0dc      	b.n	800444e <HAL_ADC_ConfigChannel+0x1da>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b06      	cmp	r3, #6
 80042a2:	d81c      	bhi.n	80042de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	3b05      	subs	r3, #5
 80042b6:	221f      	movs	r2, #31
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	4019      	ands	r1, r3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	3b05      	subs	r3, #5
 80042d0:	fa00 f203 	lsl.w	r2, r0, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	635a      	str	r2, [r3, #52]	; 0x34
 80042dc:	e03c      	b.n	8004358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b0c      	cmp	r3, #12
 80042e4:	d81c      	bhi.n	8004320 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	3b23      	subs	r3, #35	; 0x23
 80042f8:	221f      	movs	r2, #31
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43db      	mvns	r3, r3
 8004300:	4019      	ands	r1, r3
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	3b23      	subs	r3, #35	; 0x23
 8004312:	fa00 f203 	lsl.w	r2, r0, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
 800431e:	e01b      	b.n	8004358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	3b41      	subs	r3, #65	; 0x41
 8004332:	221f      	movs	r2, #31
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	4019      	ands	r1, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	3b41      	subs	r3, #65	; 0x41
 800434c:	fa00 f203 	lsl.w	r2, r0, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b09      	cmp	r3, #9
 800435e:	d91c      	bls.n	800439a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68d9      	ldr	r1, [r3, #12]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4413      	add	r3, r2
 8004370:	3b1e      	subs	r3, #30
 8004372:	2207      	movs	r2, #7
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	43db      	mvns	r3, r3
 800437a:	4019      	ands	r1, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6898      	ldr	r0, [r3, #8]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4413      	add	r3, r2
 800438a:	3b1e      	subs	r3, #30
 800438c:	fa00 f203 	lsl.w	r2, r0, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	60da      	str	r2, [r3, #12]
 8004398:	e019      	b.n	80043ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6919      	ldr	r1, [r3, #16]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	2207      	movs	r2, #7
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	4019      	ands	r1, r3
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6898      	ldr	r0, [r3, #8]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4413      	add	r3, r2
 80043c2:	fa00 f203 	lsl.w	r2, r0, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d003      	beq.n	80043de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80043da:	2b11      	cmp	r3, #17
 80043dc:	d132      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <HAL_ADC_ConfigChannel+0x1e4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d125      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d126      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004404:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b10      	cmp	r3, #16
 800440c:	d11a      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800440e:	4b13      	ldr	r3, [pc, #76]	; (800445c <HAL_ADC_ConfigChannel+0x1e8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a13      	ldr	r2, [pc, #76]	; (8004460 <HAL_ADC_ConfigChannel+0x1ec>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	0c9a      	lsrs	r2, r3, #18
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004424:	e002      	b.n	800442c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	3b01      	subs	r3, #1
 800442a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f9      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x1b2>
 8004432:	e007      	b.n	8004444 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	f043 0220 	orr.w	r2, r3, #32
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	40012400 	.word	0x40012400
 800445c:	20000090 	.word	0x20000090
 8004460:	431bde83 	.word	0x431bde83

08004464 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d127      	bne.n	80044ce <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800448e:	f7ff fded 	bl	800406c <HAL_GetTick>
 8004492:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004494:	e014      	b.n	80044c0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004496:	f7ff fde9 	bl	800406c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d90d      	bls.n	80044c0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	f043 0210 	orr.w	r2, r3, #16
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	f043 0201 	orr.w	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e007      	b.n	80044d0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d0e3      	beq.n	8004496 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f4:	4013      	ands	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800450a:	4a04      	ldr	r2, [pc, #16]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	60d3      	str	r3, [r2, #12]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <__NVIC_GetPriorityGrouping+0x18>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	f003 0307 	and.w	r3, r3, #7
}
 800452e:	4618      	mov	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	2b00      	cmp	r3, #0
 800454c:	db0b      	blt.n	8004566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	4906      	ldr	r1, [pc, #24]	; (8004570 <__NVIC_EnableIRQ+0x34>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2001      	movs	r0, #1
 800455e:	fa00 f202 	lsl.w	r2, r0, r2
 8004562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	e000e100 	.word	0xe000e100

08004574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	6039      	str	r1, [r7, #0]
 800457e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004584:	2b00      	cmp	r3, #0
 8004586:	db0a      	blt.n	800459e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	490c      	ldr	r1, [pc, #48]	; (80045c0 <__NVIC_SetPriority+0x4c>)
 800458e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004592:	0112      	lsls	r2, r2, #4
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	440b      	add	r3, r1
 8004598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800459c:	e00a      	b.n	80045b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4908      	ldr	r1, [pc, #32]	; (80045c4 <__NVIC_SetPriority+0x50>)
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	3b04      	subs	r3, #4
 80045ac:	0112      	lsls	r2, r2, #4
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	440b      	add	r3, r1
 80045b2:	761a      	strb	r2, [r3, #24]
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000e100 	.word	0xe000e100
 80045c4:	e000ed00 	.word	0xe000ed00

080045c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b089      	sub	sp, #36	; 0x24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f1c3 0307 	rsb	r3, r3, #7
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	bf28      	it	cs
 80045e6:	2304      	movcs	r3, #4
 80045e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3304      	adds	r3, #4
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d902      	bls.n	80045f8 <NVIC_EncodePriority+0x30>
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3b03      	subs	r3, #3
 80045f6:	e000      	b.n	80045fa <NVIC_EncodePriority+0x32>
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43da      	mvns	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	401a      	ands	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004610:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	fa01 f303 	lsl.w	r3, r1, r3
 800461a:	43d9      	mvns	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004620:	4313      	orrs	r3, r2
         );
}
 8004622:	4618      	mov	r0, r3
 8004624:	3724      	adds	r7, #36	; 0x24
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3b01      	subs	r3, #1
 8004638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800463c:	d301      	bcc.n	8004642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800463e:	2301      	movs	r3, #1
 8004640:	e00f      	b.n	8004662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004642:	4a0a      	ldr	r2, [pc, #40]	; (800466c <SysTick_Config+0x40>)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3b01      	subs	r3, #1
 8004648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800464a:	210f      	movs	r1, #15
 800464c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004650:	f7ff ff90 	bl	8004574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <SysTick_Config+0x40>)
 8004656:	2200      	movs	r2, #0
 8004658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800465a:	4b04      	ldr	r3, [pc, #16]	; (800466c <SysTick_Config+0x40>)
 800465c:	2207      	movs	r2, #7
 800465e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	e000e010 	.word	0xe000e010

08004670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ff2d 	bl	80044d8 <__NVIC_SetPriorityGrouping>
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004686:	b580      	push	{r7, lr}
 8004688:	b086      	sub	sp, #24
 800468a:	af00      	add	r7, sp, #0
 800468c:	4603      	mov	r3, r0
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004698:	f7ff ff42 	bl	8004520 <__NVIC_GetPriorityGrouping>
 800469c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	6978      	ldr	r0, [r7, #20]
 80046a4:	f7ff ff90 	bl	80045c8 <NVIC_EncodePriority>
 80046a8:	4602      	mov	r2, r0
 80046aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff5f 	bl	8004574 <__NVIC_SetPriority>
}
 80046b6:	bf00      	nop
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	4603      	mov	r3, r0
 80046c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ff35 	bl	800453c <__NVIC_EnableIRQ>
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff ffa2 	bl	800462c <SysTick_Config>
 80046e8:	4603      	mov	r3, r0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b08b      	sub	sp, #44	; 0x2c
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046fe:	2300      	movs	r3, #0
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004702:	2300      	movs	r3, #0
 8004704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004706:	e127      	b.n	8004958 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004708:	2201      	movs	r2, #1
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	4013      	ands	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	429a      	cmp	r2, r3
 8004722:	f040 8116 	bne.w	8004952 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b12      	cmp	r3, #18
 800472c:	d034      	beq.n	8004798 <HAL_GPIO_Init+0xa4>
 800472e:	2b12      	cmp	r3, #18
 8004730:	d80d      	bhi.n	800474e <HAL_GPIO_Init+0x5a>
 8004732:	2b02      	cmp	r3, #2
 8004734:	d02b      	beq.n	800478e <HAL_GPIO_Init+0x9a>
 8004736:	2b02      	cmp	r3, #2
 8004738:	d804      	bhi.n	8004744 <HAL_GPIO_Init+0x50>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d031      	beq.n	80047a2 <HAL_GPIO_Init+0xae>
 800473e:	2b01      	cmp	r3, #1
 8004740:	d01c      	beq.n	800477c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004742:	e048      	b.n	80047d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004744:	2b03      	cmp	r3, #3
 8004746:	d043      	beq.n	80047d0 <HAL_GPIO_Init+0xdc>
 8004748:	2b11      	cmp	r3, #17
 800474a:	d01b      	beq.n	8004784 <HAL_GPIO_Init+0x90>
          break;
 800474c:	e043      	b.n	80047d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800474e:	4a89      	ldr	r2, [pc, #548]	; (8004974 <HAL_GPIO_Init+0x280>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d026      	beq.n	80047a2 <HAL_GPIO_Init+0xae>
 8004754:	4a87      	ldr	r2, [pc, #540]	; (8004974 <HAL_GPIO_Init+0x280>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d806      	bhi.n	8004768 <HAL_GPIO_Init+0x74>
 800475a:	4a87      	ldr	r2, [pc, #540]	; (8004978 <HAL_GPIO_Init+0x284>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d020      	beq.n	80047a2 <HAL_GPIO_Init+0xae>
 8004760:	4a86      	ldr	r2, [pc, #536]	; (800497c <HAL_GPIO_Init+0x288>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01d      	beq.n	80047a2 <HAL_GPIO_Init+0xae>
          break;
 8004766:	e036      	b.n	80047d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004768:	4a85      	ldr	r2, [pc, #532]	; (8004980 <HAL_GPIO_Init+0x28c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d019      	beq.n	80047a2 <HAL_GPIO_Init+0xae>
 800476e:	4a85      	ldr	r2, [pc, #532]	; (8004984 <HAL_GPIO_Init+0x290>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d016      	beq.n	80047a2 <HAL_GPIO_Init+0xae>
 8004774:	4a84      	ldr	r2, [pc, #528]	; (8004988 <HAL_GPIO_Init+0x294>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_GPIO_Init+0xae>
          break;
 800477a:	e02c      	b.n	80047d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	623b      	str	r3, [r7, #32]
          break;
 8004782:	e028      	b.n	80047d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	3304      	adds	r3, #4
 800478a:	623b      	str	r3, [r7, #32]
          break;
 800478c:	e023      	b.n	80047d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	3308      	adds	r3, #8
 8004794:	623b      	str	r3, [r7, #32]
          break;
 8004796:	e01e      	b.n	80047d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	330c      	adds	r3, #12
 800479e:	623b      	str	r3, [r7, #32]
          break;
 80047a0:	e019      	b.n	80047d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047aa:	2304      	movs	r3, #4
 80047ac:	623b      	str	r3, [r7, #32]
          break;
 80047ae:	e012      	b.n	80047d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d105      	bne.n	80047c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047b8:	2308      	movs	r3, #8
 80047ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	611a      	str	r2, [r3, #16]
          break;
 80047c2:	e008      	b.n	80047d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047c4:	2308      	movs	r3, #8
 80047c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	615a      	str	r2, [r3, #20]
          break;
 80047ce:	e002      	b.n	80047d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047d0:	2300      	movs	r3, #0
 80047d2:	623b      	str	r3, [r7, #32]
          break;
 80047d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2bff      	cmp	r3, #255	; 0xff
 80047da:	d801      	bhi.n	80047e0 <HAL_GPIO_Init+0xec>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	e001      	b.n	80047e4 <HAL_GPIO_Init+0xf0>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2bff      	cmp	r3, #255	; 0xff
 80047ea:	d802      	bhi.n	80047f2 <HAL_GPIO_Init+0xfe>
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	e002      	b.n	80047f8 <HAL_GPIO_Init+0x104>
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	3b08      	subs	r3, #8
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	210f      	movs	r1, #15
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	fa01 f303 	lsl.w	r3, r1, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	401a      	ands	r2, r3
 800480a:	6a39      	ldr	r1, [r7, #32]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	431a      	orrs	r2, r3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8096 	beq.w	8004952 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004826:	4b59      	ldr	r3, [pc, #356]	; (800498c <HAL_GPIO_Init+0x298>)
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	4a58      	ldr	r2, [pc, #352]	; (800498c <HAL_GPIO_Init+0x298>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	6193      	str	r3, [r2, #24]
 8004832:	4b56      	ldr	r3, [pc, #344]	; (800498c <HAL_GPIO_Init+0x298>)
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800483e:	4a54      	ldr	r2, [pc, #336]	; (8004990 <HAL_GPIO_Init+0x29c>)
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	3302      	adds	r3, #2
 8004846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	220f      	movs	r2, #15
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43db      	mvns	r3, r3
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4013      	ands	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a4b      	ldr	r2, [pc, #300]	; (8004994 <HAL_GPIO_Init+0x2a0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_GPIO_Init+0x19e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4a      	ldr	r2, [pc, #296]	; (8004998 <HAL_GPIO_Init+0x2a4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00d      	beq.n	800488e <HAL_GPIO_Init+0x19a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a49      	ldr	r2, [pc, #292]	; (800499c <HAL_GPIO_Init+0x2a8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <HAL_GPIO_Init+0x196>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a48      	ldr	r2, [pc, #288]	; (80049a0 <HAL_GPIO_Init+0x2ac>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d101      	bne.n	8004886 <HAL_GPIO_Init+0x192>
 8004882:	2303      	movs	r3, #3
 8004884:	e006      	b.n	8004894 <HAL_GPIO_Init+0x1a0>
 8004886:	2304      	movs	r3, #4
 8004888:	e004      	b.n	8004894 <HAL_GPIO_Init+0x1a0>
 800488a:	2302      	movs	r3, #2
 800488c:	e002      	b.n	8004894 <HAL_GPIO_Init+0x1a0>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <HAL_GPIO_Init+0x1a0>
 8004892:	2300      	movs	r3, #0
 8004894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004896:	f002 0203 	and.w	r2, r2, #3
 800489a:	0092      	lsls	r2, r2, #2
 800489c:	4093      	lsls	r3, r2
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048a4:	493a      	ldr	r1, [pc, #232]	; (8004990 <HAL_GPIO_Init+0x29c>)
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	3302      	adds	r3, #2
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80048be:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4938      	ldr	r1, [pc, #224]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]
 80048ca:	e006      	b.n	80048da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80048cc:	4b35      	ldr	r3, [pc, #212]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	43db      	mvns	r3, r3
 80048d4:	4933      	ldr	r1, [pc, #204]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d006      	beq.n	80048f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80048e6:	4b2f      	ldr	r3, [pc, #188]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	492e      	ldr	r1, [pc, #184]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]
 80048f2:	e006      	b.n	8004902 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048f4:	4b2b      	ldr	r3, [pc, #172]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	4929      	ldr	r1, [pc, #164]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 80048fe:	4013      	ands	r3, r2
 8004900:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d006      	beq.n	800491c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800490e:	4b25      	ldr	r3, [pc, #148]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	4924      	ldr	r1, [pc, #144]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
 800491a:	e006      	b.n	800492a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800491c:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	43db      	mvns	r3, r3
 8004924:	491f      	ldr	r1, [pc, #124]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 8004926:	4013      	ands	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d006      	beq.n	8004944 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004936:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	491a      	ldr	r1, [pc, #104]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	4313      	orrs	r3, r2
 8004940:	60cb      	str	r3, [r1, #12]
 8004942:	e006      	b.n	8004952 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004944:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	43db      	mvns	r3, r3
 800494c:	4915      	ldr	r1, [pc, #84]	; (80049a4 <HAL_GPIO_Init+0x2b0>)
 800494e:	4013      	ands	r3, r2
 8004950:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	3301      	adds	r3, #1
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	fa22 f303 	lsr.w	r3, r2, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	f47f aed0 	bne.w	8004708 <HAL_GPIO_Init+0x14>
  }
}
 8004968:	bf00      	nop
 800496a:	372c      	adds	r7, #44	; 0x2c
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	10210000 	.word	0x10210000
 8004978:	10110000 	.word	0x10110000
 800497c:	10120000 	.word	0x10120000
 8004980:	10310000 	.word	0x10310000
 8004984:	10320000 	.word	0x10320000
 8004988:	10220000 	.word	0x10220000
 800498c:	40021000 	.word	0x40021000
 8004990:	40010000 	.word	0x40010000
 8004994:	40010800 	.word	0x40010800
 8004998:	40010c00 	.word	0x40010c00
 800499c:	40011000 	.word	0x40011000
 80049a0:	40011400 	.word	0x40011400
 80049a4:	40010400 	.word	0x40010400

080049a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	887b      	ldrh	r3, [r7, #2]
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
 80049c4:	e001      	b.n	80049ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	460b      	mov	r3, r1
 80049e0:	807b      	strh	r3, [r7, #2]
 80049e2:	4613      	mov	r3, r2
 80049e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049e6:	787b      	ldrb	r3, [r7, #1]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ec:	887a      	ldrh	r2, [r7, #2]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049f2:	e003      	b.n	80049fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	041a      	lsls	r2, r3, #16
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	611a      	str	r2, [r3, #16]
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bc80      	pop	{r7}
 8004a04:	4770      	bx	lr
	...

08004a08 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_PWR_EnableBkUpAccess+0x14>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	420e0020 	.word	0x420e0020

08004a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e26c      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8087 	beq.w	8004b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a40:	4b92      	ldr	r3, [pc, #584]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d00c      	beq.n	8004a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a4c:	4b8f      	ldr	r3, [pc, #572]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d112      	bne.n	8004a7e <HAL_RCC_OscConfig+0x5e>
 8004a58:	4b8c      	ldr	r3, [pc, #560]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d10b      	bne.n	8004a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a66:	4b89      	ldr	r3, [pc, #548]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d06c      	beq.n	8004b4c <HAL_RCC_OscConfig+0x12c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d168      	bne.n	8004b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e246      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a86:	d106      	bne.n	8004a96 <HAL_RCC_OscConfig+0x76>
 8004a88:	4b80      	ldr	r3, [pc, #512]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a7f      	ldr	r2, [pc, #508]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e02e      	b.n	8004af4 <HAL_RCC_OscConfig+0xd4>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x98>
 8004a9e:	4b7b      	ldr	r3, [pc, #492]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7a      	ldr	r2, [pc, #488]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b78      	ldr	r3, [pc, #480]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a77      	ldr	r2, [pc, #476]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e01d      	b.n	8004af4 <HAL_RCC_OscConfig+0xd4>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCC_OscConfig+0xbc>
 8004ac2:	4b72      	ldr	r3, [pc, #456]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a71      	ldr	r2, [pc, #452]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b6f      	ldr	r3, [pc, #444]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6e      	ldr	r2, [pc, #440]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e00b      	b.n	8004af4 <HAL_RCC_OscConfig+0xd4>
 8004adc:	4b6b      	ldr	r3, [pc, #428]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a6a      	ldr	r2, [pc, #424]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	4b68      	ldr	r3, [pc, #416]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a67      	ldr	r2, [pc, #412]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d013      	beq.n	8004b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7ff fab6 	bl	800406c <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b04:	f7ff fab2 	bl	800406c <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e1fa      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b16:	4b5d      	ldr	r3, [pc, #372]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0xe4>
 8004b22:	e014      	b.n	8004b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7ff faa2 	bl	800406c <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b2c:	f7ff fa9e 	bl	800406c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	; 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e1e6      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3e:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x10c>
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d063      	beq.n	8004c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b5a:	4b4c      	ldr	r3, [pc, #304]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b66:	4b49      	ldr	r3, [pc, #292]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d11c      	bne.n	8004bac <HAL_RCC_OscConfig+0x18c>
 8004b72:	4b46      	ldr	r3, [pc, #280]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d116      	bne.n	8004bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7e:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_RCC_OscConfig+0x176>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d001      	beq.n	8004b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e1ba      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4939      	ldr	r1, [pc, #228]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004baa:	e03a      	b.n	8004c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d020      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb4:	4b36      	ldr	r3, [pc, #216]	; (8004c90 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bba:	f7ff fa57 	bl	800406c <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc2:	f7ff fa53 	bl	800406c <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e19b      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd4:	4b2d      	ldr	r3, [pc, #180]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be0:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4927      	ldr	r1, [pc, #156]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	600b      	str	r3, [r1, #0]
 8004bf4:	e015      	b.n	8004c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7ff fa36 	bl	800406c <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c04:	f7ff fa32 	bl	800406c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e17a      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c16:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d03a      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d019      	beq.n	8004c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c36:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3c:	f7ff fa16 	bl	800406c <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c44:	f7ff fa12 	bl	800406c <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e15a      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c62:	2001      	movs	r0, #1
 8004c64:	f000 fada 	bl	800521c <RCC_Delay>
 8004c68:	e01c      	b.n	8004ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c70:	f7ff f9fc 	bl	800406c <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c76:	e00f      	b.n	8004c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c78:	f7ff f9f8 	bl	800406c <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d908      	bls.n	8004c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e140      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	42420000 	.word	0x42420000
 8004c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c98:	4b9e      	ldr	r3, [pc, #632]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e9      	bne.n	8004c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80a6 	beq.w	8004dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb6:	4b97      	ldr	r3, [pc, #604]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10d      	bne.n	8004cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	4b94      	ldr	r3, [pc, #592]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	4a93      	ldr	r2, [pc, #588]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	61d3      	str	r3, [r2, #28]
 8004cce:	4b91      	ldr	r3, [pc, #580]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cde:	4b8e      	ldr	r3, [pc, #568]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d118      	bne.n	8004d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cea:	4b8b      	ldr	r3, [pc, #556]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a8a      	ldr	r2, [pc, #552]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7ff f9b9 	bl	800406c <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7ff f9b5 	bl	800406c <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b64      	cmp	r3, #100	; 0x64
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e0fd      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d10:	4b81      	ldr	r3, [pc, #516]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_OscConfig+0x312>
 8004d24:	4b7b      	ldr	r3, [pc, #492]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	4a7a      	ldr	r2, [pc, #488]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6213      	str	r3, [r2, #32]
 8004d30:	e02d      	b.n	8004d8e <HAL_RCC_OscConfig+0x36e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x334>
 8004d3a:	4b76      	ldr	r3, [pc, #472]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	4a75      	ldr	r2, [pc, #468]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	6213      	str	r3, [r2, #32]
 8004d46:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	4a72      	ldr	r2, [pc, #456]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d4c:	f023 0304 	bic.w	r3, r3, #4
 8004d50:	6213      	str	r3, [r2, #32]
 8004d52:	e01c      	b.n	8004d8e <HAL_RCC_OscConfig+0x36e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b05      	cmp	r3, #5
 8004d5a:	d10c      	bne.n	8004d76 <HAL_RCC_OscConfig+0x356>
 8004d5c:	4b6d      	ldr	r3, [pc, #436]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	4a6c      	ldr	r2, [pc, #432]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d62:	f043 0304 	orr.w	r3, r3, #4
 8004d66:	6213      	str	r3, [r2, #32]
 8004d68:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	4a69      	ldr	r2, [pc, #420]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	6213      	str	r3, [r2, #32]
 8004d74:	e00b      	b.n	8004d8e <HAL_RCC_OscConfig+0x36e>
 8004d76:	4b67      	ldr	r3, [pc, #412]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4a66      	ldr	r2, [pc, #408]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	6213      	str	r3, [r2, #32]
 8004d82:	4b64      	ldr	r3, [pc, #400]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4a63      	ldr	r2, [pc, #396]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d015      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d96:	f7ff f969 	bl	800406c <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9c:	e00a      	b.n	8004db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7ff f965 	bl	800406c <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e0ab      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db4:	4b57      	ldr	r3, [pc, #348]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0ee      	beq.n	8004d9e <HAL_RCC_OscConfig+0x37e>
 8004dc0:	e014      	b.n	8004dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc2:	f7ff f953 	bl	800406c <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dca:	f7ff f94f 	bl	800406c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e095      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de0:	4b4c      	ldr	r3, [pc, #304]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ee      	bne.n	8004dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d105      	bne.n	8004dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df2:	4b48      	ldr	r3, [pc, #288]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	4a47      	ldr	r2, [pc, #284]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8081 	beq.w	8004f0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e08:	4b42      	ldr	r3, [pc, #264]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d061      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d146      	bne.n	8004eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1c:	4b3f      	ldr	r3, [pc, #252]	; (8004f1c <HAL_RCC_OscConfig+0x4fc>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7ff f923 	bl	800406c <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7ff f91f 	bl	800406c <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e067      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e3c:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1f0      	bne.n	8004e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d108      	bne.n	8004e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e52:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	492d      	ldr	r1, [pc, #180]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e64:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a19      	ldr	r1, [r3, #32]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	430b      	orrs	r3, r1
 8004e76:	4927      	ldr	r1, [pc, #156]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <HAL_RCC_OscConfig+0x4fc>)
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7ff f8f3 	bl	800406c <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7ff f8ef 	bl	800406c <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e037      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e9c:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x46a>
 8004ea8:	e02f      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <HAL_RCC_OscConfig+0x4fc>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7ff f8dc 	bl	800406c <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7ff f8d8 	bl	800406c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e020      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x498>
 8004ed6:	e018      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e013      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40007000 	.word	0x40007000
 8004f1c:	42420060 	.word	0x42420060

08004f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0d0      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f34:	4b6a      	ldr	r3, [pc, #424]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d910      	bls.n	8004f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f42:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 0207 	bic.w	r2, r3, #7
 8004f4a:	4965      	ldr	r1, [pc, #404]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b63      	ldr	r3, [pc, #396]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0b8      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d020      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f7c:	4b59      	ldr	r3, [pc, #356]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4a58      	ldr	r2, [pc, #352]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f94:	4b53      	ldr	r3, [pc, #332]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a52      	ldr	r2, [pc, #328]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa0:	4b50      	ldr	r3, [pc, #320]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	494d      	ldr	r1, [pc, #308]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d040      	beq.n	8005040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc6:	4b47      	ldr	r3, [pc, #284]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d115      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e07f      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d107      	bne.n	8004fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fde:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e073      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fee:	4b3d      	ldr	r3, [pc, #244]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06b      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ffe:	4b39      	ldr	r3, [pc, #228]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f023 0203 	bic.w	r2, r3, #3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4936      	ldr	r1, [pc, #216]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800500c:	4313      	orrs	r3, r2
 800500e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005010:	f7ff f82c 	bl	800406c <HAL_GetTick>
 8005014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005016:	e00a      	b.n	800502e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005018:	f7ff f828 	bl	800406c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e053      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f003 020c 	and.w	r2, r3, #12
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	429a      	cmp	r2, r3
 800503e:	d1eb      	bne.n	8005018 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d210      	bcs.n	8005070 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 0207 	bic.w	r2, r3, #7
 8005056:	4922      	ldr	r1, [pc, #136]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e032      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800507c:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4916      	ldr	r1, [pc, #88]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	4313      	orrs	r3, r2
 800508c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	490e      	ldr	r1, [pc, #56]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ae:	f000 f821 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80050b2:	4601      	mov	r1, r0
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	4a0a      	ldr	r2, [pc, #40]	; (80050e8 <HAL_RCC_ClockConfig+0x1c8>)
 80050c0:	5cd3      	ldrb	r3, [r2, r3]
 80050c2:	fa21 f303 	lsr.w	r3, r1, r3
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <HAL_RCC_ClockConfig+0x1cc>)
 80050c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_RCC_ClockConfig+0x1d0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe ff8a 	bl	8003fe8 <HAL_InitTick>

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40022000 	.word	0x40022000
 80050e4:	40021000 	.word	0x40021000
 80050e8:	08008208 	.word	0x08008208
 80050ec:	20000090 	.word	0x20000090
 80050f0:	20000094 	.word	0x20000094

080050f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f4:	b490      	push	{r4, r7}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80050fa:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80050fc:	1d3c      	adds	r4, r7, #4
 80050fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005104:	4b28      	ldr	r3, [pc, #160]	; (80051a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	2300      	movs	r3, #0
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	2300      	movs	r3, #0
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800511e:	4b23      	ldr	r3, [pc, #140]	; (80051ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b04      	cmp	r3, #4
 800512c:	d002      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x40>
 800512e:	2b08      	cmp	r3, #8
 8005130:	d003      	beq.n	800513a <HAL_RCC_GetSysClockFreq+0x46>
 8005132:	e02d      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005134:	4b1e      	ldr	r3, [pc, #120]	; (80051b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005136:	623b      	str	r3, [r7, #32]
      break;
 8005138:	e02d      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	0c9b      	lsrs	r3, r3, #18
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005146:	4413      	add	r3, r2
 8005148:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800514c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d013      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005158:	4b14      	ldr	r3, [pc, #80]	; (80051ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	0c5b      	lsrs	r3, r3, #17
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005166:	4413      	add	r3, r2
 8005168:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800516c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005172:	fb02 f203 	mul.w	r2, r2, r3
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	e004      	b.n	800518a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4a0c      	ldr	r2, [pc, #48]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	623b      	str	r3, [r7, #32]
      break;
 800518e:	e002      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005190:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005192:	623b      	str	r3, [r7, #32]
      break;
 8005194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005196:	6a3b      	ldr	r3, [r7, #32]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bc90      	pop	{r4, r7}
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	080081e0 	.word	0x080081e0
 80051a8:	080081f0 	.word	0x080081f0
 80051ac:	40021000 	.word	0x40021000
 80051b0:	007a1200 	.word	0x007a1200
 80051b4:	003d0900 	.word	0x003d0900

080051b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051bc:	4b02      	ldr	r3, [pc, #8]	; (80051c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr
 80051c8:	20000090 	.word	0x20000090

080051cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051d0:	f7ff fff2 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 80051d4:	4601      	mov	r1, r0
 80051d6:	4b05      	ldr	r3, [pc, #20]	; (80051ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	4a03      	ldr	r2, [pc, #12]	; (80051f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e2:	5cd3      	ldrb	r3, [r2, r3]
 80051e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40021000 	.word	0x40021000
 80051f0:	08008218 	.word	0x08008218

080051f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051f8:	f7ff ffde 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 80051fc:	4601      	mov	r1, r0
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	0adb      	lsrs	r3, r3, #11
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	4a03      	ldr	r2, [pc, #12]	; (8005218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800520a:	5cd3      	ldrb	r3, [r2, r3]
 800520c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005210:	4618      	mov	r0, r3
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40021000 	.word	0x40021000
 8005218:	08008218 	.word	0x08008218

0800521c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <RCC_Delay+0x34>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a0a      	ldr	r2, [pc, #40]	; (8005254 <RCC_Delay+0x38>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	0a5b      	lsrs	r3, r3, #9
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005238:	bf00      	nop
  }
  while (Delay --);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1e5a      	subs	r2, r3, #1
 800523e:	60fa      	str	r2, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f9      	bne.n	8005238 <RCC_Delay+0x1c>
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20000090 	.word	0x20000090
 8005254:	10624dd3 	.word	0x10624dd3

08005258 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d07d      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005274:	2300      	movs	r3, #0
 8005276:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005278:	4b4f      	ldr	r3, [pc, #316]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10d      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005284:	4b4c      	ldr	r3, [pc, #304]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	4a4b      	ldr	r2, [pc, #300]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800528a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800528e:	61d3      	str	r3, [r2, #28]
 8005290:	4b49      	ldr	r3, [pc, #292]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529c:	2301      	movs	r3, #1
 800529e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a0:	4b46      	ldr	r3, [pc, #280]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d118      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ac:	4b43      	ldr	r3, [pc, #268]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a42      	ldr	r2, [pc, #264]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052b8:	f7fe fed8 	bl	800406c <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052be:	e008      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c0:	f7fe fed4 	bl	800406c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	d901      	bls.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e06d      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d2:	4b3a      	ldr	r3, [pc, #232]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f0      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052de:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d02e      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d027      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052fc:	4b2e      	ldr	r3, [pc, #184]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005304:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005306:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005308:	2201      	movs	r2, #1
 800530a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800530c:	4b2c      	ldr	r3, [pc, #176]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005312:	4a29      	ldr	r2, [pc, #164]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d014      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005322:	f7fe fea3 	bl	800406c <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005328:	e00a      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532a:	f7fe fe9f 	bl	800406c <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	f241 3288 	movw	r2, #5000	; 0x1388
 8005338:	4293      	cmp	r3, r2
 800533a:	d901      	bls.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e036      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005340:	4b1d      	ldr	r3, [pc, #116]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0ee      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800534c:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4917      	ldr	r1, [pc, #92]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535a:	4313      	orrs	r3, r2
 800535c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800535e:	7dfb      	ldrb	r3, [r7, #23]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d105      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005364:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	4a13      	ldr	r2, [pc, #76]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800536e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	490b      	ldr	r1, [pc, #44]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538a:	4313      	orrs	r3, r2
 800538c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800539a:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	4904      	ldr	r1, [pc, #16]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000
 80053bc:	40007000 	.word	0x40007000
 80053c0:	42420440 	.word	0x42420440

080053c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053c4:	b590      	push	{r4, r7, lr}
 80053c6:	b08d      	sub	sp, #52	; 0x34
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80053cc:	4b55      	ldr	r3, [pc, #340]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80053ce:	f107 040c 	add.w	r4, r7, #12
 80053d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80053d8:	4b53      	ldr	r3, [pc, #332]	; (8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	2300      	movs	r3, #0
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e6:	2300      	movs	r3, #0
 80053e8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	2300      	movs	r3, #0
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d07f      	beq.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d002      	beq.n	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d048      	beq.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005400:	e08b      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8005402:	4b4a      	ldr	r3, [pc, #296]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005408:	4b48      	ldr	r3, [pc, #288]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d07f      	beq.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	0c9b      	lsrs	r3, r3, #18
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005420:	4413      	add	r3, r2
 8005422:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005426:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d018      	beq.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005432:	4b3e      	ldr	r3, [pc, #248]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	0c5b      	lsrs	r3, r3, #17
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005440:	4413      	add	r3, r2
 8005442:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005452:	4a37      	ldr	r2, [pc, #220]	; (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	fbb2 f2f3 	udiv	r2, r2, r3
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	fb02 f303 	mul.w	r3, r2, r3
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005462:	e004      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	4a33      	ldr	r2, [pc, #204]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005468:	fb02 f303 	mul.w	r3, r2, r3
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800547a:	d102      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005480:	e048      	b.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	4a2c      	ldr	r2, [pc, #176]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005490:	e040      	b.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8005492:	4b26      	ldr	r3, [pc, #152]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a2:	d108      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80054ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b4:	e01f      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c0:	d109      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80054c2:	4b1a      	ldr	r3, [pc, #104]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80054ce:	f649 4340 	movw	r3, #40000	; 0x9c40
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d4:	e00f      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054e0:	d11a      	bne.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d014      	beq.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80054ee:	f24f 4324 	movw	r3, #62500	; 0xf424
 80054f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80054f4:	e010      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80054f6:	e00f      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80054f8:	f7ff fe7c 	bl	80051f4 <HAL_RCC_GetPCLK2Freq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b0b      	ldr	r3, [pc, #44]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	0b9b      	lsrs	r3, r3, #14
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	3301      	adds	r3, #1
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005512:	e002      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005518:	bf00      	nop
    }
  }
  return (frequency);
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800551c:	4618      	mov	r0, r3
 800551e:	3734      	adds	r7, #52	; 0x34
 8005520:	46bd      	mov	sp, r7
 8005522:	bd90      	pop	{r4, r7, pc}
 8005524:	080081f4 	.word	0x080081f4
 8005528:	08008204 	.word	0x08008204
 800552c:	40021000 	.word	0x40021000
 8005530:	007a1200 	.word	0x007a1200
 8005534:	003d0900 	.word	0x003d0900
 8005538:	aaaaaaab 	.word	0xaaaaaaab

0800553c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e084      	b.n	800565c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	7c5b      	ldrb	r3, [r3, #17]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fe fa14 	bl	8003990 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fbd0 	bl	8005d14 <HAL_RTC_WaitForSynchro>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2204      	movs	r2, #4
 800557e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e06b      	b.n	800565c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fc89 	bl	8005e9c <RTC_EnterInitMode>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2204      	movs	r2, #4
 8005594:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e060      	b.n	800565c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0207 	bic.w	r2, r2, #7
 80055a8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80055b2:	4b2c      	ldr	r3, [pc, #176]	; (8005664 <HAL_RTC_Init+0x128>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	4a2b      	ldr	r2, [pc, #172]	; (8005664 <HAL_RTC_Init+0x128>)
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80055be:	4b29      	ldr	r3, [pc, #164]	; (8005664 <HAL_RTC_Init+0x128>)
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	4926      	ldr	r1, [pc, #152]	; (8005664 <HAL_RTC_Init+0x128>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055d8:	d003      	beq.n	80055e2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	e00e      	b.n	8005600 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80055e2:	2001      	movs	r0, #1
 80055e4:	f7ff feee 	bl	80053c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80055e8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d104      	bne.n	80055fa <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2204      	movs	r2, #4
 80055f4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e030      	b.n	800565c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f023 010f 	bic.w	r1, r3, #15
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	0c1a      	lsrs	r2, r3, #16
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	b291      	uxth	r1, r2
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	430b      	orrs	r3, r1
 800562a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fc5d 	bl	8005eec <RTC_ExitInitMode>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2204      	movs	r2, #4
 800563c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e00c      	b.n	800565c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800565a:	2300      	movs	r3, #0
  }
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40006c00 	.word	0x40006c00

08005668 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005668:	b590      	push	{r4, r7, lr}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_RTC_SetTime+0x20>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e080      	b.n	800578e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	7c1b      	ldrb	r3, [r3, #16]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_RTC_SetTime+0x30>
 8005694:	2302      	movs	r3, #2
 8005696:	e07a      	b.n	800578e <HAL_RTC_SetTime+0x126>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2202      	movs	r2, #2
 80056a2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d113      	bne.n	80056d2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80056b4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	4619      	mov	r1, r3
 80056be:	460b      	mov	r3, r1
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	1a5b      	subs	r3, r3, r1
 80056c4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80056c6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80056cc:	4413      	add	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	e01e      	b.n	8005710 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fc4d 	bl	8005f76 <RTC_Bcd2ToByte>
 80056dc:	4603      	mov	r3, r0
 80056de:	461a      	mov	r2, r3
 80056e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80056e4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fc42 	bl	8005f76 <RTC_Bcd2ToByte>
 80056f2:	4603      	mov	r3, r0
 80056f4:	461a      	mov	r2, r3
 80056f6:	4613      	mov	r3, r2
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80056fe:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	789b      	ldrb	r3, [r3, #2]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fc36 	bl	8005f76 <RTC_Bcd2ToByte>
 800570a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800570c:	4423      	add	r3, r4
 800570e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 fb5b 	bl	8005dce <RTC_WriteTimeCounter>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2204      	movs	r2, #4
 8005722:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e02f      	b.n	800578e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0205 	bic.w	r2, r2, #5
 800573c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fb6c 	bl	8005e1c <RTC_ReadAlarmCounter>
 8005744:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800574c:	d018      	beq.n	8005780 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	429a      	cmp	r2, r3
 8005754:	d214      	bcs.n	8005780 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800575c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005760:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005762:	6939      	ldr	r1, [r7, #16]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 fb72 	bl	8005e4e <RTC_WriteAlarmCounter>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2204      	movs	r2, #4
 8005774:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e006      	b.n	800578e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800578c:	2300      	movs	r3, #0
  }
}
 800578e:	4618      	mov	r0, r3
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	bd90      	pop	{r4, r7, pc}
	...

08005798 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	2300      	movs	r3, #0
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	2300      	movs	r3, #0
 80057b2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_RTC_GetTime+0x28>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0b5      	b.n	8005930 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e0ac      	b.n	8005930 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fac9 	bl	8005d6e <RTC_ReadTimeCounter>
 80057dc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	4a55      	ldr	r2, [pc, #340]	; (8005938 <HAL_RTC_GetTime+0x1a0>)
 80057e2:	fba2 2303 	umull	r2, r3, r2, r3
 80057e6:	0adb      	lsrs	r3, r3, #11
 80057e8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	4b52      	ldr	r3, [pc, #328]	; (8005938 <HAL_RTC_GetTime+0x1a0>)
 80057ee:	fba3 1302 	umull	r1, r3, r3, r2
 80057f2:	0adb      	lsrs	r3, r3, #11
 80057f4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80057f8:	fb01 f303 	mul.w	r3, r1, r3
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	4a4f      	ldr	r2, [pc, #316]	; (800593c <HAL_RTC_GetTime+0x1a4>)
 8005800:	fba2 2303 	umull	r2, r3, r2, r3
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	b2da      	uxtb	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	4a4a      	ldr	r2, [pc, #296]	; (8005938 <HAL_RTC_GetTime+0x1a0>)
 8005810:	fba2 1203 	umull	r1, r2, r2, r3
 8005814:	0ad2      	lsrs	r2, r2, #11
 8005816:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800581a:	fb01 f202 	mul.w	r2, r1, r2
 800581e:	1a9a      	subs	r2, r3, r2
 8005820:	4b46      	ldr	r3, [pc, #280]	; (800593c <HAL_RTC_GetTime+0x1a4>)
 8005822:	fba3 1302 	umull	r1, r3, r3, r2
 8005826:	0959      	lsrs	r1, r3, #5
 8005828:	460b      	mov	r3, r1
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	1a5b      	subs	r3, r3, r1
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	1ad1      	subs	r1, r2, r3
 8005832:	b2ca      	uxtb	r2, r1
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b17      	cmp	r3, #23
 800583c:	d955      	bls.n	80058ea <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4a3f      	ldr	r2, [pc, #252]	; (8005940 <HAL_RTC_GetTime+0x1a8>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800584a:	6939      	ldr	r1, [r7, #16]
 800584c:	4b3c      	ldr	r3, [pc, #240]	; (8005940 <HAL_RTC_GetTime+0x1a8>)
 800584e:	fba3 2301 	umull	r2, r3, r3, r1
 8005852:	091a      	lsrs	r2, r3, #4
 8005854:	4613      	mov	r3, r2
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	1aca      	subs	r2, r1, r3
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fad9 	bl	8005e1c <RTC_ReadAlarmCounter>
 800586a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005872:	d008      	beq.n	8005886 <HAL_RTC_GetTime+0xee>
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	429a      	cmp	r2, r3
 800587a:	d904      	bls.n	8005886 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	e002      	b.n	800588c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800588a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4a2d      	ldr	r2, [pc, #180]	; (8005944 <HAL_RTC_GetTime+0x1ac>)
 8005890:	fb02 f303 	mul.w	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800589a:	69b9      	ldr	r1, [r7, #24]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fa96 	bl	8005dce <RTC_WriteTimeCounter>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e041      	b.n	8005930 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058b2:	d00c      	beq.n	80058ce <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	4413      	add	r3, r2
 80058ba:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80058bc:	69f9      	ldr	r1, [r7, #28]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fac5 	bl	8005e4e <RTC_WriteAlarmCounter>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e030      	b.n	8005930 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80058ce:	69f9      	ldr	r1, [r7, #28]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fabc 	bl	8005e4e <RTC_WriteAlarmCounter>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e027      	b.n	8005930 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80058e0:	6979      	ldr	r1, [r7, #20]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fb64 	bl	8005fb0 <RTC_DateUpdate>
 80058e8:	e003      	b.n	80058f2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01a      	beq.n	800592e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fb1d 	bl	8005f3c <RTC_ByteToBcd2>
 8005902:	4603      	mov	r3, r0
 8005904:	461a      	mov	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	785b      	ldrb	r3, [r3, #1]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fb14 	bl	8005f3c <RTC_ByteToBcd2>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	789b      	ldrb	r3, [r3, #2]
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fb0b 	bl	8005f3c <RTC_ByteToBcd2>
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3720      	adds	r7, #32
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	91a2b3c5 	.word	0x91a2b3c5
 800593c:	88888889 	.word	0x88888889
 8005940:	aaaaaaab 	.word	0xaaaaaaab
 8005944:	00015180 	.word	0x00015180

08005948 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <HAL_RTC_SetDate+0x24>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e097      	b.n	8005aa0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	7c1b      	ldrb	r3, [r3, #16]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_RTC_SetDate+0x34>
 8005978:	2302      	movs	r3, #2
 800597a:	e091      	b.n	8005aa0 <HAL_RTC_SetDate+0x158>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2202      	movs	r2, #2
 8005986:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10c      	bne.n	80059a8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	78da      	ldrb	r2, [r3, #3]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	785a      	ldrb	r2, [r3, #1]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	789a      	ldrb	r2, [r3, #2]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	739a      	strb	r2, [r3, #14]
 80059a6:	e01a      	b.n	80059de <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	78db      	ldrb	r3, [r3, #3]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fae2 	bl	8005f76 <RTC_Bcd2ToByte>
 80059b2:	4603      	mov	r3, r0
 80059b4:	461a      	mov	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fad9 	bl	8005f76 <RTC_Bcd2ToByte>
 80059c4:	4603      	mov	r3, r0
 80059c6:	461a      	mov	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	789b      	ldrb	r3, [r3, #2]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fad0 	bl	8005f76 <RTC_Bcd2ToByte>
 80059d6:	4603      	mov	r3, r0
 80059d8:	461a      	mov	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	7bdb      	ldrb	r3, [r3, #15]
 80059e2:	4618      	mov	r0, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	7b59      	ldrb	r1, [r3, #13]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	7b9b      	ldrb	r3, [r3, #14]
 80059ec:	461a      	mov	r2, r3
 80059ee:	f000 fbbb 	bl	8006168 <RTC_WeekDayNum>
 80059f2:	4603      	mov	r3, r0
 80059f4:	461a      	mov	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	7b1a      	ldrb	r2, [r3, #12]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f9b3 	bl	8005d6e <RTC_ReadTimeCounter>
 8005a08:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <HAL_RTC_SetDate+0x160>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	0adb      	lsrs	r3, r3, #11
 8005a14:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b18      	cmp	r3, #24
 8005a1a:	d93a      	bls.n	8005a92 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4a23      	ldr	r2, [pc, #140]	; (8005aac <HAL_RTC_SetDate+0x164>)
 8005a20:	fba2 2303 	umull	r2, r3, r2, r3
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <HAL_RTC_SetDate+0x168>)
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005a32:	69f9      	ldr	r1, [r7, #28]
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f9ca 	bl	8005dce <RTC_WriteTimeCounter>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d007      	beq.n	8005a50 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2204      	movs	r2, #4
 8005a44:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e027      	b.n	8005aa0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f9e3 	bl	8005e1c <RTC_ReadAlarmCounter>
 8005a56:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a5e:	d018      	beq.n	8005a92 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d214      	bcs.n	8005a92 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005a6e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005a72:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f9e9 	bl	8005e4e <RTC_WriteAlarmCounter>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2204      	movs	r2, #4
 8005a86:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e006      	b.n	8005aa0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	91a2b3c5 	.word	0x91a2b3c5
 8005aac:	aaaaaaab 	.word	0xaaaaaaab
 8005ab0:	00015180 	.word	0x00015180

08005ab4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005ac0:	f107 0314 	add.w	r3, r7, #20
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	460a      	mov	r2, r1
 8005acc:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_RTC_GetDate+0x26>
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e03a      	b.n	8005b54 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005ade:	f107 0314 	add.w	r3, r7, #20
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff fe56 	bl	8005798 <HAL_RTC_GetTime>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e02e      	b.n	8005b54 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	7b1a      	ldrb	r2, [r3, #12]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	7bda      	ldrb	r2, [r3, #15]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	7b5a      	ldrb	r2, [r3, #13]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	7b9a      	ldrb	r2, [r3, #14]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01a      	beq.n	8005b52 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	78db      	ldrb	r3, [r3, #3]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fa0b 	bl	8005f3c <RTC_ByteToBcd2>
 8005b26:	4603      	mov	r3, r0
 8005b28:	461a      	mov	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fa02 	bl	8005f3c <RTC_ByteToBcd2>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	789b      	ldrb	r3, [r3, #2]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f9f9 	bl	8005f3c <RTC_ByteToBcd2>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b089      	sub	sp, #36	; 0x24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8005b6c:	f107 0314 	add.w	r3, r7, #20
 8005b70:	2100      	movs	r1, #0
 8005b72:	460a      	mov	r2, r1
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	460a      	mov	r2, r1
 8005b78:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <HAL_RTC_SetAlarm_IT+0x2a>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e096      	b.n	8005cb8 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	7c1b      	ldrb	r3, [r3, #16]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_RTC_SetAlarm_IT+0x3a>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e090      	b.n	8005cb8 <HAL_RTC_SetAlarm_IT+0x15c>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005ba2:	f107 0314 	add.w	r3, r7, #20
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	4619      	mov	r1, r3
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f7ff fdf4 	bl	8005798 <HAL_RTC_GetTime>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e07e      	b.n	8005cb8 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005bba:	7d3b      	ldrb	r3, [r7, #20]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005bc2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8005bc6:	7d7b      	ldrb	r3, [r7, #21]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	460b      	mov	r3, r1
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	1a5b      	subs	r3, r3, r1
 8005bd0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005bd2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8005bd4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005bd6:	4413      	add	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d113      	bne.n	8005c08 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005bea:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	1a5b      	subs	r3, r3, r1
 8005bfa:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005bfc:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005c02:	4413      	add	r3, r2
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	e01e      	b.n	8005c46 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 f9b2 	bl	8005f76 <RTC_Bcd2ToByte>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461a      	mov	r2, r3
 8005c16:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c1a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 f9a7 	bl	8005f76 <RTC_Bcd2ToByte>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005c34:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	789b      	ldrb	r3, [r3, #2]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f99b 	bl	8005f76 <RTC_Bcd2ToByte>
 8005c40:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005c42:	4423      	add	r3, r4
 8005c44:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d205      	bcs.n	8005c5a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005c54:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005c58:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005c5a:	69f9      	ldr	r1, [r7, #28]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f8f6 	bl	8005e4e <RTC_WriteAlarmCounter>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d007      	beq.n	8005c78 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e01f      	b.n	8005cb8 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0202 	mvn.w	r2, #2
 8005c80:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0202 	orr.w	r2, r2, #2
 8005c90:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RTC_SetAlarm_IT+0x164>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <HAL_RTC_SetAlarm_IT+0x164>)
 8005c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c9c:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005c9e:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <HAL_RTC_SetAlarm_IT+0x164>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <HAL_RTC_SetAlarm_IT+0x164>)
 8005ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca8:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2201      	movs	r2, #1
 8005cae:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
  }
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3724      	adds	r7, #36	; 0x24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd90      	pop	{r4, r7, pc}
 8005cc0:	40010400 	.word	0x40010400

08005cc4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7fc ffb5 	bl	8002c58 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0202 	mvn.w	r2, #2
 8005cf6:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8005cfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cfe:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	745a      	strb	r2, [r3, #17]
}
 8005d06:	bf00      	nop
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40010400 	.word	0x40010400

08005d14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e01d      	b.n	8005d66 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0208 	bic.w	r2, r2, #8
 8005d38:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005d3a:	f7fe f997 	bl	800406c <HAL_GetTick>
 8005d3e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005d40:	e009      	b.n	8005d56 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005d42:	f7fe f993 	bl	800406c <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d50:	d901      	bls.n	8005d56 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e007      	b.n	8005d66 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ee      	beq.n	8005d42 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b087      	sub	sp, #28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	827b      	strh	r3, [r7, #18]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	823b      	strh	r3, [r7, #16]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005d9e:	8a7a      	ldrh	r2, [r7, #18]
 8005da0:	8a3b      	ldrh	r3, [r7, #16]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d008      	beq.n	8005db8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005da6:	8a3b      	ldrh	r3, [r7, #16]
 8005da8:	041a      	lsls	r2, r3, #16
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	e004      	b.n	8005dc2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005db8:	8a7b      	ldrh	r3, [r7, #18]
 8005dba:	041a      	lsls	r2, r3, #16
 8005dbc:	89fb      	ldrh	r3, [r7, #14]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005dc2:	697b      	ldr	r3, [r7, #20]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr

08005dce <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f85d 	bl	8005e9c <RTC_EnterInitMode>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	73fb      	strb	r3, [r7, #15]
 8005dec:	e011      	b.n	8005e12 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	0c12      	lsrs	r2, r2, #16
 8005df6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f872 	bl	8005eec <RTC_ExitInitMode>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	81fb      	strh	r3, [r7, #14]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005e3c:	89fb      	ldrh	r3, [r7, #14]
 8005e3e:	041a      	lsls	r2, r3, #16
 8005e40:	89bb      	ldrh	r3, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f81d 	bl	8005e9c <RTC_EnterInitMode>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	e011      	b.n	8005e92 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	0c12      	lsrs	r2, r2, #16
 8005e76:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	b292      	uxth	r2, r2
 8005e80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f832 	bl	8005eec <RTC_ExitInitMode>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005ea8:	f7fe f8e0 	bl	800406c <HAL_GetTick>
 8005eac:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005eae:	e009      	b.n	8005ec4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005eb0:	f7fe f8dc 	bl	800406c <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ebe:	d901      	bls.n	8005ec4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e00f      	b.n	8005ee4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0ee      	beq.n	8005eb0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0210 	orr.w	r2, r2, #16
 8005ee0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0210 	bic.w	r2, r2, #16
 8005f06:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005f08:	f7fe f8b0 	bl	800406c <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005f0e:	e009      	b.n	8005f24 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005f10:	f7fe f8ac 	bl	800406c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f1e:	d901      	bls.n	8005f24 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e007      	b.n	8005f34 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0ee      	beq.n	8005f10 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005f4a:	e005      	b.n	8005f58 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	3b0a      	subs	r3, #10
 8005f56:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	2b09      	cmp	r3, #9
 8005f5c:	d8f6      	bhi.n	8005f4c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	b2db      	uxtb	r3, r3
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	091b      	lsrs	r3, r3, #4
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	b2db      	uxtb	r3, r3
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr

08005fb0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	7bdb      	ldrb	r3, [r3, #15]
 8005fce:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7b5b      	ldrb	r3, [r3, #13]
 8005fd4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	7b9b      	ldrb	r3, [r3, #14]
 8005fda:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60bb      	str	r3, [r7, #8]
 8005fe0:	e06f      	b.n	80060c2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d011      	beq.n	800600c <RTC_DateUpdate+0x5c>
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d00e      	beq.n	800600c <RTC_DateUpdate+0x5c>
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b05      	cmp	r3, #5
 8005ff2:	d00b      	beq.n	800600c <RTC_DateUpdate+0x5c>
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2b07      	cmp	r3, #7
 8005ff8:	d008      	beq.n	800600c <RTC_DateUpdate+0x5c>
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d005      	beq.n	800600c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b0a      	cmp	r3, #10
 8006004:	d002      	beq.n	800600c <RTC_DateUpdate+0x5c>
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b0c      	cmp	r3, #12
 800600a:	d117      	bne.n	800603c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b1e      	cmp	r3, #30
 8006010:	d803      	bhi.n	800601a <RTC_DateUpdate+0x6a>
      {
        day++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3301      	adds	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006018:	e050      	b.n	80060bc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b0c      	cmp	r3, #12
 800601e:	d005      	beq.n	800602c <RTC_DateUpdate+0x7c>
        {
          month++;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	3301      	adds	r3, #1
 8006024:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006026:	2301      	movs	r3, #1
 8006028:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800602a:	e047      	b.n	80060bc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800602c:	2301      	movs	r3, #1
 800602e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006030:	2301      	movs	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]
          year++;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	3301      	adds	r3, #1
 8006038:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800603a:	e03f      	b.n	80060bc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2b04      	cmp	r3, #4
 8006040:	d008      	beq.n	8006054 <RTC_DateUpdate+0xa4>
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b06      	cmp	r3, #6
 8006046:	d005      	beq.n	8006054 <RTC_DateUpdate+0xa4>
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b09      	cmp	r3, #9
 800604c:	d002      	beq.n	8006054 <RTC_DateUpdate+0xa4>
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b0b      	cmp	r3, #11
 8006052:	d10c      	bne.n	800606e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b1d      	cmp	r3, #29
 8006058:	d803      	bhi.n	8006062 <RTC_DateUpdate+0xb2>
      {
        day++;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3301      	adds	r3, #1
 800605e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006060:	e02c      	b.n	80060bc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	3301      	adds	r3, #1
 8006066:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006068:	2301      	movs	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800606c:	e026      	b.n	80060bc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b02      	cmp	r3, #2
 8006072:	d123      	bne.n	80060bc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b1b      	cmp	r3, #27
 8006078:	d803      	bhi.n	8006082 <RTC_DateUpdate+0xd2>
      {
        day++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3301      	adds	r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	e01c      	b.n	80060bc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b1c      	cmp	r3, #28
 8006086:	d111      	bne.n	80060ac <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	b29b      	uxth	r3, r3
 800608c:	4618      	mov	r0, r3
 800608e:	f000 f839 	bl	8006104 <RTC_IsLeapYear>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3301      	adds	r3, #1
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e00d      	b.n	80060bc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	3301      	adds	r3, #1
 80060a4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80060a6:	2301      	movs	r3, #1
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e007      	b.n	80060bc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b1d      	cmp	r3, #29
 80060b0:	d104      	bne.n	80060bc <RTC_DateUpdate+0x10c>
      {
        month++;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	3301      	adds	r3, #1
 80060b6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80060b8:	2301      	movs	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	3301      	adds	r3, #1
 80060c0:	60bb      	str	r3, [r7, #8]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d38b      	bcc.n	8005fe2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	4619      	mov	r1, r3
 80060ec:	6978      	ldr	r0, [r7, #20]
 80060ee:	f000 f83b 	bl	8006168 <RTC_WeekDayNum>
 80060f2:	4603      	mov	r3, r0
 80060f4:	461a      	mov	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	731a      	strb	r2, [r3, #12]
}
 80060fa:	bf00      	nop
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	e01d      	b.n	800615a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	4a10      	ldr	r2, [pc, #64]	; (8006164 <RTC_IsLeapYear+0x60>)
 8006122:	fba2 1203 	umull	r1, r2, r2, r3
 8006126:	0952      	lsrs	r2, r2, #5
 8006128:	2164      	movs	r1, #100	; 0x64
 800612a:	fb01 f202 	mul.w	r2, r1, r2
 800612e:	1a9b      	subs	r3, r3, r2
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006136:	2301      	movs	r3, #1
 8006138:	e00f      	b.n	800615a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	4a09      	ldr	r2, [pc, #36]	; (8006164 <RTC_IsLeapYear+0x60>)
 800613e:	fba2 1203 	umull	r1, r2, r2, r3
 8006142:	09d2      	lsrs	r2, r2, #7
 8006144:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006148:	fb01 f202 	mul.w	r2, r1, r2
 800614c:	1a9b      	subs	r3, r3, r2
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006154:	2301      	movs	r3, #1
 8006156:	e000      	b.n	800615a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006158:	2300      	movs	r3, #0
  }
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr
 8006164:	51eb851f 	.word	0x51eb851f

08006168 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	70fb      	strb	r3, [r7, #3]
 8006174:	4613      	mov	r3, r2
 8006176:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	2300      	movs	r3, #0
 800617e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006186:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d82d      	bhi.n	80061ea <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800618e:	78fa      	ldrb	r2, [r7, #3]
 8006190:	4613      	mov	r3, r2
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	4413      	add	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	1a9b      	subs	r3, r3, r2
 800619a:	4a2c      	ldr	r2, [pc, #176]	; (800624c <RTC_WeekDayNum+0xe4>)
 800619c:	fba2 2303 	umull	r2, r3, r2, r3
 80061a0:	085a      	lsrs	r2, r3, #1
 80061a2:	78bb      	ldrb	r3, [r7, #2]
 80061a4:	441a      	add	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	441a      	add	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	089b      	lsrs	r3, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	4926      	ldr	r1, [pc, #152]	; (8006250 <RTC_WeekDayNum+0xe8>)
 80061b8:	fba1 1303 	umull	r1, r3, r1, r3
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	4922      	ldr	r1, [pc, #136]	; (8006250 <RTC_WeekDayNum+0xe8>)
 80061c6:	fba1 1303 	umull	r1, r3, r1, r3
 80061ca:	09db      	lsrs	r3, r3, #7
 80061cc:	4413      	add	r3, r2
 80061ce:	1d1a      	adds	r2, r3, #4
 80061d0:	4b20      	ldr	r3, [pc, #128]	; (8006254 <RTC_WeekDayNum+0xec>)
 80061d2:	fba3 1302 	umull	r1, r3, r3, r2
 80061d6:	1ad1      	subs	r1, r2, r3
 80061d8:	0849      	lsrs	r1, r1, #1
 80061da:	440b      	add	r3, r1
 80061dc:	0899      	lsrs	r1, r3, #2
 80061de:	460b      	mov	r3, r1
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	1a5b      	subs	r3, r3, r1
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	e029      	b.n	800623e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	4613      	mov	r3, r2
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	4413      	add	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	1a9b      	subs	r3, r3, r2
 80061f6:	4a15      	ldr	r2, [pc, #84]	; (800624c <RTC_WeekDayNum+0xe4>)
 80061f8:	fba2 2303 	umull	r2, r3, r2, r3
 80061fc:	085a      	lsrs	r2, r3, #1
 80061fe:	78bb      	ldrb	r3, [r7, #2]
 8006200:	441a      	add	r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	441a      	add	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	089b      	lsrs	r3, r3, #2
 800620a:	441a      	add	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4910      	ldr	r1, [pc, #64]	; (8006250 <RTC_WeekDayNum+0xe8>)
 8006210:	fba1 1303 	umull	r1, r3, r1, r3
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	1ad2      	subs	r2, r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	490d      	ldr	r1, [pc, #52]	; (8006250 <RTC_WeekDayNum+0xe8>)
 800621c:	fba1 1303 	umull	r1, r3, r1, r3
 8006220:	09db      	lsrs	r3, r3, #7
 8006222:	4413      	add	r3, r2
 8006224:	1c9a      	adds	r2, r3, #2
 8006226:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <RTC_WeekDayNum+0xec>)
 8006228:	fba3 1302 	umull	r1, r3, r3, r2
 800622c:	1ad1      	subs	r1, r2, r3
 800622e:	0849      	lsrs	r1, r1, #1
 8006230:	440b      	add	r3, r1
 8006232:	0899      	lsrs	r1, r3, #2
 8006234:	460b      	mov	r3, r1
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	1a5b      	subs	r3, r3, r1
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	b2db      	uxtb	r3, r3
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr
 800624c:	38e38e39 	.word	0x38e38e39
 8006250:	51eb851f 	.word	0x51eb851f
 8006254:	24924925 	.word	0x24924925

08006258 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d024      	beq.n	80062b8 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01d      	beq.n	80062b8 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00b      	beq.n	80062a2 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f821 	bl	80062d2 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0204 	mvn.w	r2, #4
 8006298:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2204      	movs	r2, #4
 800629e:	745a      	strb	r2, [r3, #17]
 80062a0:	e005      	b.n	80062ae <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f80c 	bl	80062c0 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f06f 0201 	mvn.w	r2, #1
 80062b6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr

080062d2 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr

080062e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e053      	b.n	800639e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d106      	bne.n	8006316 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7fd fba7 	bl	8003a64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2202      	movs	r2, #2
 800631a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800632c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	ea42 0103 	orr.w	r1, r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	0c1a      	lsrs	r2, r3, #16
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f002 0204 	and.w	r2, r2, #4
 800637c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800638c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b088      	sub	sp, #32
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	603b      	str	r3, [r7, #0]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_SPI_Transmit+0x22>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e11e      	b.n	8006606 <HAL_SPI_Transmit+0x260>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063d0:	f7fd fe4c 	bl	800406c <HAL_GetTick>
 80063d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d002      	beq.n	80063ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063e6:	2302      	movs	r3, #2
 80063e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ea:	e103      	b.n	80065f4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_SPI_Transmit+0x52>
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063fc:	e0fa      	b.n	80065f4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2203      	movs	r2, #3
 8006402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006444:	d107      	bne.n	8006456 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006454:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d007      	beq.n	8006474 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647c:	d14b      	bne.n	8006516 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_SPI_Transmit+0xe6>
 8006486:	8afb      	ldrh	r3, [r7, #22]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d13e      	bne.n	800650a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	881a      	ldrh	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	1c9a      	adds	r2, r3, #2
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064b0:	e02b      	b.n	800650a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d112      	bne.n	80064e6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	881a      	ldrh	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	1c9a      	adds	r2, r3, #2
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80064e4:	e011      	b.n	800650a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e6:	f7fd fdc1 	bl	800406c <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d803      	bhi.n	80064fe <HAL_SPI_Transmit+0x158>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_Transmit+0x15e>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006508:	e074      	b.n	80065f4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1ce      	bne.n	80064b2 <HAL_SPI_Transmit+0x10c>
 8006514:	e04c      	b.n	80065b0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_SPI_Transmit+0x17e>
 800651e:	8afb      	ldrh	r3, [r7, #22]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d140      	bne.n	80065a6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800654a:	e02c      	b.n	80065a6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b02      	cmp	r3, #2
 8006558:	d113      	bne.n	8006582 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	330c      	adds	r3, #12
 8006564:	7812      	ldrb	r2, [r2, #0]
 8006566:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006580:	e011      	b.n	80065a6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006582:	f7fd fd73 	bl	800406c <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d803      	bhi.n	800659a <HAL_SPI_Transmit+0x1f4>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006598:	d102      	bne.n	80065a0 <HAL_SPI_Transmit+0x1fa>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d102      	bne.n	80065a6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065a4:	e026      	b.n	80065f4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1cd      	bne.n	800654c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fb91 	bl	8006cdc <SPI_EndRxTxTransaction>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2220      	movs	r2, #32
 80065c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e000      	b.n	80065f4 <HAL_SPI_Transmit+0x24e>
  }

error:
 80065f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006604:	7ffb      	ldrb	r3, [r7, #31]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3720      	adds	r7, #32
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b088      	sub	sp, #32
 8006612:	af02      	add	r7, sp, #8
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800662a:	d112      	bne.n	8006652 <HAL_SPI_Receive+0x44>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10e      	bne.n	8006652 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2204      	movs	r2, #4
 8006638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	4613      	mov	r3, r2
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f8e9 	bl	8006820 <HAL_SPI_TransmitReceive>
 800664e:	4603      	mov	r3, r0
 8006650:	e0e2      	b.n	8006818 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_SPI_Receive+0x52>
 800665c:	2302      	movs	r3, #2
 800665e:	e0db      	b.n	8006818 <HAL_SPI_Receive+0x20a>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006668:	f7fd fd00 	bl	800406c <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b01      	cmp	r3, #1
 8006678:	d002      	beq.n	8006680 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800667a:	2302      	movs	r3, #2
 800667c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800667e:	e0c2      	b.n	8006806 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_SPI_Receive+0x7e>
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006690:	e0b9      	b.n	8006806 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2204      	movs	r2, #4
 8006696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	88fa      	ldrh	r2, [r7, #6]
 80066aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d8:	d107      	bne.n	80066ea <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d007      	beq.n	8006708 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006706:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d162      	bne.n	80067d6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006710:	e02e      	b.n	8006770 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b01      	cmp	r3, #1
 800671e:	d115      	bne.n	800674c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f103 020c 	add.w	r2, r3, #12
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	7812      	ldrb	r2, [r2, #0]
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	87da      	strh	r2, [r3, #62]	; 0x3e
 800674a:	e011      	b.n	8006770 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800674c:	f7fd fc8e 	bl	800406c <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d803      	bhi.n	8006764 <HAL_SPI_Receive+0x156>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006762:	d102      	bne.n	800676a <HAL_SPI_Receive+0x15c>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800676e:	e04a      	b.n	8006806 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1cb      	bne.n	8006712 <HAL_SPI_Receive+0x104>
 800677a:	e031      	b.n	80067e0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b01      	cmp	r3, #1
 8006788:	d113      	bne.n	80067b2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	b292      	uxth	r2, r2
 8006796:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067b0:	e011      	b.n	80067d6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067b2:	f7fd fc5b 	bl	800406c <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d803      	bhi.n	80067ca <HAL_SPI_Receive+0x1bc>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067c8:	d102      	bne.n	80067d0 <HAL_SPI_Receive+0x1c2>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d102      	bne.n	80067d6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067d4:	e017      	b.n	8006806 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1cd      	bne.n	800677c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fa27 	bl	8006c38 <SPI_EndRxTransaction>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	75fb      	strb	r3, [r7, #23]
 8006802:	e000      	b.n	8006806 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006804:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08c      	sub	sp, #48	; 0x30
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800682e:	2301      	movs	r3, #1
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_SPI_TransmitReceive+0x26>
 8006842:	2302      	movs	r3, #2
 8006844:	e18a      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x33c>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800684e:	f7fd fc0d 	bl	800406c <HAL_GetTick>
 8006852:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006864:	887b      	ldrh	r3, [r7, #2]
 8006866:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800686c:	2b01      	cmp	r3, #1
 800686e:	d00f      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x70>
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006876:	d107      	bne.n	8006888 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d103      	bne.n	8006888 <HAL_SPI_TransmitReceive+0x68>
 8006880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006884:	2b04      	cmp	r3, #4
 8006886:	d003      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006888:	2302      	movs	r3, #2
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800688e:	e15b      	b.n	8006b48 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <HAL_SPI_TransmitReceive+0x82>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <HAL_SPI_TransmitReceive+0x82>
 800689c:	887b      	ldrh	r3, [r7, #2]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d103      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068a8:	e14e      	b.n	8006b48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d003      	beq.n	80068be <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2205      	movs	r2, #5
 80068ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	887a      	ldrh	r2, [r7, #2]
 80068ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	887a      	ldrh	r2, [r7, #2]
 80068d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	887a      	ldrh	r2, [r7, #2]
 80068e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	887a      	ldrh	r2, [r7, #2]
 80068e6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fe:	2b40      	cmp	r3, #64	; 0x40
 8006900:	d007      	beq.n	8006912 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006910:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800691a:	d178      	bne.n	8006a0e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_SPI_TransmitReceive+0x10a>
 8006924:	8b7b      	ldrh	r3, [r7, #26]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d166      	bne.n	80069f8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692e:	881a      	ldrh	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	1c9a      	adds	r2, r3, #2
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006944:	b29b      	uxth	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800694e:	e053      	b.n	80069f8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d11b      	bne.n	8006996 <HAL_SPI_TransmitReceive+0x176>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d016      	beq.n	8006996 <HAL_SPI_TransmitReceive+0x176>
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d113      	bne.n	8006996 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	881a      	ldrh	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697e:	1c9a      	adds	r2, r3, #2
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d119      	bne.n	80069d8 <HAL_SPI_TransmitReceive+0x1b8>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d014      	beq.n	80069d8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	b292      	uxth	r2, r2
 80069ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	1c9a      	adds	r2, r3, #2
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069d4:	2301      	movs	r3, #1
 80069d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069d8:	f7fd fb48 	bl	800406c <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d807      	bhi.n	80069f8 <HAL_SPI_TransmitReceive+0x1d8>
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ee:	d003      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069f6:	e0a7      	b.n	8006b48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1a6      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x130>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1a1      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x130>
 8006a0c:	e07c      	b.n	8006b08 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_SPI_TransmitReceive+0x1fc>
 8006a16:	8b7b      	ldrh	r3, [r7, #26]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d16b      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	330c      	adds	r3, #12
 8006a26:	7812      	ldrb	r2, [r2, #0]
 8006a28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a42:	e057      	b.n	8006af4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d11c      	bne.n	8006a8c <HAL_SPI_TransmitReceive+0x26c>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d017      	beq.n	8006a8c <HAL_SPI_TransmitReceive+0x26c>
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d114      	bne.n	8006a8c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	330c      	adds	r3, #12
 8006a6c:	7812      	ldrb	r2, [r2, #0]
 8006a6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d119      	bne.n	8006ace <HAL_SPI_TransmitReceive+0x2ae>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d014      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aca:	2301      	movs	r3, #1
 8006acc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ace:	f7fd facd 	bl	800406c <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d803      	bhi.n	8006ae6 <HAL_SPI_TransmitReceive+0x2c6>
 8006ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ae4:	d102      	bne.n	8006aec <HAL_SPI_TransmitReceive+0x2cc>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d103      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006af2:	e029      	b.n	8006b48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1a2      	bne.n	8006a44 <HAL_SPI_TransmitReceive+0x224>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d19d      	bne.n	8006a44 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f8e5 	bl	8006cdc <SPI_EndRxTxTransaction>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d006      	beq.n	8006b26 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b24:	e010      	b.n	8006b48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	e000      	b.n	8006b48 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3730      	adds	r7, #48	; 0x30
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	4613      	mov	r3, r2
 8006b72:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b74:	e04c      	b.n	8006c10 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b7c:	d048      	beq.n	8006c10 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006b7e:	f7fd fa75 	bl	800406c <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d902      	bls.n	8006b94 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d13d      	bne.n	8006c10 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ba2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bac:	d111      	bne.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb6:	d004      	beq.n	8006bc2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc0:	d107      	bne.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bda:	d10f      	bne.n	8006bfc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e00f      	b.n	8006c30 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	bf0c      	ite	eq
 8006c20:	2301      	moveq	r3, #1
 8006c22:	2300      	movne	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	461a      	mov	r2, r3
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d1a3      	bne.n	8006b76 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c4c:	d111      	bne.n	8006c72 <SPI_EndRxTransaction+0x3a>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c56:	d004      	beq.n	8006c62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c60:	d107      	bne.n	8006c72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c70:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c7a:	d117      	bne.n	8006cac <SPI_EndRxTransaction+0x74>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c84:	d112      	bne.n	8006cac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2101      	movs	r1, #1
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f7ff ff67 	bl	8006b64 <SPI_WaitFlagStateUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01a      	beq.n	8006cd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca0:	f043 0220 	orr.w	r2, r3, #32
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e013      	b.n	8006cd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2180      	movs	r1, #128	; 0x80
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7ff ff54 	bl	8006b64 <SPI_WaitFlagStateUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc6:	f043 0220 	orr.w	r2, r3, #32
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e000      	b.n	8006cd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2180      	movs	r1, #128	; 0x80
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f7ff ff36 	bl	8006b64 <SPI_WaitFlagStateUntilTimeout>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d007      	beq.n	8006d0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	f043 0220 	orr.w	r2, r3, #32
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e000      	b.n	8006d10 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e01d      	b.n	8006d66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d106      	bne.n	8006d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fd f85a 	bl	8003df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	f000 fa32 	bl	80071c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b06      	cmp	r3, #6
 8006d8e:	d007      	beq.n	8006da0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0201 	orr.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b06      	cmp	r3, #6
 8006ddc:	d007      	beq.n	8006dee <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0201 	orr.w	r2, r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr

08006dfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d122      	bne.n	8006e56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d11b      	bne.n	8006e56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f06f 0202 	mvn.w	r2, #2
 8006e26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f9a4 	bl	800718a <HAL_TIM_IC_CaptureCallback>
 8006e42:	e005      	b.n	8006e50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f997 	bl	8007178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f9a6 	bl	800719c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d122      	bne.n	8006eaa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f003 0304 	and.w	r3, r3, #4
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d11b      	bne.n	8006eaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f06f 0204 	mvn.w	r2, #4
 8006e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f97a 	bl	800718a <HAL_TIM_IC_CaptureCallback>
 8006e96:	e005      	b.n	8006ea4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f96d 	bl	8007178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f97c 	bl	800719c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f003 0308 	and.w	r3, r3, #8
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d122      	bne.n	8006efe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b08      	cmp	r3, #8
 8006ec4:	d11b      	bne.n	8006efe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f06f 0208 	mvn.w	r2, #8
 8006ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2204      	movs	r2, #4
 8006ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f950 	bl	800718a <HAL_TIM_IC_CaptureCallback>
 8006eea:	e005      	b.n	8006ef8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f943 	bl	8007178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f952 	bl	800719c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f003 0310 	and.w	r3, r3, #16
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d122      	bne.n	8006f52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f003 0310 	and.w	r3, r3, #16
 8006f16:	2b10      	cmp	r3, #16
 8006f18:	d11b      	bne.n	8006f52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f06f 0210 	mvn.w	r2, #16
 8006f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2208      	movs	r2, #8
 8006f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f926 	bl	800718a <HAL_TIM_IC_CaptureCallback>
 8006f3e:	e005      	b.n	8006f4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f919 	bl	8007178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f928 	bl	800719c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d10e      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d107      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f06f 0201 	mvn.w	r2, #1
 8006f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7fb fe59 	bl	8002c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f88:	2b80      	cmp	r3, #128	; 0x80
 8006f8a:	d10e      	bne.n	8006faa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f96:	2b80      	cmp	r3, #128	; 0x80
 8006f98:	d107      	bne.n	8006faa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa50 	bl	800744a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb4:	2b40      	cmp	r3, #64	; 0x40
 8006fb6:	d10e      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc2:	2b40      	cmp	r3, #64	; 0x40
 8006fc4:	d107      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f8ec 	bl	80071ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d10e      	bne.n	8007002 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	d107      	bne.n	8007002 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f06f 0220 	mvn.w	r2, #32
 8006ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fa1b 	bl	8007438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007002:	bf00      	nop
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800701a:	2b01      	cmp	r3, #1
 800701c:	d101      	bne.n	8007022 <HAL_TIM_ConfigClockSource+0x18>
 800701e:	2302      	movs	r3, #2
 8007020:	e0a6      	b.n	8007170 <HAL_TIM_ConfigClockSource+0x166>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007040:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007048:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b40      	cmp	r3, #64	; 0x40
 8007058:	d067      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x120>
 800705a:	2b40      	cmp	r3, #64	; 0x40
 800705c:	d80b      	bhi.n	8007076 <HAL_TIM_ConfigClockSource+0x6c>
 800705e:	2b10      	cmp	r3, #16
 8007060:	d073      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x140>
 8007062:	2b10      	cmp	r3, #16
 8007064:	d802      	bhi.n	800706c <HAL_TIM_ConfigClockSource+0x62>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d06f      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800706a:	e078      	b.n	800715e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800706c:	2b20      	cmp	r3, #32
 800706e:	d06c      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x140>
 8007070:	2b30      	cmp	r3, #48	; 0x30
 8007072:	d06a      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007074:	e073      	b.n	800715e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007076:	2b70      	cmp	r3, #112	; 0x70
 8007078:	d00d      	beq.n	8007096 <HAL_TIM_ConfigClockSource+0x8c>
 800707a:	2b70      	cmp	r3, #112	; 0x70
 800707c:	d804      	bhi.n	8007088 <HAL_TIM_ConfigClockSource+0x7e>
 800707e:	2b50      	cmp	r3, #80	; 0x50
 8007080:	d033      	beq.n	80070ea <HAL_TIM_ConfigClockSource+0xe0>
 8007082:	2b60      	cmp	r3, #96	; 0x60
 8007084:	d041      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007086:	e06a      	b.n	800715e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708c:	d066      	beq.n	800715c <HAL_TIM_ConfigClockSource+0x152>
 800708e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007092:	d017      	beq.n	80070c4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007094:	e063      	b.n	800715e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6818      	ldr	r0, [r3, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6899      	ldr	r1, [r3, #8]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f000 f964 	bl	8007372 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	609a      	str	r2, [r3, #8]
      break;
 80070c2:	e04c      	b.n	800715e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	6899      	ldr	r1, [r3, #8]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f000 f94d 	bl	8007372 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070e6:	609a      	str	r2, [r3, #8]
      break;
 80070e8:	e039      	b.n	800715e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6859      	ldr	r1, [r3, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f000 f8c4 	bl	8007284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2150      	movs	r1, #80	; 0x50
 8007102:	4618      	mov	r0, r3
 8007104:	f000 f91b 	bl	800733e <TIM_ITRx_SetConfig>
      break;
 8007108:	e029      	b.n	800715e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	6859      	ldr	r1, [r3, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	461a      	mov	r2, r3
 8007118:	f000 f8e2 	bl	80072e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2160      	movs	r1, #96	; 0x60
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f90b 	bl	800733e <TIM_ITRx_SetConfig>
      break;
 8007128:	e019      	b.n	800715e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	6859      	ldr	r1, [r3, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	461a      	mov	r2, r3
 8007138:	f000 f8a4 	bl	8007284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2140      	movs	r1, #64	; 0x40
 8007142:	4618      	mov	r0, r3
 8007144:	f000 f8fb 	bl	800733e <TIM_ITRx_SetConfig>
      break;
 8007148:	e009      	b.n	800715e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4619      	mov	r1, r3
 8007154:	4610      	mov	r0, r2
 8007156:	f000 f8f2 	bl	800733e <TIM_ITRx_SetConfig>
      break;
 800715a:	e000      	b.n	800715e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800715c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr

0800718a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr

0800719c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr

080071ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr

080071c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a29      	ldr	r2, [pc, #164]	; (8007278 <TIM_Base_SetConfig+0xb8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00b      	beq.n	80071f0 <TIM_Base_SetConfig+0x30>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071de:	d007      	beq.n	80071f0 <TIM_Base_SetConfig+0x30>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a26      	ldr	r2, [pc, #152]	; (800727c <TIM_Base_SetConfig+0xbc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d003      	beq.n	80071f0 <TIM_Base_SetConfig+0x30>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a25      	ldr	r2, [pc, #148]	; (8007280 <TIM_Base_SetConfig+0xc0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d108      	bne.n	8007202 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a1c      	ldr	r2, [pc, #112]	; (8007278 <TIM_Base_SetConfig+0xb8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00b      	beq.n	8007222 <TIM_Base_SetConfig+0x62>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007210:	d007      	beq.n	8007222 <TIM_Base_SetConfig+0x62>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a19      	ldr	r2, [pc, #100]	; (800727c <TIM_Base_SetConfig+0xbc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d003      	beq.n	8007222 <TIM_Base_SetConfig+0x62>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a18      	ldr	r2, [pc, #96]	; (8007280 <TIM_Base_SetConfig+0xc0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d108      	bne.n	8007234 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4313      	orrs	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a07      	ldr	r2, [pc, #28]	; (8007278 <TIM_Base_SetConfig+0xb8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d103      	bne.n	8007268 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	691a      	ldr	r2, [r3, #16]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	615a      	str	r2, [r3, #20]
}
 800726e:	bf00      	nop
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	bc80      	pop	{r7}
 8007276:	4770      	bx	lr
 8007278:	40012c00 	.word	0x40012c00
 800727c:	40000400 	.word	0x40000400
 8007280:	40000800 	.word	0x40000800

08007284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f023 0201 	bic.w	r2, r3, #1
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f023 030a 	bic.w	r3, r3, #10
 80072c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	621a      	str	r2, [r3, #32]
}
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	bc80      	pop	{r7}
 80072de:	4770      	bx	lr

080072e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	f023 0210 	bic.w	r2, r3, #16
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800730a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	031b      	lsls	r3, r3, #12
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800731c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	621a      	str	r2, [r3, #32]
}
 8007334:	bf00      	nop
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr

0800733e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800733e:	b480      	push	{r7}
 8007340:	b085      	sub	sp, #20
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007354:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	f043 0307 	orr.w	r3, r3, #7
 8007360:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	609a      	str	r2, [r3, #8]
}
 8007368:	bf00      	nop
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	bc80      	pop	{r7}
 8007370:	4770      	bx	lr

08007372 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007372:	b480      	push	{r7}
 8007374:	b087      	sub	sp, #28
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
 800737e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800738c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	021a      	lsls	r2, r3, #8
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	431a      	orrs	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	4313      	orrs	r3, r2
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	609a      	str	r2, [r3, #8]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d101      	bne.n	80073c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073c4:	2302      	movs	r3, #2
 80073c6:	e032      	b.n	800742e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007400:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	4313      	orrs	r3, r2
 800740a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr

08007438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr

0800744a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	bc80      	pop	{r7}
 800745a:	4770      	bx	lr

0800745c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e03f      	b.n	80074ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d106      	bne.n	8007488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fc fd1a 	bl	8003ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2224      	movs	r2, #36	; 0x24
 800748c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800749e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f829 	bl	80074f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	691a      	ldr	r2, [r3, #16]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695a      	ldr	r2, [r3, #20]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2220      	movs	r2, #32
 80074e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007532:	f023 030c 	bic.w	r3, r3, #12
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	430b      	orrs	r3, r1
 800753e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a52      	ldr	r2, [pc, #328]	; (80076a4 <UART_SetConfig+0x1ac>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d14e      	bne.n	80075fe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007560:	f7fd fe48 	bl	80051f4 <HAL_RCC_GetPCLK2Freq>
 8007564:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009a      	lsls	r2, r3, #2
 8007570:	441a      	add	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	fbb2 f3f3 	udiv	r3, r2, r3
 800757c:	4a4a      	ldr	r2, [pc, #296]	; (80076a8 <UART_SetConfig+0x1b0>)
 800757e:	fba2 2303 	umull	r2, r3, r2, r3
 8007582:	095b      	lsrs	r3, r3, #5
 8007584:	0119      	lsls	r1, r3, #4
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009a      	lsls	r2, r3, #2
 8007590:	441a      	add	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	fbb2 f2f3 	udiv	r2, r2, r3
 800759c:	4b42      	ldr	r3, [pc, #264]	; (80076a8 <UART_SetConfig+0x1b0>)
 800759e:	fba3 0302 	umull	r0, r3, r3, r2
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	2064      	movs	r0, #100	; 0x64
 80075a6:	fb00 f303 	mul.w	r3, r0, r3
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	3332      	adds	r3, #50	; 0x32
 80075b0:	4a3d      	ldr	r2, [pc, #244]	; (80076a8 <UART_SetConfig+0x1b0>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075bc:	4419      	add	r1, r3
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	009a      	lsls	r2, r3, #2
 80075c8:	441a      	add	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80075d4:	4b34      	ldr	r3, [pc, #208]	; (80076a8 <UART_SetConfig+0x1b0>)
 80075d6:	fba3 0302 	umull	r0, r3, r3, r2
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	2064      	movs	r0, #100	; 0x64
 80075de:	fb00 f303 	mul.w	r3, r0, r3
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	3332      	adds	r3, #50	; 0x32
 80075e8:	4a2f      	ldr	r2, [pc, #188]	; (80076a8 <UART_SetConfig+0x1b0>)
 80075ea:	fba2 2303 	umull	r2, r3, r2, r3
 80075ee:	095b      	lsrs	r3, r3, #5
 80075f0:	f003 020f 	and.w	r2, r3, #15
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	440a      	add	r2, r1
 80075fa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80075fc:	e04d      	b.n	800769a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80075fe:	f7fd fde5 	bl	80051cc <HAL_RCC_GetPCLK1Freq>
 8007602:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009a      	lsls	r2, r3, #2
 800760e:	441a      	add	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	fbb2 f3f3 	udiv	r3, r2, r3
 800761a:	4a23      	ldr	r2, [pc, #140]	; (80076a8 <UART_SetConfig+0x1b0>)
 800761c:	fba2 2303 	umull	r2, r3, r2, r3
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	0119      	lsls	r1, r3, #4
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009a      	lsls	r2, r3, #2
 800762e:	441a      	add	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	fbb2 f2f3 	udiv	r2, r2, r3
 800763a:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <UART_SetConfig+0x1b0>)
 800763c:	fba3 0302 	umull	r0, r3, r3, r2
 8007640:	095b      	lsrs	r3, r3, #5
 8007642:	2064      	movs	r0, #100	; 0x64
 8007644:	fb00 f303 	mul.w	r3, r0, r3
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	3332      	adds	r3, #50	; 0x32
 800764e:	4a16      	ldr	r2, [pc, #88]	; (80076a8 <UART_SetConfig+0x1b0>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800765a:	4419      	add	r1, r3
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009a      	lsls	r2, r3, #2
 8007666:	441a      	add	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007672:	4b0d      	ldr	r3, [pc, #52]	; (80076a8 <UART_SetConfig+0x1b0>)
 8007674:	fba3 0302 	umull	r0, r3, r3, r2
 8007678:	095b      	lsrs	r3, r3, #5
 800767a:	2064      	movs	r0, #100	; 0x64
 800767c:	fb00 f303 	mul.w	r3, r0, r3
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	3332      	adds	r3, #50	; 0x32
 8007686:	4a08      	ldr	r2, [pc, #32]	; (80076a8 <UART_SetConfig+0x1b0>)
 8007688:	fba2 2303 	umull	r2, r3, r2, r3
 800768c:	095b      	lsrs	r3, r3, #5
 800768e:	f003 020f 	and.w	r2, r3, #15
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	440a      	add	r2, r1
 8007698:	609a      	str	r2, [r3, #8]
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40013800 	.word	0x40013800
 80076a8:	51eb851f 	.word	0x51eb851f

080076ac <__errno>:
 80076ac:	4b01      	ldr	r3, [pc, #4]	; (80076b4 <__errno+0x8>)
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	2000009c 	.word	0x2000009c

080076b8 <__libc_init_array>:
 80076b8:	b570      	push	{r4, r5, r6, lr}
 80076ba:	2500      	movs	r5, #0
 80076bc:	4e0c      	ldr	r6, [pc, #48]	; (80076f0 <__libc_init_array+0x38>)
 80076be:	4c0d      	ldr	r4, [pc, #52]	; (80076f4 <__libc_init_array+0x3c>)
 80076c0:	1ba4      	subs	r4, r4, r6
 80076c2:	10a4      	asrs	r4, r4, #2
 80076c4:	42a5      	cmp	r5, r4
 80076c6:	d109      	bne.n	80076dc <__libc_init_array+0x24>
 80076c8:	f000 fc34 	bl	8007f34 <_init>
 80076cc:	2500      	movs	r5, #0
 80076ce:	4e0a      	ldr	r6, [pc, #40]	; (80076f8 <__libc_init_array+0x40>)
 80076d0:	4c0a      	ldr	r4, [pc, #40]	; (80076fc <__libc_init_array+0x44>)
 80076d2:	1ba4      	subs	r4, r4, r6
 80076d4:	10a4      	asrs	r4, r4, #2
 80076d6:	42a5      	cmp	r5, r4
 80076d8:	d105      	bne.n	80076e6 <__libc_init_array+0x2e>
 80076da:	bd70      	pop	{r4, r5, r6, pc}
 80076dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076e0:	4798      	blx	r3
 80076e2:	3501      	adds	r5, #1
 80076e4:	e7ee      	b.n	80076c4 <__libc_init_array+0xc>
 80076e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076ea:	4798      	blx	r3
 80076ec:	3501      	adds	r5, #1
 80076ee:	e7f2      	b.n	80076d6 <__libc_init_array+0x1e>
 80076f0:	08008254 	.word	0x08008254
 80076f4:	08008254 	.word	0x08008254
 80076f8:	08008254 	.word	0x08008254
 80076fc:	08008258 	.word	0x08008258

08007700 <memset>:
 8007700:	4603      	mov	r3, r0
 8007702:	4402      	add	r2, r0
 8007704:	4293      	cmp	r3, r2
 8007706:	d100      	bne.n	800770a <memset+0xa>
 8007708:	4770      	bx	lr
 800770a:	f803 1b01 	strb.w	r1, [r3], #1
 800770e:	e7f9      	b.n	8007704 <memset+0x4>

08007710 <siprintf>:
 8007710:	b40e      	push	{r1, r2, r3}
 8007712:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007716:	b500      	push	{lr}
 8007718:	b09c      	sub	sp, #112	; 0x70
 800771a:	ab1d      	add	r3, sp, #116	; 0x74
 800771c:	9002      	str	r0, [sp, #8]
 800771e:	9006      	str	r0, [sp, #24]
 8007720:	9107      	str	r1, [sp, #28]
 8007722:	9104      	str	r1, [sp, #16]
 8007724:	4808      	ldr	r0, [pc, #32]	; (8007748 <siprintf+0x38>)
 8007726:	4909      	ldr	r1, [pc, #36]	; (800774c <siprintf+0x3c>)
 8007728:	f853 2b04 	ldr.w	r2, [r3], #4
 800772c:	9105      	str	r1, [sp, #20]
 800772e:	6800      	ldr	r0, [r0, #0]
 8007730:	a902      	add	r1, sp, #8
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	f000 f866 	bl	8007804 <_svfiprintf_r>
 8007738:	2200      	movs	r2, #0
 800773a:	9b02      	ldr	r3, [sp, #8]
 800773c:	701a      	strb	r2, [r3, #0]
 800773e:	b01c      	add	sp, #112	; 0x70
 8007740:	f85d eb04 	ldr.w	lr, [sp], #4
 8007744:	b003      	add	sp, #12
 8007746:	4770      	bx	lr
 8007748:	2000009c 	.word	0x2000009c
 800774c:	ffff0208 	.word	0xffff0208

08007750 <__ssputs_r>:
 8007750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007754:	688e      	ldr	r6, [r1, #8]
 8007756:	4682      	mov	sl, r0
 8007758:	429e      	cmp	r6, r3
 800775a:	460c      	mov	r4, r1
 800775c:	4690      	mov	r8, r2
 800775e:	4699      	mov	r9, r3
 8007760:	d837      	bhi.n	80077d2 <__ssputs_r+0x82>
 8007762:	898a      	ldrh	r2, [r1, #12]
 8007764:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007768:	d031      	beq.n	80077ce <__ssputs_r+0x7e>
 800776a:	2302      	movs	r3, #2
 800776c:	6825      	ldr	r5, [r4, #0]
 800776e:	6909      	ldr	r1, [r1, #16]
 8007770:	1a6f      	subs	r7, r5, r1
 8007772:	6965      	ldr	r5, [r4, #20]
 8007774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007778:	fb95 f5f3 	sdiv	r5, r5, r3
 800777c:	f109 0301 	add.w	r3, r9, #1
 8007780:	443b      	add	r3, r7
 8007782:	429d      	cmp	r5, r3
 8007784:	bf38      	it	cc
 8007786:	461d      	movcc	r5, r3
 8007788:	0553      	lsls	r3, r2, #21
 800778a:	d530      	bpl.n	80077ee <__ssputs_r+0x9e>
 800778c:	4629      	mov	r1, r5
 800778e:	f000 fb37 	bl	8007e00 <_malloc_r>
 8007792:	4606      	mov	r6, r0
 8007794:	b950      	cbnz	r0, 80077ac <__ssputs_r+0x5c>
 8007796:	230c      	movs	r3, #12
 8007798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800779c:	f8ca 3000 	str.w	r3, [sl]
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a6:	81a3      	strh	r3, [r4, #12]
 80077a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ac:	463a      	mov	r2, r7
 80077ae:	6921      	ldr	r1, [r4, #16]
 80077b0:	f000 fab6 	bl	8007d20 <memcpy>
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	6126      	str	r6, [r4, #16]
 80077c2:	443e      	add	r6, r7
 80077c4:	6026      	str	r6, [r4, #0]
 80077c6:	464e      	mov	r6, r9
 80077c8:	6165      	str	r5, [r4, #20]
 80077ca:	1bed      	subs	r5, r5, r7
 80077cc:	60a5      	str	r5, [r4, #8]
 80077ce:	454e      	cmp	r6, r9
 80077d0:	d900      	bls.n	80077d4 <__ssputs_r+0x84>
 80077d2:	464e      	mov	r6, r9
 80077d4:	4632      	mov	r2, r6
 80077d6:	4641      	mov	r1, r8
 80077d8:	6820      	ldr	r0, [r4, #0]
 80077da:	f000 faac 	bl	8007d36 <memmove>
 80077de:	68a3      	ldr	r3, [r4, #8]
 80077e0:	2000      	movs	r0, #0
 80077e2:	1b9b      	subs	r3, r3, r6
 80077e4:	60a3      	str	r3, [r4, #8]
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	441e      	add	r6, r3
 80077ea:	6026      	str	r6, [r4, #0]
 80077ec:	e7dc      	b.n	80077a8 <__ssputs_r+0x58>
 80077ee:	462a      	mov	r2, r5
 80077f0:	f000 fb60 	bl	8007eb4 <_realloc_r>
 80077f4:	4606      	mov	r6, r0
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d1e2      	bne.n	80077c0 <__ssputs_r+0x70>
 80077fa:	6921      	ldr	r1, [r4, #16]
 80077fc:	4650      	mov	r0, sl
 80077fe:	f000 fab3 	bl	8007d68 <_free_r>
 8007802:	e7c8      	b.n	8007796 <__ssputs_r+0x46>

08007804 <_svfiprintf_r>:
 8007804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	461d      	mov	r5, r3
 800780a:	898b      	ldrh	r3, [r1, #12]
 800780c:	b09d      	sub	sp, #116	; 0x74
 800780e:	061f      	lsls	r7, r3, #24
 8007810:	4680      	mov	r8, r0
 8007812:	460c      	mov	r4, r1
 8007814:	4616      	mov	r6, r2
 8007816:	d50f      	bpl.n	8007838 <_svfiprintf_r+0x34>
 8007818:	690b      	ldr	r3, [r1, #16]
 800781a:	b96b      	cbnz	r3, 8007838 <_svfiprintf_r+0x34>
 800781c:	2140      	movs	r1, #64	; 0x40
 800781e:	f000 faef 	bl	8007e00 <_malloc_r>
 8007822:	6020      	str	r0, [r4, #0]
 8007824:	6120      	str	r0, [r4, #16]
 8007826:	b928      	cbnz	r0, 8007834 <_svfiprintf_r+0x30>
 8007828:	230c      	movs	r3, #12
 800782a:	f8c8 3000 	str.w	r3, [r8]
 800782e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007832:	e0c8      	b.n	80079c6 <_svfiprintf_r+0x1c2>
 8007834:	2340      	movs	r3, #64	; 0x40
 8007836:	6163      	str	r3, [r4, #20]
 8007838:	2300      	movs	r3, #0
 800783a:	9309      	str	r3, [sp, #36]	; 0x24
 800783c:	2320      	movs	r3, #32
 800783e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007842:	2330      	movs	r3, #48	; 0x30
 8007844:	f04f 0b01 	mov.w	fp, #1
 8007848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800784c:	9503      	str	r5, [sp, #12]
 800784e:	4637      	mov	r7, r6
 8007850:	463d      	mov	r5, r7
 8007852:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007856:	b10b      	cbz	r3, 800785c <_svfiprintf_r+0x58>
 8007858:	2b25      	cmp	r3, #37	; 0x25
 800785a:	d13e      	bne.n	80078da <_svfiprintf_r+0xd6>
 800785c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007860:	d00b      	beq.n	800787a <_svfiprintf_r+0x76>
 8007862:	4653      	mov	r3, sl
 8007864:	4632      	mov	r2, r6
 8007866:	4621      	mov	r1, r4
 8007868:	4640      	mov	r0, r8
 800786a:	f7ff ff71 	bl	8007750 <__ssputs_r>
 800786e:	3001      	adds	r0, #1
 8007870:	f000 80a4 	beq.w	80079bc <_svfiprintf_r+0x1b8>
 8007874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007876:	4453      	add	r3, sl
 8007878:	9309      	str	r3, [sp, #36]	; 0x24
 800787a:	783b      	ldrb	r3, [r7, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 809d 	beq.w	80079bc <_svfiprintf_r+0x1b8>
 8007882:	2300      	movs	r3, #0
 8007884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	9307      	str	r3, [sp, #28]
 8007890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007894:	931a      	str	r3, [sp, #104]	; 0x68
 8007896:	462f      	mov	r7, r5
 8007898:	2205      	movs	r2, #5
 800789a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800789e:	4850      	ldr	r0, [pc, #320]	; (80079e0 <_svfiprintf_r+0x1dc>)
 80078a0:	f000 fa30 	bl	8007d04 <memchr>
 80078a4:	9b04      	ldr	r3, [sp, #16]
 80078a6:	b9d0      	cbnz	r0, 80078de <_svfiprintf_r+0xda>
 80078a8:	06d9      	lsls	r1, r3, #27
 80078aa:	bf44      	itt	mi
 80078ac:	2220      	movmi	r2, #32
 80078ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80078b2:	071a      	lsls	r2, r3, #28
 80078b4:	bf44      	itt	mi
 80078b6:	222b      	movmi	r2, #43	; 0x2b
 80078b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80078bc:	782a      	ldrb	r2, [r5, #0]
 80078be:	2a2a      	cmp	r2, #42	; 0x2a
 80078c0:	d015      	beq.n	80078ee <_svfiprintf_r+0xea>
 80078c2:	462f      	mov	r7, r5
 80078c4:	2000      	movs	r0, #0
 80078c6:	250a      	movs	r5, #10
 80078c8:	9a07      	ldr	r2, [sp, #28]
 80078ca:	4639      	mov	r1, r7
 80078cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078d0:	3b30      	subs	r3, #48	; 0x30
 80078d2:	2b09      	cmp	r3, #9
 80078d4:	d94d      	bls.n	8007972 <_svfiprintf_r+0x16e>
 80078d6:	b1b8      	cbz	r0, 8007908 <_svfiprintf_r+0x104>
 80078d8:	e00f      	b.n	80078fa <_svfiprintf_r+0xf6>
 80078da:	462f      	mov	r7, r5
 80078dc:	e7b8      	b.n	8007850 <_svfiprintf_r+0x4c>
 80078de:	4a40      	ldr	r2, [pc, #256]	; (80079e0 <_svfiprintf_r+0x1dc>)
 80078e0:	463d      	mov	r5, r7
 80078e2:	1a80      	subs	r0, r0, r2
 80078e4:	fa0b f000 	lsl.w	r0, fp, r0
 80078e8:	4318      	orrs	r0, r3
 80078ea:	9004      	str	r0, [sp, #16]
 80078ec:	e7d3      	b.n	8007896 <_svfiprintf_r+0x92>
 80078ee:	9a03      	ldr	r2, [sp, #12]
 80078f0:	1d11      	adds	r1, r2, #4
 80078f2:	6812      	ldr	r2, [r2, #0]
 80078f4:	9103      	str	r1, [sp, #12]
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	db01      	blt.n	80078fe <_svfiprintf_r+0xfa>
 80078fa:	9207      	str	r2, [sp, #28]
 80078fc:	e004      	b.n	8007908 <_svfiprintf_r+0x104>
 80078fe:	4252      	negs	r2, r2
 8007900:	f043 0302 	orr.w	r3, r3, #2
 8007904:	9207      	str	r2, [sp, #28]
 8007906:	9304      	str	r3, [sp, #16]
 8007908:	783b      	ldrb	r3, [r7, #0]
 800790a:	2b2e      	cmp	r3, #46	; 0x2e
 800790c:	d10c      	bne.n	8007928 <_svfiprintf_r+0x124>
 800790e:	787b      	ldrb	r3, [r7, #1]
 8007910:	2b2a      	cmp	r3, #42	; 0x2a
 8007912:	d133      	bne.n	800797c <_svfiprintf_r+0x178>
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	3702      	adds	r7, #2
 8007918:	1d1a      	adds	r2, r3, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	9203      	str	r2, [sp, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	bfb8      	it	lt
 8007922:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007926:	9305      	str	r3, [sp, #20]
 8007928:	4d2e      	ldr	r5, [pc, #184]	; (80079e4 <_svfiprintf_r+0x1e0>)
 800792a:	2203      	movs	r2, #3
 800792c:	7839      	ldrb	r1, [r7, #0]
 800792e:	4628      	mov	r0, r5
 8007930:	f000 f9e8 	bl	8007d04 <memchr>
 8007934:	b138      	cbz	r0, 8007946 <_svfiprintf_r+0x142>
 8007936:	2340      	movs	r3, #64	; 0x40
 8007938:	1b40      	subs	r0, r0, r5
 800793a:	fa03 f000 	lsl.w	r0, r3, r0
 800793e:	9b04      	ldr	r3, [sp, #16]
 8007940:	3701      	adds	r7, #1
 8007942:	4303      	orrs	r3, r0
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	7839      	ldrb	r1, [r7, #0]
 8007948:	2206      	movs	r2, #6
 800794a:	4827      	ldr	r0, [pc, #156]	; (80079e8 <_svfiprintf_r+0x1e4>)
 800794c:	1c7e      	adds	r6, r7, #1
 800794e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007952:	f000 f9d7 	bl	8007d04 <memchr>
 8007956:	2800      	cmp	r0, #0
 8007958:	d038      	beq.n	80079cc <_svfiprintf_r+0x1c8>
 800795a:	4b24      	ldr	r3, [pc, #144]	; (80079ec <_svfiprintf_r+0x1e8>)
 800795c:	bb13      	cbnz	r3, 80079a4 <_svfiprintf_r+0x1a0>
 800795e:	9b03      	ldr	r3, [sp, #12]
 8007960:	3307      	adds	r3, #7
 8007962:	f023 0307 	bic.w	r3, r3, #7
 8007966:	3308      	adds	r3, #8
 8007968:	9303      	str	r3, [sp, #12]
 800796a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796c:	444b      	add	r3, r9
 800796e:	9309      	str	r3, [sp, #36]	; 0x24
 8007970:	e76d      	b.n	800784e <_svfiprintf_r+0x4a>
 8007972:	fb05 3202 	mla	r2, r5, r2, r3
 8007976:	2001      	movs	r0, #1
 8007978:	460f      	mov	r7, r1
 800797a:	e7a6      	b.n	80078ca <_svfiprintf_r+0xc6>
 800797c:	2300      	movs	r3, #0
 800797e:	250a      	movs	r5, #10
 8007980:	4619      	mov	r1, r3
 8007982:	3701      	adds	r7, #1
 8007984:	9305      	str	r3, [sp, #20]
 8007986:	4638      	mov	r0, r7
 8007988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800798c:	3a30      	subs	r2, #48	; 0x30
 800798e:	2a09      	cmp	r2, #9
 8007990:	d903      	bls.n	800799a <_svfiprintf_r+0x196>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0c8      	beq.n	8007928 <_svfiprintf_r+0x124>
 8007996:	9105      	str	r1, [sp, #20]
 8007998:	e7c6      	b.n	8007928 <_svfiprintf_r+0x124>
 800799a:	fb05 2101 	mla	r1, r5, r1, r2
 800799e:	2301      	movs	r3, #1
 80079a0:	4607      	mov	r7, r0
 80079a2:	e7f0      	b.n	8007986 <_svfiprintf_r+0x182>
 80079a4:	ab03      	add	r3, sp, #12
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	4622      	mov	r2, r4
 80079aa:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <_svfiprintf_r+0x1ec>)
 80079ac:	a904      	add	r1, sp, #16
 80079ae:	4640      	mov	r0, r8
 80079b0:	f3af 8000 	nop.w
 80079b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80079b8:	4681      	mov	r9, r0
 80079ba:	d1d6      	bne.n	800796a <_svfiprintf_r+0x166>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	065b      	lsls	r3, r3, #25
 80079c0:	f53f af35 	bmi.w	800782e <_svfiprintf_r+0x2a>
 80079c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079c6:	b01d      	add	sp, #116	; 0x74
 80079c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079cc:	ab03      	add	r3, sp, #12
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	4622      	mov	r2, r4
 80079d2:	4b07      	ldr	r3, [pc, #28]	; (80079f0 <_svfiprintf_r+0x1ec>)
 80079d4:	a904      	add	r1, sp, #16
 80079d6:	4640      	mov	r0, r8
 80079d8:	f000 f882 	bl	8007ae0 <_printf_i>
 80079dc:	e7ea      	b.n	80079b4 <_svfiprintf_r+0x1b0>
 80079de:	bf00      	nop
 80079e0:	08008220 	.word	0x08008220
 80079e4:	08008226 	.word	0x08008226
 80079e8:	0800822a 	.word	0x0800822a
 80079ec:	00000000 	.word	0x00000000
 80079f0:	08007751 	.word	0x08007751

080079f4 <_printf_common>:
 80079f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f8:	4691      	mov	r9, r2
 80079fa:	461f      	mov	r7, r3
 80079fc:	688a      	ldr	r2, [r1, #8]
 80079fe:	690b      	ldr	r3, [r1, #16]
 8007a00:	4606      	mov	r6, r0
 8007a02:	4293      	cmp	r3, r2
 8007a04:	bfb8      	it	lt
 8007a06:	4613      	movlt	r3, r2
 8007a08:	f8c9 3000 	str.w	r3, [r9]
 8007a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a10:	460c      	mov	r4, r1
 8007a12:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a16:	b112      	cbz	r2, 8007a1e <_printf_common+0x2a>
 8007a18:	3301      	adds	r3, #1
 8007a1a:	f8c9 3000 	str.w	r3, [r9]
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	0699      	lsls	r1, r3, #26
 8007a22:	bf42      	ittt	mi
 8007a24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a28:	3302      	addmi	r3, #2
 8007a2a:	f8c9 3000 	strmi.w	r3, [r9]
 8007a2e:	6825      	ldr	r5, [r4, #0]
 8007a30:	f015 0506 	ands.w	r5, r5, #6
 8007a34:	d107      	bne.n	8007a46 <_printf_common+0x52>
 8007a36:	f104 0a19 	add.w	sl, r4, #25
 8007a3a:	68e3      	ldr	r3, [r4, #12]
 8007a3c:	f8d9 2000 	ldr.w	r2, [r9]
 8007a40:	1a9b      	subs	r3, r3, r2
 8007a42:	42ab      	cmp	r3, r5
 8007a44:	dc29      	bgt.n	8007a9a <_printf_common+0xa6>
 8007a46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a4a:	6822      	ldr	r2, [r4, #0]
 8007a4c:	3300      	adds	r3, #0
 8007a4e:	bf18      	it	ne
 8007a50:	2301      	movne	r3, #1
 8007a52:	0692      	lsls	r2, r2, #26
 8007a54:	d42e      	bmi.n	8007ab4 <_printf_common+0xc0>
 8007a56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	47c0      	blx	r8
 8007a60:	3001      	adds	r0, #1
 8007a62:	d021      	beq.n	8007aa8 <_printf_common+0xb4>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	68e5      	ldr	r5, [r4, #12]
 8007a68:	f003 0306 	and.w	r3, r3, #6
 8007a6c:	2b04      	cmp	r3, #4
 8007a6e:	bf18      	it	ne
 8007a70:	2500      	movne	r5, #0
 8007a72:	f8d9 2000 	ldr.w	r2, [r9]
 8007a76:	f04f 0900 	mov.w	r9, #0
 8007a7a:	bf08      	it	eq
 8007a7c:	1aad      	subeq	r5, r5, r2
 8007a7e:	68a3      	ldr	r3, [r4, #8]
 8007a80:	6922      	ldr	r2, [r4, #16]
 8007a82:	bf08      	it	eq
 8007a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	bfc4      	itt	gt
 8007a8c:	1a9b      	subgt	r3, r3, r2
 8007a8e:	18ed      	addgt	r5, r5, r3
 8007a90:	341a      	adds	r4, #26
 8007a92:	454d      	cmp	r5, r9
 8007a94:	d11a      	bne.n	8007acc <_printf_common+0xd8>
 8007a96:	2000      	movs	r0, #0
 8007a98:	e008      	b.n	8007aac <_printf_common+0xb8>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4652      	mov	r2, sl
 8007a9e:	4639      	mov	r1, r7
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	47c0      	blx	r8
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d103      	bne.n	8007ab0 <_printf_common+0xbc>
 8007aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab0:	3501      	adds	r5, #1
 8007ab2:	e7c2      	b.n	8007a3a <_printf_common+0x46>
 8007ab4:	2030      	movs	r0, #48	; 0x30
 8007ab6:	18e1      	adds	r1, r4, r3
 8007ab8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ac2:	4422      	add	r2, r4
 8007ac4:	3302      	adds	r3, #2
 8007ac6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007aca:	e7c4      	b.n	8007a56 <_printf_common+0x62>
 8007acc:	2301      	movs	r3, #1
 8007ace:	4622      	mov	r2, r4
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	47c0      	blx	r8
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d0e6      	beq.n	8007aa8 <_printf_common+0xb4>
 8007ada:	f109 0901 	add.w	r9, r9, #1
 8007ade:	e7d8      	b.n	8007a92 <_printf_common+0x9e>

08007ae0 <_printf_i>:
 8007ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ae4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ae8:	460c      	mov	r4, r1
 8007aea:	7e09      	ldrb	r1, [r1, #24]
 8007aec:	b085      	sub	sp, #20
 8007aee:	296e      	cmp	r1, #110	; 0x6e
 8007af0:	4617      	mov	r7, r2
 8007af2:	4606      	mov	r6, r0
 8007af4:	4698      	mov	r8, r3
 8007af6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007af8:	f000 80b3 	beq.w	8007c62 <_printf_i+0x182>
 8007afc:	d822      	bhi.n	8007b44 <_printf_i+0x64>
 8007afe:	2963      	cmp	r1, #99	; 0x63
 8007b00:	d036      	beq.n	8007b70 <_printf_i+0x90>
 8007b02:	d80a      	bhi.n	8007b1a <_printf_i+0x3a>
 8007b04:	2900      	cmp	r1, #0
 8007b06:	f000 80b9 	beq.w	8007c7c <_printf_i+0x19c>
 8007b0a:	2958      	cmp	r1, #88	; 0x58
 8007b0c:	f000 8083 	beq.w	8007c16 <_printf_i+0x136>
 8007b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007b18:	e032      	b.n	8007b80 <_printf_i+0xa0>
 8007b1a:	2964      	cmp	r1, #100	; 0x64
 8007b1c:	d001      	beq.n	8007b22 <_printf_i+0x42>
 8007b1e:	2969      	cmp	r1, #105	; 0x69
 8007b20:	d1f6      	bne.n	8007b10 <_printf_i+0x30>
 8007b22:	6820      	ldr	r0, [r4, #0]
 8007b24:	6813      	ldr	r3, [r2, #0]
 8007b26:	0605      	lsls	r5, r0, #24
 8007b28:	f103 0104 	add.w	r1, r3, #4
 8007b2c:	d52a      	bpl.n	8007b84 <_printf_i+0xa4>
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6011      	str	r1, [r2, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da03      	bge.n	8007b3e <_printf_i+0x5e>
 8007b36:	222d      	movs	r2, #45	; 0x2d
 8007b38:	425b      	negs	r3, r3
 8007b3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b3e:	486f      	ldr	r0, [pc, #444]	; (8007cfc <_printf_i+0x21c>)
 8007b40:	220a      	movs	r2, #10
 8007b42:	e039      	b.n	8007bb8 <_printf_i+0xd8>
 8007b44:	2973      	cmp	r1, #115	; 0x73
 8007b46:	f000 809d 	beq.w	8007c84 <_printf_i+0x1a4>
 8007b4a:	d808      	bhi.n	8007b5e <_printf_i+0x7e>
 8007b4c:	296f      	cmp	r1, #111	; 0x6f
 8007b4e:	d020      	beq.n	8007b92 <_printf_i+0xb2>
 8007b50:	2970      	cmp	r1, #112	; 0x70
 8007b52:	d1dd      	bne.n	8007b10 <_printf_i+0x30>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	f043 0320 	orr.w	r3, r3, #32
 8007b5a:	6023      	str	r3, [r4, #0]
 8007b5c:	e003      	b.n	8007b66 <_printf_i+0x86>
 8007b5e:	2975      	cmp	r1, #117	; 0x75
 8007b60:	d017      	beq.n	8007b92 <_printf_i+0xb2>
 8007b62:	2978      	cmp	r1, #120	; 0x78
 8007b64:	d1d4      	bne.n	8007b10 <_printf_i+0x30>
 8007b66:	2378      	movs	r3, #120	; 0x78
 8007b68:	4865      	ldr	r0, [pc, #404]	; (8007d00 <_printf_i+0x220>)
 8007b6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b6e:	e055      	b.n	8007c1c <_printf_i+0x13c>
 8007b70:	6813      	ldr	r3, [r2, #0]
 8007b72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b76:	1d19      	adds	r1, r3, #4
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6011      	str	r1, [r2, #0]
 8007b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b80:	2301      	movs	r3, #1
 8007b82:	e08c      	b.n	8007c9e <_printf_i+0x1be>
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b8a:	6011      	str	r1, [r2, #0]
 8007b8c:	bf18      	it	ne
 8007b8e:	b21b      	sxthne	r3, r3
 8007b90:	e7cf      	b.n	8007b32 <_printf_i+0x52>
 8007b92:	6813      	ldr	r3, [r2, #0]
 8007b94:	6825      	ldr	r5, [r4, #0]
 8007b96:	1d18      	adds	r0, r3, #4
 8007b98:	6010      	str	r0, [r2, #0]
 8007b9a:	0628      	lsls	r0, r5, #24
 8007b9c:	d501      	bpl.n	8007ba2 <_printf_i+0xc2>
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	e002      	b.n	8007ba8 <_printf_i+0xc8>
 8007ba2:	0668      	lsls	r0, r5, #25
 8007ba4:	d5fb      	bpl.n	8007b9e <_printf_i+0xbe>
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	296f      	cmp	r1, #111	; 0x6f
 8007baa:	bf14      	ite	ne
 8007bac:	220a      	movne	r2, #10
 8007bae:	2208      	moveq	r2, #8
 8007bb0:	4852      	ldr	r0, [pc, #328]	; (8007cfc <_printf_i+0x21c>)
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bb8:	6865      	ldr	r5, [r4, #4]
 8007bba:	2d00      	cmp	r5, #0
 8007bbc:	60a5      	str	r5, [r4, #8]
 8007bbe:	f2c0 8095 	blt.w	8007cec <_printf_i+0x20c>
 8007bc2:	6821      	ldr	r1, [r4, #0]
 8007bc4:	f021 0104 	bic.w	r1, r1, #4
 8007bc8:	6021      	str	r1, [r4, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d13d      	bne.n	8007c4a <_printf_i+0x16a>
 8007bce:	2d00      	cmp	r5, #0
 8007bd0:	f040 808e 	bne.w	8007cf0 <_printf_i+0x210>
 8007bd4:	4665      	mov	r5, ip
 8007bd6:	2a08      	cmp	r2, #8
 8007bd8:	d10b      	bne.n	8007bf2 <_printf_i+0x112>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	07db      	lsls	r3, r3, #31
 8007bde:	d508      	bpl.n	8007bf2 <_printf_i+0x112>
 8007be0:	6923      	ldr	r3, [r4, #16]
 8007be2:	6862      	ldr	r2, [r4, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	bfde      	ittt	le
 8007be8:	2330      	movle	r3, #48	; 0x30
 8007bea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007bf2:	ebac 0305 	sub.w	r3, ip, r5
 8007bf6:	6123      	str	r3, [r4, #16]
 8007bf8:	f8cd 8000 	str.w	r8, [sp]
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	aa03      	add	r2, sp, #12
 8007c00:	4621      	mov	r1, r4
 8007c02:	4630      	mov	r0, r6
 8007c04:	f7ff fef6 	bl	80079f4 <_printf_common>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d14d      	bne.n	8007ca8 <_printf_i+0x1c8>
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c10:	b005      	add	sp, #20
 8007c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c16:	4839      	ldr	r0, [pc, #228]	; (8007cfc <_printf_i+0x21c>)
 8007c18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007c1c:	6813      	ldr	r3, [r2, #0]
 8007c1e:	6821      	ldr	r1, [r4, #0]
 8007c20:	1d1d      	adds	r5, r3, #4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6015      	str	r5, [r2, #0]
 8007c26:	060a      	lsls	r2, r1, #24
 8007c28:	d50b      	bpl.n	8007c42 <_printf_i+0x162>
 8007c2a:	07ca      	lsls	r2, r1, #31
 8007c2c:	bf44      	itt	mi
 8007c2e:	f041 0120 	orrmi.w	r1, r1, #32
 8007c32:	6021      	strmi	r1, [r4, #0]
 8007c34:	b91b      	cbnz	r3, 8007c3e <_printf_i+0x15e>
 8007c36:	6822      	ldr	r2, [r4, #0]
 8007c38:	f022 0220 	bic.w	r2, r2, #32
 8007c3c:	6022      	str	r2, [r4, #0]
 8007c3e:	2210      	movs	r2, #16
 8007c40:	e7b7      	b.n	8007bb2 <_printf_i+0xd2>
 8007c42:	064d      	lsls	r5, r1, #25
 8007c44:	bf48      	it	mi
 8007c46:	b29b      	uxthmi	r3, r3
 8007c48:	e7ef      	b.n	8007c2a <_printf_i+0x14a>
 8007c4a:	4665      	mov	r5, ip
 8007c4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c50:	fb02 3311 	mls	r3, r2, r1, r3
 8007c54:	5cc3      	ldrb	r3, [r0, r3]
 8007c56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	d1f5      	bne.n	8007c4c <_printf_i+0x16c>
 8007c60:	e7b9      	b.n	8007bd6 <_printf_i+0xf6>
 8007c62:	6813      	ldr	r3, [r2, #0]
 8007c64:	6825      	ldr	r5, [r4, #0]
 8007c66:	1d18      	adds	r0, r3, #4
 8007c68:	6961      	ldr	r1, [r4, #20]
 8007c6a:	6010      	str	r0, [r2, #0]
 8007c6c:	0628      	lsls	r0, r5, #24
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	d501      	bpl.n	8007c76 <_printf_i+0x196>
 8007c72:	6019      	str	r1, [r3, #0]
 8007c74:	e002      	b.n	8007c7c <_printf_i+0x19c>
 8007c76:	066a      	lsls	r2, r5, #25
 8007c78:	d5fb      	bpl.n	8007c72 <_printf_i+0x192>
 8007c7a:	8019      	strh	r1, [r3, #0]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4665      	mov	r5, ip
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	e7b9      	b.n	8007bf8 <_printf_i+0x118>
 8007c84:	6813      	ldr	r3, [r2, #0]
 8007c86:	1d19      	adds	r1, r3, #4
 8007c88:	6011      	str	r1, [r2, #0]
 8007c8a:	681d      	ldr	r5, [r3, #0]
 8007c8c:	6862      	ldr	r2, [r4, #4]
 8007c8e:	2100      	movs	r1, #0
 8007c90:	4628      	mov	r0, r5
 8007c92:	f000 f837 	bl	8007d04 <memchr>
 8007c96:	b108      	cbz	r0, 8007c9c <_printf_i+0x1bc>
 8007c98:	1b40      	subs	r0, r0, r5
 8007c9a:	6060      	str	r0, [r4, #4]
 8007c9c:	6863      	ldr	r3, [r4, #4]
 8007c9e:	6123      	str	r3, [r4, #16]
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ca6:	e7a7      	b.n	8007bf8 <_printf_i+0x118>
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	462a      	mov	r2, r5
 8007cac:	4639      	mov	r1, r7
 8007cae:	4630      	mov	r0, r6
 8007cb0:	47c0      	blx	r8
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	d0aa      	beq.n	8007c0c <_printf_i+0x12c>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	079b      	lsls	r3, r3, #30
 8007cba:	d413      	bmi.n	8007ce4 <_printf_i+0x204>
 8007cbc:	68e0      	ldr	r0, [r4, #12]
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	4298      	cmp	r0, r3
 8007cc2:	bfb8      	it	lt
 8007cc4:	4618      	movlt	r0, r3
 8007cc6:	e7a3      	b.n	8007c10 <_printf_i+0x130>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	464a      	mov	r2, r9
 8007ccc:	4639      	mov	r1, r7
 8007cce:	4630      	mov	r0, r6
 8007cd0:	47c0      	blx	r8
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d09a      	beq.n	8007c0c <_printf_i+0x12c>
 8007cd6:	3501      	adds	r5, #1
 8007cd8:	68e3      	ldr	r3, [r4, #12]
 8007cda:	9a03      	ldr	r2, [sp, #12]
 8007cdc:	1a9b      	subs	r3, r3, r2
 8007cde:	42ab      	cmp	r3, r5
 8007ce0:	dcf2      	bgt.n	8007cc8 <_printf_i+0x1e8>
 8007ce2:	e7eb      	b.n	8007cbc <_printf_i+0x1dc>
 8007ce4:	2500      	movs	r5, #0
 8007ce6:	f104 0919 	add.w	r9, r4, #25
 8007cea:	e7f5      	b.n	8007cd8 <_printf_i+0x1f8>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1ac      	bne.n	8007c4a <_printf_i+0x16a>
 8007cf0:	7803      	ldrb	r3, [r0, #0]
 8007cf2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cfa:	e76c      	b.n	8007bd6 <_printf_i+0xf6>
 8007cfc:	08008231 	.word	0x08008231
 8007d00:	08008242 	.word	0x08008242

08007d04 <memchr>:
 8007d04:	b510      	push	{r4, lr}
 8007d06:	b2c9      	uxtb	r1, r1
 8007d08:	4402      	add	r2, r0
 8007d0a:	4290      	cmp	r0, r2
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	d101      	bne.n	8007d14 <memchr+0x10>
 8007d10:	2300      	movs	r3, #0
 8007d12:	e003      	b.n	8007d1c <memchr+0x18>
 8007d14:	781c      	ldrb	r4, [r3, #0]
 8007d16:	3001      	adds	r0, #1
 8007d18:	428c      	cmp	r4, r1
 8007d1a:	d1f6      	bne.n	8007d0a <memchr+0x6>
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	bd10      	pop	{r4, pc}

08007d20 <memcpy>:
 8007d20:	b510      	push	{r4, lr}
 8007d22:	1e43      	subs	r3, r0, #1
 8007d24:	440a      	add	r2, r1
 8007d26:	4291      	cmp	r1, r2
 8007d28:	d100      	bne.n	8007d2c <memcpy+0xc>
 8007d2a:	bd10      	pop	{r4, pc}
 8007d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d34:	e7f7      	b.n	8007d26 <memcpy+0x6>

08007d36 <memmove>:
 8007d36:	4288      	cmp	r0, r1
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	eb01 0302 	add.w	r3, r1, r2
 8007d3e:	d807      	bhi.n	8007d50 <memmove+0x1a>
 8007d40:	1e42      	subs	r2, r0, #1
 8007d42:	4299      	cmp	r1, r3
 8007d44:	d00a      	beq.n	8007d5c <memmove+0x26>
 8007d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d4e:	e7f8      	b.n	8007d42 <memmove+0xc>
 8007d50:	4283      	cmp	r3, r0
 8007d52:	d9f5      	bls.n	8007d40 <memmove+0xa>
 8007d54:	1881      	adds	r1, r0, r2
 8007d56:	1ad2      	subs	r2, r2, r3
 8007d58:	42d3      	cmn	r3, r2
 8007d5a:	d100      	bne.n	8007d5e <memmove+0x28>
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d66:	e7f7      	b.n	8007d58 <memmove+0x22>

08007d68 <_free_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	d043      	beq.n	8007df8 <_free_r+0x90>
 8007d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d74:	1f0c      	subs	r4, r1, #4
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bfb8      	it	lt
 8007d7a:	18e4      	addlt	r4, r4, r3
 8007d7c:	f000 f8d0 	bl	8007f20 <__malloc_lock>
 8007d80:	4a1e      	ldr	r2, [pc, #120]	; (8007dfc <_free_r+0x94>)
 8007d82:	6813      	ldr	r3, [r2, #0]
 8007d84:	4610      	mov	r0, r2
 8007d86:	b933      	cbnz	r3, 8007d96 <_free_r+0x2e>
 8007d88:	6063      	str	r3, [r4, #4]
 8007d8a:	6014      	str	r4, [r2, #0]
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d92:	f000 b8c6 	b.w	8007f22 <__malloc_unlock>
 8007d96:	42a3      	cmp	r3, r4
 8007d98:	d90b      	bls.n	8007db2 <_free_r+0x4a>
 8007d9a:	6821      	ldr	r1, [r4, #0]
 8007d9c:	1862      	adds	r2, r4, r1
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	bf01      	itttt	eq
 8007da2:	681a      	ldreq	r2, [r3, #0]
 8007da4:	685b      	ldreq	r3, [r3, #4]
 8007da6:	1852      	addeq	r2, r2, r1
 8007da8:	6022      	streq	r2, [r4, #0]
 8007daa:	6063      	str	r3, [r4, #4]
 8007dac:	6004      	str	r4, [r0, #0]
 8007dae:	e7ed      	b.n	8007d8c <_free_r+0x24>
 8007db0:	4613      	mov	r3, r2
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	b10a      	cbz	r2, 8007dba <_free_r+0x52>
 8007db6:	42a2      	cmp	r2, r4
 8007db8:	d9fa      	bls.n	8007db0 <_free_r+0x48>
 8007dba:	6819      	ldr	r1, [r3, #0]
 8007dbc:	1858      	adds	r0, r3, r1
 8007dbe:	42a0      	cmp	r0, r4
 8007dc0:	d10b      	bne.n	8007dda <_free_r+0x72>
 8007dc2:	6820      	ldr	r0, [r4, #0]
 8007dc4:	4401      	add	r1, r0
 8007dc6:	1858      	adds	r0, r3, r1
 8007dc8:	4282      	cmp	r2, r0
 8007dca:	6019      	str	r1, [r3, #0]
 8007dcc:	d1de      	bne.n	8007d8c <_free_r+0x24>
 8007dce:	6810      	ldr	r0, [r2, #0]
 8007dd0:	6852      	ldr	r2, [r2, #4]
 8007dd2:	4401      	add	r1, r0
 8007dd4:	6019      	str	r1, [r3, #0]
 8007dd6:	605a      	str	r2, [r3, #4]
 8007dd8:	e7d8      	b.n	8007d8c <_free_r+0x24>
 8007dda:	d902      	bls.n	8007de2 <_free_r+0x7a>
 8007ddc:	230c      	movs	r3, #12
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	e7d4      	b.n	8007d8c <_free_r+0x24>
 8007de2:	6820      	ldr	r0, [r4, #0]
 8007de4:	1821      	adds	r1, r4, r0
 8007de6:	428a      	cmp	r2, r1
 8007de8:	bf01      	itttt	eq
 8007dea:	6811      	ldreq	r1, [r2, #0]
 8007dec:	6852      	ldreq	r2, [r2, #4]
 8007dee:	1809      	addeq	r1, r1, r0
 8007df0:	6021      	streq	r1, [r4, #0]
 8007df2:	6062      	str	r2, [r4, #4]
 8007df4:	605c      	str	r4, [r3, #4]
 8007df6:	e7c9      	b.n	8007d8c <_free_r+0x24>
 8007df8:	bd38      	pop	{r3, r4, r5, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20000160 	.word	0x20000160

08007e00 <_malloc_r>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	1ccd      	adds	r5, r1, #3
 8007e04:	f025 0503 	bic.w	r5, r5, #3
 8007e08:	3508      	adds	r5, #8
 8007e0a:	2d0c      	cmp	r5, #12
 8007e0c:	bf38      	it	cc
 8007e0e:	250c      	movcc	r5, #12
 8007e10:	2d00      	cmp	r5, #0
 8007e12:	4606      	mov	r6, r0
 8007e14:	db01      	blt.n	8007e1a <_malloc_r+0x1a>
 8007e16:	42a9      	cmp	r1, r5
 8007e18:	d903      	bls.n	8007e22 <_malloc_r+0x22>
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	6033      	str	r3, [r6, #0]
 8007e1e:	2000      	movs	r0, #0
 8007e20:	bd70      	pop	{r4, r5, r6, pc}
 8007e22:	f000 f87d 	bl	8007f20 <__malloc_lock>
 8007e26:	4a21      	ldr	r2, [pc, #132]	; (8007eac <_malloc_r+0xac>)
 8007e28:	6814      	ldr	r4, [r2, #0]
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	b991      	cbnz	r1, 8007e54 <_malloc_r+0x54>
 8007e2e:	4c20      	ldr	r4, [pc, #128]	; (8007eb0 <_malloc_r+0xb0>)
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	b91b      	cbnz	r3, 8007e3c <_malloc_r+0x3c>
 8007e34:	4630      	mov	r0, r6
 8007e36:	f000 f863 	bl	8007f00 <_sbrk_r>
 8007e3a:	6020      	str	r0, [r4, #0]
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f000 f85e 	bl	8007f00 <_sbrk_r>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	d124      	bne.n	8007e92 <_malloc_r+0x92>
 8007e48:	230c      	movs	r3, #12
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	6033      	str	r3, [r6, #0]
 8007e4e:	f000 f868 	bl	8007f22 <__malloc_unlock>
 8007e52:	e7e4      	b.n	8007e1e <_malloc_r+0x1e>
 8007e54:	680b      	ldr	r3, [r1, #0]
 8007e56:	1b5b      	subs	r3, r3, r5
 8007e58:	d418      	bmi.n	8007e8c <_malloc_r+0x8c>
 8007e5a:	2b0b      	cmp	r3, #11
 8007e5c:	d90f      	bls.n	8007e7e <_malloc_r+0x7e>
 8007e5e:	600b      	str	r3, [r1, #0]
 8007e60:	18cc      	adds	r4, r1, r3
 8007e62:	50cd      	str	r5, [r1, r3]
 8007e64:	4630      	mov	r0, r6
 8007e66:	f000 f85c 	bl	8007f22 <__malloc_unlock>
 8007e6a:	f104 000b 	add.w	r0, r4, #11
 8007e6e:	1d23      	adds	r3, r4, #4
 8007e70:	f020 0007 	bic.w	r0, r0, #7
 8007e74:	1ac3      	subs	r3, r0, r3
 8007e76:	d0d3      	beq.n	8007e20 <_malloc_r+0x20>
 8007e78:	425a      	negs	r2, r3
 8007e7a:	50e2      	str	r2, [r4, r3]
 8007e7c:	e7d0      	b.n	8007e20 <_malloc_r+0x20>
 8007e7e:	684b      	ldr	r3, [r1, #4]
 8007e80:	428c      	cmp	r4, r1
 8007e82:	bf16      	itet	ne
 8007e84:	6063      	strne	r3, [r4, #4]
 8007e86:	6013      	streq	r3, [r2, #0]
 8007e88:	460c      	movne	r4, r1
 8007e8a:	e7eb      	b.n	8007e64 <_malloc_r+0x64>
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	6849      	ldr	r1, [r1, #4]
 8007e90:	e7cc      	b.n	8007e2c <_malloc_r+0x2c>
 8007e92:	1cc4      	adds	r4, r0, #3
 8007e94:	f024 0403 	bic.w	r4, r4, #3
 8007e98:	42a0      	cmp	r0, r4
 8007e9a:	d005      	beq.n	8007ea8 <_malloc_r+0xa8>
 8007e9c:	1a21      	subs	r1, r4, r0
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	f000 f82e 	bl	8007f00 <_sbrk_r>
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d0cf      	beq.n	8007e48 <_malloc_r+0x48>
 8007ea8:	6025      	str	r5, [r4, #0]
 8007eaa:	e7db      	b.n	8007e64 <_malloc_r+0x64>
 8007eac:	20000160 	.word	0x20000160
 8007eb0:	20000164 	.word	0x20000164

08007eb4 <_realloc_r>:
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	4614      	mov	r4, r2
 8007eba:	460e      	mov	r6, r1
 8007ebc:	b921      	cbnz	r1, 8007ec8 <_realloc_r+0x14>
 8007ebe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	f7ff bf9c 	b.w	8007e00 <_malloc_r>
 8007ec8:	b922      	cbnz	r2, 8007ed4 <_realloc_r+0x20>
 8007eca:	f7ff ff4d 	bl	8007d68 <_free_r>
 8007ece:	4625      	mov	r5, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed4:	f000 f826 	bl	8007f24 <_malloc_usable_size_r>
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d20f      	bcs.n	8007efc <_realloc_r+0x48>
 8007edc:	4621      	mov	r1, r4
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f7ff ff8e 	bl	8007e00 <_malloc_r>
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d0f2      	beq.n	8007ed0 <_realloc_r+0x1c>
 8007eea:	4631      	mov	r1, r6
 8007eec:	4622      	mov	r2, r4
 8007eee:	f7ff ff17 	bl	8007d20 <memcpy>
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7ff ff37 	bl	8007d68 <_free_r>
 8007efa:	e7e9      	b.n	8007ed0 <_realloc_r+0x1c>
 8007efc:	4635      	mov	r5, r6
 8007efe:	e7e7      	b.n	8007ed0 <_realloc_r+0x1c>

08007f00 <_sbrk_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	2300      	movs	r3, #0
 8007f04:	4c05      	ldr	r4, [pc, #20]	; (8007f1c <_sbrk_r+0x1c>)
 8007f06:	4605      	mov	r5, r0
 8007f08:	4608      	mov	r0, r1
 8007f0a:	6023      	str	r3, [r4, #0]
 8007f0c:	f7fb fe70 	bl	8003bf0 <_sbrk>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_sbrk_r+0x1a>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_sbrk_r+0x1a>
 8007f18:	602b      	str	r3, [r5, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	2000079c 	.word	0x2000079c

08007f20 <__malloc_lock>:
 8007f20:	4770      	bx	lr

08007f22 <__malloc_unlock>:
 8007f22:	4770      	bx	lr

08007f24 <_malloc_usable_size_r>:
 8007f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f28:	1f18      	subs	r0, r3, #4
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bfbc      	itt	lt
 8007f2e:	580b      	ldrlt	r3, [r1, r0]
 8007f30:	18c0      	addlt	r0, r0, r3
 8007f32:	4770      	bx	lr

08007f34 <_init>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	bf00      	nop
 8007f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3a:	bc08      	pop	{r3}
 8007f3c:	469e      	mov	lr, r3
 8007f3e:	4770      	bx	lr

08007f40 <_fini>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	bf00      	nop
 8007f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f46:	bc08      	pop	{r3}
 8007f48:	469e      	mov	lr, r3
 8007f4a:	4770      	bx	lr
