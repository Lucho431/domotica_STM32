
tableroPileta_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000668c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08006798  08006798  00016798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069fc  080069fc  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  080069fc  080069fc  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069fc  080069fc  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069fc  080069fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a00  08006a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08006a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  200000e8  08006aec  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  08006aec  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159f0  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c02  00000000  00000000  00035b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  00039708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  0003ab48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001856a  00000000  00000000  0003bd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013038  00000000  00000000  000542e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007bfe0  00000000  00000000  0006731a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e32fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052cc  00000000  00000000  000e3378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08006780 	.word	0x08006780

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	08006780 	.word	0x08006780

0800014c <spi_74HC165_init>:
 * La función de inicialización está modificada para trabajar con dos
 * integrados 74HC165 a la vez, tratándolos como distintos esclavos SPI.
 * Cada integrado contará con su propia función de lectura, así como sus
 * propias señales CE.
 */
void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CEport, uint16_t CEpin){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 800015c:	4a09      	ldr	r2, [pc, #36]	; (8000184 <spi_74HC165_init+0x38>)
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 8000162:	4a09      	ldr	r2, [pc, #36]	; (8000188 <spi_74HC165_init+0x3c>)
 8000164:	68bb      	ldr	r3, [r7, #8]
 8000166:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 8000168:	4a08      	ldr	r2, [pc, #32]	; (800018c <spi_74HC165_init+0x40>)
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	8013      	strh	r3, [r2, #0]

	portCE = CEport;
 800016e:	4a08      	ldr	r2, [pc, #32]	; (8000190 <spi_74HC165_init+0x44>)
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	6013      	str	r3, [r2, #0]
	pinCE = CEpin;
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <spi_74HC165_init+0x48>)
 8000176:	8b3b      	ldrh	r3, [r7, #24]
 8000178:	8013      	strh	r3, [r2, #0]

}
 800017a:	bf00      	nop
 800017c:	3714      	adds	r7, #20
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000138 	.word	0x20000138
 8000188:	20000140 	.word	0x20000140
 800018c:	2000013c 	.word	0x2000013c
 8000190:	20000148 	.word	0x20000148
 8000194:	20000144 	.word	0x20000144

08000198 <spi_74HC165_receiveBotones>:


void spi_74HC165_receiveBotones (uint8_t* pdata, uint16_t sizeData){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 80001a4:	4b15      	ldr	r3, [pc, #84]	; (80001fc <spi_74HC165_receiveBotones+0x64>)
 80001a6:	6818      	ldr	r0, [r3, #0]
 80001a8:	4b15      	ldr	r3, [pc, #84]	; (8000200 <spi_74HC165_receiveBotones+0x68>)
 80001aa:	881b      	ldrh	r3, [r3, #0]
 80001ac:	2200      	movs	r2, #0
 80001ae:	4619      	mov	r1, r3
 80001b0:	f003 f837 	bl	8003222 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <spi_74HC165_receiveBotones+0x64>)
 80001b6:	6818      	ldr	r0, [r3, #0]
 80001b8:	4b11      	ldr	r3, [pc, #68]	; (8000200 <spi_74HC165_receiveBotones+0x68>)
 80001ba:	881b      	ldrh	r3, [r3, #0]
 80001bc:	2201      	movs	r2, #1
 80001be:	4619      	mov	r1, r3
 80001c0:	f003 f82f 	bl	8003222 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 80001c4:	4b0f      	ldr	r3, [pc, #60]	; (8000204 <spi_74HC165_receiveBotones+0x6c>)
 80001c6:	6818      	ldr	r0, [r3, #0]
 80001c8:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <spi_74HC165_receiveBotones+0x70>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	2200      	movs	r2, #0
 80001ce:	4619      	mov	r1, r3
 80001d0:	f003 f827 	bl	8003222 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 80001d4:	4b0d      	ldr	r3, [pc, #52]	; (800020c <spi_74HC165_receiveBotones+0x74>)
 80001d6:	6818      	ldr	r0, [r3, #0]
 80001d8:	887a      	ldrh	r2, [r7, #2]
 80001da:	2364      	movs	r3, #100	; 0x64
 80001dc:	6879      	ldr	r1, [r7, #4]
 80001de:	f004 fe3c 	bl	8004e5a <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 80001e2:	4b08      	ldr	r3, [pc, #32]	; (8000204 <spi_74HC165_receiveBotones+0x6c>)
 80001e4:	6818      	ldr	r0, [r3, #0]
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <spi_74HC165_receiveBotones+0x70>)
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	2201      	movs	r2, #1
 80001ec:	4619      	mov	r1, r3
 80001ee:	f003 f818 	bl	8003222 <HAL_GPIO_WritePin>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000140 	.word	0x20000140
 8000200:	2000013c 	.word	0x2000013c
 8000204:	20000148 	.word	0x20000148
 8000208:	20000144 	.word	0x20000144
 800020c:	20000138 	.word	0x20000138

08000210 <spi_74HC165_receiveTeclado>:
//
//	//clock disable
//	HAL_GPIO_WritePin(portCE2, pinCE2, 1);
//}

void spi_74HC165_receiveTeclado (uint8_t* pdata, uint16_t sizeData){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	460b      	mov	r3, r1
 800021a:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 800021c:	4b17      	ldr	r3, [pc, #92]	; (800027c <spi_74HC165_receiveTeclado+0x6c>)
 800021e:	6818      	ldr	r0, [r3, #0]
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <spi_74HC165_receiveTeclado+0x70>)
 8000222:	881b      	ldrh	r3, [r3, #0]
 8000224:	2200      	movs	r2, #0
 8000226:	4619      	mov	r1, r3
 8000228:	f002 fffb 	bl	8003222 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 800022c:	4b13      	ldr	r3, [pc, #76]	; (800027c <spi_74HC165_receiveTeclado+0x6c>)
 800022e:	6818      	ldr	r0, [r3, #0]
 8000230:	4b13      	ldr	r3, [pc, #76]	; (8000280 <spi_74HC165_receiveTeclado+0x70>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	2201      	movs	r2, #1
 8000236:	4619      	mov	r1, r3
 8000238:	f002 fff3 	bl	8003222 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <spi_74HC165_receiveTeclado+0x74>)
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <spi_74HC165_receiveTeclado+0x78>)
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	2200      	movs	r2, #0
 8000246:	4619      	mov	r1, r3
 8000248:	f002 ffeb 	bl	8003222 <HAL_GPIO_WritePin>

	uint8_t auxData[2];

	//SPI
	HAL_SPI_Receive(spi_handler, auxData, 2, 100);
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <spi_74HC165_receiveTeclado+0x7c>)
 800024e:	6818      	ldr	r0, [r3, #0]
 8000250:	f107 010c 	add.w	r1, r7, #12
 8000254:	2364      	movs	r3, #100	; 0x64
 8000256:	2202      	movs	r2, #2
 8000258:	f004 fdff 	bl	8004e5a <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <spi_74HC165_receiveTeclado+0x74>)
 800025e:	6818      	ldr	r0, [r3, #0]
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <spi_74HC165_receiveTeclado+0x78>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	2201      	movs	r2, #1
 8000266:	4619      	mov	r1, r3
 8000268:	f002 ffdb 	bl	8003222 <HAL_GPIO_WritePin>

	*pdata = auxData[1];
 800026c:	7b7a      	ldrb	r2, [r7, #13]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	701a      	strb	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000140 	.word	0x20000140
 8000280:	2000013c 	.word	0x2000013c
 8000284:	20000148 	.word	0x20000148
 8000288:	20000144 	.word	0x20000144
 800028c:	20000138 	.word	0x20000138

08000290 <spi_74HC595_init>:
SPI_HandleTypeDef* spi_handler;
GPIO_TypeDef* portST;
uint16_t pinST;


void spi_74HC595_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* STport, uint16_t STpin){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	80fb      	strh	r3, [r7, #6]

	spi_handler =hspi;
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <spi_74HC595_init+0x38>)
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	6013      	str	r3, [r2, #0]

	portST = STport;
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <spi_74HC595_init+0x3c>)
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	6013      	str	r3, [r2, #0]
	pinST = STpin;
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <spi_74HC595_init+0x40>)
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(portST, pinST, 0);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <spi_74HC595_init+0x3c>)
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <spi_74HC595_init+0x40>)
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	f002 ffb1 	bl	8003222 <HAL_GPIO_WritePin>

} //end spi_74HC595_init()
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000138 	.word	0x20000138
 80002cc:	20000150 	.word	0x20000150
 80002d0:	2000014c 	.word	0x2000014c

080002d4 <spi_74HC595_Transmit>:


void spi_74HC595_Transmit (uint8_t* pdata, uint16_t sizeData){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(spi_handler, pdata, sizeData, 100);
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <spi_74HC595_Transmit+0x44>)
 80002e2:	6818      	ldr	r0, [r3, #0]
 80002e4:	887a      	ldrh	r2, [r7, #2]
 80002e6:	2364      	movs	r3, #100	; 0x64
 80002e8:	6879      	ldr	r1, [r7, #4]
 80002ea:	f004 fc82 	bl	8004bf2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(portST, pinST, 1);
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <spi_74HC595_Transmit+0x48>)
 80002f0:	6818      	ldr	r0, [r3, #0]
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <spi_74HC595_Transmit+0x4c>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	2201      	movs	r2, #1
 80002f8:	4619      	mov	r1, r3
 80002fa:	f002 ff92 	bl	8003222 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(portST, pinST, 0);
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <spi_74HC595_Transmit+0x48>)
 8000300:	6818      	ldr	r0, [r3, #0]
 8000302:	4b07      	ldr	r3, [pc, #28]	; (8000320 <spi_74HC595_Transmit+0x4c>)
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	2200      	movs	r2, #0
 8000308:	4619      	mov	r1, r3
 800030a:	f002 ff8a 	bl	8003222 <HAL_GPIO_WritePin>

} //end spi_74HC595_transmit()
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000138 	.word	0x20000138
 800031c:	20000150 	.word	0x20000150
 8000320:	2000014c 	.word	0x2000014c

08000324 <turnONFila>:
uint32_t read_input, last_input, fall_input, rise_input;

uint16_t write_output;


void turnONFila (uint8_t filaNum){
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]

	switch (filaNum){
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d862      	bhi.n	80003fa <turnONFila+0xd6>
 8000334:	a201      	add	r2, pc, #4	; (adr r2, 800033c <turnONFila+0x18>)
 8000336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033a:	bf00      	nop
 800033c:	0800034d 	.word	0x0800034d
 8000340:	08000379 	.word	0x08000379
 8000344:	080003a5 	.word	0x080003a5
 8000348:	080003d1 	.word	0x080003d1
		case 0:
			//pongo en 0 la fila 0; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 800034c:	2201      	movs	r2, #1
 800034e:	2120      	movs	r1, #32
 8000350:	482c      	ldr	r0, [pc, #176]	; (8000404 <turnONFila+0xe0>)
 8000352:	f002 ff66 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 8000356:	2201      	movs	r2, #1
 8000358:	2110      	movs	r1, #16
 800035a:	482a      	ldr	r0, [pc, #168]	; (8000404 <turnONFila+0xe0>)
 800035c:	f002 ff61 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	2108      	movs	r1, #8
 8000364:	4827      	ldr	r0, [pc, #156]	; (8000404 <turnONFila+0xe0>)
 8000366:	f002 ff5c 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000370:	4825      	ldr	r0, [pc, #148]	; (8000408 <turnONFila+0xe4>)
 8000372:	f002 ff56 	bl	8003222 <HAL_GPIO_WritePin>
		break;
 8000376:	e041      	b.n	80003fc <turnONFila+0xd8>
		case 1:
			//pongo en 0 la fila 1; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 8000378:	2201      	movs	r2, #1
 800037a:	2120      	movs	r1, #32
 800037c:	4821      	ldr	r0, [pc, #132]	; (8000404 <turnONFila+0xe0>)
 800037e:	f002 ff50 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	2110      	movs	r1, #16
 8000386:	481f      	ldr	r0, [pc, #124]	; (8000404 <turnONFila+0xe0>)
 8000388:	f002 ff4b 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2108      	movs	r1, #8
 8000390:	481c      	ldr	r0, [pc, #112]	; (8000404 <turnONFila+0xe0>)
 8000392:	f002 ff46 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 8000396:	2201      	movs	r2, #1
 8000398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800039c:	481a      	ldr	r0, [pc, #104]	; (8000408 <turnONFila+0xe4>)
 800039e:	f002 ff40 	bl	8003222 <HAL_GPIO_WritePin>
		break;
 80003a2:	e02b      	b.n	80003fc <turnONFila+0xd8>
		case 2:
			//pongo en 0 la fila 2; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2120      	movs	r1, #32
 80003a8:	4816      	ldr	r0, [pc, #88]	; (8000404 <turnONFila+0xe0>)
 80003aa:	f002 ff3a 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	4814      	ldr	r0, [pc, #80]	; (8000404 <turnONFila+0xe0>)
 80003b4:	f002 ff35 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2108      	movs	r1, #8
 80003bc:	4811      	ldr	r0, [pc, #68]	; (8000404 <turnONFila+0xe0>)
 80003be:	f002 ff30 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c8:	480f      	ldr	r0, [pc, #60]	; (8000408 <turnONFila+0xe4>)
 80003ca:	f002 ff2a 	bl	8003222 <HAL_GPIO_WritePin>
		break;
 80003ce:	e015      	b.n	80003fc <turnONFila+0xd8>
		case 3:
			//pongo en 0 la fila 3; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2120      	movs	r1, #32
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <turnONFila+0xe0>)
 80003d6:	f002 ff24 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 80003da:	2201      	movs	r2, #1
 80003dc:	2110      	movs	r1, #16
 80003de:	4809      	ldr	r0, [pc, #36]	; (8000404 <turnONFila+0xe0>)
 80003e0:	f002 ff1f 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2108      	movs	r1, #8
 80003e8:	4806      	ldr	r0, [pc, #24]	; (8000404 <turnONFila+0xe0>)
 80003ea:	f002 ff1a 	bl	8003222 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <turnONFila+0xe4>)
 80003f6:	f002 ff14 	bl	8003222 <HAL_GPIO_WritePin>
		default:
		break;
 80003fa:	bf00      	nop
	}//end witch
}//end turnONFila
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40010c00 	.word	0x40010c00
 8000408:	40010800 	.word	0x40010800

0800040c <lecturaTeclas>:


void lecturaTeclas (void){
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

//	last_input = read_input;

	//pulsadores:
	spi_74HC165_receiveBotones (&read_teclas, 1);
 8000412:	2101      	movs	r1, #1
 8000414:	481a      	ldr	r0, [pc, #104]	; (8000480 <lecturaTeclas+0x74>)
 8000416:	f7ff febf 	bl	8000198 <spi_74HC165_receiveBotones>

	//teclado matricial:

	for (uint8_t i = 0; i < 4; i++){
 800041a:	2300      	movs	r3, #0
 800041c:	71fb      	strb	r3, [r7, #7]
 800041e:	e00d      	b.n	800043c <lecturaTeclas+0x30>
		turnONFila(i);
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff7e 	bl	8000324 <turnONFila>
		spi_74HC165_receiveTeclado(&read_teclado[i], 1);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	4a16      	ldr	r2, [pc, #88]	; (8000484 <lecturaTeclas+0x78>)
 800042c:	4413      	add	r3, r2
 800042e:	2101      	movs	r1, #1
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff feed 	bl	8000210 <spi_74HC165_receiveTeclado>
	for (uint8_t i = 0; i < 4; i++){
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	3301      	adds	r3, #1
 800043a:	71fb      	strb	r3, [r7, #7]
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2b03      	cmp	r3, #3
 8000440:	d9ee      	bls.n	8000420 <lecturaTeclas+0x14>
//							(read_teclado[0] << 6) |
//							(read_teclado[1] << 10) |
//							(read_teclado[2] << 14) |
//							(read_teclado[3] << 18));

	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <lecturaTeclas+0x78>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	f003 020f 	and.w	r2, r3, #15
							( (read_teclado[1] & 0b1111) << 4) |
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <lecturaTeclas+0x78>)
 800044c:	785b      	ldrb	r3, [r3, #1]
 800044e:	011b      	lsls	r3, r3, #4
 8000450:	b2db      	uxtb	r3, r3
	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000452:	431a      	orrs	r2, r3
							( (read_teclado[2] & 0b1111) << 8) |
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <lecturaTeclas+0x78>)
 8000456:	789b      	ldrb	r3, [r3, #2]
 8000458:	021b      	lsls	r3, r3, #8
 800045a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
							( (read_teclado[1] & 0b1111) << 4) |
 800045e:	431a      	orrs	r2, r3
							( (read_teclado[3] & 0b1111) << 12) |
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <lecturaTeclas+0x78>)
 8000462:	78db      	ldrb	r3, [r3, #3]
 8000464:	031b      	lsls	r3, r3, #12
 8000466:	b29b      	uxth	r3, r3
							( (read_teclado[2] & 0b1111) << 8) |
 8000468:	431a      	orrs	r2, r3
							(read_teclas << 16) );
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <lecturaTeclas+0x74>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	041b      	lsls	r3, r3, #16
							( (read_teclado[3] & 0b1111) << 12) |
 8000470:	4313      	orrs	r3, r2
	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000472:	461a      	mov	r2, r3
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <lecturaTeclas+0x7c>)
 8000476:	601a      	str	r2, [r3, #0]


} //end lecturaTeclas()
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000184 	.word	0x20000184
 8000484:	20000158 	.word	0x20000158
 8000488:	2000015c 	.word	0x2000015c

0800048c <update_teclas>:


void update_teclas(void){ //ESTADO DE LAS TECLAS CON LOGICA NEGATIVA
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0


	fall_input = last_input & ~read_input;
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <update_teclas+0x34>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	43da      	mvns	r2, r3
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <update_teclas+0x38>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4013      	ands	r3, r2
 800049c:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <update_teclas+0x3c>)
 800049e:	6013      	str	r3, [r2, #0]
	rise_input = ~last_input & read_input;
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <update_teclas+0x38>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	43da      	mvns	r2, r3
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <update_teclas+0x34>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4013      	ands	r3, r2
 80004ac:	4a07      	ldr	r2, [pc, #28]	; (80004cc <update_teclas+0x40>)
 80004ae:	6013      	str	r3, [r2, #0]

	last_input = read_input;
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <update_teclas+0x34>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <update_teclas+0x38>)
 80004b6:	6013      	str	r3, [r2, #0]

} //end teclas
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	2000015c 	.word	0x2000015c
 80004c4:	20000180 	.word	0x20000180
 80004c8:	20000160 	.word	0x20000160
 80004cc:	20000164 	.word	0x20000164

080004d0 <getStatBoton>:


T_INPUT getStatBoton (T_POS_INPUT b){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]

	if ( (fall_input & (1 << b)) != 0)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2201      	movs	r2, #1
 80004de:	fa02 f303 	lsl.w	r3, r2, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <getStatBoton+0x74>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4013      	ands	r3, r2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <getStatBoton+0x22>
		return FALL;
 80004ee:	2302      	movs	r3, #2
 80004f0:	e022      	b.n	8000538 <getStatBoton+0x68>

	if (rise_input & (1 << b) != 0)
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2201      	movs	r2, #1
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	bf14      	ite	ne
 80004fe:	2301      	movne	r3, #1
 8000500:	2300      	moveq	r3, #0
 8000502:	b2db      	uxtb	r3, r3
 8000504:	461a      	mov	r2, r3
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <getStatBoton+0x78>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4013      	ands	r3, r2
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <getStatBoton+0x44>
		return RISE;
 8000510:	2303      	movs	r3, #3
 8000512:	e011      	b.n	8000538 <getStatBoton+0x68>

	if (read_input & (1 << b) != 0)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2201      	movs	r2, #1
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	2b00      	cmp	r3, #0
 800051e:	bf14      	ite	ne
 8000520:	2301      	movne	r3, #1
 8000522:	2300      	moveq	r3, #0
 8000524:	b2db      	uxtb	r3, r3
 8000526:	461a      	mov	r2, r3
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <getStatBoton+0x7c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4013      	ands	r3, r2
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <getStatBoton+0x66>
		return HIGH_L;
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <getStatBoton+0x68>

	return LOW_L;
 8000536:	2300      	movs	r3, #0

} //end getStatBoton()
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000160 	.word	0x20000160
 8000548:	20000164 	.word	0x20000164
 800054c:	2000015c 	.word	0x2000015c

08000550 <getNumber>:


int8_t getNumber (void){
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

	if (fall_input & (1 << IN_0))
 8000554:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <getNumber+0xb0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <getNumber+0x14>
			return 0;
 8000560:	2300      	movs	r3, #0
 8000562:	e049      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_1))
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <getNumber+0xb0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <getNumber+0x24>
			return 1;
 8000570:	2301      	movs	r3, #1
 8000572:	e041      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_2))
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <getNumber+0xb0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f003 0302 	and.w	r3, r3, #2
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <getNumber+0x34>
			return 2;
 8000580:	2302      	movs	r3, #2
 8000582:	e039      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_3))
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <getNumber+0xb0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <getNumber+0x44>
			return 3;
 8000590:	2303      	movs	r3, #3
 8000592:	e031      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_4))
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <getNumber+0xb0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <getNumber+0x54>
			return 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	e029      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_5))
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <getNumber+0xb0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 0320 	and.w	r3, r3, #32
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <getNumber+0x64>
			return 5;
 80005b0:	2305      	movs	r3, #5
 80005b2:	e021      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_6))
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <getNumber+0xb0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <getNumber+0x74>
			return 6;
 80005c0:	2306      	movs	r3, #6
 80005c2:	e019      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_7))
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <getNumber+0xb0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <getNumber+0x84>
			return 7;
 80005d0:	2307      	movs	r3, #7
 80005d2:	e011      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_8))
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <getNumber+0xb0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <getNumber+0x94>
			return 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	e009      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_9))
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <getNumber+0xb0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <getNumber+0xa4>
			return 9;
 80005f0:	2309      	movs	r3, #9
 80005f2:	e001      	b.n	80005f8 <getNumber+0xa8>

	return -1;
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
} //end getNumber()
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	20000160 	.word	0x20000160

08000604 <setOutput>:


void setOutput (T_POS_OUTPUT s, uint8_t val){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	460a      	mov	r2, r1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	4613      	mov	r3, r2
 8000612:	71bb      	strb	r3, [r7, #6]

	if (val != 0){
 8000614:	79bb      	ldrb	r3, [r7, #6]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00b      	beq.n	8000632 <setOutput+0x2e>
		write_output |= (uint16_t)(1 << s);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2201      	movs	r2, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <setOutput+0x54>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	4313      	orrs	r3, r2
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <setOutput+0x54>)
 800062e:	801a      	strh	r2, [r3, #0]
		return;
 8000630:	e00e      	b.n	8000650 <setOutput+0x4c>
	}else{
		write_output &= ~( (uint16_t)(1 << s) );
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2201      	movs	r2, #1
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	b21b      	sxth	r3, r3
 800063c:	43db      	mvns	r3, r3
 800063e:	b21a      	sxth	r2, r3
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <setOutput+0x54>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	b21b      	sxth	r3, r3
 8000646:	4013      	ands	r3, r2
 8000648:	b21b      	sxth	r3, r3
 800064a:	b29a      	uxth	r2, r3
 800064c:	4b02      	ldr	r3, [pc, #8]	; (8000658 <setOutput+0x54>)
 800064e:	801a      	strh	r2, [r3, #0]
	}

} //end setOutput()
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000154 	.word	0x20000154

0800065c <toggleOutput>:

void toggleOutput (T_POS_OUTPUT s){
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]

	write_output ^= (uint16_t)(1 << s);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2201      	movs	r2, #1
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <toggleOutput+0x2c>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	4053      	eors	r3, r2
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <toggleOutput+0x2c>)
 800067a:	801a      	strh	r2, [r3, #0]

} //end toggleOutput()
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000154 	.word	0x20000154

0800068c <update_outputs>:


void update_outputs (void){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

	spi_74HC595_Transmit( (uint8_t*)&write_output, 2); // 2 bytes.
 8000690:	2102      	movs	r1, #2
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <update_outputs+0x10>)
 8000694:	f7ff fe1e 	bl	80002d4 <spi_74HC595_Transmit>

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000154 	.word	0x20000154

080006a0 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	e01f      	b.n	80006f0 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 80006b0:	79fa      	ldrb	r2, [r7, #7]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	480e      	ldr	r0, [pc, #56]	; (8000700 <SendByteSPI+0x60>)
 80006c6:	f002 fdac 	bl	8003222 <HAL_GPIO_WritePin>
 80006ca:	e004      	b.n	80006d6 <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 80006cc:	2200      	movs	r2, #0
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <SendByteSPI+0x60>)
 80006d2:	f002 fda6 	bl	8003222 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 80006d6:	2200      	movs	r2, #0
 80006d8:	2120      	movs	r1, #32
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <SendByteSPI+0x60>)
 80006dc:	f002 fda1 	bl	8003222 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 80006e0:	2201      	movs	r2, #1
 80006e2:	2120      	movs	r1, #32
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <SendByteSPI+0x60>)
 80006e6:	f002 fd9c 	bl	8003222 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	dddc      	ble.n	80006b0 <SendByteSPI+0x10>

	}
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40010800 	.word	0x40010800

08000704 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800070e:	2201      	movs	r2, #1
 8000710:	2140      	movs	r1, #64	; 0x40
 8000712:	480f      	ldr	r0, [pc, #60]	; (8000750 <ST7920_SendCmd+0x4c>)
 8000714:	f002 fd85 	bl	8003222 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 8000718:	20f8      	movs	r0, #248	; 0xf8
 800071a:	f7ff ffc1 	bl	80006a0 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f023 030f 	bic.w	r3, r3, #15
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffba 	bl	80006a0 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	011b      	lsls	r3, r3, #4
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffb4 	bl	80006a0 <SendByteSPI>
	delay_us(50);
 8000738:	2032      	movs	r0, #50	; 0x32
 800073a:	f000 fa05 	bl	8000b48 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800073e:	2200      	movs	r2, #0
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <ST7920_SendCmd+0x4c>)
 8000744:	f002 fd6d 	bl	8003222 <HAL_GPIO_WritePin>

}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40010800 	.word	0x40010800

08000754 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800075e:	2201      	movs	r2, #1
 8000760:	2140      	movs	r1, #64	; 0x40
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <ST7920_SendData+0x4c>)
 8000764:	f002 fd5d 	bl	8003222 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8000768:	20fa      	movs	r0, #250	; 0xfa
 800076a:	f7ff ff99 	bl	80006a0 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f023 030f 	bic.w	r3, r3, #15
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff92 	bl	80006a0 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff8c 	bl	80006a0 <SendByteSPI>
	delay_us(50);
 8000788:	2032      	movs	r0, #50	; 0x32
 800078a:	f000 f9dd 	bl	8000b48 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800078e:	2200      	movs	r2, #0
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	4803      	ldr	r0, [pc, #12]	; (80007a0 <ST7920_SendData+0x4c>)
 8000794:	f002 fd45 	bl	8003222 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40010800 	.word	0x40010800

080007a4 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
    switch (row)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d81e      	bhi.n	80007f4 <ST7920_SendString+0x50>
 80007b6:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <ST7920_SendString+0x18>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	080007cd 	.word	0x080007cd
 80007c0:	080007d7 	.word	0x080007d7
 80007c4:	080007e1 	.word	0x080007e1
 80007c8:	080007eb 	.word	0x080007eb
    {
        case 0:
            col |= 0x80;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d2:	60bb      	str	r3, [r7, #8]
            break;
 80007d4:	e013      	b.n	80007fe <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80007dc:	60bb      	str	r3, [r7, #8]
            break;
 80007de:	e00e      	b.n	80007fe <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80007e6:	60bb      	str	r3, [r7, #8]
            break;
 80007e8:	e009      	b.n	80007fe <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 80007f0:	60bb      	str	r3, [r7, #8]
            break;
 80007f2:	e004      	b.n	80007fe <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fa:	60bb      	str	r3, [r7, #8]
            break;
 80007fc:	bf00      	nop
    }

    ST7920_SendCmd(col);
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff7e 	bl	8000704 <ST7920_SendCmd>

    while (*string)
 8000808:	e006      	b.n	8000818 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff9e 	bl	8000754 <ST7920_SendData>
    while (*string)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1f4      	bne.n	800080a <ST7920_SendString+0x66>
    	}
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <ST7920_DrawBitmap>:
		Graphic_Check = 0;  // update the variable
	}
}

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]
 8000834:	e06a      	b.n	800090c <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	2b1f      	cmp	r3, #31
 800083a:	d830      	bhi.n	800089e <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 800083c:	2300      	movs	r3, #0
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	e029      	b.n	8000896 <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff5a 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff53 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	4413      	add	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff6f 	bl	8000754 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	4413      	add	r3, r2
 8000882:	461a      	mov	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff62 	bl	8000754 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	3301      	adds	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	2b07      	cmp	r3, #7
 800089a:	d9d2      	bls.n	8000842 <ST7920_DrawBitmap+0x1a>
 800089c:	e033      	b.n	8000906 <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e02d      	b.n	8000900 <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	3b20      	subs	r3, #32
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff25 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	f063 0377 	orn	r3, r3, #119	; 0x77
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff1e 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 80008c8:	7bfa      	ldrb	r2, [r7, #15]
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	4413      	add	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	461a      	mov	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff3a 	bl	8000754 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	7bbb      	ldrb	r3, [r7, #14]
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	4413      	add	r3, r2
 80008ec:	461a      	mov	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff2d 	bl	8000754 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	3301      	adds	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	2b07      	cmp	r3, #7
 8000904:	d9ce      	bls.n	80008a4 <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	3301      	adds	r3, #1
 800090a:	73bb      	strb	r3, [r7, #14]
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	2b3f      	cmp	r3, #63	; 0x3f
 8000910:	d991      	bls.n	8000836 <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <ST7920_Update+0x10>)
 8000922:	f7ff ff81 	bl	8000828 <ST7920_DrawBitmap>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000018c 	.word	0x2000018c

08000930 <ST7920_Clear>:



void ST7920_Clear()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <ST7920_Clear+0x8c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d134      	bne.n	80009a8 <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 800093e:	2300      	movs	r3, #0
 8000940:	71bb      	strb	r3, [r7, #6]
 8000942:	e02d      	b.n	80009a0 <ST7920_Clear+0x70>
		{
			if(y < 32)
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	2b1f      	cmp	r3, #31
 8000948:	d80a      	bhi.n	8000960 <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 800094a:	79bb      	ldrb	r3, [r7, #6]
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fed6 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000958:	2080      	movs	r0, #128	; 0x80
 800095a:	f7ff fed3 	bl	8000704 <ST7920_SendCmd>
 800095e:	e00d      	b.n	800097c <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	3b20      	subs	r3, #32
 8000964:	b2db      	uxtb	r3, r3
 8000966:	b25b      	sxtb	r3, r3
 8000968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800096c:	b25b      	sxtb	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fec7 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8000976:	2088      	movs	r0, #136	; 0x88
 8000978:	f7ff fec4 	bl	8000704 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 800097c:	2300      	movs	r3, #0
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	e008      	b.n	8000994 <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff fee6 	bl	8000754 <ST7920_SendData>
				ST7920_SendData(0);
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fee3 	bl	8000754 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	3301      	adds	r3, #1
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b07      	cmp	r3, #7
 8000998:	d9f3      	bls.n	8000982 <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 800099a:	79bb      	ldrb	r3, [r7, #6]
 800099c:	3301      	adds	r3, #1
 800099e:	71bb      	strb	r3, [r7, #6]
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	2b3f      	cmp	r3, #63	; 0x3f
 80009a4:	d9ce      	bls.n	8000944 <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 80009a6:	e005      	b.n	80009b4 <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);   // clear the display using command
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff feab 	bl	8000704 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 80009ae:	2002      	movs	r0, #2
 80009b0:	f001 ff8c 	bl	80028cc <HAL_Delay>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000104 	.word	0x20000104

080009c0 <ST7920_Init>:


void ST7920_Init (void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80009c4:	2200      	movs	r2, #0
 80009c6:	2101      	movs	r1, #1
 80009c8:	481c      	ldr	r0, [pc, #112]	; (8000a3c <ST7920_Init+0x7c>)
 80009ca:	f002 fc2a 	bl	8003222 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 80009ce:	200a      	movs	r0, #10
 80009d0:	f001 ff7c 	bl	80028cc <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 80009d4:	2201      	movs	r2, #1
 80009d6:	2101      	movs	r1, #1
 80009d8:	4818      	ldr	r0, [pc, #96]	; (8000a3c <ST7920_Init+0x7c>)
 80009da:	f002 fc22 	bl	8003222 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 80009de:	2032      	movs	r0, #50	; 0x32
 80009e0:	f001 ff74 	bl	80028cc <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 80009e4:	2030      	movs	r0, #48	; 0x30
 80009e6:	f7ff fe8d 	bl	8000704 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 80009ea:	206e      	movs	r0, #110	; 0x6e
 80009ec:	f000 f8ac 	bl	8000b48 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 80009f0:	2030      	movs	r0, #48	; 0x30
 80009f2:	f7ff fe87 	bl	8000704 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 80009f6:	2028      	movs	r0, #40	; 0x28
 80009f8:	f000 f8a6 	bl	8000b48 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 80009fc:	2008      	movs	r0, #8
 80009fe:	f7ff fe81 	bl	8000704 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 8000a02:	206e      	movs	r0, #110	; 0x6e
 8000a04:	f000 f8a0 	bl	8000b48 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fe7b 	bl	8000704 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8000a0e:	200c      	movs	r0, #12
 8000a10:	f001 ff5c 	bl	80028cc <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000a14:	2006      	movs	r0, #6
 8000a16:	f7ff fe75 	bl	8000704 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f001 ff56 	bl	80028cc <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000a20:	200c      	movs	r0, #12
 8000a22:	f7ff fe6f 	bl	8000704 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000a26:	2001      	movs	r0, #1
 8000a28:	f001 ff50 	bl	80028cc <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff fe69 	bl	8000704 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000a32:	2001      	movs	r0, #1
 8000a34:	f001 ff4a 	bl	80028cc <HAL_Delay>

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40010c00 	.word	0x40010c00

08000a40 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a52:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <MX_ADC1_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a6a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a7e:	f001 ff47 	bl	8002910 <HAL_ADC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a88:	f000 ff82 	bl	8001990 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a9e:	f002 f80f 	bl	8002ac0 <HAL_ADC_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000aa8:	f000 ff72 	bl	8001990 <Error_Handler>
  }

}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000590 	.word	0x20000590
 8000ab8:	40012400 	.word	0x40012400

08000abc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <HAL_ADC_MspInit+0x6c>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d121      	bne.n	8000b20 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b10:	2303      	movs	r3, #3
 8000b12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_ADC_MspInit+0x74>)
 8000b1c:	f002 fa10 	bl	8002f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40012400 	.word	0x40012400
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010800 	.word	0x40010800

08000b34 <delay_init>:

extern TIM_HandleTypeDef htim3;


void delay_init ()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim3);  // change this according to ur setup
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <delay_init+0x10>)
 8000b3a:	f004 fd3e 	bl	80055ba <HAL_TIM_Base_Start>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000670 	.word	0x20000670

08000b48 <delay_us>:

void delay_us (uint16_t delay)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);  // reset the counter
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <delay_us+0x2c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<delay);  // wait for the delay to complete
 8000b5a:	bf00      	nop
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <delay_us+0x2c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d3f9      	bcc.n	8000b5c <delay_us+0x14>
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000670 	.word	0x20000670

08000b78 <init_pantalla>:
#include "ST7920_SERIAL.h"
#include "delay.h"

uint8_t flag_pantalla = 0;

void init_pantalla (void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	delay_init();
 8000b7c:	f7ff ffda 	bl	8000b34 <delay_init>
	ST7920_Init();
 8000b80:	f7ff ff1e 	bl	80009c0 <ST7920_Init>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <set_pantalla>:
//	ST7920_Clear();
//	ST7920_SendString(0, 0, texto);
//	//flag_pantalla = 1;
//}

void set_pantalla (T_PANTALLA p){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	ST7920_Clear();
 8000b92:	f7ff fecd 	bl	8000930 <ST7920_Clear>
	switch (p){
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b15      	cmp	r3, #21
 8000b9a:	f200 8117 	bhi.w	8000dcc <set_pantalla+0x244>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <set_pantalla+0x1c>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000bfd 	.word	0x08000bfd
 8000ba8:	08000c13 	.word	0x08000c13
 8000bac:	08000c29 	.word	0x08000c29
 8000bb0:	08000c3f 	.word	0x08000c3f
 8000bb4:	08000c5f 	.word	0x08000c5f
 8000bb8:	08000c6b 	.word	0x08000c6b
 8000bbc:	08000c77 	.word	0x08000c77
 8000bc0:	08000c8d 	.word	0x08000c8d
 8000bc4:	08000ca3 	.word	0x08000ca3
 8000bc8:	08000cb9 	.word	0x08000cb9
 8000bcc:	08000cd9 	.word	0x08000cd9
 8000bd0:	08000cef 	.word	0x08000cef
 8000bd4:	08000d05 	.word	0x08000d05
 8000bd8:	08000d11 	.word	0x08000d11
 8000bdc:	08000d1d 	.word	0x08000d1d
 8000be0:	08000d33 	.word	0x08000d33
 8000be4:	08000d49 	.word	0x08000d49
 8000be8:	08000d5f 	.word	0x08000d5f
 8000bec:	08000d75 	.word	0x08000d75
 8000bf0:	08000d8b 	.word	0x08000d8b
 8000bf4:	08000da1 	.word	0x08000da1
 8000bf8:	08000db7 	.word	0x08000db7
		case PANT_init_menuPrincipal:
			ST7920_SendString(0, 0, "Estoy en el menu");
 8000bfc:	4a75      	ldr	r2, [pc, #468]	; (8000dd4 <set_pantalla+0x24c>)
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fdcf 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "principal.");
 8000c06:	4a74      	ldr	r2, [pc, #464]	; (8000dd8 <set_pantalla+0x250>)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff fdca 	bl	80007a4 <ST7920_SendString>
		break;
 8000c10:	e0dc      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_sensor_conectado:
			ST7920_SendString(0, 0, "Sensor");
 8000c12:	4a72      	ldr	r2, [pc, #456]	; (8000ddc <set_pantalla+0x254>)
 8000c14:	2100      	movs	r1, #0
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fdc4 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "conectado?");
 8000c1c:	4a70      	ldr	r2, [pc, #448]	; (8000de0 <set_pantalla+0x258>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fdbf 	bl	80007a4 <ST7920_SendString>
		break;
 8000c26:	e0d1      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_llenando_terminar:
			ST7920_SendString(0, 0, "Llenando.");
 8000c28:	4a6e      	ldr	r2, [pc, #440]	; (8000de4 <set_pantalla+0x25c>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fdb9 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "Terminar?");
 8000c32:	4a6d      	ldr	r2, [pc, #436]	; (8000de8 <set_pantalla+0x260>)
 8000c34:	2100      	movs	r1, #0
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff fdb4 	bl	80007a4 <ST7920_SendString>
		break;
 8000c3c:	e0c6      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_init_skimmer:
			ST7920_SendString(0, 0, "COMPRUEBE EL");
 8000c3e:	4a6b      	ldr	r2, [pc, #428]	; (8000dec <set_pantalla+0x264>)
 8000c40:	2100      	movs	r1, #0
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fdae 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "ESTADO DE LA");
 8000c48:	4a69      	ldr	r2, [pc, #420]	; (8000df0 <set_pantalla+0x268>)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff fda9 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(2, 0, "BOMBA");
 8000c52:	4a68      	ldr	r2, [pc, #416]	; (8000df4 <set_pantalla+0x26c>)
 8000c54:	2100      	movs	r1, #0
 8000c56:	2002      	movs	r0, #2
 8000c58:	f7ff fda4 	bl	80007a4 <ST7920_SendString>
		break;
 8000c5c:	e0b6      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_init_hidro:
			ST7920_SendString(0, 0, "LIMITE DE TIEMPO");
 8000c5e:	4a66      	ldr	r2, [pc, #408]	; (8000df8 <set_pantalla+0x270>)
 8000c60:	2100      	movs	r1, #0
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fd9e 	bl	80007a4 <ST7920_SendString>
		break;
 8000c68:	e0b0      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_init_lucesExt:
			ST7920_SendString(0, 0, "LIMITE DE TIEMPO");
 8000c6a:	4a63      	ldr	r2, [pc, #396]	; (8000df8 <set_pantalla+0x270>)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fd98 	bl	80007a4 <ST7920_SendString>
		break;
 8000c74:	e0aa      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_init_setLlenado:
			ST7920_SendString(0, 0, "elije tiempo");
 8000c76:	4a61      	ldr	r2, [pc, #388]	; (8000dfc <set_pantalla+0x274>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff fd92 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "on u off");
 8000c80:	4a5f      	ldr	r2, [pc, #380]	; (8000e00 <set_pantalla+0x278>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff fd8d 	bl	80007a4 <ST7920_SendString>
		break;
 8000c8a:	e09f      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PERIODO_ON_LLENADO:
			ST7920_SendString(0, 0, "defina el tiempo");
 8000c8c:	4a5d      	ldr	r2, [pc, #372]	; (8000e04 <set_pantalla+0x27c>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fd87 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion ON:");
 8000c96:	4a5c      	ldr	r2, [pc, #368]	; (8000e08 <set_pantalla+0x280>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fd82 	bl	80007a4 <ST7920_SendString>
		break;
 8000ca0:	e094      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PERIODO_OFF_LLENADO:
			ST7920_SendString(0, 0, "defina el tiempo");
 8000ca2:	4a58      	ldr	r2, [pc, #352]	; (8000e04 <set_pantalla+0x27c>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fd7c 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion OFF:");
 8000cac:	4a57      	ldr	r2, [pc, #348]	; (8000e0c <set_pantalla+0x284>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fd77 	bl	80007a4 <ST7920_SendString>
		break;
 8000cb6:	e089      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_COMPRUEBE_SENSOR:
			ST7920_SendString(0, 0, "COMPRUEBE EL");
 8000cb8:	4a4c      	ldr	r2, [pc, #304]	; (8000dec <set_pantalla+0x264>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fd71 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "SENSOR Y PULSE");
 8000cc2:	4a53      	ldr	r2, [pc, #332]	; (8000e10 <set_pantalla+0x288>)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff fd6c 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(2, 0, "EL BOTON...");
 8000ccc:	4a51      	ldr	r2, [pc, #324]	; (8000e14 <set_pantalla+0x28c>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff fd67 	bl	80007a4 <ST7920_SendString>
		break;
 8000cd6:	e079      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_CONECTE_SENSOR:
			ST7920_SendString(0, 0, "CONECTE EL");
 8000cd8:	4a4f      	ldr	r2, [pc, #316]	; (8000e18 <set_pantalla+0x290>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fd61 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "SENSOR");
 8000ce2:	4a4e      	ldr	r2, [pc, #312]	; (8000e1c <set_pantalla+0x294>)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fd5c 	bl	80007a4 <ST7920_SendString>
		break;
 8000cec:	e06e      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PREGUNTA_SENSOR:
			ST7920_SendString(0, 0, "Sensor");
 8000cee:	4a3b      	ldr	r2, [pc, #236]	; (8000ddc <set_pantalla+0x254>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fd56 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "conectado?");
 8000cf8:	4a39      	ldr	r2, [pc, #228]	; (8000de0 <set_pantalla+0x258>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff fd51 	bl	80007a4 <ST7920_SendString>
		break;
 8000d02:	e063      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_LLENANDO:
			ST7920_SendString(0, 0, "Llenando...");
 8000d04:	4a46      	ldr	r2, [pc, #280]	; (8000e20 <set_pantalla+0x298>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fd4b 	bl	80007a4 <ST7920_SendString>
		break;
 8000d0e:	e05d      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PILETA_LLENA:
			ST7920_SendString(0, 0, "Pileta llena.");
 8000d10:	4a44      	ldr	r2, [pc, #272]	; (8000e24 <set_pantalla+0x29c>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fd45 	bl	80007a4 <ST7920_SendString>
		break;
 8000d1a:	e057      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_OPCIONES_SKIMMER:
			ST7920_SendString(0, 0, "Elija freecuecia");
 8000d1c:	4a42      	ldr	r2, [pc, #264]	; (8000e28 <set_pantalla+0x2a0>)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fd3f 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "u horario");
 8000d26:	4a41      	ldr	r2, [pc, #260]	; (8000e2c <set_pantalla+0x2a4>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff fd3a 	bl	80007a4 <ST7920_SendString>
		break;
 8000d30:	e04c      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_ELIJE_FRECUENCIA_SKIMMER:
			ST7920_SendString(0, 0, "Elijo timepo ON");
 8000d32:	4a3f      	ldr	r2, [pc, #252]	; (8000e30 <set_pantalla+0x2a8>)
 8000d34:	2100      	movs	r1, #0
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fd34 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "o timepo OFF");
 8000d3c:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <set_pantalla+0x2ac>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fd2f 	bl	80007a4 <ST7920_SendString>
		break;
 8000d46:	e041      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_ELIJE_PROGRAMA_SKIMMER:
			ST7920_SendString(0, 0, "Elijo programa 1");
 8000d48:	4a3b      	ldr	r2, [pc, #236]	; (8000e38 <set_pantalla+0x2b0>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff fd29 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "o programa 2");
 8000d52:	4a3a      	ldr	r2, [pc, #232]	; (8000e3c <set_pantalla+0x2b4>)
 8000d54:	2100      	movs	r1, #0
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fd24 	bl	80007a4 <ST7920_SendString>
		break;
 8000d5c:	e036      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PERIODO_ON_SKIMMER:
			ST7920_SendString(0, 0, "Defina el tiempo");
 8000d5e:	4a38      	ldr	r2, [pc, #224]	; (8000e40 <set_pantalla+0x2b8>)
 8000d60:	2100      	movs	r1, #0
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff fd1e 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion ON:");
 8000d68:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <set_pantalla+0x280>)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff fd19 	bl	80007a4 <ST7920_SendString>
		break;
 8000d72:	e02b      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PERIODO_OFF_SKIMMER:
			ST7920_SendString(0, 0, "Defina el tiempo");
 8000d74:	4a32      	ldr	r2, [pc, #200]	; (8000e40 <set_pantalla+0x2b8>)
 8000d76:	2100      	movs	r1, #0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fd13 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion OFF:");
 8000d7e:	4a23      	ldr	r2, [pc, #140]	; (8000e0c <set_pantalla+0x284>)
 8000d80:	2100      	movs	r1, #0
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff fd0e 	bl	80007a4 <ST7920_SendString>
		break;
 8000d88:	e020      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_ELIJE_ON_OFF_HORARIO_SKIMMER:
			ST7920_SendString(0, 0, "Elije horario ON");
 8000d8a:	4a2e      	ldr	r2, [pc, #184]	; (8000e44 <set_pantalla+0x2bc>)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fd08 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "u horario OFF");
 8000d94:	4a2c      	ldr	r2, [pc, #176]	; (8000e48 <set_pantalla+0x2c0>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff fd03 	bl	80007a4 <ST7920_SendString>
		break;
 8000d9e:	e015      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_HORARIO_ON_SKIMMER:
			ST7920_SendString(0, 0, "Defina el");
 8000da0:	4a2a      	ldr	r2, [pc, #168]	; (8000e4c <set_pantalla+0x2c4>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fcfd 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "horario ON");
 8000daa:	4a29      	ldr	r2, [pc, #164]	; (8000e50 <set_pantalla+0x2c8>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff fcf8 	bl	80007a4 <ST7920_SendString>
		break;
 8000db4:	e00a      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_HORARIO_OFF_SKIMMER:
			ST7920_SendString(0, 0, "Defina el");
 8000db6:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <set_pantalla+0x2c4>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fcf2 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "horario OFF");
 8000dc0:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <set_pantalla+0x2cc>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fced 	bl	80007a4 <ST7920_SendString>
		break;
 8000dca:	bf00      	nop

	} //end switch p
//	flag_pantalla = 1;
} //end set_pantalla()
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	08006798 	.word	0x08006798
 8000dd8:	080067ac 	.word	0x080067ac
 8000ddc:	080067b8 	.word	0x080067b8
 8000de0:	080067c0 	.word	0x080067c0
 8000de4:	080067cc 	.word	0x080067cc
 8000de8:	080067d8 	.word	0x080067d8
 8000dec:	080067e4 	.word	0x080067e4
 8000df0:	080067f4 	.word	0x080067f4
 8000df4:	08006804 	.word	0x08006804
 8000df8:	0800680c 	.word	0x0800680c
 8000dfc:	08006820 	.word	0x08006820
 8000e00:	08006830 	.word	0x08006830
 8000e04:	0800683c 	.word	0x0800683c
 8000e08:	08006850 	.word	0x08006850
 8000e0c:	08006860 	.word	0x08006860
 8000e10:	08006874 	.word	0x08006874
 8000e14:	08006884 	.word	0x08006884
 8000e18:	08006890 	.word	0x08006890
 8000e1c:	0800689c 	.word	0x0800689c
 8000e20:	080068a4 	.word	0x080068a4
 8000e24:	080068b0 	.word	0x080068b0
 8000e28:	080068c0 	.word	0x080068c0
 8000e2c:	080068d4 	.word	0x080068d4
 8000e30:	080068e0 	.word	0x080068e0
 8000e34:	080068f0 	.word	0x080068f0
 8000e38:	08006900 	.word	0x08006900
 8000e3c:	08006914 	.word	0x08006914
 8000e40:	08006924 	.word	0x08006924
 8000e44:	08006938 	.word	0x08006938
 8000e48:	0800694c 	.word	0x0800694c
 8000e4c:	0800695c 	.word	0x0800695c
 8000e50:	08006968 	.word	0x08006968
 8000e54:	08006974 	.word	0x08006974

08000e58 <setTexto_pantalla>:

void setTexto_pantalla (char* texto){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	ST7920_Clear();
 8000e60:	f7ff fd66 	bl	8000930 <ST7920_Clear>
	ST7920_SendString(0, 0, texto);
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	2100      	movs	r1, #0
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff fc9b 	bl	80007a4 <ST7920_SendString>
	//flag_pantalla = 1;
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <pantallaUpdate>:

void pantallaLista(void){
	flag_pantalla = 1;
}

void pantallaUpdate(void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	if (flag_pantalla != 0){
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <pantallaUpdate+0x1c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d004      	beq.n	8000e8e <pantallaUpdate+0x16>
		ST7920_Update();
 8000e84:	f7ff fd4a 	bl	800091c <ST7920_Update>
		flag_pantalla = 0;
 8000e88:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <pantallaUpdate+0x1c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
	}
} //end pantallaUpdate()
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000105 	.word	0x20000105

08000e98 <setProg_hidro>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

T_PROG_OUTPUT setProg_hidro (T_PROG_CMD cmd){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]

	int8_t newNumber = getNumber();
 8000ea2:	f7ff fb55 	bl	8000550 <getNumber>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	73fb      	strb	r3, [r7, #15]

	switch (statusTiempoHidro) {
 8000eaa:	4b7b      	ldr	r3, [pc, #492]	; (8001098 <setProg_hidro+0x200>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	f200 80e3 	bhi.w	800107a <setProg_hidro+0x1e2>
 8000eb4:	a201      	add	r2, pc, #4	; (adr r2, 8000ebc <setProg_hidro+0x24>)
 8000eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eba:	bf00      	nop
 8000ebc:	08000ecd 	.word	0x08000ecd
 8000ec0:	08000f0f 	.word	0x08000f0f
 8000ec4:	08000fad 	.word	0x08000fad
 8000ec8:	08001067 	.word	0x08001067
		case 0: //tiempo en 0.
			if (getStatBoton(IN_AST) == FALL) {
 8000ecc:	200c      	movs	r0, #12
 8000ece:	f7ff faff 	bl	80004d0 <getStatBoton>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d101      	bne.n	8000edc <setProg_hidro+0x44>
//			menuActual = menuActual->menuPadre;
//			HMI_setPage(menuActual->nombre);
				return PROG_IDLE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e0d8      	b.n	800108e <setProg_hidro+0x1f6>
			}

			if (newNumber > 0) {
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f340 80cc 	ble.w	800107e <setProg_hidro+0x1e6>
				tiempoHidroAux = newNumber;
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	4b6b      	ldr	r3, [pc, #428]	; (800109c <setProg_hidro+0x204>)
 8000eee:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000ef0:	4b6a      	ldr	r3, [pc, #424]	; (800109c <setProg_hidro+0x204>)
 8000ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4969      	ldr	r1, [pc, #420]	; (80010a0 <setProg_hidro+0x208>)
 8000efa:	486a      	ldr	r0, [pc, #424]	; (80010a4 <setProg_hidro+0x20c>)
 8000efc:	f005 f82e 	bl	8005f5c <siprintf>
				setTexto_pantalla(texto);
 8000f00:	4868      	ldr	r0, [pc, #416]	; (80010a4 <setProg_hidro+0x20c>)
 8000f02:	f7ff ffa9 	bl	8000e58 <setTexto_pantalla>
				statusTiempoHidro = 1;
 8000f06:	4b64      	ldr	r3, [pc, #400]	; (8001098 <setProg_hidro+0x200>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000f0c:	e0b7      	b.n	800107e <setProg_hidro+0x1e6>
		case 1: //lote entre 1 y 9.
			if (getStatBoton(IN_AST) == FALL) {
 8000f0e:	200c      	movs	r0, #12
 8000f10:	f7ff fade 	bl	80004d0 <getStatBoton>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d111      	bne.n	8000f3e <setProg_hidro+0xa6>
				tiempoHidroAux = 0;
 8000f1a:	4b60      	ldr	r3, [pc, #384]	; (800109c <setProg_hidro+0x204>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000f20:	4b5e      	ldr	r3, [pc, #376]	; (800109c <setProg_hidro+0x204>)
 8000f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f26:	461a      	mov	r2, r3
 8000f28:	495d      	ldr	r1, [pc, #372]	; (80010a0 <setProg_hidro+0x208>)
 8000f2a:	485e      	ldr	r0, [pc, #376]	; (80010a4 <setProg_hidro+0x20c>)
 8000f2c:	f005 f816 	bl	8005f5c <siprintf>
				setTexto_pantalla(texto);
 8000f30:	485c      	ldr	r0, [pc, #368]	; (80010a4 <setProg_hidro+0x20c>)
 8000f32:	f7ff ff91 	bl	8000e58 <setTexto_pantalla>
				statusTiempoHidro = 0;
 8000f36:	4b58      	ldr	r3, [pc, #352]	; (8001098 <setProg_hidro+0x200>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
				break;
 8000f3c:	e0a6      	b.n	800108c <setProg_hidro+0x1f4>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8000f3e:	200e      	movs	r0, #14
 8000f40:	f7ff fac6 	bl	80004d0 <getStatBoton>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d103      	bne.n	8000f52 <setProg_hidro+0xba>
				statusTiempoHidro = 3;
 8000f4a:	4b53      	ldr	r3, [pc, #332]	; (8001098 <setProg_hidro+0x200>)
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	701a      	strb	r2, [r3, #0]
				break;
 8000f50:	e09c      	b.n	800108c <setProg_hidro+0x1f4>
			}

			if (newNumber != -1) {
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f5a:	f000 8092 	beq.w	8001082 <setProg_hidro+0x1ea>
				tiempoHidroAux *= 10;
 8000f5e:	4b4f      	ldr	r3, [pc, #316]	; (800109c <setProg_hidro+0x204>)
 8000f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	4b4a      	ldr	r3, [pc, #296]	; (800109c <setProg_hidro+0x204>)
 8000f74:	801a      	strh	r2, [r3, #0]
				tiempoHidroAux += newNumber;
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <setProg_hidro+0x204>)
 8000f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4413      	add	r3, r2
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b44      	ldr	r3, [pc, #272]	; (800109c <setProg_hidro+0x204>)
 8000f8c:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000f8e:	4b43      	ldr	r3, [pc, #268]	; (800109c <setProg_hidro+0x204>)
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4942      	ldr	r1, [pc, #264]	; (80010a0 <setProg_hidro+0x208>)
 8000f98:	4842      	ldr	r0, [pc, #264]	; (80010a4 <setProg_hidro+0x20c>)
 8000f9a:	f004 ffdf 	bl	8005f5c <siprintf>
				setTexto_pantalla(texto);
 8000f9e:	4841      	ldr	r0, [pc, #260]	; (80010a4 <setProg_hidro+0x20c>)
 8000fa0:	f7ff ff5a 	bl	8000e58 <setTexto_pantalla>
				statusTiempoHidro = 2;
 8000fa4:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <setProg_hidro+0x200>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	701a      	strb	r2, [r3, #0]
				break;
 8000faa:	e06f      	b.n	800108c <setProg_hidro+0x1f4>
			}

		break;
		case 2: //lote en 10 o más...
			if (getStatBoton(IN_AST) == FALL) {
 8000fac:	200c      	movs	r0, #12
 8000fae:	f7ff fa8f 	bl	80004d0 <getStatBoton>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d11e      	bne.n	8000ff6 <setProg_hidro+0x15e>
				tiempoHidroAux /= 10;
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <setProg_hidro+0x204>)
 8000fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbe:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <setProg_hidro+0x210>)
 8000fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc4:	1092      	asrs	r2, r2, #2
 8000fc6:	17db      	asrs	r3, r3, #31
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b33      	ldr	r3, [pc, #204]	; (800109c <setProg_hidro+0x204>)
 8000fce:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <setProg_hidro+0x204>)
 8000fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4931      	ldr	r1, [pc, #196]	; (80010a0 <setProg_hidro+0x208>)
 8000fda:	4832      	ldr	r0, [pc, #200]	; (80010a4 <setProg_hidro+0x20c>)
 8000fdc:	f004 ffbe 	bl	8005f5c <siprintf>
				setTexto_pantalla(texto);
 8000fe0:	4830      	ldr	r0, [pc, #192]	; (80010a4 <setProg_hidro+0x20c>)
 8000fe2:	f7ff ff39 	bl	8000e58 <setTexto_pantalla>
				if (statusTiempoHidro < 10) {
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <setProg_hidro+0x200>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b09      	cmp	r3, #9
 8000fec:	d84b      	bhi.n	8001086 <setProg_hidro+0x1ee>
					statusTiempoHidro = 1;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <setProg_hidro+0x200>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000ff4:	e047      	b.n	8001086 <setProg_hidro+0x1ee>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8000ff6:	200e      	movs	r0, #14
 8000ff8:	f7ff fa6a 	bl	80004d0 <getStatBoton>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d103      	bne.n	800100a <setProg_hidro+0x172>
				statusTiempoHidro = 3;
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <setProg_hidro+0x200>)
 8001004:	2203      	movs	r2, #3
 8001006:	701a      	strb	r2, [r3, #0]
				break;
 8001008:	e040      	b.n	800108c <setProg_hidro+0x1f4>
			}

			if (tiempoHidroAux < 120) {
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <setProg_hidro+0x204>)
 800100c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001010:	2b77      	cmp	r3, #119	; 0x77
 8001012:	dc3a      	bgt.n	800108a <setProg_hidro+0x1f2>
				if (newNumber != -1) {
 8001014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800101c:	d035      	beq.n	800108a <setProg_hidro+0x1f2>
					tiempoHidroAux *= 10;
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <setProg_hidro+0x204>)
 8001020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001024:	b29b      	uxth	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	b29b      	uxth	r3, r3
 8001030:	b21a      	sxth	r2, r3
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <setProg_hidro+0x204>)
 8001034:	801a      	strh	r2, [r3, #0]
					tiempoHidroAux += newNumber;
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <setProg_hidro+0x204>)
 800103e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4413      	add	r3, r2
 8001046:	b29b      	uxth	r3, r3
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <setProg_hidro+0x204>)
 800104c:	801a      	strh	r2, [r3, #0]
					sprintf(texto, "%d min.", tiempoHidroAux);
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <setProg_hidro+0x204>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	461a      	mov	r2, r3
 8001056:	4912      	ldr	r1, [pc, #72]	; (80010a0 <setProg_hidro+0x208>)
 8001058:	4812      	ldr	r0, [pc, #72]	; (80010a4 <setProg_hidro+0x20c>)
 800105a:	f004 ff7f 	bl	8005f5c <siprintf>
					setTexto_pantalla(texto);
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <setProg_hidro+0x20c>)
 8001060:	f7ff fefa 	bl	8000e58 <setTexto_pantalla>
					break;
 8001064:	e012      	b.n	800108c <setProg_hidro+0x1f4>
			}

		break;
		case 3: //retorna y graba el valor

			tiempoHidro = tiempoHidroAux;
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <setProg_hidro+0x204>)
 8001068:	f9b3 2000 	ldrsh.w	r2, [r3]
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <setProg_hidro+0x214>)
 800106e:	801a      	strh	r2, [r3, #0]
			statusTiempoHidro = 0;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <setProg_hidro+0x200>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]

			return PROG_FINISHED;
 8001076:	2303      	movs	r3, #3
 8001078:	e009      	b.n	800108e <setProg_hidro+0x1f6>
		break;

		default:
			return PROG_ERROR;
 800107a:	2300      	movs	r3, #0
 800107c:	e007      	b.n	800108e <setProg_hidro+0x1f6>
		break;
 800107e:	bf00      	nop
 8001080:	e004      	b.n	800108c <setProg_hidro+0x1f4>
		break;
 8001082:	bf00      	nop
 8001084:	e002      	b.n	800108c <setProg_hidro+0x1f4>
				break;
 8001086:	bf00      	nop
 8001088:	e000      	b.n	800108c <setProg_hidro+0x1f4>
		break;
 800108a:	bf00      	nop
		break;
	} //end switch statusTiempoHidro.

	return PROG_BUSY;
 800108c:	2302      	movs	r3, #2

} //end setProg_hidro()
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000010a 	.word	0x2000010a
 800109c:	20000106 	.word	0x20000106
 80010a0:	08006980 	.word	0x08006980
 80010a4:	200005c4 	.word	0x200005c4
 80010a8:	66666667 	.word	0x66666667
 80010ac:	20000108 	.word	0x20000108

080010b0 <setProg_luz>:
T_PROG_OUTPUT setProg_skimmer (T_PROG_CMD cmd){
	__NOP();
} //end setProg_skimmer()


T_PROG_OUTPUT setProg_luz (T_PROG_CMD cmd){
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	__NOP();
 80010ba:	bf00      	nop
} //end setProg_luz()
 80010bc:	bf00      	nop
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <runProg_hidro>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

T_PROG_OUTPUT runProg_hidro (T_PROG_CMD cmd){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]

	switch (cmd) {
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d005      	beq.n	80010e4 <runProg_hidro+0x1c>
 80010d8:	2b03      	cmp	r3, #3
 80010da:	f000 80a7 	beq.w	800122c <runProg_hidro+0x164>
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d051      	beq.n	8001186 <runProg_hidro+0xbe>
//			return PROG_FINISHED;
			status_progHidro = PROG_IDLE;
		break;

		default:
		break;
 80010e2:	e0b2      	b.n	800124a <runProg_hidro+0x182>
			setOutput(OUT_rele_jet, 1); //logica positiva
 80010e4:	2101      	movs	r1, #1
 80010e6:	200c      	movs	r0, #12
 80010e8:	f7ff fa8c 	bl	8000604 <setOutput>
			set_led(OUT_led_jet, TITILA_LENTO);
 80010ec:	2102      	movs	r1, #2
 80010ee:	2002      	movs	r0, #2
 80010f0:	f000 fb38 	bl	8001764 <set_led>
			fecha_hidro = get_fecha();
 80010f4:	f000 fa6e 	bl	80015d4 <get_fecha>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <runProg_hidro+0x190>)
 80010fc:	4611      	mov	r1, r2
 80010fe:	7019      	strb	r1, [r3, #0]
 8001100:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001104:	7059      	strb	r1, [r3, #1]
 8001106:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800110a:	7099      	strb	r1, [r3, #2]
 800110c:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8001110:	70da      	strb	r2, [r3, #3]
			hora_hidro = get_hora();
 8001112:	f000 fa57 	bl	80015c4 <get_hora>
 8001116:	4602      	mov	r2, r0
 8001118:	4b50      	ldr	r3, [pc, #320]	; (800125c <runProg_hidro+0x194>)
 800111a:	4611      	mov	r1, r2
 800111c:	7019      	strb	r1, [r3, #0]
 800111e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001122:	7059      	strb	r1, [r3, #1]
 8001124:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001128:	709a      	strb	r2, [r3, #2]
			hora_hidro.Minutes += tiempoHidro;
 800112a:	4b4c      	ldr	r3, [pc, #304]	; (800125c <runProg_hidro+0x194>)
 800112c:	785a      	ldrb	r2, [r3, #1]
 800112e:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <runProg_hidro+0x198>)
 8001130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b48      	ldr	r3, [pc, #288]	; (800125c <runProg_hidro+0x194>)
 800113c:	705a      	strb	r2, [r3, #1]
			if (hora_hidro.Minutes > 59){
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <runProg_hidro+0x194>)
 8001140:	785b      	ldrb	r3, [r3, #1]
 8001142:	2b3b      	cmp	r3, #59	; 0x3b
 8001144:	d91b      	bls.n	800117e <runProg_hidro+0xb6>
				hora_hidro.Minutes -= 59;
 8001146:	4b45      	ldr	r3, [pc, #276]	; (800125c <runProg_hidro+0x194>)
 8001148:	785b      	ldrb	r3, [r3, #1]
 800114a:	3b3b      	subs	r3, #59	; 0x3b
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b43      	ldr	r3, [pc, #268]	; (800125c <runProg_hidro+0x194>)
 8001150:	705a      	strb	r2, [r3, #1]
				hora_hidro.Hours++;
 8001152:	4b42      	ldr	r3, [pc, #264]	; (800125c <runProg_hidro+0x194>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b40      	ldr	r3, [pc, #256]	; (800125c <runProg_hidro+0x194>)
 800115c:	701a      	strb	r2, [r3, #0]
				if (hora_hidro.Hours > 23){
 800115e:	4b3f      	ldr	r3, [pc, #252]	; (800125c <runProg_hidro+0x194>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b17      	cmp	r3, #23
 8001164:	d90b      	bls.n	800117e <runProg_hidro+0xb6>
					hora_hidro.Hours -= 23;
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <runProg_hidro+0x194>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	3b17      	subs	r3, #23
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b3b      	ldr	r3, [pc, #236]	; (800125c <runProg_hidro+0x194>)
 8001170:	701a      	strb	r2, [r3, #0]
					fecha_hidro.Date++;
 8001172:	4b39      	ldr	r3, [pc, #228]	; (8001258 <runProg_hidro+0x190>)
 8001174:	789b      	ldrb	r3, [r3, #2]
 8001176:	3301      	adds	r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <runProg_hidro+0x190>)
 800117c:	709a      	strb	r2, [r3, #2]
			status_progHidro = PROG_BUSY;
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <runProg_hidro+0x19c>)
 8001180:	2202      	movs	r2, #2
 8001182:	701a      	strb	r2, [r3, #0]
		break;
 8001184:	e061      	b.n	800124a <runProg_hidro+0x182>
			if (status_progHidro == PROG_IDLE){
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <runProg_hidro+0x19c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d05a      	beq.n	8001244 <runProg_hidro+0x17c>
			auxFecha = get_fecha();
 800118e:	f000 fa21 	bl	80015d4 <get_fecha>
 8001192:	4602      	mov	r2, r0
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <runProg_hidro+0x1a0>)
 8001196:	4611      	mov	r1, r2
 8001198:	7019      	strb	r1, [r3, #0]
 800119a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800119e:	7059      	strb	r1, [r3, #1]
 80011a0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80011a4:	7099      	strb	r1, [r3, #2]
 80011a6:	f3c2 6207 	ubfx	r2, r2, #24, #8
 80011aa:	70da      	strb	r2, [r3, #3]
			auxHora = get_hora();
 80011ac:	f000 fa0a 	bl	80015c4 <get_hora>
 80011b0:	4602      	mov	r2, r0
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <runProg_hidro+0x1a4>)
 80011b4:	4611      	mov	r1, r2
 80011b6:	7019      	strb	r1, [r3, #0]
 80011b8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80011bc:	7059      	strb	r1, [r3, #1]
 80011be:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80011c2:	709a      	strb	r2, [r3, #2]
			if (fecha_hidro.Date < auxFecha.Date){
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <runProg_hidro+0x190>)
 80011c6:	789a      	ldrb	r2, [r3, #2]
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <runProg_hidro+0x1a0>)
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d20a      	bcs.n	80011e6 <runProg_hidro+0x11e>
				setOutput(OUT_rele_jet, 0); //logica positiva
 80011d0:	2100      	movs	r1, #0
 80011d2:	200c      	movs	r0, #12
 80011d4:	f7ff fa16 	bl	8000604 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 80011d8:	2100      	movs	r1, #0
 80011da:	2002      	movs	r0, #2
 80011dc:	f000 fac2 	bl	8001764 <set_led>
				status_progHidro = PROG_IDLE;
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <runProg_hidro+0x19c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
			if (hora_hidro.Hours < auxHora.Hours){
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <runProg_hidro+0x194>)
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <runProg_hidro+0x1a4>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d20a      	bcs.n	8001208 <runProg_hidro+0x140>
				setOutput(OUT_rele_jet, 0); //logica positiva
 80011f2:	2100      	movs	r1, #0
 80011f4:	200c      	movs	r0, #12
 80011f6:	f7ff fa05 	bl	8000604 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 80011fa:	2100      	movs	r1, #0
 80011fc:	2002      	movs	r0, #2
 80011fe:	f000 fab1 	bl	8001764 <set_led>
				status_progHidro = PROG_IDLE;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <runProg_hidro+0x19c>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
			if (hora_hidro.Minutes < auxHora.Minutes){
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <runProg_hidro+0x194>)
 800120a:	785a      	ldrb	r2, [r3, #1]
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <runProg_hidro+0x1a4>)
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	429a      	cmp	r2, r3
 8001212:	d219      	bcs.n	8001248 <runProg_hidro+0x180>
				setOutput(OUT_rele_jet, 0); //logica positiva
 8001214:	2100      	movs	r1, #0
 8001216:	200c      	movs	r0, #12
 8001218:	f7ff f9f4 	bl	8000604 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 800121c:	2100      	movs	r1, #0
 800121e:	2002      	movs	r0, #2
 8001220:	f000 faa0 	bl	8001764 <set_led>
				status_progHidro = PROG_IDLE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <runProg_hidro+0x19c>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
		break;
 800122a:	e00d      	b.n	8001248 <runProg_hidro+0x180>
			setOutput(OUT_rele_jet, 0); //logica positiva
 800122c:	2100      	movs	r1, #0
 800122e:	200c      	movs	r0, #12
 8001230:	f7ff f9e8 	bl	8000604 <setOutput>
			set_led(OUT_led_jet, APAGADO);
 8001234:	2100      	movs	r1, #0
 8001236:	2002      	movs	r0, #2
 8001238:	f000 fa94 	bl	8001764 <set_led>
			status_progHidro = PROG_IDLE;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <runProg_hidro+0x19c>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
		break;
 8001242:	e002      	b.n	800124a <runProg_hidro+0x182>
				break;
 8001244:	bf00      	nop
 8001246:	e000      	b.n	800124a <runProg_hidro+0x182>
		break;
 8001248:	bf00      	nop
	} //end switch progCmd_hidro

	return status_progHidro;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <runProg_hidro+0x19c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
} //end runProg_hidro()
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200005c0 	.word	0x200005c0
 800125c:	200005ec 	.word	0x200005ec
 8001260:	20000108 	.word	0x20000108
 8001264:	20000002 	.word	0x20000002
 8001268:	200005e8 	.word	0x200005e8
 800126c:	200005f0 	.word	0x200005f0

08001270 <runProg_llenado>:

T_PROG_OUTPUT runProg_llenado (T_PROG_CMD cmd){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]

	switch (cmd) {
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d004      	beq.n	800128a <runProg_llenado+0x1a>
 8001280:	2b03      	cmp	r3, #3
 8001282:	d077      	beq.n	8001374 <runProg_llenado+0x104>
 8001284:	2b01      	cmp	r3, #1
 8001286:	d054      	beq.n	8001332 <runProg_llenado+0xc2>

			status_progLlenado = PROG_IDLE;
		break;

		default:
		break;
 8001288:	e081      	b.n	800138e <runProg_llenado+0x11e>
			setOutput(OUT_rele_napa, 1); //logica positiva
 800128a:	2101      	movs	r1, #1
 800128c:	200b      	movs	r0, #11
 800128e:	f7ff f9b9 	bl	8000604 <setOutput>
			set_led(OUT_led_napa, TITILA_LENTO);
 8001292:	2102      	movs	r1, #2
 8001294:	2001      	movs	r0, #1
 8001296:	f000 fa65 	bl	8001764 <set_led>
			flag_bombaNapa = 1;
 800129a:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <runProg_llenado+0x144>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
			fecha_llenadoOn = get_fecha();
 80012a0:	f000 f998 	bl	80015d4 <get_fecha>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <runProg_llenado+0x148>)
 80012a8:	4611      	mov	r1, r2
 80012aa:	7019      	strb	r1, [r3, #0]
 80012ac:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80012b0:	7059      	strb	r1, [r3, #1]
 80012b2:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80012b6:	7099      	strb	r1, [r3, #2]
 80012b8:	f3c2 6207 	ubfx	r2, r2, #24, #8
 80012bc:	70da      	strb	r2, [r3, #3]
			hora_llenadoOn = get_hora();
 80012be:	f000 f981 	bl	80015c4 <get_hora>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <runProg_llenado+0x14c>)
 80012c6:	4611      	mov	r1, r2
 80012c8:	7019      	strb	r1, [r3, #0]
 80012ca:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80012ce:	7059      	strb	r1, [r3, #1]
 80012d0:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80012d4:	709a      	strb	r2, [r3, #2]
			hora_llenadoOn.Minutes += tiempoLlenado_ON;
 80012d6:	4b39      	ldr	r3, [pc, #228]	; (80013bc <runProg_llenado+0x14c>)
 80012d8:	785a      	ldrb	r2, [r3, #1]
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <runProg_llenado+0x150>)
 80012dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b35      	ldr	r3, [pc, #212]	; (80013bc <runProg_llenado+0x14c>)
 80012e8:	705a      	strb	r2, [r3, #1]
			if (hora_llenadoOn.Minutes > 59) {
 80012ea:	4b34      	ldr	r3, [pc, #208]	; (80013bc <runProg_llenado+0x14c>)
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	2b3b      	cmp	r3, #59	; 0x3b
 80012f0:	d91b      	bls.n	800132a <runProg_llenado+0xba>
				hora_llenadoOn.Minutes -= 59;
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <runProg_llenado+0x14c>)
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	3b3b      	subs	r3, #59	; 0x3b
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <runProg_llenado+0x14c>)
 80012fc:	705a      	strb	r2, [r3, #1]
				hora_llenadoOn.Hours++;
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <runProg_llenado+0x14c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <runProg_llenado+0x14c>)
 8001308:	701a      	strb	r2, [r3, #0]
				if (hora_llenadoOn.Hours > 23) {
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <runProg_llenado+0x14c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b17      	cmp	r3, #23
 8001310:	d90b      	bls.n	800132a <runProg_llenado+0xba>
					hora_llenadoOn.Hours -= 23;
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <runProg_llenado+0x14c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	3b17      	subs	r3, #23
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <runProg_llenado+0x14c>)
 800131c:	701a      	strb	r2, [r3, #0]
					fecha_llenadoOn.Date++;
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <runProg_llenado+0x148>)
 8001320:	789b      	ldrb	r3, [r3, #2]
 8001322:	3301      	adds	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <runProg_llenado+0x148>)
 8001328:	709a      	strb	r2, [r3, #2]
			status_progLlenado = PROG_BUSY;
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <runProg_llenado+0x154>)
 800132c:	2202      	movs	r2, #2
 800132e:	701a      	strb	r2, [r3, #0]
		break;
 8001330:	e02d      	b.n	800138e <runProg_llenado+0x11e>
			if (status_progLlenado == PROG_IDLE) {
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <runProg_llenado+0x154>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d028      	beq.n	800138c <runProg_llenado+0x11c>
			auxFecha = get_fecha();
 800133a:	f000 f94b 	bl	80015d4 <get_fecha>
 800133e:	4602      	mov	r2, r0
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <runProg_llenado+0x158>)
 8001342:	4611      	mov	r1, r2
 8001344:	7019      	strb	r1, [r3, #0]
 8001346:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800134a:	7059      	strb	r1, [r3, #1]
 800134c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8001350:	7099      	strb	r1, [r3, #2]
 8001352:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8001356:	70da      	strb	r2, [r3, #3]
			auxHora = get_hora();
 8001358:	f000 f934 	bl	80015c4 <get_hora>
 800135c:	4602      	mov	r2, r0
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <runProg_llenado+0x15c>)
 8001360:	4611      	mov	r1, r2
 8001362:	7019      	strb	r1, [r3, #0]
 8001364:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001368:	7059      	strb	r1, [r3, #1]
 800136a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800136e:	709a      	strb	r2, [r3, #2]
			__NOP();
 8001370:	bf00      	nop
		break;
 8001372:	e00c      	b.n	800138e <runProg_llenado+0x11e>
			setOutput(OUT_rele_napa, 0); //logica positiva
 8001374:	2100      	movs	r1, #0
 8001376:	200b      	movs	r0, #11
 8001378:	f7ff f944 	bl	8000604 <setOutput>
			set_led(OUT_led_napa, APAGADO);
 800137c:	2100      	movs	r1, #0
 800137e:	2001      	movs	r0, #1
 8001380:	f000 f9f0 	bl	8001764 <set_led>
			status_progLlenado = PROG_IDLE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <runProg_llenado+0x154>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
		break;
 800138a:	e000      	b.n	800138e <runProg_llenado+0x11e>
				break;
 800138c:	bf00      	nop
	} //end switch cmd

	if (!HAL_GPIO_ReadPin(IN_nivelAgua_GPIO_Port, IN_nivelAgua_Pin)) { //LOGICA NEGATIVA
 800138e:	2104      	movs	r1, #4
 8001390:	480f      	ldr	r0, [pc, #60]	; (80013d0 <runProg_llenado+0x160>)
 8001392:	f001 ff2f 	bl	80031f4 <HAL_GPIO_ReadPin>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d105      	bne.n	80013a8 <runProg_llenado+0x138>
		setOutput(OUT_rele_napa, 0); //logica positiva
 800139c:	2100      	movs	r1, #0
 800139e:	200b      	movs	r0, #11
 80013a0:	f7ff f930 	bl	8000604 <setOutput>
		//falta manejar los led
		return PROG_FINISHED;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e000      	b.n	80013aa <runProg_llenado+0x13a>
	}
	return PROG_BUSY;
 80013a8:	2302      	movs	r3, #2

} //end runProg_llenado()
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000010e 	.word	0x2000010e
 80013b8:	200005e4 	.word	0x200005e4
 80013bc:	200005d8 	.word	0x200005d8
 80013c0:	2000010c 	.word	0x2000010c
 80013c4:	20000003 	.word	0x20000003
 80013c8:	200005e8 	.word	0x200005e8
 80013cc:	200005f0 	.word	0x200005f0
 80013d0:	40010800 	.word	0x40010800

080013d4 <runProg_skimmer>:

T_PROG_OUTPUT runProg_skimmer (T_PROG_CMD cmd){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	__NOP();
 80013de:	bf00      	nop

	switch (cmd) {
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d843      	bhi.n	8001470 <runProg_skimmer+0x9c>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <runProg_skimmer+0x1c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	0800143f 	.word	0x0800143f
 80013f4:	08001471 	.word	0x08001471
 80013f8:	08001421 	.word	0x08001421
 80013fc:	08001405 	.word	0x08001405
 8001400:	08001413 	.word	0x08001413
		case PROG_SET1: //con programa
			status_modoPileta = 1;
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <runProg_skimmer+0xb0>)
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_BUSY;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <runProg_skimmer+0xb4>)
 800140c:	2202      	movs	r2, #2
 800140e:	701a      	strb	r2, [r3, #0]
			break;
 8001410:	e031      	b.n	8001476 <runProg_skimmer+0xa2>
		case PROG_SET2: //sin programa
			status_modoPileta = 2;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <runProg_skimmer+0xb0>)
 8001414:	2202      	movs	r2, #2
 8001416:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_BUSY;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <runProg_skimmer+0xb4>)
 800141a:	2202      	movs	r2, #2
 800141c:	701a      	strb	r2, [r3, #0]
			break;
 800141e:	e02a      	b.n	8001476 <runProg_skimmer+0xa2>
		case PROG_STOP:
			setOutput(OUT_rele_pileta, 0); //LOGICA POSITIVA
 8001420:	2100      	movs	r1, #0
 8001422:	200d      	movs	r0, #13
 8001424:	f7ff f8ee 	bl	8000604 <setOutput>
			set_led(OUT_led_pileta, APAGADO);
 8001428:	2100      	movs	r1, #0
 800142a:	2003      	movs	r0, #3
 800142c:	f000 f99a 	bl	8001764 <set_led>
			status_modoPileta = 0;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <runProg_skimmer+0xb0>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_IDLE;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <runProg_skimmer+0xb4>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
			break;
 800143c:	e01b      	b.n	8001476 <runProg_skimmer+0xa2>
		case PROG_CHECK:
			if (status_progHidro == PROG_IDLE){
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <runProg_skimmer+0xb8>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d016      	beq.n	8001474 <runProg_skimmer+0xa0>
				//return PROG_IDLE;
				break;
			}

			switch (status_modoPileta) {
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <runProg_skimmer+0xb0>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d00d      	beq.n	800146a <runProg_skimmer+0x96>
 800144e:	2b02      	cmp	r3, #2
 8001450:	d002      	beq.n	8001458 <runProg_skimmer+0x84>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <runProg_skimmer+0x9a>
				case 2:
					setOutput(OUT_rele_pileta, 1); //logica positiva
					set_led(OUT_led_pileta, TITILA_RAPIDO);
					break;
				default:
					break;
 8001456:	e00b      	b.n	8001470 <runProg_skimmer+0x9c>
					setOutput(OUT_rele_pileta, 1); //logica positiva
 8001458:	2101      	movs	r1, #1
 800145a:	200d      	movs	r0, #13
 800145c:	f7ff f8d2 	bl	8000604 <setOutput>
					set_led(OUT_led_pileta, TITILA_RAPIDO);
 8001460:	2103      	movs	r1, #3
 8001462:	2003      	movs	r0, #3
 8001464:	f000 f97e 	bl	8001764 <set_led>
					break;
 8001468:	e002      	b.n	8001470 <runProg_skimmer+0x9c>
					break;
 800146a:	bf00      	nop
 800146c:	e000      	b.n	8001470 <runProg_skimmer+0x9c>
					break;
 800146e:	bf00      	nop
			}

		default:
			break;
 8001470:	bf00      	nop
 8001472:	e000      	b.n	8001476 <runProg_skimmer+0xa2>
				break;
 8001474:	bf00      	nop
	} //end switch cmd

	return status_progPileta;
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <runProg_skimmer+0xb4>)
 8001478:	781b      	ldrb	r3, [r3, #0]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000010f 	.word	0x2000010f
 8001488:	20000004 	.word	0x20000004
 800148c:	20000002 	.word	0x20000002

08001490 <runProg_luz>:

T_PROG_OUTPUT runProg_luz (T_PROG_CMD cmd){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	__NOP();
 800149a:	bf00      	nop
}
 800149c:	bf00      	nop
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <MX_GPIO_Init+0xe8>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a33      	ldr	r2, [pc, #204]	; (8001590 <MX_GPIO_Init+0xe8>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <MX_GPIO_Init+0xe8>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <MX_GPIO_Init+0xe8>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a2d      	ldr	r2, [pc, #180]	; (8001590 <MX_GPIO_Init+0xe8>)
 80014da:	f043 0320 	orr.w	r3, r3, #32
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <MX_GPIO_Init+0xe8>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0320 	and.w	r3, r3, #32
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <MX_GPIO_Init+0xe8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a27      	ldr	r2, [pc, #156]	; (8001590 <MX_GPIO_Init+0xe8>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <MX_GPIO_Init+0xe8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <MX_GPIO_Init+0xe8>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a21      	ldr	r2, [pc, #132]	; (8001590 <MX_GPIO_Init+0xe8>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_GPIO_Init+0xe8>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE_Pin
 800151c:	2200      	movs	r2, #0
 800151e:	f248 31e0 	movw	r1, #33760	; 0x83e0
 8001522:	481c      	ldr	r0, [pc, #112]	; (8001594 <MX_GPIO_Init+0xec>)
 8001524:	f001 fe7d 	bl	8003222 <HAL_GPIO_WritePin>
                          |OUT_PL_Pin|OUT_fila3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_GLCD_RST_Pin|OUT_ST_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 8001528:	2200      	movs	r2, #0
 800152a:	f241 0139 	movw	r1, #4153	; 0x1039
 800152e:	481a      	ldr	r0, [pc, #104]	; (8001598 <MX_GPIO_Init+0xf0>)
 8001530:	f001 fe77 	bl	8003222 <HAL_GPIO_WritePin>
                          |OUT_fila0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_nivelAgua_Pin;
 8001534:	2304      	movs	r3, #4
 8001536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153c:	2301      	movs	r3, #1
 800153e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN_nivelAgua_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4619      	mov	r1, r3
 8001546:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_GPIO_Init+0xec>)
 8001548:	f001 fcfa 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE_Pin
 800154c:	f248 33e0 	movw	r3, #33760	; 0x83e0
 8001550:	613b      	str	r3, [r7, #16]
                          |OUT_PL_Pin|OUT_fila3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2302      	movs	r3, #2
 800155c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0310 	add.w	r3, r7, #16
 8001562:	4619      	mov	r1, r3
 8001564:	480b      	ldr	r0, [pc, #44]	; (8001594 <MX_GPIO_Init+0xec>)
 8001566:	f001 fceb 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_GLCD_RST_Pin|OUT_ST_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 800156a:	f241 0339 	movw	r3, #4153	; 0x1039
 800156e:	613b      	str	r3, [r7, #16]
                          |OUT_fila0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2302      	movs	r3, #2
 800157a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	4619      	mov	r1, r3
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_GPIO_Init+0xf0>)
 8001584:	f001 fcdc 	bl	8002f40 <HAL_GPIO_Init>

}
 8001588:	bf00      	nop
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	40010800 	.word	0x40010800
 8001598:	40010c00 	.word	0x40010c00

0800159c <update_horaFecha>:
#include "hora_tablero.h"

RTC_TimeTypeDef hora;
RTC_DateTypeDef aux_fecha;

void update_horaFecha (void){
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	 //segun el proyecto "MAQUINA_MD":
	  HAL_RTC_GetTime(&hrtc, &hora, RTC_FORMAT_BIN);
 80015a0:	2200      	movs	r2, #0
 80015a2:	4905      	ldr	r1, [pc, #20]	; (80015b8 <update_horaFecha+0x1c>)
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <update_horaFecha+0x20>)
 80015a6:	f002 fd1d 	bl	8003fe4 <HAL_RTC_GetTime>
	  //HAL_RTC_GetTime(&hrtc, &aux_tiempo, RTC_FORMAT_BIN);
	  HAL_RTC_GetDate(&hrtc, &aux_fecha, RTC_FORMAT_BIN);
 80015aa:	2200      	movs	r2, #0
 80015ac:	4904      	ldr	r1, [pc, #16]	; (80015c0 <update_horaFecha+0x24>)
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <update_horaFecha+0x20>)
 80015b0:	f002 fea6 	bl	8004300 <HAL_RTC_GetDate>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200005f4 	.word	0x200005f4
 80015bc:	20000604 	.word	0x20000604
 80015c0:	20000120 	.word	0x20000120

080015c4 <get_hora>:

void set_fecha (void){
	__NOP();
}

RTC_TimeTypeDef get_hora (void){
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
	__NOP();
 80015c8:	bf00      	nop
}
 80015ca:	bf00      	nop
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <get_fecha>:

RTC_DateTypeDef get_fecha (void){
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

}
 80015d8:	bf00      	nop
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
	...

080015e4 <update_leds>:

uint8_t demora_rapida = 19; //equivale a 200 ms: (valor + 1)*10ms
uint8_t demora_lenta = 49; //equivale a 500 ms: (valor + 1)*10ms


void update_leds (void){ //LOGICA NEGATIVA
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

	for (uint8_t i=0; i < 4; i++){
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	e035      	b.n	800165c <update_leds+0x78>

		switch (status_led[i]) {
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4a59      	ldr	r2, [pc, #356]	; (8001758 <update_leds+0x174>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d828      	bhi.n	800164c <update_leds+0x68>
 80015fa:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <update_leds+0x1c>)
 80015fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001600:	08001611 	.word	0x08001611
 8001604:	0800161d 	.word	0x0800161d
 8001608:	08001629 	.word	0x08001629
 800160c:	0800163b 	.word	0x0800163b
			case APAGADO:
				setOutput(i, 1); //APAGA LED
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2101      	movs	r1, #1
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe fff5 	bl	8000604 <setOutput>
			break;
 800161a:	e01c      	b.n	8001656 <update_leds+0x72>
			case PRENDIDO:
				setOutput(i, 0); //PRENDE LED
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ffef 	bl	8000604 <setOutput>
			break;
 8001626:	e016      	b.n	8001656 <update_leds+0x72>
			case TITILA_LENTO:
				if (!demora_lenta){
 8001628:	4b4c      	ldr	r3, [pc, #304]	; (800175c <update_leds+0x178>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10f      	bne.n	8001650 <update_leds+0x6c>
					toggleOutput (i);
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f812 	bl	800065c <toggleOutput>
					break;
 8001638:	e00d      	b.n	8001656 <update_leds+0x72>
				}
			break;
			case TITILA_RAPIDO:
				if (!demora_rapida){
 800163a:	4b49      	ldr	r3, [pc, #292]	; (8001760 <update_leds+0x17c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d108      	bne.n	8001654 <update_leds+0x70>
					toggleOutput (i);
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff f809 	bl	800065c <toggleOutput>
					break;
 800164a:	e004      	b.n	8001656 <update_leds+0x72>
				}
			break;
			default:
			break;
 800164c:	bf00      	nop
 800164e:	e002      	b.n	8001656 <update_leds+0x72>
			break;
 8001650:	bf00      	nop
 8001652:	e000      	b.n	8001656 <update_leds+0x72>
			break;
 8001654:	bf00      	nop
	for (uint8_t i=0; i < 4; i++){
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	3301      	adds	r3, #1
 800165a:	71fb      	strb	r3, [r7, #7]
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d9c6      	bls.n	80015f0 <update_leds+0xc>
		} //end switch status_led

	} //end for uint8_t i...

	switch (status_led[14]) {
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <update_leds+0x174>)
 8001664:	7b9b      	ldrb	r3, [r3, #14]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d823      	bhi.n	80016b2 <update_leds+0xce>
 800166a:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <update_leds+0x8c>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	08001681 	.word	0x08001681
 8001674:	0800168b 	.word	0x0800168b
 8001678:	08001693 	.word	0x08001693
 800167c:	080016a3 	.word	0x080016a3
		case APAGADO:
			setOutput(OUT_led_luces, 1); //APAGA LED
 8001680:	2101      	movs	r1, #1
 8001682:	200e      	movs	r0, #14
 8001684:	f7fe ffbe 	bl	8000604 <setOutput>
			break;
 8001688:	e018      	b.n	80016bc <update_leds+0xd8>
		case PRENDIDO:
			setOutput(OUT_led_luces, 0); //PRENDE LED
 800168a:	2100      	movs	r1, #0
 800168c:	200e      	movs	r0, #14
 800168e:	f7fe ffb9 	bl	8000604 <setOutput>
		case TITILA_LENTO:
			if (!demora_lenta){
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <update_leds+0x178>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <update_leds+0xd2>
				toggleOutput (OUT_led_luces);
 800169a:	200e      	movs	r0, #14
 800169c:	f7fe ffde 	bl	800065c <toggleOutput>
				break;
 80016a0:	e00c      	b.n	80016bc <update_leds+0xd8>
			}
			break;
		case TITILA_RAPIDO:
			if (!demora_rapida){
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <update_leds+0x17c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d107      	bne.n	80016ba <update_leds+0xd6>
				toggleOutput (OUT_led_luces);
 80016aa:	200e      	movs	r0, #14
 80016ac:	f7fe ffd6 	bl	800065c <toggleOutput>
				break;
 80016b0:	e004      	b.n	80016bc <update_leds+0xd8>
			}
			break;
		default:
			break;
 80016b2:	bf00      	nop
 80016b4:	e002      	b.n	80016bc <update_leds+0xd8>
			break;
 80016b6:	bf00      	nop
 80016b8:	e000      	b.n	80016bc <update_leds+0xd8>
			break;
 80016ba:	bf00      	nop
	} //end switch status_led

	switch (status_led[15]) {
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <update_leds+0x174>)
 80016be:	7bdb      	ldrb	r3, [r3, #15]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d824      	bhi.n	800170e <update_leds+0x12a>
 80016c4:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <update_leds+0xe8>)
 80016c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ca:	bf00      	nop
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	080016e7 	.word	0x080016e7
 80016d4:	080016ef 	.word	0x080016ef
 80016d8:	080016ff 	.word	0x080016ff
		case APAGADO:
			setOutput(OUT_led_tomas, 1); //APAGA LED
 80016dc:	2101      	movs	r1, #1
 80016de:	200f      	movs	r0, #15
 80016e0:	f7fe ff90 	bl	8000604 <setOutput>
			break;
 80016e4:	e018      	b.n	8001718 <update_leds+0x134>
		case PRENDIDO:
			setOutput(OUT_led_tomas, 0); //PRENDE LED
 80016e6:	2100      	movs	r1, #0
 80016e8:	200f      	movs	r0, #15
 80016ea:	f7fe ff8b 	bl	8000604 <setOutput>
		case TITILA_LENTO:
			if (!demora_lenta){
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <update_leds+0x178>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10d      	bne.n	8001712 <update_leds+0x12e>
				toggleOutput (OUT_led_tomas);
 80016f6:	200f      	movs	r0, #15
 80016f8:	f7fe ffb0 	bl	800065c <toggleOutput>
				break;
 80016fc:	e00c      	b.n	8001718 <update_leds+0x134>
			}
			break;
		case TITILA_RAPIDO:
			if (!demora_rapida){
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <update_leds+0x17c>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d107      	bne.n	8001716 <update_leds+0x132>
				toggleOutput (OUT_led_tomas);
 8001706:	200f      	movs	r0, #15
 8001708:	f7fe ffa8 	bl	800065c <toggleOutput>
				break;
 800170c:	e004      	b.n	8001718 <update_leds+0x134>
			}
			break;
		default:
			break;
 800170e:	bf00      	nop
 8001710:	e002      	b.n	8001718 <update_leds+0x134>
			break;
 8001712:	bf00      	nop
 8001714:	e000      	b.n	8001718 <update_leds+0x134>
			break;
 8001716:	bf00      	nop
	} //end switch status_led

	if (demora_lenta != 0){
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <update_leds+0x178>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <update_leds+0x14a>
		demora_lenta--;
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <update_leds+0x178>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	3b01      	subs	r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <update_leds+0x178>)
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e002      	b.n	8001734 <update_leds+0x150>
	}else{
		demora_lenta = 4; // por 10 ms.
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <update_leds+0x178>)
 8001730:	2204      	movs	r2, #4
 8001732:	701a      	strb	r2, [r3, #0]
	}

	if (demora_rapida != 0){
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <update_leds+0x17c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <update_leds+0x166>
		demora_rapida--;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <update_leds+0x17c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3b01      	subs	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <update_leds+0x17c>)
 8001746:	701a      	strb	r2, [r3, #0]
	}else{
		demora_rapida = 1; // por 10 ms.
	}

} //end update_leds()
 8001748:	e002      	b.n	8001750 <update_leds+0x16c>
		demora_rapida = 1; // por 10 ms.
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <update_leds+0x17c>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
} //end update_leds()
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000110 	.word	0x20000110
 800175c:	20000006 	.word	0x20000006
 8001760:	20000005 	.word	0x20000005

08001764 <set_led>:


void set_led (T_POS_OUTPUT l, T_STATUS_LED val){
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	4613      	mov	r3, r2
 8001772:	71bb      	strb	r3, [r7, #6]

	status_led [l] = val;
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	4904      	ldr	r1, [pc, #16]	; (8001788 <set_led+0x24>)
 8001778:	79ba      	ldrb	r2, [r7, #6]
 800177a:	54ca      	strb	r2, [r1, r3]

} //end set_led()
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000110 	.word	0x20000110

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001792:	f001 f839 	bl	8002808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001796:	f000 f87d 	bl	8001894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179a:	f7ff fe85 	bl	80014a8 <MX_GPIO_Init>
  MX_RTC_Init();
 800179e:	f000 fcb9 	bl	8002114 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80017a2:	f000 ff87 	bl	80026b4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80017a6:	f000 feb3 	bl	8002510 <MX_TIM2_Init>
  MX_SPI2_Init();
 80017aa:	f000 fd4b 	bl	8002244 <MX_SPI2_Init>
  MX_ADC1_Init();
 80017ae:	f7ff f947 	bl	8000a40 <MX_ADC1_Init>
  MX_TIM3_Init();
 80017b2:	f000 fef9 	bl	80025a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  spi_74HC165_init(&hspi2, OUT_PL_GPIO_Port, OUT_PL_Pin, OUT_CE_GPIO_Port, OUT_CE_Pin);
 80017b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <main+0xe8>)
 80017be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c2:	492c      	ldr	r1, [pc, #176]	; (8001874 <main+0xe8>)
 80017c4:	482c      	ldr	r0, [pc, #176]	; (8001878 <main+0xec>)
 80017c6:	f7fe fcc1 	bl	800014c <spi_74HC165_init>
  spi_74HC595_init(&hspi2, OUT_ST_GPIO_Port, OUT_ST_Pin);
 80017ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ce:	492b      	ldr	r1, [pc, #172]	; (800187c <main+0xf0>)
 80017d0:	4829      	ldr	r0, [pc, #164]	; (8001878 <main+0xec>)
 80017d2:	f7fe fd5d 	bl	8000290 <spi_74HC595_init>

  HAL_TIM_Base_Start_IT(&htim2); //ticks every 10 ms.
 80017d6:	482a      	ldr	r0, [pc, #168]	; (8001880 <main+0xf4>)
 80017d8:	f003 ff12 	bl	8005600 <HAL_TIM_Base_Start_IT>


  start_menu();
 80017dc:	f000 f8de 	bl	800199c <start_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  update_teclas();
 80017e0:	f7fe fe54 	bl	800048c <update_teclas>

//	  uint8_t pruebaNumero = getNumber();

	  if (flag_tick){ //ticks every 10 ms.
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <main+0xf8>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d031      	beq.n	8001850 <main+0xc4>

		  update_horaFecha();
 80017ec:	f7ff fed6 	bl	800159c <update_horaFecha>
		  check_duracionPulsadores();
 80017f0:	f000 f8ee 	bl	80019d0 <check_duracionPulsadores>

		  if (flag_lecturas != 0){ //para demorar las lecturas de teclas cada 30 ms.
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <main+0xfc>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <main+0x7e>
			  flag_lecturas--;
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <main+0xfc>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	3b01      	subs	r3, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <main+0xfc>)
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	e004      	b.n	8001814 <main+0x88>
		  }else{
			  lecturaTeclas();
 800180a:	f7fe fdff 	bl	800040c <lecturaTeclas>

			  flag_lecturas = 2;
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <main+0xfc>)
 8001810:	2202      	movs	r2, #2
 8001812:	701a      	strb	r2, [r3, #0]
		  }

		  if (flag_salidas != 0){ //para demorar la escritura de las salidas cada 100 ms.
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <main+0x100>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <main+0x9e>
			  flag_salidas--;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <main+0x100>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <main+0x100>)
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e006      	b.n	8001838 <main+0xac>
		  }else{
			  update_leds();
 800182a:	f7ff fedb 	bl	80015e4 <update_leds>
			  update_outputs();
 800182e:	f7fe ff2d 	bl	800068c <update_outputs>

//			  uint8_t datoPrueba[2] = {0xFF, 0xFF};
//			  spi_74HC595_Transmit(datoPrueba, 2);

			  flag_salidas = 9;
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <main+0x100>)
 8001834:	2209      	movs	r2, #9
 8001836:	701a      	strb	r2, [r3, #0]
		  }

		  if (refresh_pantalla != 0){ //refresca cada 300 ms
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <main+0x104>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <main+0xbe>
			  pantallaUpdate();
 8001840:	f7ff fb1a 	bl	8000e78 <pantallaUpdate>
			  refresh_pantalla = 29;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <main+0x104>)
 8001846:	221d      	movs	r2, #29
 8001848:	701a      	strb	r2, [r3, #0]
		  }

		  flag_tick = 0;
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <main+0xf8>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
	  }//end if flag_tick

	  check_pulsadores();
 8001850:	f000 f8dc 	bl	8001a0c <check_pulsadores>
	  check_menu();
 8001854:	f000 f8b2 	bl	80019bc <check_menu>
	  runProg_hidro(PROG_CHECK);
 8001858:	2001      	movs	r0, #1
 800185a:	f7ff fc35 	bl	80010c8 <runProg_hidro>
	  runProg_llenado(PROG_CHECK);
 800185e:	2001      	movs	r0, #1
 8001860:	f7ff fd06 	bl	8001270 <runProg_llenado>
	  runProg_luz(PROG_CHECK);
 8001864:	2001      	movs	r0, #1
 8001866:	f7ff fe13 	bl	8001490 <runProg_luz>
	  runProg_skimmer(PROG_CHECK);
 800186a:	2001      	movs	r0, #1
 800186c:	f7ff fdb2 	bl	80013d4 <runProg_skimmer>
	  update_teclas();
 8001870:	e7b6      	b.n	80017e0 <main+0x54>
 8001872:	bf00      	nop
 8001874:	40010800 	.word	0x40010800
 8001878:	20000618 	.word	0x20000618
 800187c:	40010c00 	.word	0x40010c00
 8001880:	200006b0 	.word	0x200006b0
 8001884:	20000124 	.word	0x20000124
 8001888:	20000000 	.word	0x20000000
 800188c:	20000001 	.word	0x20000001
 8001890:	20000007 	.word	0x20000007

08001894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b094      	sub	sp, #80	; 0x50
 8001898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800189e:	2228      	movs	r2, #40	; 0x28
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 fb52 	bl	8005f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80018c4:	2309      	movs	r3, #9
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d2:	2301      	movs	r3, #1
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018d6:	2301      	movs	r3, #1
 80018d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018da:	2302      	movs	r3, #2
 80018dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fcbc 	bl	800326c <HAL_RCC_OscConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80018fa:	f000 f849 	bl	8001990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fe:	230f      	movs	r3, #15
 8001900:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800190a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2102      	movs	r1, #2
 800191a:	4618      	mov	r0, r3
 800191c:	f001 ff26 	bl	800376c <HAL_RCC_ClockConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001926:	f000 f833 	bl	8001990 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800192a:	2303      	movs	r3, #3
 800192c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800192e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001932:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001938:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4618      	mov	r0, r3
 800193e:	f002 f8b1 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001948:	f000 f822 	bl	8001990 <Error_Handler>
  }
}
 800194c:	bf00      	nop
 800194e:	3750      	adds	r7, #80	; 0x50
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001964:	d102      	bne.n	800196c <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tick = 1;
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
	}
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000124 	.word	0x20000124

0800197c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	__NOP();
 8001984:	bf00      	nop
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <start_menu>:
T_STATUS_LUCESEXT status_menuLucesExt = LIMITE_TIEMPO_LUCESEXT;

/////////////////////////////////////////
//         FUNCIONES PUBLICAS          //
/////////////////////////////////////////
void start_menu (void){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	init_pantalla();
 80019a0:	f7ff f8ea 	bl	8000b78 <init_pantalla>
	init_menuPrincipal();
 80019a4:	f000 f8d4 	bl	8001b50 <init_menuPrincipal>
	menuActual = &menu[MENU_PRINCIPAL];
 80019a8:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <start_menu+0x18>)
 80019aa:	4a03      	ldr	r2, [pc, #12]	; (80019b8 <start_menu+0x1c>)
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200005f8 	.word	0x200005f8
 80019b8:	20000008 	.word	0x20000008

080019bc <check_menu>:

void check_menu (void){
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	menuActual->accion();
 80019c0:	4b02      	ldr	r3, [pc, #8]	; (80019cc <check_menu+0x10>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	4798      	blx	r3
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200005f8 	.word	0x200005f8

080019d0 <check_duracionPulsadores>:

void check_duracionPulsadores (void){
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

	if (pulsoLargo_skimmer != 0){
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <check_duracionPulsadores+0x34>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <check_duracionPulsadores+0x18>
		pulsoLargo_skimmer--;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <check_duracionPulsadores+0x34>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <check_duracionPulsadores+0x34>)
 80019e6:	701a      	strb	r2, [r3, #0]
	}

	if (pulsoLargo_luz != 0){
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <check_duracionPulsadores+0x38>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <check_duracionPulsadores+0x2c>
		pulsoLargo_luz--;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <check_duracionPulsadores+0x38>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <check_duracionPulsadores+0x38>)
 80019fa:	701a      	strb	r2, [r3, #0]
	}
} //end check_duracionPulsadores ()
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000126 	.word	0x20000126
 8001a08:	20000127 	.word	0x20000127

08001a0c <check_pulsadores>:

void check_pulsadores (void){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

	if (getStatBoton(IN_jet) == FALL){
 8001a10:	2014      	movs	r0, #20
 8001a12:	f7fe fd5d 	bl	80004d0 <getStatBoton>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d112      	bne.n	8001a42 <check_pulsadores+0x36>
		if (runProg_hidro(PROG_CHECK) == PROG_BUSY){
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fb53 	bl	80010c8 <runProg_hidro>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d103      	bne.n	8001a30 <check_pulsadores+0x24>
			runProg_hidro(PROG_STOP);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f7ff fb4d 	bl	80010c8 <runProg_hidro>
 8001a2e:	e008      	b.n	8001a42 <check_pulsadores+0x36>
		}else if(runProg_hidro(PROG_CHECK) == PROG_IDLE){
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff fb49 	bl	80010c8 <runProg_hidro>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d102      	bne.n	8001a42 <check_pulsadores+0x36>
			runProg_hidro(PROG_RUN);
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f7ff fb43 	bl	80010c8 <runProg_hidro>
		}
	} //end if getStatBoton IN_jet

	if (getStatBoton(IN_napa) == FALL){
 8001a42:	2013      	movs	r0, #19
 8001a44:	f7fe fd44 	bl	80004d0 <getStatBoton>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d10e      	bne.n	8001a6c <check_pulsadores+0x60>

		menuAux = menuActual;
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <check_pulsadores+0x128>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a39      	ldr	r2, [pc, #228]	; (8001b38 <check_pulsadores+0x12c>)
 8001a54:	6013      	str	r3, [r2, #0]
		menuActual = &menu[MENU_SET_LLENADO];
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <check_pulsadores+0x128>)
 8001a58:	4a38      	ldr	r2, [pc, #224]	; (8001b3c <check_pulsadores+0x130>)
 8001a5a:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <check_pulsadores+0x128>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a37      	ldr	r2, [pc, #220]	; (8001b40 <check_pulsadores+0x134>)
 8001a62:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8001a64:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <check_pulsadores+0x128>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4798      	blx	r3
	} //end if getStatBoton(IN_napa)...

	if (getStatBoton(IN_tomas) == FALL){
 8001a6c:	2010      	movs	r0, #16
 8001a6e:	f7fe fd2f 	bl	80004d0 <getStatBoton>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d11a      	bne.n	8001aae <check_pulsadores+0xa2>
		if (!flag_tomas){
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <check_pulsadores+0x138>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10b      	bne.n	8001a98 <check_pulsadores+0x8c>
			setOutput(OUT_rele_tomas, 1); //logica positiva
 8001a80:	2101      	movs	r1, #1
 8001a82:	2008      	movs	r0, #8
 8001a84:	f7fe fdbe 	bl	8000604 <setOutput>
			set_led(OUT_led_tomas, PRENDIDO);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	200f      	movs	r0, #15
 8001a8c:	f7ff fe6a 	bl	8001764 <set_led>
			flag_tomas = 0;
 8001a90:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <check_pulsadores+0x138>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e00a      	b.n	8001aae <check_pulsadores+0xa2>
		}else{
			setOutput(OUT_rele_tomas, 0); //logica positiva
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2008      	movs	r0, #8
 8001a9c:	f7fe fdb2 	bl	8000604 <setOutput>
			set_led(OUT_led_tomas, APAGADO);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	200f      	movs	r0, #15
 8001aa4:	f7ff fe5e 	bl	8001764 <set_led>
			flag_tomas = 1;
 8001aa8:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <check_pulsadores+0x138>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
		}
	} //end if IN_tomas

	if (getStatBoton(IN_pileta) == FALL){
 8001aae:	2015      	movs	r0, #21
 8001ab0:	f7fe fd0e 	bl	80004d0 <getStatBoton>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d118      	bne.n	8001aec <check_pulsadores+0xe0>
		aux_progOutput = runProg_skimmer(PROG_CHECK);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f7ff fc8a 	bl	80013d4 <runProg_skimmer>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <check_pulsadores+0x13c>)
 8001ac6:	701a      	strb	r2, [r3, #0]

		if (aux_progOutput == PROG_IDLE){
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <check_pulsadores+0x13c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d103      	bne.n	8001ad8 <check_pulsadores+0xcc>
			pulsoLargo_skimmer = 150; //en 10 * ms.
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <check_pulsadores+0x140>)
 8001ad2:	2296      	movs	r2, #150	; 0x96
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	e009      	b.n	8001aec <check_pulsadores+0xe0>
		}else if(aux_progOutput == PROG_BUSY){
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <check_pulsadores+0x13c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d105      	bne.n	8001aec <check_pulsadores+0xe0>
			pulsoLargo_skimmer = 0;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <check_pulsadores+0x140>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
			runProg_skimmer(PROG_STOP);
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f7ff fc74 	bl	80013d4 <runProg_skimmer>
		}


	} //end if getStatBoton(IN_pileta)

	if (pulsoLargo_skimmer != 0){
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <check_pulsadores+0x140>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <check_pulsadores+0x110>

		if (getStatBoton(IN_pileta) == HIGH_L){ //pulso corto
 8001af4:	2015      	movs	r0, #21
 8001af6:	f7fe fceb 	bl	80004d0 <getStatBoton>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <check_pulsadores+0x100>
			runProg_skimmer(PROG_SET1); //con programa
 8001b00:	2004      	movs	r0, #4
 8001b02:	f7ff fc67 	bl	80013d4 <runProg_skimmer>
			pulsoLargo_skimmer = 0;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <check_pulsadores+0x140>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
		}

		if (!pulsoLargo_skimmer){ //pulso largo
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <check_pulsadores+0x140>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d106      	bne.n	8001b22 <check_pulsadores+0x116>
			runProg_skimmer(PROG_SET2); //sin programa
 8001b14:	2005      	movs	r0, #5
 8001b16:	f7ff fc5d 	bl	80013d4 <runProg_skimmer>
 8001b1a:	e002      	b.n	8001b22 <check_pulsadores+0x116>
		}

	}else{

		if (getStatBoton(IN_pileta) == LOW_L){
 8001b1c:	2015      	movs	r0, #21
 8001b1e:	f7fe fcd7 	bl	80004d0 <getStatBoton>
		}

	} //end if pulsoLargo_skimmer != 0


	if (getStatBoton(IN_pileta) == LOW_L){
 8001b22:	2015      	movs	r0, #21
 8001b24:	f7fe fcd4 	bl	80004d0 <getStatBoton>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d100      	bne.n	8001b30 <check_pulsadores+0x124>
		__NOP();
 8001b2e:	bf00      	nop
	}

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200005f8 	.word	0x200005f8
 8001b38:	200005fc 	.word	0x200005fc
 8001b3c:	20000018 	.word	0x20000018
 8001b40:	20000008 	.word	0x20000008
 8001b44:	20000125 	.word	0x20000125
 8001b48:	20000600 	.word	0x20000600
 8001b4c:	20000126 	.word	0x20000126

08001b50 <init_menuPrincipal>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

void init_menuPrincipal (void){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0

	set_pantalla(PANT_init_menuPrincipal);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff f817 	bl	8000b88 <set_pantalla>
//	menuActual = &menu[MENU_PRINCIPAL];
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <init_llenado>:
	set_pantalla(PANT_init_setLlenado);

} //end init_llenado()


void init_llenado (void){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <init_llenado+0x44>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d010      	beq.n	8001b8e <init_llenado+0x2e>
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d00a      	beq.n	8001b86 <init_llenado+0x26>
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d000      	beq.n	8001b76 <init_llenado+0x16>
		break;
		case CONECTE_SENSOR:
			set_pantalla(PANT_CONECTE_SENSOR);
			set_led(OUT_led_napa, PRENDIDO);
		default:
		break;
 8001b74:	e012      	b.n	8001b9c <init_llenado+0x3c>
			set_led(OUT_led_napa, PRENDIDO);
 8001b76:	2101      	movs	r1, #1
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f7ff fdf3 	bl	8001764 <set_led>
			set_pantalla(PANT_sensor_conectado);
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f7ff f802 	bl	8000b88 <set_pantalla>
		break;
 8001b84:	e00b      	b.n	8001b9e <init_llenado+0x3e>
			set_pantalla(PANT_llenando_terminar);
 8001b86:	2002      	movs	r0, #2
 8001b88:	f7fe fffe 	bl	8000b88 <set_pantalla>
		break;
 8001b8c:	e007      	b.n	8001b9e <init_llenado+0x3e>
			set_pantalla(PANT_CONECTE_SENSOR);
 8001b8e:	200a      	movs	r0, #10
 8001b90:	f7fe fffa 	bl	8000b88 <set_pantalla>
			set_led(OUT_led_napa, PRENDIDO);
 8001b94:	2101      	movs	r1, #1
 8001b96:	2001      	movs	r0, #1
 8001b98:	f7ff fde4 	bl	8001764 <set_led>
		break;
 8001b9c:	bf00      	nop
	} //end switch status_menuTablero

} //end init_llenado()
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000128 	.word	0x20000128

08001ba8 <init_skimmer>:


void init_skimmer (void){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_skimmer);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f7fe ffeb 	bl	8000b88 <set_pantalla>
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <init_hidro>:


void init_hidro (void){
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_hidro);
 8001bba:	2004      	movs	r0, #4
 8001bbc:	f7fe ffe4 	bl	8000b88 <set_pantalla>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <init_lucesExt>:


void init_lucesExt (void){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_lucesExt);
 8001bc8:	2005      	movs	r0, #5
 8001bca:	f7fe ffdd 	bl	8000b88 <set_pantalla>
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <init_lucesLed>:


void init_lucesLed (void){
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <init_config>:


void init_config (void){
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
	...

08001bec <acc_menuPrincipal>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

void acc_menuPrincipal (void){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
//		return;
//	}

	//RE VER: debería ejecutar el programa y no configurarlo...

	if (getStatBoton(IN_jet)==FALL){
 8001bf0:	2014      	movs	r0, #20
 8001bf2:	f7fe fc6d 	bl	80004d0 <getStatBoton>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d10b      	bne.n	8001c14 <acc_menuPrincipal+0x28>
		menuActual = &menu[MENU_HIDRO];
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <acc_menuPrincipal+0x60>)
 8001bfe:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <acc_menuPrincipal+0x64>)
 8001c00:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <acc_menuPrincipal+0x60>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <acc_menuPrincipal+0x68>)
 8001c08:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <acc_menuPrincipal+0x60>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4798      	blx	r3
		return;
 8001c12:	e01a      	b.n	8001c4a <acc_menuPrincipal+0x5e>
	}

	if (getStatBoton(IN_A)==FALL){
 8001c14:	2003      	movs	r0, #3
 8001c16:	f7fe fc5b 	bl	80004d0 <getStatBoton>

	}

	if (getStatBoton(IN_B)==FALL){
 8001c1a:	2007      	movs	r0, #7
 8001c1c:	f7fe fc58 	bl	80004d0 <getStatBoton>

	}

	if (getStatBoton(IN_C)==FALL){
 8001c20:	200b      	movs	r0, #11
 8001c22:	f7fe fc55 	bl	80004d0 <getStatBoton>

	}

	if (getStatBoton(IN_D)==FALL){
 8001c26:	200f      	movs	r0, #15
 8001c28:	f7fe fc52 	bl	80004d0 <getStatBoton>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d10b      	bne.n	8001c4a <acc_menuPrincipal+0x5e>
		menuActual = &menu[MENU_LUCES_EXT];
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <acc_menuPrincipal+0x60>)
 8001c34:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <acc_menuPrincipal+0x6c>)
 8001c36:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <acc_menuPrincipal+0x60>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <acc_menuPrincipal+0x68>)
 8001c3e:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <acc_menuPrincipal+0x60>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	4798      	blx	r3
		return;
 8001c48:	bf00      	nop
	}

} //end acc_menuPrincipal()
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200005f8 	.word	0x200005f8
 8001c50:	20000038 	.word	0x20000038
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000048 	.word	0x20000048

08001c5c <acc_llenado>:
	} //end switch status_menuLlenado

} //end acc_setLlenado ()


void acc_llenado (void){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 8001c60:	4b79      	ldr	r3, [pc, #484]	; (8001e48 <acc_llenado+0x1ec>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	f200 80e2 	bhi.w	8001e2e <acc_llenado+0x1d2>
 8001c6a:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <acc_llenado+0x14>)
 8001c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c70:	08001c89 	.word	0x08001c89
 8001c74:	08001cbf 	.word	0x08001cbf
 8001c78:	08001cff 	.word	0x08001cff
 8001c7c:	08001d3b 	.word	0x08001d3b
 8001c80:	08001d99 	.word	0x08001d99
 8001c84:	08001df7 	.word	0x08001df7
		case PREGUNTA_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001c88:	200e      	movs	r0, #14
 8001c8a:	f7fe fc21 	bl	80004d0 <getStatBoton>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d106      	bne.n	8001ca2 <acc_llenado+0x46>
				set_pantalla(PANT_COMPRUEBE_SENSOR);
 8001c94:	2009      	movs	r0, #9
 8001c96:	f7fe ff77 	bl	8000b88 <set_pantalla>
				status_menuLlenado = COMPRUEBE_SENSOR;
 8001c9a:	4b6b      	ldr	r3, [pc, #428]	; (8001e48 <acc_llenado+0x1ec>)
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	701a      	strb	r2, [r3, #0]
				break;
 8001ca0:	e0d0      	b.n	8001e44 <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_AST) == FALL) { //niego
 8001ca2:	200c      	movs	r0, #12
 8001ca4:	f7fe fc14 	bl	80004d0 <getStatBoton>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	f040 80c1 	bne.w	8001e32 <acc_llenado+0x1d6>
				set_pantalla(PANT_CONECTE_SENSOR);
 8001cb0:	200a      	movs	r0, #10
 8001cb2:	f7fe ff69 	bl	8000b88 <set_pantalla>
				status_menuLlenado = CONECTE_SENSOR;
 8001cb6:	4b64      	ldr	r3, [pc, #400]	; (8001e48 <acc_llenado+0x1ec>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
				break;
 8001cbc:	e0c2      	b.n	8001e44 <acc_llenado+0x1e8>
			}

		break;
		case CONECTE_SENSOR:

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001cbe:	200c      	movs	r0, #12
 8001cc0:	f7fe fc06 	bl	80004d0 <getStatBoton>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d10b      	bne.n	8001ce2 <acc_llenado+0x86>
				//vuelve al menu principal
				set_led(OUT_led_napa, APAGADO);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f7ff fd49 	bl	8001764 <set_led>
				menuActual = &menu[MENU_PRINCIPAL];
 8001cd2:	4b5e      	ldr	r3, [pc, #376]	; (8001e4c <acc_llenado+0x1f0>)
 8001cd4:	4a5e      	ldr	r2, [pc, #376]	; (8001e50 <acc_llenado+0x1f4>)
 8001cd6:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001cd8:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <acc_llenado+0x1f0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	4798      	blx	r3
				break;
 8001ce0:	e0b0      	b.n	8001e44 <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001ce2:	200e      	movs	r0, #14
 8001ce4:	f7fe fbf4 	bl	80004d0 <getStatBoton>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	f040 80a3 	bne.w	8001e36 <acc_llenado+0x1da>
				set_pantalla(PANT_PREGUNTA_SENSOR);
 8001cf0:	200b      	movs	r0, #11
 8001cf2:	f7fe ff49 	bl	8000b88 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 8001cf6:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <acc_llenado+0x1ec>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
				break;
 8001cfc:	e0a2      	b.n	8001e44 <acc_llenado+0x1e8>
			}
		break;
		case COMPRUEBE_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001cfe:	200e      	movs	r0, #14
 8001d00:	f7fe fbe6 	bl	80004d0 <getStatBoton>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d109      	bne.n	8001d1e <acc_llenado+0xc2>
				set_pantalla(PANT_LLENANDO);
 8001d0a:	200c      	movs	r0, #12
 8001d0c:	f7fe ff3c 	bl	8000b88 <set_pantalla>
				runProg_llenado(PROG_RUN);
 8001d10:	2002      	movs	r0, #2
 8001d12:	f7ff faad 	bl	8001270 <runProg_llenado>
				status_menuLlenado = LLENANDO;
 8001d16:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <acc_llenado+0x1ec>)
 8001d18:	2203      	movs	r2, #3
 8001d1a:	701a      	strb	r2, [r3, #0]
				break;
 8001d1c:	e092      	b.n	8001e44 <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001d1e:	200c      	movs	r0, #12
 8001d20:	f7fe fbd6 	bl	80004d0 <getStatBoton>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	f040 8087 	bne.w	8001e3a <acc_llenado+0x1de>
				set_pantalla(PANT_PREGUNTA_SENSOR);
 8001d2c:	200b      	movs	r0, #11
 8001d2e:	f7fe ff2b 	bl	8000b88 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 8001d32:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <acc_llenado+0x1ec>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
				break;
 8001d38:	e084      	b.n	8001e44 <acc_llenado+0x1e8>
			}

		break;
		case LLENANDO:
			if (runProg_llenado(PROG_CHECK) == PROG_FINISHED ) { //LOGICA NEGATIVA
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff fa98 	bl	8001270 <runProg_llenado>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d106      	bne.n	8001d54 <acc_llenado+0xf8>
				set_pantalla(PANT_PILETA_LLENA);
 8001d46:	200d      	movs	r0, #13
 8001d48:	f7fe ff1e 	bl	8000b88 <set_pantalla>
				status_menuLlenado = PILETA_LLENA;
 8001d4c:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <acc_llenado+0x1ec>)
 8001d4e:	2205      	movs	r2, #5
 8001d50:	701a      	strb	r2, [r3, #0]
				break;
 8001d52:	e077      	b.n	8001e44 <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001d54:	200e      	movs	r0, #14
 8001d56:	f7fe fbbb 	bl	80004d0 <getStatBoton>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d10a      	bne.n	8001d76 <acc_llenado+0x11a>
				//vuelve al menu principal
				status_menuLlenado = LLENANDO_CHECK;
 8001d60:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <acc_llenado+0x1ec>)
 8001d62:	2204      	movs	r2, #4
 8001d64:	701a      	strb	r2, [r3, #0]
				menuActual = &menu[MENU_PRINCIPAL];
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <acc_llenado+0x1f0>)
 8001d68:	4a39      	ldr	r2, [pc, #228]	; (8001e50 <acc_llenado+0x1f4>)
 8001d6a:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001d6c:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <acc_llenado+0x1f0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4798      	blx	r3
				break;
 8001d74:	e066      	b.n	8001e44 <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001d76:	200c      	movs	r0, #12
 8001d78:	f7fe fbaa 	bl	80004d0 <getStatBoton>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d15d      	bne.n	8001e3e <acc_llenado+0x1e2>
				//vuelve al menu principal
				status_menuLlenado = LLENANDO_CHECK;
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <acc_llenado+0x1ec>)
 8001d84:	2204      	movs	r2, #4
 8001d86:	701a      	strb	r2, [r3, #0]
				menuActual = &menu[MENU_PRINCIPAL];
 8001d88:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <acc_llenado+0x1f0>)
 8001d8a:	4a31      	ldr	r2, [pc, #196]	; (8001e50 <acc_llenado+0x1f4>)
 8001d8c:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <acc_llenado+0x1f0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4798      	blx	r3
				break;
 8001d96:	e055      	b.n	8001e44 <acc_llenado+0x1e8>
			}
		break;
		case LLENANDO_CHECK:
			if (runProg_llenado(PROG_CHECK) == PROG_FINISHED ) { //LOGICA NEGATIVA
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff fa69 	bl	8001270 <runProg_llenado>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d106      	bne.n	8001db2 <acc_llenado+0x156>
				set_pantalla(PANT_PILETA_LLENA);
 8001da4:	200d      	movs	r0, #13
 8001da6:	f7fe feef 	bl	8000b88 <set_pantalla>
				status_menuLlenado = PILETA_LLENA;
 8001daa:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <acc_llenado+0x1ec>)
 8001dac:	2205      	movs	r2, #5
 8001dae:	701a      	strb	r2, [r3, #0]
				break;
 8001db0:	e048      	b.n	8001e44 <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001db2:	200e      	movs	r0, #14
 8001db4:	f7fe fb8c 	bl	80004d0 <getStatBoton>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d10d      	bne.n	8001dda <acc_llenado+0x17e>
				status_menuLlenado = PREGUNTA_SENSOR;
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <acc_llenado+0x1ec>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
				runProg_llenado(PROG_STOP);
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f7ff fa53 	bl	8001270 <runProg_llenado>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <acc_llenado+0x1f0>)
 8001dcc:	4a20      	ldr	r2, [pc, #128]	; (8001e50 <acc_llenado+0x1f4>)
 8001dce:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <acc_llenado+0x1f0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4798      	blx	r3
				break;
 8001dd8:	e034      	b.n	8001e44 <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001dda:	200c      	movs	r0, #12
 8001ddc:	f7fe fb78 	bl	80004d0 <getStatBoton>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d12d      	bne.n	8001e42 <acc_llenado+0x1e6>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <acc_llenado+0x1f0>)
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <acc_llenado+0x1f4>)
 8001dea:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <acc_llenado+0x1f0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4798      	blx	r3
				break;
 8001df4:	e026      	b.n	8001e44 <acc_llenado+0x1e8>
			}
		break;
		case PILETA_LLENA:
			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001df6:	200e      	movs	r0, #14
 8001df8:	f7fe fb6a 	bl	80004d0 <getStatBoton>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d107      	bne.n	8001e12 <acc_llenado+0x1b6>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <acc_llenado+0x1f0>)
 8001e04:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <acc_llenado+0x1f4>)
 8001e06:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <acc_llenado+0x1f0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	4798      	blx	r3
				break;
 8001e10:	e018      	b.n	8001e44 <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001e12:	200c      	movs	r0, #12
 8001e14:	f7fe fb5c 	bl	80004d0 <getStatBoton>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d107      	bne.n	8001e2e <acc_llenado+0x1d2>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <acc_llenado+0x1f0>)
 8001e20:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <acc_llenado+0x1f4>)
 8001e22:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <acc_llenado+0x1f0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	4798      	blx	r3
				break;
 8001e2c:	e00a      	b.n	8001e44 <acc_llenado+0x1e8>
			}

		default:
		break;
 8001e2e:	bf00      	nop
 8001e30:	e008      	b.n	8001e44 <acc_llenado+0x1e8>
		break;
 8001e32:	bf00      	nop
 8001e34:	e006      	b.n	8001e44 <acc_llenado+0x1e8>
		break;
 8001e36:	bf00      	nop
 8001e38:	e004      	b.n	8001e44 <acc_llenado+0x1e8>
		break;
 8001e3a:	bf00      	nop
 8001e3c:	e002      	b.n	8001e44 <acc_llenado+0x1e8>
		break;
 8001e3e:	bf00      	nop
 8001e40:	e000      	b.n	8001e44 <acc_llenado+0x1e8>
		break;
 8001e42:	bf00      	nop
	} //end switch status_menuLlenado

} //end acc_llenado ()
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000128 	.word	0x20000128
 8001e4c:	200005f8 	.word	0x200005f8
 8001e50:	20000008 	.word	0x20000008

08001e54 <acc_skimmer>:


void acc_skimmer (void){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	switch (status_menuSkimmer) {
 8001e58:	4b69      	ldr	r3, [pc, #420]	; (8002000 <acc_skimmer+0x1ac>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	f200 80cd 	bhi.w	8001ffc <acc_skimmer+0x1a8>
 8001e62:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <acc_skimmer+0x14>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001e8d 	.word	0x08001e8d
 8001e6c:	08001ec3 	.word	0x08001ec3
 8001e70:	08001efd 	.word	0x08001efd
 8001e74:	08001fe7 	.word	0x08001fe7
 8001e78:	08001fe7 	.word	0x08001fe7
 8001e7c:	08001f4b 	.word	0x08001f4b
 8001e80:	08001f99 	.word	0x08001f99
 8001e84:	08001fe7 	.word	0x08001fe7
 8001e88:	08001fe7 	.word	0x08001fe7
		case COMPRUEBE_BOMBA:
			if (getStatBoton(IN_AST) == FALL) {
 8001e8c:	200c      	movs	r0, #12
 8001e8e:	f7fe fb1f 	bl	80004d0 <getStatBoton>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d106      	bne.n	8001ea6 <acc_skimmer+0x52>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001e98:	4b5a      	ldr	r3, [pc, #360]	; (8002004 <acc_skimmer+0x1b0>)
 8001e9a:	4a5b      	ldr	r2, [pc, #364]	; (8002008 <acc_skimmer+0x1b4>)
 8001e9c:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001e9e:	4b59      	ldr	r3, [pc, #356]	; (8002004 <acc_skimmer+0x1b0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4798      	blx	r3
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001ea6:	200e      	movs	r0, #14
 8001ea8:	f7fe fb12 	bl	80004d0 <getStatBoton>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	f040 809b 	bne.w	8001fea <acc_skimmer+0x196>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 8001eb4:	200e      	movs	r0, #14
 8001eb6:	f7fe fe67 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 8001eba:	4b51      	ldr	r3, [pc, #324]	; (8002000 <acc_skimmer+0x1ac>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
				break;
 8001ec0:	e09c      	b.n	8001ffc <acc_skimmer+0x1a8>
			}
		break;
		case OPCIONES_SKIMMER:
			if (getStatBoton(IN_AST) == FALL) {
 8001ec2:	200c      	movs	r0, #12
 8001ec4:	f7fe fb04 	bl	80004d0 <getStatBoton>
				//vuelve al menu principal
			}

			if (getStatBoton(IN_1) == FALL) {
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7fe fb01 	bl	80004d0 <getStatBoton>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d106      	bne.n	8001ee2 <acc_skimmer+0x8e>
				set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
 8001ed4:	200f      	movs	r0, #15
 8001ed6:	f7fe fe57 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
 8001eda:	4b49      	ldr	r3, [pc, #292]	; (8002000 <acc_skimmer+0x1ac>)
 8001edc:	2202      	movs	r2, #2
 8001ede:	701a      	strb	r2, [r3, #0]
				break;
 8001ee0:	e08c      	b.n	8001ffc <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f7fe faf4 	bl	80004d0 <getStatBoton>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d17f      	bne.n	8001fee <acc_skimmer+0x19a>
				set_pantalla(PANT_ELIJE_PROGRAMA_SKIMMER);
 8001eee:	2010      	movs	r0, #16
 8001ef0:	f7fe fe4a 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <acc_skimmer+0x1ac>)
 8001ef6:	2205      	movs	r2, #5
 8001ef8:	701a      	strb	r2, [r3, #0]
				break;
 8001efa:	e07f      	b.n	8001ffc <acc_skimmer+0x1a8>
			}
		break;
		case ELIJE_FRECUENCIA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7fe fae7 	bl	80004d0 <getStatBoton>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d106      	bne.n	8001f16 <acc_skimmer+0xc2>
				set_pantalla(PANT_PERIODO_ON_SKIMMER);
 8001f08:	2011      	movs	r0, #17
 8001f0a:	f7fe fe3d 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = PERIODO_ON_SKIMMER;
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <acc_skimmer+0x1ac>)
 8001f10:	2203      	movs	r2, #3
 8001f12:	701a      	strb	r2, [r3, #0]
				break;
 8001f14:	e072      	b.n	8001ffc <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 8001f16:	2001      	movs	r0, #1
 8001f18:	f7fe fada 	bl	80004d0 <getStatBoton>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d106      	bne.n	8001f30 <acc_skimmer+0xdc>
				set_pantalla(PANT_PERIODO_OFF_SKIMMER);
 8001f22:	2012      	movs	r0, #18
 8001f24:	f7fe fe30 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = PERIODO_OFF_SKIMMER;
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <acc_skimmer+0x1ac>)
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	701a      	strb	r2, [r3, #0]
				break;
 8001f2e:	e065      	b.n	8001ffc <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 8001f30:	200c      	movs	r0, #12
 8001f32:	f7fe facd 	bl	80004d0 <getStatBoton>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d15a      	bne.n	8001ff2 <acc_skimmer+0x19e>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 8001f3c:	200e      	movs	r0, #14
 8001f3e:	f7fe fe23 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <acc_skimmer+0x1ac>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
				break;
 8001f48:	e058      	b.n	8001ffc <acc_skimmer+0x1a8>
		break;
		case PERIODO_OFF_SKIMMER:
			//funcion de seteo de periodo off
		break;
		case ELIJE_PROGRAMA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7fe fac0 	bl	80004d0 <getStatBoton>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d106      	bne.n	8001f64 <acc_skimmer+0x110>
				//levanta el flag de modificar el programa 1
				set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 8001f56:	2013      	movs	r0, #19
 8001f58:	f7fe fe16 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <acc_skimmer+0x1ac>)
 8001f5e:	2206      	movs	r2, #6
 8001f60:	701a      	strb	r2, [r3, #0]
				break;
 8001f62:	e04b      	b.n	8001ffc <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7fe fab3 	bl	80004d0 <getStatBoton>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d106      	bne.n	8001f7e <acc_skimmer+0x12a>
				//levanta el flag de modificar el programa 2
				set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 8001f70:	2013      	movs	r0, #19
 8001f72:	f7fe fe09 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <acc_skimmer+0x1ac>)
 8001f78:	2206      	movs	r2, #6
 8001f7a:	701a      	strb	r2, [r3, #0]
				break;
 8001f7c:	e03e      	b.n	8001ffc <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 8001f7e:	200c      	movs	r0, #12
 8001f80:	f7fe faa6 	bl	80004d0 <getStatBoton>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d135      	bne.n	8001ff6 <acc_skimmer+0x1a2>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 8001f8a:	200e      	movs	r0, #14
 8001f8c:	f7fe fdfc 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <acc_skimmer+0x1ac>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
				break;
 8001f96:	e031      	b.n	8001ffc <acc_skimmer+0x1a8>
			}
		break;
		case ELIJE_ON_OFF_HORARIO_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7fe fa99 	bl	80004d0 <getStatBoton>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d106      	bne.n	8001fb2 <acc_skimmer+0x15e>
				//levanta el flag de modificar el horario ON
				set_pantalla(PANT_HORARIO_ON_SKIMMER);
 8001fa4:	2014      	movs	r0, #20
 8001fa6:	f7fe fdef 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = HORARIO_ON_SKIMMER;
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <acc_skimmer+0x1ac>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	701a      	strb	r2, [r3, #0]
				break;
 8001fb0:	e024      	b.n	8001ffc <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f7fe fa8c 	bl	80004d0 <getStatBoton>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d106      	bne.n	8001fcc <acc_skimmer+0x178>
				//levanta el flag de modificar el horario OFF
				set_pantalla(PANT_HORARIO_OFF_SKIMMER);
 8001fbe:	2015      	movs	r0, #21
 8001fc0:	f7fe fde2 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = HORARIO_OFF_SKIMMER;
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <acc_skimmer+0x1ac>)
 8001fc6:	2208      	movs	r2, #8
 8001fc8:	701a      	strb	r2, [r3, #0]
				break;
 8001fca:	e017      	b.n	8001ffc <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 8001fcc:	200c      	movs	r0, #12
 8001fce:	f7fe fa7f 	bl	80004d0 <getStatBoton>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d110      	bne.n	8001ffa <acc_skimmer+0x1a6>
				set_pantalla(PANT_ELIJE_PROGRAMA_SKIMMER);
 8001fd8:	2010      	movs	r0, #16
 8001fda:	f7fe fdd5 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <acc_skimmer+0x1ac>)
 8001fe0:	2205      	movs	r2, #5
 8001fe2:	701a      	strb	r2, [r3, #0]
				break;
 8001fe4:	e00a      	b.n	8001ffc <acc_skimmer+0x1a8>
		break;
 8001fe6:	bf00      	nop
 8001fe8:	e008      	b.n	8001ffc <acc_skimmer+0x1a8>
		break;
 8001fea:	bf00      	nop
 8001fec:	e006      	b.n	8001ffc <acc_skimmer+0x1a8>
		break;
 8001fee:	bf00      	nop
 8001ff0:	e004      	b.n	8001ffc <acc_skimmer+0x1a8>
		break;
 8001ff2:	bf00      	nop
 8001ff4:	e002      	b.n	8001ffc <acc_skimmer+0x1a8>
		break;
 8001ff6:	bf00      	nop
 8001ff8:	e000      	b.n	8001ffc <acc_skimmer+0x1a8>
			}
		break;
 8001ffa:	bf00      	nop
		break;
		case HORARIO_OFF_SKIMMER:
			//funcion de seteo de horario off
		break;
	} //end switch status_menuSkimmer
} //end acc_skimmer()
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000129 	.word	0x20000129
 8002004:	200005f8 	.word	0x200005f8
 8002008:	20000008 	.word	0x20000008

0800200c <acc_hidro>:


void acc_hidro (void){
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0

	switch (status_menuHidro) {
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <acc_hidro+0x84>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <acc_hidro+0x12>
 8002018:	2b01      	cmp	r3, #1
 800201a:	d018      	beq.n	800204e <acc_hidro+0x42>
			} //end switch status_menuHidro

		break;
	} //end switch status_menuHidro

} //end acc_hidro()
 800201c:	e036      	b.n	800208c <acc_hidro+0x80>
			if (getStatBoton(IN_AST) == FALL) {
 800201e:	200c      	movs	r0, #12
 8002020:	f7fe fa56 	bl	80004d0 <getStatBoton>
 8002024:	4603      	mov	r3, r0
 8002026:	2b02      	cmp	r3, #2
 8002028:	d107      	bne.n	800203a <acc_hidro+0x2e>
				menuActual = &menu[MENU_PRINCIPAL];
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <acc_hidro+0x88>)
 800202c:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <acc_hidro+0x8c>)
 800202e:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <acc_hidro+0x88>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	4798      	blx	r3
				break;
 8002038:	e028      	b.n	800208c <acc_hidro+0x80>
			if (getStatBoton(IN_HASH) == FALL) {
 800203a:	200e      	movs	r0, #14
 800203c:	f7fe fa48 	bl	80004d0 <getStatBoton>
 8002040:	4603      	mov	r3, r0
 8002042:	2b02      	cmp	r3, #2
 8002044:	d121      	bne.n	800208a <acc_hidro+0x7e>
				status_menuHidro = ELIJE_TIEMPO_HIDRO;
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <acc_hidro+0x84>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
				break;
 800204c:	e01e      	b.n	800208c <acc_hidro+0x80>
			aux_progOutput = setProg_hidro(PROG_RUN);
 800204e:	2002      	movs	r0, #2
 8002050:	f7fe ff22 	bl	8000e98 <setProg_hidro>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <acc_hidro+0x90>)
 800205a:	701a      	strb	r2, [r3, #0]
			switch (aux_progOutput) {
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <acc_hidro+0x90>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d002      	beq.n	800206a <acc_hidro+0x5e>
 8002064:	2b03      	cmp	r3, #3
 8002066:	d004      	beq.n	8002072 <acc_hidro+0x66>
				break;
 8002068:	e00d      	b.n	8002086 <acc_hidro+0x7a>
					status_menuHidro = LIMITE_TIEMPO_HIDRO;
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <acc_hidro+0x84>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
				break;
 8002070:	e00a      	b.n	8002088 <acc_hidro+0x7c>
					status_menuHidro = LIMITE_TIEMPO_HIDRO;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <acc_hidro+0x84>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
					menuActual = &menu[MENU_PRINCIPAL];
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <acc_hidro+0x88>)
 800207a:	4a07      	ldr	r2, [pc, #28]	; (8002098 <acc_hidro+0x8c>)
 800207c:	601a      	str	r2, [r3, #0]
					menuActual->inicia_menu();
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <acc_hidro+0x88>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4798      	blx	r3
				break;
 8002086:	bf00      	nop
		break;
 8002088:	e000      	b.n	800208c <acc_hidro+0x80>
		break;
 800208a:	bf00      	nop
} //end acc_hidro()
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	2000012a 	.word	0x2000012a
 8002094:	200005f8 	.word	0x200005f8
 8002098:	20000008 	.word	0x20000008
 800209c:	20000600 	.word	0x20000600

080020a0 <acc_lucesExt>:


void acc_lucesExt (void){ //luces Amarillas
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	switch (status_menuLucesExt) {
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <acc_lucesExt+0x50>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <acc_lucesExt+0x12>
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d017      	beq.n	80020e0 <acc_lucesExt+0x40>
			case ELIJE_TIEMPO_LUCESEXT:
				//funcion de seteo de timepo de hidro
				setProg_luz(PROG_RUN);
			break;
		} //end switch status_menuLucesExt
} //end acc_lucesExt()
 80020b0:	e01b      	b.n	80020ea <acc_lucesExt+0x4a>
				if (getStatBoton(IN_AST) == FALL) {
 80020b2:	200c      	movs	r0, #12
 80020b4:	f7fe fa0c 	bl	80004d0 <getStatBoton>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d106      	bne.n	80020cc <acc_lucesExt+0x2c>
					menuActual = &menu[MENU_PRINCIPAL];
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <acc_lucesExt+0x54>)
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <acc_lucesExt+0x58>)
 80020c2:	601a      	str	r2, [r3, #0]
					menuActual->inicia_menu();
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <acc_lucesExt+0x54>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4798      	blx	r3
				if (getStatBoton(IN_HASH) == FALL) {
 80020cc:	200e      	movs	r0, #14
 80020ce:	f7fe f9ff 	bl	80004d0 <getStatBoton>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d107      	bne.n	80020e8 <acc_lucesExt+0x48>
					status_menuLucesExt = ELIJE_TIEMPO_LUCESEXT;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <acc_lucesExt+0x50>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
					break;
 80020de:	e004      	b.n	80020ea <acc_lucesExt+0x4a>
				setProg_luz(PROG_RUN);
 80020e0:	2002      	movs	r0, #2
 80020e2:	f7fe ffe5 	bl	80010b0 <setProg_luz>
			break;
 80020e6:	e000      	b.n	80020ea <acc_lucesExt+0x4a>
			break;
 80020e8:	bf00      	nop
} //end acc_lucesExt()
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000012b 	.word	0x2000012b
 80020f4:	200005f8 	.word	0x200005f8
 80020f8:	20000008 	.word	0x20000008

080020fc <acc_lucesLed>:


void acc_lucesLed (void){
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <acc_config>:


void acc_config (void){
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	2100      	movs	r1, #0
 8002120:	460a      	mov	r2, r1
 8002122:	801a      	strh	r2, [r3, #0]
 8002124:	460a      	mov	r2, r1
 8002126:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 800212c:	463b      	mov	r3, r7
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <MX_RTC_Init+0xc0>)
 8002136:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <MX_RTC_Init+0xc4>)
 8002138:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <MX_RTC_Init+0xc0>)
 800213c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002140:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <MX_RTC_Init+0xc0>)
 8002144:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002148:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800214a:	4822      	ldr	r0, [pc, #136]	; (80021d4 <MX_RTC_Init+0xc0>)
 800214c:	f001 fe1c 	bl	8003d88 <HAL_RTC_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002156:	f7ff fc1b 	bl	8001990 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800215a:	2312      	movs	r3, #18
 800215c:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x59;
 800215e:	2359      	movs	r3, #89	; 0x59
 8002160:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x30;
 8002162:	2330      	movs	r3, #48	; 0x30
 8002164:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	2201      	movs	r2, #1
 800216c:	4619      	mov	r1, r3
 800216e:	4819      	ldr	r0, [pc, #100]	; (80021d4 <MX_RTC_Init+0xc0>)
 8002170:	f001 fea0 	bl	8003eb4 <HAL_RTC_SetTime>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800217a:	f7ff fc09 	bl	8001990 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800217e:	2301      	movs	r3, #1
 8002180:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8002182:	2305      	movs	r3, #5
 8002184:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8002186:	2301      	movs	r3, #1
 8002188:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 800218a:	2300      	movs	r3, #0
 800218c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	2201      	movs	r2, #1
 8002194:	4619      	mov	r1, r3
 8002196:	480f      	ldr	r0, [pc, #60]	; (80021d4 <MX_RTC_Init+0xc0>)
 8002198:	f001 fffc 	bl	8004194 <HAL_RTC_SetDate>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80021a2:	f7ff fbf5 	bl	8001990 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 80021a6:	2313      	movs	r3, #19
 80021a8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80021aa:	2301      	movs	r3, #1
 80021ac:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80021b6:	463b      	mov	r3, r7
 80021b8:	2201      	movs	r2, #1
 80021ba:	4619      	mov	r1, r3
 80021bc:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_RTC_Init+0xc0>)
 80021be:	f002 f8f3 	bl	80043a8 <HAL_RTC_SetAlarm_IT>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80021c8:	f7ff fbe2 	bl	8001990 <Error_Handler>
  }

}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000604 	.word	0x20000604
 80021d8:	40002800 	.word	0x40002800

080021dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a13      	ldr	r2, [pc, #76]	; (8002238 <HAL_RTC_MspInit+0x5c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d120      	bne.n	8002230 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80021ee:	f001 f831 	bl	8003254 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_RTC_MspInit+0x60>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_RTC_MspInit+0x60>)
 80021f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021fc:	61d3      	str	r3, [r2, #28]
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_RTC_MspInit+0x60>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_RTC_MspInit+0x64>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	2003      	movs	r0, #3
 8002216:	f000 fe5c 	bl	8002ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800221a:	2003      	movs	r0, #3
 800221c:	f000 fe75 	bl	8002f0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	2100      	movs	r1, #0
 8002224:	2029      	movs	r0, #41	; 0x29
 8002226:	f000 fe54 	bl	8002ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800222a:	2029      	movs	r0, #41	; 0x29
 800222c:	f000 fe6d 	bl	8002f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40002800 	.word	0x40002800
 800223c:	40021000 	.word	0x40021000
 8002240:	4242043c 	.word	0x4242043c

08002244 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002248:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <MX_SPI2_Init+0x64>)
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <MX_SPI2_Init+0x68>)
 800224c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <MX_SPI2_Init+0x64>)
 8002250:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002254:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <MX_SPI2_Init+0x64>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <MX_SPI2_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <MX_SPI2_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <MX_SPI2_Init+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_SPI2_Init+0x64>)
 8002270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002274:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_SPI2_Init+0x64>)
 8002278:	2238      	movs	r2, #56	; 0x38
 800227a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <MX_SPI2_Init+0x64>)
 800227e:	2200      	movs	r2, #0
 8002280:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_SPI2_Init+0x64>)
 8002284:	2200      	movs	r2, #0
 8002286:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <MX_SPI2_Init+0x64>)
 800228a:	2200      	movs	r2, #0
 800228c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_SPI2_Init+0x64>)
 8002290:	220a      	movs	r2, #10
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <MX_SPI2_Init+0x64>)
 8002296:	f002 fc4b 	bl	8004b30 <HAL_SPI_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022a0:	f7ff fb76 	bl	8001990 <Error_Handler>
  }

}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000618 	.word	0x20000618
 80022ac:	40003800 	.word	0x40003800

080022b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_SPI_MspInit+0x8c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d131      	bne.n	8002334 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_SPI_MspInit+0x90>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	4a1a      	ldr	r2, [pc, #104]	; (8002340 <HAL_SPI_MspInit+0x90>)
 80022d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022da:	61d3      	str	r3, [r2, #28]
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <HAL_SPI_MspInit+0x90>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <HAL_SPI_MspInit+0x90>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <HAL_SPI_MspInit+0x90>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_SPI_MspInit+0x90>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002300:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002304:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	4619      	mov	r1, r3
 8002314:	480b      	ldr	r0, [pc, #44]	; (8002344 <HAL_SPI_MspInit+0x94>)
 8002316:	f000 fe13 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800231a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800231e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	4619      	mov	r1, r3
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <HAL_SPI_MspInit+0x94>)
 8002330:	f000 fe06 	bl	8002f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002334:	bf00      	nop
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40003800 	.word	0x40003800
 8002340:	40021000 	.word	0x40021000
 8002344:	40010c00 	.word	0x40010c00

08002348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_MspInit+0x5c>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	4a14      	ldr	r2, [pc, #80]	; (80023a4 <HAL_MspInit+0x5c>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6193      	str	r3, [r2, #24]
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_MspInit+0x5c>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <HAL_MspInit+0x5c>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <HAL_MspInit+0x5c>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002370:	61d3      	str	r3, [r2, #28]
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_MspInit+0x5c>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_MspInit+0x60>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_MspInit+0x60>)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010000 	.word	0x40010000

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <HardFault_Handler+0x4>

080023be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <MemManage_Handler+0x4>

080023c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <BusFault_Handler+0x4>

080023ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <UsageFault_Handler+0x4>

080023d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f8:	f000 fa4c 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <RTC_IRQHandler+0x10>)
 8002406:	f002 fb4d 	bl	8004aa4 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000604 	.word	0x20000604

08002414 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <TIM2_IRQHandler+0x10>)
 800241a:	f003 f914 	bl	8005646 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200006b0 	.word	0x200006b0

08002428 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <RTC_Alarm_IRQHandler+0x10>)
 800242e:	f002 f86f 	bl	8004510 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000604 	.word	0x20000604

0800243c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <_sbrk+0x5c>)
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <_sbrk+0x60>)
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <_sbrk+0x64>)
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <_sbrk+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d207      	bcs.n	800247c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800246c:	f003 fd44 	bl	8005ef8 <__errno>
 8002470:	4602      	mov	r2, r0
 8002472:	230c      	movs	r3, #12
 8002474:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800247a:	e009      	b.n	8002490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <_sbrk+0x64>)
 800248c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20005000 	.word	0x20005000
 800249c:	00000400 	.word	0x00000400
 80024a0:	2000012c 	.word	0x2000012c
 80024a4:	20000738 	.word	0x20000738

080024a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <SystemInit+0x5c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <SystemInit+0x5c>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <SystemInit+0x5c>)
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	4911      	ldr	r1, [pc, #68]	; (8002504 <SystemInit+0x5c>)
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <SystemInit+0x60>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <SystemInit+0x5c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <SystemInit+0x5c>)
 80024ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <SystemInit+0x5c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <SystemInit+0x5c>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <SystemInit+0x5c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <SystemInit+0x5c>)
 80024e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80024ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SystemInit+0x5c>)
 80024ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80024f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <SystemInit+0x64>)
 80024f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40021000 	.word	0x40021000
 8002508:	f8ff0000 	.word	0xf8ff0000
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002516:	f107 0308 	add.w	r3, r7, #8
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002524:	463b      	mov	r3, r7
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <MX_TIM2_Init+0x94>)
 800252e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002532:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <MX_TIM2_Init+0x94>)
 8002536:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800253a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <MX_TIM2_Init+0x94>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <MX_TIM2_Init+0x94>)
 8002544:	2263      	movs	r2, #99	; 0x63
 8002546:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <MX_TIM2_Init+0x94>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <MX_TIM2_Init+0x94>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002554:	4813      	ldr	r0, [pc, #76]	; (80025a4 <MX_TIM2_Init+0x94>)
 8002556:	f003 f805 	bl	8005564 <HAL_TIM_Base_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002560:	f7ff fa16 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	4619      	mov	r1, r3
 8002570:	480c      	ldr	r0, [pc, #48]	; (80025a4 <MX_TIM2_Init+0x94>)
 8002572:	f003 f970 	bl	8005856 <HAL_TIM_ConfigClockSource>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800257c:	f7ff fa08 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002588:	463b      	mov	r3, r7
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_TIM2_Init+0x94>)
 800258e:	f003 fb35 	bl	8005bfc <HAL_TIMEx_MasterConfigSynchronization>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002598:	f7ff f9fa 	bl	8001990 <Error_Handler>
  }

}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200006b0 	.word	0x200006b0

080025a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	463b      	mov	r3, r7
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <MX_TIM3_Init+0x94>)
 80025c6:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <MX_TIM3_Init+0x98>)
 80025c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <MX_TIM3_Init+0x94>)
 80025cc:	2248      	movs	r2, #72	; 0x48
 80025ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	4b1a      	ldr	r3, [pc, #104]	; (800263c <MX_TIM3_Init+0x94>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <MX_TIM3_Init+0x94>)
 80025d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <MX_TIM3_Init+0x94>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b15      	ldr	r3, [pc, #84]	; (800263c <MX_TIM3_Init+0x94>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025ea:	4814      	ldr	r0, [pc, #80]	; (800263c <MX_TIM3_Init+0x94>)
 80025ec:	f002 ffba 	bl	8005564 <HAL_TIM_Base_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025f6:	f7ff f9cb 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	4619      	mov	r1, r3
 8002606:	480d      	ldr	r0, [pc, #52]	; (800263c <MX_TIM3_Init+0x94>)
 8002608:	f003 f925 	bl	8005856 <HAL_TIM_ConfigClockSource>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002612:	f7ff f9bd 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800261e:	463b      	mov	r3, r7
 8002620:	4619      	mov	r1, r3
 8002622:	4806      	ldr	r0, [pc, #24]	; (800263c <MX_TIM3_Init+0x94>)
 8002624:	f003 faea 	bl	8005bfc <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800262e:	f7ff f9af 	bl	8001990 <Error_Handler>
  }

}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000670 	.word	0x20000670
 8002640:	40000400 	.word	0x40000400

08002644 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002654:	d114      	bne.n	8002680 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_TIM_Base_MspInit+0x68>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	4a14      	ldr	r2, [pc, #80]	; (80026ac <HAL_TIM_Base_MspInit+0x68>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	61d3      	str	r3, [r2, #28]
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_TIM_Base_MspInit+0x68>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800266e:	2200      	movs	r2, #0
 8002670:	2100      	movs	r1, #0
 8002672:	201c      	movs	r0, #28
 8002674:	f000 fc2d 	bl	8002ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002678:	201c      	movs	r0, #28
 800267a:	f000 fc46 	bl	8002f0a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800267e:	e010      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10b      	bne.n	80026a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <HAL_TIM_Base_MspInit+0x68>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <HAL_TIM_Base_MspInit+0x68>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	61d3      	str	r3, [r2, #28]
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_TIM_Base_MspInit+0x68>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40000400 	.word	0x40000400

080026b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <MX_USART1_UART_Init+0x50>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026ec:	f003 fadc 	bl	8005ca8 <HAL_UART_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026f6:	f7ff f94b 	bl	8001990 <Error_Handler>
  }

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200006f0 	.word	0x200006f0
 8002704:	40013800 	.word	0x40013800

08002708 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a22      	ldr	r2, [pc, #136]	; (80027ac <HAL_UART_MspInit+0xa4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d13d      	bne.n	80027a4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_UART_MspInit+0xa8>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	4a20      	ldr	r2, [pc, #128]	; (80027b0 <HAL_UART_MspInit+0xa8>)
 800272e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002732:	6193      	str	r3, [r2, #24]
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_UART_MspInit+0xa8>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_UART_MspInit+0xa8>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <HAL_UART_MspInit+0xa8>)
 8002746:	f043 0308 	orr.w	r3, r3, #8
 800274a:	6193      	str	r3, [r2, #24]
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_UART_MspInit+0xa8>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002758:	2340      	movs	r3, #64	; 0x40
 800275a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002760:	2303      	movs	r3, #3
 8002762:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	4619      	mov	r1, r3
 800276a:	4812      	ldr	r0, [pc, #72]	; (80027b4 <HAL_UART_MspInit+0xac>)
 800276c:	f000 fbe8 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002774:	2300      	movs	r3, #0
 8002776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	4619      	mov	r1, r3
 8002782:	480c      	ldr	r0, [pc, #48]	; (80027b4 <HAL_UART_MspInit+0xac>)
 8002784:	f000 fbdc 	bl	8002f40 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_UART_MspInit+0xb0>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
 800279e:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <HAL_UART_MspInit+0xb0>)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027a4:	bf00      	nop
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40013800 	.word	0x40013800
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010c00 	.word	0x40010c00
 80027b8:	40010000 	.word	0x40010000

080027bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027be:	e003      	b.n	80027c8 <LoopCopyDataInit>

080027c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027c6:	3104      	adds	r1, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027c8:	480a      	ldr	r0, [pc, #40]	; (80027f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027d0:	d3f6      	bcc.n	80027c0 <CopyDataInit>
  ldr r2, =_sbss
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80027d4:	e002      	b.n	80027dc <LoopFillZerobss>

080027d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80027d8:	f842 3b04 	str.w	r3, [r2], #4

080027dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80027de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80027e0:	d3f9      	bcc.n	80027d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027e2:	f7ff fe61 	bl	80024a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027e6:	f003 fb8d 	bl	8005f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ea:	f7fe ffcf 	bl	800178c <main>
  bx lr
 80027ee:	4770      	bx	lr
  ldr r3, =_sidata
 80027f0:	08006a04 	.word	0x08006a04
  ldr r0, =_sdata
 80027f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027f8:	200000e8 	.word	0x200000e8
  ldr r2, =_sbss
 80027fc:	200000e8 	.word	0x200000e8
  ldr r3, = _ebss
 8002800:	20000738 	.word	0x20000738

08002804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002804:	e7fe      	b.n	8002804 <ADC1_2_IRQHandler>
	...

08002808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_Init+0x28>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_Init+0x28>)
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002818:	2003      	movs	r0, #3
 800281a:	f000 fb4f 	bl	8002ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281e:	2000      	movs	r0, #0
 8002820:	f000 f808 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002824:	f7ff fd90 	bl	8002348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40022000 	.word	0x40022000

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_InitTick+0x54>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_InitTick+0x58>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	fbb3 f3f1 	udiv	r3, r3, r1
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fb67 	bl	8002f26 <HAL_SYSTICK_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00e      	b.n	8002880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d80a      	bhi.n	800287e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002870:	f000 fb2f 	bl	8002ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002874:	4a06      	ldr	r2, [pc, #24]	; (8002890 <HAL_InitTick+0x5c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000078 	.word	0x20000078
 800288c:	20000080 	.word	0x20000080
 8002890:	2000007c 	.word	0x2000007c

08002894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_IncTick+0x1c>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_IncTick+0x20>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <HAL_IncTick+0x20>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	20000080 	.word	0x20000080
 80028b4:	20000730 	.word	0x20000730

080028b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return uwTick;
 80028bc:	4b02      	ldr	r3, [pc, #8]	; (80028c8 <HAL_GetTick+0x10>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	20000730 	.word	0x20000730

080028cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff fff0 	bl	80028b8 <HAL_GetTick>
 80028d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028e4:	d005      	beq.n	80028f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_Delay+0x40>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f2:	bf00      	nop
 80028f4:	f7ff ffe0 	bl	80028b8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d8f7      	bhi.n	80028f4 <HAL_Delay+0x28>
  {
  }
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000080 	.word	0x20000080

08002910 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0be      	b.n	8002ab0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe f8b4 	bl	8000abc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f9ab 	bl	8002cb0 <ADC_ConversionStop_Disable>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 8099 	bne.w	8002a9e <HAL_ADC_Init+0x18e>
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 8095 	bne.w	8002a9e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800297c:	f023 0302 	bic.w	r3, r3, #2
 8002980:	f043 0202 	orr.w	r2, r3, #2
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002990:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7b1b      	ldrb	r3, [r3, #12]
 8002996:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002998:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	4313      	orrs	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a8:	d003      	beq.n	80029b2 <HAL_ADC_Init+0xa2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d102      	bne.n	80029b8 <HAL_ADC_Init+0xa8>
 80029b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b6:	e000      	b.n	80029ba <HAL_ADC_Init+0xaa>
 80029b8:	2300      	movs	r3, #0
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7d1b      	ldrb	r3, [r3, #20]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d119      	bne.n	80029fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7b1b      	ldrb	r3, [r3, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	035a      	lsls	r2, r3, #13
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	e00b      	b.n	80029fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	f043 0220 	orr.w	r2, r3, #32
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	f043 0201 	orr.w	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_ADC_Init+0x1a8>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2c:	d003      	beq.n	8002a36 <HAL_ADC_Init+0x126>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d104      	bne.n	8002a40 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	051b      	lsls	r3, r3, #20
 8002a3e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <HAL_ADC_Init+0x1ac>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d10b      	bne.n	8002a7c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a7a:	e018      	b.n	8002aae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	f023 0312 	bic.w	r3, r3, #18
 8002a84:	f043 0210 	orr.w	r2, r3, #16
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a9c:	e007      	b.n	8002aae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	f043 0210 	orr.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	ffe1f7fd 	.word	0xffe1f7fd
 8002abc:	ff1f0efe 	.word	0xff1f0efe

08002ac0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x20>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0dc      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x1da>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b06      	cmp	r3, #6
 8002aee:	d81c      	bhi.n	8002b2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	3b05      	subs	r3, #5
 8002b02:	221f      	movs	r2, #31
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	4019      	ands	r1, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b05      	subs	r3, #5
 8002b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	635a      	str	r2, [r3, #52]	; 0x34
 8002b28:	e03c      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d81c      	bhi.n	8002b6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	3b23      	subs	r3, #35	; 0x23
 8002b44:	221f      	movs	r2, #31
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	4019      	ands	r1, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b23      	subs	r3, #35	; 0x23
 8002b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
 8002b6a:	e01b      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b41      	subs	r3, #65	; 0x41
 8002b7e:	221f      	movs	r2, #31
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	4019      	ands	r1, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	3b41      	subs	r3, #65	; 0x41
 8002b98:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b09      	cmp	r3, #9
 8002baa:	d91c      	bls.n	8002be6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68d9      	ldr	r1, [r3, #12]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	3b1e      	subs	r3, #30
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4019      	ands	r1, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6898      	ldr	r0, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3b1e      	subs	r3, #30
 8002bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	e019      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6919      	ldr	r1, [r3, #16]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	4019      	ands	r1, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	6898      	ldr	r0, [r3, #8]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d003      	beq.n	8002c2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d132      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d125      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d126      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c50:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d11a      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a13      	ldr	r2, [pc, #76]	; (8002cac <HAL_ADC_ConfigChannel+0x1ec>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	0c9a      	lsrs	r2, r3, #18
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c70:	e002      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f9      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x1b2>
 8002c7e:	e007      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	40012400 	.word	0x40012400
 8002ca8:	20000078 	.word	0x20000078
 8002cac:	431bde83 	.word	0x431bde83

08002cb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d127      	bne.n	8002d1a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cda:	f7ff fded 	bl	80028b8 <HAL_GetTick>
 8002cde:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ce0:	e014      	b.n	8002d0c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ce2:	f7ff fde9 	bl	80028b8 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d90d      	bls.n	8002d0c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	f043 0210 	orr.w	r2, r3, #16
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	f043 0201 	orr.w	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e007      	b.n	8002d1c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d0e3      	beq.n	8002ce2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db0b      	blt.n	8002db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4906      	ldr	r1, [pc, #24]	; (8002dbc <__NVIC_EnableIRQ+0x34>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2001      	movs	r0, #1
 8002daa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	4313      	orrs	r3, r2
         );
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e88:	d301      	bcc.n	8002e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00f      	b.n	8002eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <SysTick_Config+0x40>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e96:	210f      	movs	r1, #15
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e9c:	f7ff ff90 	bl	8002dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <SysTick_Config+0x40>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea6:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <SysTick_Config+0x40>)
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000e010 	.word	0xe000e010

08002ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff2d 	bl	8002d24 <__NVIC_SetPriorityGrouping>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee4:	f7ff ff42 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	6978      	ldr	r0, [r7, #20]
 8002ef0:	f7ff ff90 	bl	8002e14 <NVIC_EncodePriority>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff5f 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	4603      	mov	r3, r0
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff35 	bl	8002d88 <__NVIC_EnableIRQ>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ffa2 	bl	8002e78 <SysTick_Config>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b08b      	sub	sp, #44	; 0x2c
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f52:	e127      	b.n	80031a4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f54:	2201      	movs	r2, #1
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	f040 8116 	bne.w	800319e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b12      	cmp	r3, #18
 8002f78:	d034      	beq.n	8002fe4 <HAL_GPIO_Init+0xa4>
 8002f7a:	2b12      	cmp	r3, #18
 8002f7c:	d80d      	bhi.n	8002f9a <HAL_GPIO_Init+0x5a>
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d02b      	beq.n	8002fda <HAL_GPIO_Init+0x9a>
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d804      	bhi.n	8002f90 <HAL_GPIO_Init+0x50>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d031      	beq.n	8002fee <HAL_GPIO_Init+0xae>
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d01c      	beq.n	8002fc8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f8e:	e048      	b.n	8003022 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d043      	beq.n	800301c <HAL_GPIO_Init+0xdc>
 8002f94:	2b11      	cmp	r3, #17
 8002f96:	d01b      	beq.n	8002fd0 <HAL_GPIO_Init+0x90>
          break;
 8002f98:	e043      	b.n	8003022 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f9a:	4a89      	ldr	r2, [pc, #548]	; (80031c0 <HAL_GPIO_Init+0x280>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d026      	beq.n	8002fee <HAL_GPIO_Init+0xae>
 8002fa0:	4a87      	ldr	r2, [pc, #540]	; (80031c0 <HAL_GPIO_Init+0x280>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d806      	bhi.n	8002fb4 <HAL_GPIO_Init+0x74>
 8002fa6:	4a87      	ldr	r2, [pc, #540]	; (80031c4 <HAL_GPIO_Init+0x284>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d020      	beq.n	8002fee <HAL_GPIO_Init+0xae>
 8002fac:	4a86      	ldr	r2, [pc, #536]	; (80031c8 <HAL_GPIO_Init+0x288>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <HAL_GPIO_Init+0xae>
          break;
 8002fb2:	e036      	b.n	8003022 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002fb4:	4a85      	ldr	r2, [pc, #532]	; (80031cc <HAL_GPIO_Init+0x28c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d019      	beq.n	8002fee <HAL_GPIO_Init+0xae>
 8002fba:	4a85      	ldr	r2, [pc, #532]	; (80031d0 <HAL_GPIO_Init+0x290>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d016      	beq.n	8002fee <HAL_GPIO_Init+0xae>
 8002fc0:	4a84      	ldr	r2, [pc, #528]	; (80031d4 <HAL_GPIO_Init+0x294>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_GPIO_Init+0xae>
          break;
 8002fc6:	e02c      	b.n	8003022 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	623b      	str	r3, [r7, #32]
          break;
 8002fce:	e028      	b.n	8003022 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	623b      	str	r3, [r7, #32]
          break;
 8002fd8:	e023      	b.n	8003022 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	3308      	adds	r3, #8
 8002fe0:	623b      	str	r3, [r7, #32]
          break;
 8002fe2:	e01e      	b.n	8003022 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	623b      	str	r3, [r7, #32]
          break;
 8002fec:	e019      	b.n	8003022 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	623b      	str	r3, [r7, #32]
          break;
 8002ffa:	e012      	b.n	8003022 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003004:	2308      	movs	r3, #8
 8003006:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	611a      	str	r2, [r3, #16]
          break;
 800300e:	e008      	b.n	8003022 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003010:	2308      	movs	r3, #8
 8003012:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	615a      	str	r2, [r3, #20]
          break;
 800301a:	e002      	b.n	8003022 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800301c:	2300      	movs	r3, #0
 800301e:	623b      	str	r3, [r7, #32]
          break;
 8003020:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2bff      	cmp	r3, #255	; 0xff
 8003026:	d801      	bhi.n	800302c <HAL_GPIO_Init+0xec>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	e001      	b.n	8003030 <HAL_GPIO_Init+0xf0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2bff      	cmp	r3, #255	; 0xff
 8003036:	d802      	bhi.n	800303e <HAL_GPIO_Init+0xfe>
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	e002      	b.n	8003044 <HAL_GPIO_Init+0x104>
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	3b08      	subs	r3, #8
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	210f      	movs	r1, #15
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	401a      	ands	r2, r3
 8003056:	6a39      	ldr	r1, [r7, #32]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	431a      	orrs	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8096 	beq.w	800319e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003072:	4b59      	ldr	r3, [pc, #356]	; (80031d8 <HAL_GPIO_Init+0x298>)
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	4a58      	ldr	r2, [pc, #352]	; (80031d8 <HAL_GPIO_Init+0x298>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6193      	str	r3, [r2, #24]
 800307e:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <HAL_GPIO_Init+0x298>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800308a:	4a54      	ldr	r2, [pc, #336]	; (80031dc <HAL_GPIO_Init+0x29c>)
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003096:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4013      	ands	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4b      	ldr	r2, [pc, #300]	; (80031e0 <HAL_GPIO_Init+0x2a0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <HAL_GPIO_Init+0x19e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4a      	ldr	r2, [pc, #296]	; (80031e4 <HAL_GPIO_Init+0x2a4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00d      	beq.n	80030da <HAL_GPIO_Init+0x19a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a49      	ldr	r2, [pc, #292]	; (80031e8 <HAL_GPIO_Init+0x2a8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <HAL_GPIO_Init+0x196>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a48      	ldr	r2, [pc, #288]	; (80031ec <HAL_GPIO_Init+0x2ac>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_GPIO_Init+0x192>
 80030ce:	2303      	movs	r3, #3
 80030d0:	e006      	b.n	80030e0 <HAL_GPIO_Init+0x1a0>
 80030d2:	2304      	movs	r3, #4
 80030d4:	e004      	b.n	80030e0 <HAL_GPIO_Init+0x1a0>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e002      	b.n	80030e0 <HAL_GPIO_Init+0x1a0>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_GPIO_Init+0x1a0>
 80030de:	2300      	movs	r3, #0
 80030e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e2:	f002 0203 	and.w	r2, r2, #3
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	4093      	lsls	r3, r2
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030f0:	493a      	ldr	r1, [pc, #232]	; (80031dc <HAL_GPIO_Init+0x29c>)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800310a:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4938      	ldr	r1, [pc, #224]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
 8003116:	e006      	b.n	8003126 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003118:	4b35      	ldr	r3, [pc, #212]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	43db      	mvns	r3, r3
 8003120:	4933      	ldr	r1, [pc, #204]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8003122:	4013      	ands	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003132:	4b2f      	ldr	r3, [pc, #188]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	492e      	ldr	r1, [pc, #184]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
 800313e:	e006      	b.n	800314e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	43db      	mvns	r3, r3
 8003148:	4929      	ldr	r1, [pc, #164]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 800314a:	4013      	ands	r3, r2
 800314c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d006      	beq.n	8003168 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800315a:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	4924      	ldr	r1, [pc, #144]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
 8003166:	e006      	b.n	8003176 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003168:	4b21      	ldr	r3, [pc, #132]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	43db      	mvns	r3, r3
 8003170:	491f      	ldr	r1, [pc, #124]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8003172:	4013      	ands	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003182:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	491a      	ldr	r1, [pc, #104]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	60cb      	str	r3, [r1, #12]
 800318e:	e006      	b.n	800319e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	43db      	mvns	r3, r3
 8003198:	4915      	ldr	r1, [pc, #84]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 800319a:	4013      	ands	r3, r2
 800319c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	3301      	adds	r3, #1
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f47f aed0 	bne.w	8002f54 <HAL_GPIO_Init+0x14>
  }
}
 80031b4:	bf00      	nop
 80031b6:	372c      	adds	r7, #44	; 0x2c
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	10210000 	.word	0x10210000
 80031c4:	10110000 	.word	0x10110000
 80031c8:	10120000 	.word	0x10120000
 80031cc:	10310000 	.word	0x10310000
 80031d0:	10320000 	.word	0x10320000
 80031d4:	10220000 	.word	0x10220000
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40010800 	.word	0x40010800
 80031e4:	40010c00 	.word	0x40010c00
 80031e8:	40011000 	.word	0x40011000
 80031ec:	40011400 	.word	0x40011400
 80031f0:	40010400 	.word	0x40010400

080031f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	887b      	ldrh	r3, [r7, #2]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	e001      	b.n	8003216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	807b      	strh	r3, [r7, #2]
 800322e:	4613      	mov	r3, r2
 8003230:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003232:	787b      	ldrb	r3, [r7, #1]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800323e:	e003      	b.n	8003248 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003240:	887b      	ldrh	r3, [r7, #2]
 8003242:	041a      	lsls	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	611a      	str	r2, [r3, #16]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
	...

08003254 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <HAL_PWR_EnableBkUpAccess+0x14>)
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	420e0020 	.word	0x420e0020

0800326c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e26c      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8087 	beq.w	800339a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800328c:	4b92      	ldr	r3, [pc, #584]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b04      	cmp	r3, #4
 8003296:	d00c      	beq.n	80032b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003298:	4b8f      	ldr	r3, [pc, #572]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d112      	bne.n	80032ca <HAL_RCC_OscConfig+0x5e>
 80032a4:	4b8c      	ldr	r3, [pc, #560]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b0:	d10b      	bne.n	80032ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b2:	4b89      	ldr	r3, [pc, #548]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d06c      	beq.n	8003398 <HAL_RCC_OscConfig+0x12c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d168      	bne.n	8003398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e246      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x76>
 80032d4:	4b80      	ldr	r3, [pc, #512]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a7f      	ldr	r2, [pc, #508]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	e02e      	b.n	8003340 <HAL_RCC_OscConfig+0xd4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x98>
 80032ea:	4b7b      	ldr	r3, [pc, #492]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7a      	ldr	r2, [pc, #488]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a77      	ldr	r2, [pc, #476]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e01d      	b.n	8003340 <HAL_RCC_OscConfig+0xd4>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0xbc>
 800330e:	4b72      	ldr	r3, [pc, #456]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a71      	ldr	r2, [pc, #452]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6e      	ldr	r2, [pc, #440]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0xd4>
 8003328:	4b6b      	ldr	r3, [pc, #428]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6a      	ldr	r2, [pc, #424]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800332e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b68      	ldr	r3, [pc, #416]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a67      	ldr	r2, [pc, #412]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800333a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7ff fab6 	bl	80028b8 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7ff fab2 	bl	80028b8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e1fa      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	4b5d      	ldr	r3, [pc, #372]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0xe4>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7ff faa2 	bl	80028b8 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7ff fa9e 	bl	80028b8 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1e6      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338a:	4b53      	ldr	r3, [pc, #332]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x10c>
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d063      	beq.n	800346e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a6:	4b4c      	ldr	r3, [pc, #304]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033b2:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d11c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x18c>
 80033be:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d116      	bne.n	80033f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_RCC_OscConfig+0x176>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d001      	beq.n	80033e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e1ba      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e2:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4939      	ldr	r1, [pc, #228]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	e03a      	b.n	800346e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003400:	4b36      	ldr	r3, [pc, #216]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7ff fa57 	bl	80028b8 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340e:	f7ff fa53 	bl	80028b8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e19b      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4927      	ldr	r1, [pc, #156]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
 8003440:	e015      	b.n	800346e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7ff fa36 	bl	80028b8 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003450:	f7ff fa32 	bl	80028b8 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e17a      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d03a      	beq.n	80034f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d019      	beq.n	80034b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003488:	f7ff fa16 	bl	80028b8 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003490:	f7ff fa12 	bl	80028b8 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e15a      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ae:	2001      	movs	r0, #1
 80034b0:	f000 fada 	bl	8003a68 <RCC_Delay>
 80034b4:	e01c      	b.n	80034f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034bc:	f7ff f9fc 	bl	80028b8 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c2:	e00f      	b.n	80034e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c4:	f7ff f9f8 	bl	80028b8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d908      	bls.n	80034e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e140      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	42420000 	.word	0x42420000
 80034e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e4:	4b9e      	ldr	r3, [pc, #632]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e9      	bne.n	80034c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80a6 	beq.w	800364a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003502:	4b97      	ldr	r3, [pc, #604]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	4b94      	ldr	r3, [pc, #592]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	4a93      	ldr	r2, [pc, #588]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	61d3      	str	r3, [r2, #28]
 800351a:	4b91      	ldr	r3, [pc, #580]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	4b8e      	ldr	r3, [pc, #568]	; (8003764 <HAL_RCC_OscConfig+0x4f8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d118      	bne.n	8003568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003536:	4b8b      	ldr	r3, [pc, #556]	; (8003764 <HAL_RCC_OscConfig+0x4f8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a8a      	ldr	r2, [pc, #552]	; (8003764 <HAL_RCC_OscConfig+0x4f8>)
 800353c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003542:	f7ff f9b9 	bl	80028b8 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354a:	f7ff f9b5 	bl	80028b8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b64      	cmp	r3, #100	; 0x64
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e0fd      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	4b81      	ldr	r3, [pc, #516]	; (8003764 <HAL_RCC_OscConfig+0x4f8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d106      	bne.n	800357e <HAL_RCC_OscConfig+0x312>
 8003570:	4b7b      	ldr	r3, [pc, #492]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a7a      	ldr	r2, [pc, #488]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6213      	str	r3, [r2, #32]
 800357c:	e02d      	b.n	80035da <HAL_RCC_OscConfig+0x36e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x334>
 8003586:	4b76      	ldr	r3, [pc, #472]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a75      	ldr	r2, [pc, #468]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	6213      	str	r3, [r2, #32]
 8003592:	4b73      	ldr	r3, [pc, #460]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	4a72      	ldr	r2, [pc, #456]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003598:	f023 0304 	bic.w	r3, r3, #4
 800359c:	6213      	str	r3, [r2, #32]
 800359e:	e01c      	b.n	80035da <HAL_RCC_OscConfig+0x36e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d10c      	bne.n	80035c2 <HAL_RCC_OscConfig+0x356>
 80035a8:	4b6d      	ldr	r3, [pc, #436]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4a6c      	ldr	r2, [pc, #432]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	f043 0304 	orr.w	r3, r3, #4
 80035b2:	6213      	str	r3, [r2, #32]
 80035b4:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4a69      	ldr	r2, [pc, #420]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6213      	str	r3, [r2, #32]
 80035c0:	e00b      	b.n	80035da <HAL_RCC_OscConfig+0x36e>
 80035c2:	4b67      	ldr	r3, [pc, #412]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4a66      	ldr	r2, [pc, #408]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	6213      	str	r3, [r2, #32]
 80035ce:	4b64      	ldr	r3, [pc, #400]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4a63      	ldr	r2, [pc, #396]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80035d4:	f023 0304 	bic.w	r3, r3, #4
 80035d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d015      	beq.n	800360e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e2:	f7ff f969 	bl	80028b8 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e8:	e00a      	b.n	8003600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7ff f965 	bl	80028b8 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0ab      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	4b57      	ldr	r3, [pc, #348]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0ee      	beq.n	80035ea <HAL_RCC_OscConfig+0x37e>
 800360c:	e014      	b.n	8003638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360e:	f7ff f953 	bl	80028b8 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003614:	e00a      	b.n	800362c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003616:	f7ff f94f 	bl	80028b8 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f241 3288 	movw	r2, #5000	; 0x1388
 8003624:	4293      	cmp	r3, r2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e095      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	4b4c      	ldr	r3, [pc, #304]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ee      	bne.n	8003616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d105      	bne.n	800364a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363e:	4b48      	ldr	r3, [pc, #288]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4a47      	ldr	r2, [pc, #284]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8081 	beq.w	8003756 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003654:	4b42      	ldr	r3, [pc, #264]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b08      	cmp	r3, #8
 800365e:	d061      	beq.n	8003724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d146      	bne.n	80036f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003668:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <HAL_RCC_OscConfig+0x4fc>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366e:	f7ff f923 	bl	80028b8 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003676:	f7ff f91f 	bl	80028b8 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e067      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003688:	4b35      	ldr	r3, [pc, #212]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f0      	bne.n	8003676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369c:	d108      	bne.n	80036b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800369e:	4b30      	ldr	r3, [pc, #192]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	492d      	ldr	r1, [pc, #180]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a19      	ldr	r1, [r3, #32]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	430b      	orrs	r3, r1
 80036c2:	4927      	ldr	r1, [pc, #156]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c8:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCC_OscConfig+0x4fc>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7ff f8f3 	bl	80028b8 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d6:	f7ff f8ef 	bl	80028b8 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e037      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x46a>
 80036f4:	e02f      	b.n	8003756 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <HAL_RCC_OscConfig+0x4fc>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7ff f8dc 	bl	80028b8 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003704:	f7ff f8d8 	bl	80028b8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e020      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x498>
 8003722:	e018      	b.n	8003756 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e013      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_OscConfig+0x4f4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	429a      	cmp	r2, r3
 8003742:	d106      	bne.n	8003752 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d001      	beq.n	8003756 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	40007000 	.word	0x40007000
 8003768:	42420060 	.word	0x42420060

0800376c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0d0      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003780:	4b6a      	ldr	r3, [pc, #424]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d910      	bls.n	80037b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b67      	ldr	r3, [pc, #412]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 0207 	bic.w	r2, r3, #7
 8003796:	4965      	ldr	r1, [pc, #404]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b63      	ldr	r3, [pc, #396]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0b8      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c8:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a58      	ldr	r2, [pc, #352]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e0:	4b53      	ldr	r3, [pc, #332]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a52      	ldr	r2, [pc, #328]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b50      	ldr	r3, [pc, #320]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	494d      	ldr	r1, [pc, #308]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d040      	beq.n	800388c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d115      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382a:	4b41      	ldr	r3, [pc, #260]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e073      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383a:	4b3d      	ldr	r3, [pc, #244]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06b      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384a:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f023 0203 	bic.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4936      	ldr	r1, [pc, #216]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800385c:	f7ff f82c 	bl	80028b8 <HAL_GetTick>
 8003860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	e00a      	b.n	800387a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003864:	f7ff f828 	bl	80028b8 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e053      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 020c 	and.w	r2, r3, #12
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	429a      	cmp	r2, r3
 800388a:	d1eb      	bne.n	8003864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800388c:	4b27      	ldr	r3, [pc, #156]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d210      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 0207 	bic.w	r2, r3, #7
 80038a2:	4922      	ldr	r1, [pc, #136]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b20      	ldr	r3, [pc, #128]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e032      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4916      	ldr	r1, [pc, #88]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	490e      	ldr	r1, [pc, #56]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038fa:	f000 f821 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80038fe:	4601      	mov	r1, r0
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	5cd3      	ldrb	r3, [r2, r3]
 800390e:	fa21 f303 	lsr.w	r3, r1, r3
 8003912:	4a09      	ldr	r2, [pc, #36]	; (8003938 <HAL_RCC_ClockConfig+0x1cc>)
 8003914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCC_ClockConfig+0x1d0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe ff8a 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40022000 	.word	0x40022000
 8003930:	40021000 	.word	0x40021000
 8003934:	080069b0 	.word	0x080069b0
 8003938:	20000078 	.word	0x20000078
 800393c:	2000007c 	.word	0x2000007c

08003940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	b490      	push	{r4, r7}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003946:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003948:	1d3c      	adds	r4, r7, #4
 800394a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800394c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003950:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b04      	cmp	r3, #4
 8003978:	d002      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x40>
 800397a:	2b08      	cmp	r3, #8
 800397c:	d003      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x46>
 800397e:	e02d      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003982:	623b      	str	r3, [r7, #32]
      break;
 8003984:	e02d      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	0c9b      	lsrs	r3, r3, #18
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003992:	4413      	add	r3, r2
 8003994:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003998:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039a4:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	0c5b      	lsrs	r3, r3, #17
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039b2:	4413      	add	r3, r2
 80039b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80039be:	fb02 f203 	mul.w	r2, r2, r3
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ca:	e004      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	623b      	str	r3, [r7, #32]
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80039de:	623b      	str	r3, [r7, #32]
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	6a3b      	ldr	r3, [r7, #32]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3728      	adds	r7, #40	; 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc90      	pop	{r4, r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	08006988 	.word	0x08006988
 80039f4:	08006998 	.word	0x08006998
 80039f8:	40021000 	.word	0x40021000
 80039fc:	007a1200 	.word	0x007a1200
 8003a00:	003d0900 	.word	0x003d0900

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000078 	.word	0x20000078

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a1c:	f7ff fff2 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a20:	4601      	mov	r1, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4a03      	ldr	r2, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	080069c0 	.word	0x080069c0

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a44:	f7ff ffde 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a48:	4601      	mov	r1, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	0adb      	lsrs	r3, r3, #11
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4a03      	ldr	r2, [pc, #12]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	080069c0 	.word	0x080069c0

08003a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <RCC_Delay+0x34>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <RCC_Delay+0x38>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0a5b      	lsrs	r3, r3, #9
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a84:	bf00      	nop
  }
  while (Delay --);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	60fa      	str	r2, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f9      	bne.n	8003a84 <RCC_Delay+0x1c>
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20000078 	.word	0x20000078
 8003aa0:	10624dd3 	.word	0x10624dd3

08003aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d07d      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac4:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	4a4b      	ldr	r2, [pc, #300]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	61d3      	str	r3, [r2, #28]
 8003adc:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	4b46      	ldr	r3, [pc, #280]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d118      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a42      	ldr	r2, [pc, #264]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b04:	f7fe fed8 	bl	80028b8 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0a:	e008      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7fe fed4 	bl	80028b8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e06d      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d02e      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d027      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b48:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b52:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b5e:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d014      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6e:	f7fe fea3 	bl	80028b8 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe fe9f 	bl	80028b8 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e036      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ee      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4917      	ldr	r1, [pc, #92]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	490b      	ldr	r1, [pc, #44]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	4904      	ldr	r1, [pc, #16]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	42420440 	.word	0x42420440

08003c10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b08d      	sub	sp, #52	; 0x34
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c18:	4b55      	ldr	r3, [pc, #340]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003c1a:	f107 040c 	add.w	r4, r7, #12
 8003c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c24:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	2300      	movs	r3, #0
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d07f      	beq.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d002      	beq.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d048      	beq.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c4c:	e08b      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003c4e:	4b4a      	ldr	r3, [pc, #296]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c54:	4b48      	ldr	r3, [pc, #288]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d07f      	beq.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	0c9b      	lsrs	r3, r3, #18
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c72:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d018      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	0c5b      	lsrs	r3, r3, #17
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c9e:	4a37      	ldr	r2, [pc, #220]	; (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	4a33      	ldr	r2, [pc, #204]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cba:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc6:	d102      	bne.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ccc:	e048      	b.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	4a2c      	ldr	r2, [pc, #176]	; (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cdc:	e040      	b.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003cde:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cee:	d108      	bne.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d00:	e01f      	b.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	d109      	bne.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003d0e:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003d1a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d20:	e00f      	b.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2c:	d11a      	bne.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d014      	beq.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003d3a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d40:	e010      	b.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003d42:	e00f      	b.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d44:	f7ff fe7c 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	0b9b      	lsrs	r3, r3, #14
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	3301      	adds	r3, #1
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d5e:	e002      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003d64:	bf00      	nop
    }
  }
  return (frequency);
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3734      	adds	r7, #52	; 0x34
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd90      	pop	{r4, r7, pc}
 8003d70:	0800699c 	.word	0x0800699c
 8003d74:	080069ac 	.word	0x080069ac
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	007a1200 	.word	0x007a1200
 8003d80:	003d0900 	.word	0x003d0900
 8003d84:	aaaaaaab 	.word	0xaaaaaaab

08003d88 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e084      	b.n	8003ea8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7c5b      	ldrb	r3, [r3, #17]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fe fa14 	bl	80021dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fbd0 	bl	8004560 <HAL_RTC_WaitForSynchro>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2204      	movs	r2, #4
 8003dca:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e06b      	b.n	8003ea8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fc89 	bl	80046e8 <RTC_EnterInitMode>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2204      	movs	r2, #4
 8003de0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e060      	b.n	8003ea8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0207 	bic.w	r2, r2, #7
 8003df4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <HAL_RTC_Init+0x128>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	4a2b      	ldr	r2, [pc, #172]	; (8003eb0 <HAL_RTC_Init+0x128>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003e0a:	4b29      	ldr	r3, [pc, #164]	; (8003eb0 <HAL_RTC_Init+0x128>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	4926      	ldr	r1, [pc, #152]	; (8003eb0 <HAL_RTC_Init+0x128>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e24:	d003      	beq.n	8003e2e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e00e      	b.n	8003e4c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f7ff feee 	bl	8003c10 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e34:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2204      	movs	r2, #4
 8003e40:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e030      	b.n	8003ea8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f023 010f 	bic.w	r1, r3, #15
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	0c1a      	lsrs	r2, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	b291      	uxth	r1, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	430b      	orrs	r3, r1
 8003e76:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fc5d 	bl	8004738 <RTC_ExitInitMode>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2204      	movs	r2, #4
 8003e88:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e00c      	b.n	8003ea8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
  }
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40006c00 	.word	0x40006c00

08003eb4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_RTC_SetTime+0x20>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e080      	b.n	8003fda <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	7c1b      	ldrb	r3, [r3, #16]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_RTC_SetTime+0x30>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e07a      	b.n	8003fda <HAL_RTC_SetTime+0x126>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2202      	movs	r2, #2
 8003eee:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d113      	bne.n	8003f1e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f00:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	1a5b      	subs	r3, r3, r1
 8003f10:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003f12:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003f18:	4413      	add	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e01e      	b.n	8003f5c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fc4d 	bl	80047c2 <RTC_Bcd2ToByte>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f30:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	785b      	ldrb	r3, [r3, #1]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fc42 	bl	80047c2 <RTC_Bcd2ToByte>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461a      	mov	r2, r3
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f4a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	789b      	ldrb	r3, [r3, #2]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fc36 	bl	80047c2 <RTC_Bcd2ToByte>
 8003f56:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f58:	4423      	add	r3, r4
 8003f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fb5b 	bl	800461a <RTC_WriteTimeCounter>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e02f      	b.n	8003fda <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0205 	bic.w	r2, r2, #5
 8003f88:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fb6c 	bl	8004668 <RTC_ReadAlarmCounter>
 8003f90:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f98:	d018      	beq.n	8003fcc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d214      	bcs.n	8003fcc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003fa8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003fac:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003fae:	6939      	ldr	r1, [r7, #16]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fb72 	bl	800469a <RTC_WriteAlarmCounter>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e006      	b.n	8003fda <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd90      	pop	{r4, r7, pc}
	...

08003fe4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_RTC_GetTime+0x28>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0b5      	b.n	800417c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e0ac      	b.n	800417c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fac9 	bl	80045ba <RTC_ReadTimeCounter>
 8004028:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	4a55      	ldr	r2, [pc, #340]	; (8004184 <HAL_RTC_GetTime+0x1a0>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	0adb      	lsrs	r3, r3, #11
 8004034:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4b52      	ldr	r3, [pc, #328]	; (8004184 <HAL_RTC_GetTime+0x1a0>)
 800403a:	fba3 1302 	umull	r1, r3, r3, r2
 800403e:	0adb      	lsrs	r3, r3, #11
 8004040:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	4a4f      	ldr	r2, [pc, #316]	; (8004188 <HAL_RTC_GetTime+0x1a4>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	b2da      	uxtb	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	4a4a      	ldr	r2, [pc, #296]	; (8004184 <HAL_RTC_GetTime+0x1a0>)
 800405c:	fba2 1203 	umull	r1, r2, r2, r3
 8004060:	0ad2      	lsrs	r2, r2, #11
 8004062:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004066:	fb01 f202 	mul.w	r2, r1, r2
 800406a:	1a9a      	subs	r2, r3, r2
 800406c:	4b46      	ldr	r3, [pc, #280]	; (8004188 <HAL_RTC_GetTime+0x1a4>)
 800406e:	fba3 1302 	umull	r1, r3, r3, r2
 8004072:	0959      	lsrs	r1, r3, #5
 8004074:	460b      	mov	r3, r1
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a5b      	subs	r3, r3, r1
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	1ad1      	subs	r1, r2, r3
 800407e:	b2ca      	uxtb	r2, r1
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b17      	cmp	r3, #23
 8004088:	d955      	bls.n	8004136 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4a3f      	ldr	r2, [pc, #252]	; (800418c <HAL_RTC_GetTime+0x1a8>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004096:	6939      	ldr	r1, [r7, #16]
 8004098:	4b3c      	ldr	r3, [pc, #240]	; (800418c <HAL_RTC_GetTime+0x1a8>)
 800409a:	fba3 2301 	umull	r2, r3, r3, r1
 800409e:	091a      	lsrs	r2, r3, #4
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	1aca      	subs	r2, r1, r3
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fad9 	bl	8004668 <RTC_ReadAlarmCounter>
 80040b6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040be:	d008      	beq.n	80040d2 <HAL_RTC_GetTime+0xee>
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d904      	bls.n	80040d2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	e002      	b.n	80040d8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80040d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040d6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	4a2d      	ldr	r2, [pc, #180]	; (8004190 <HAL_RTC_GetTime+0x1ac>)
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80040e6:	69b9      	ldr	r1, [r7, #24]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fa96 	bl	800461a <RTC_WriteTimeCounter>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e041      	b.n	800417c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040fe:	d00c      	beq.n	800411a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	4413      	add	r3, r2
 8004106:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004108:	69f9      	ldr	r1, [r7, #28]
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fac5 	bl	800469a <RTC_WriteAlarmCounter>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e030      	b.n	800417c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800411a:	69f9      	ldr	r1, [r7, #28]
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fabc 	bl	800469a <RTC_WriteAlarmCounter>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e027      	b.n	800417c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800412c:	6979      	ldr	r1, [r7, #20]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fb64 	bl	80047fc <RTC_DateUpdate>
 8004134:	e003      	b.n	800413e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01a      	beq.n	800417a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fb1d 	bl	8004788 <RTC_ByteToBcd2>
 800414e:	4603      	mov	r3, r0
 8004150:	461a      	mov	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	785b      	ldrb	r3, [r3, #1]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fb14 	bl	8004788 <RTC_ByteToBcd2>
 8004160:	4603      	mov	r3, r0
 8004162:	461a      	mov	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	789b      	ldrb	r3, [r3, #2]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fb0b 	bl	8004788 <RTC_ByteToBcd2>
 8004172:	4603      	mov	r3, r0
 8004174:	461a      	mov	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	91a2b3c5 	.word	0x91a2b3c5
 8004188:	88888889 	.word	0x88888889
 800418c:	aaaaaaab 	.word	0xaaaaaaab
 8004190:	00015180 	.word	0x00015180

08004194 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	2300      	movs	r3, #0
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_RTC_SetDate+0x24>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e097      	b.n	80042ec <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	7c1b      	ldrb	r3, [r3, #16]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_RTC_SetDate+0x34>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e091      	b.n	80042ec <HAL_RTC_SetDate+0x158>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2202      	movs	r2, #2
 80041d2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10c      	bne.n	80041f4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	78da      	ldrb	r2, [r3, #3]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	785a      	ldrb	r2, [r3, #1]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	789a      	ldrb	r2, [r3, #2]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	739a      	strb	r2, [r3, #14]
 80041f2:	e01a      	b.n	800422a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	78db      	ldrb	r3, [r3, #3]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fae2 	bl	80047c2 <RTC_Bcd2ToByte>
 80041fe:	4603      	mov	r3, r0
 8004200:	461a      	mov	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	785b      	ldrb	r3, [r3, #1]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fad9 	bl	80047c2 <RTC_Bcd2ToByte>
 8004210:	4603      	mov	r3, r0
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	789b      	ldrb	r3, [r3, #2]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fad0 	bl	80047c2 <RTC_Bcd2ToByte>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	7bdb      	ldrb	r3, [r3, #15]
 800422e:	4618      	mov	r0, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	7b59      	ldrb	r1, [r3, #13]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	7b9b      	ldrb	r3, [r3, #14]
 8004238:	461a      	mov	r2, r3
 800423a:	f000 fbbb 	bl	80049b4 <RTC_WeekDayNum>
 800423e:	4603      	mov	r3, r0
 8004240:	461a      	mov	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	7b1a      	ldrb	r2, [r3, #12]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f9b3 	bl	80045ba <RTC_ReadTimeCounter>
 8004254:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4a26      	ldr	r2, [pc, #152]	; (80042f4 <HAL_RTC_SetDate+0x160>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	0adb      	lsrs	r3, r3, #11
 8004260:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b18      	cmp	r3, #24
 8004266:	d93a      	bls.n	80042de <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4a23      	ldr	r2, [pc, #140]	; (80042f8 <HAL_RTC_SetDate+0x164>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	4a22      	ldr	r2, [pc, #136]	; (80042fc <HAL_RTC_SetDate+0x168>)
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800427e:	69f9      	ldr	r1, [r7, #28]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f9ca 	bl	800461a <RTC_WriteTimeCounter>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2204      	movs	r2, #4
 8004290:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e027      	b.n	80042ec <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f9e3 	bl	8004668 <RTC_ReadAlarmCounter>
 80042a2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042aa:	d018      	beq.n	80042de <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d214      	bcs.n	80042de <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80042ba:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80042be:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80042c0:	69b9      	ldr	r1, [r7, #24]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f9e9 	bl	800469a <RTC_WriteAlarmCounter>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2204      	movs	r2, #4
 80042d2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e006      	b.n	80042ec <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	91a2b3c5 	.word	0x91a2b3c5
 80042f8:	aaaaaaab 	.word	0xaaaaaaab
 80042fc:	00015180 	.word	0x00015180

08004300 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800430c:	f107 0314 	add.w	r3, r7, #20
 8004310:	2100      	movs	r1, #0
 8004312:	460a      	mov	r2, r1
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	460a      	mov	r2, r1
 8004318:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_RTC_GetDate+0x26>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e03a      	b.n	80043a0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800432a:	f107 0314 	add.w	r3, r7, #20
 800432e:	2200      	movs	r2, #0
 8004330:	4619      	mov	r1, r3
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff fe56 	bl	8003fe4 <HAL_RTC_GetTime>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e02e      	b.n	80043a0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	7b1a      	ldrb	r2, [r3, #12]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	7bda      	ldrb	r2, [r3, #15]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	7b5a      	ldrb	r2, [r3, #13]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	7b9a      	ldrb	r2, [r3, #14]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01a      	beq.n	800439e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	78db      	ldrb	r3, [r3, #3]
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fa0b 	bl	8004788 <RTC_ByteToBcd2>
 8004372:	4603      	mov	r3, r0
 8004374:	461a      	mov	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	785b      	ldrb	r3, [r3, #1]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fa02 	bl	8004788 <RTC_ByteToBcd2>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	789b      	ldrb	r3, [r3, #2]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f9f9 	bl	8004788 <RTC_ByteToBcd2>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80043a8:	b590      	push	{r4, r7, lr}
 80043aa:	b089      	sub	sp, #36	; 0x24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	2100      	movs	r1, #0
 80043be:	460a      	mov	r2, r1
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	460a      	mov	r2, r1
 80043c4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_RTC_SetAlarm_IT+0x2a>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e096      	b.n	8004504 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	7c1b      	ldrb	r3, [r3, #16]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_RTC_SetAlarm_IT+0x3a>
 80043de:	2302      	movs	r3, #2
 80043e0:	e090      	b.n	8004504 <HAL_RTC_SetAlarm_IT+0x15c>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2202      	movs	r2, #2
 80043ec:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80043ee:	f107 0314 	add.w	r3, r7, #20
 80043f2:	2200      	movs	r2, #0
 80043f4:	4619      	mov	r1, r3
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7ff fdf4 	bl	8003fe4 <HAL_RTC_GetTime>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e07e      	b.n	8004504 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004406:	7d3b      	ldrb	r3, [r7, #20]
 8004408:	461a      	mov	r2, r3
 800440a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800440e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004412:	7d7b      	ldrb	r3, [r7, #21]
 8004414:	4619      	mov	r1, r3
 8004416:	460b      	mov	r3, r1
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a5b      	subs	r3, r3, r1
 800441c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800441e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004420:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004422:	4413      	add	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d113      	bne.n	8004454 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004436:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	785b      	ldrb	r3, [r3, #1]
 800443e:	4619      	mov	r1, r3
 8004440:	460b      	mov	r3, r1
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	1a5b      	subs	r3, r3, r1
 8004446:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004448:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800444e:	4413      	add	r3, r2
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	e01e      	b.n	8004492 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f000 f9b2 	bl	80047c2 <RTC_Bcd2ToByte>
 800445e:	4603      	mov	r3, r0
 8004460:	461a      	mov	r2, r3
 8004462:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004466:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	4618      	mov	r0, r3
 8004470:	f000 f9a7 	bl	80047c2 <RTC_Bcd2ToByte>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004480:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	789b      	ldrb	r3, [r3, #2]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f99b 	bl	80047c2 <RTC_Bcd2ToByte>
 800448c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800448e:	4423      	add	r3, r4
 8004490:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	429a      	cmp	r2, r3
 8004498:	d205      	bcs.n	80044a6 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80044a0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80044a4:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80044a6:	69f9      	ldr	r1, [r7, #28]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f8f6 	bl	800469a <RTC_WriteAlarmCounter>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2204      	movs	r2, #4
 80044b8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e01f      	b.n	8004504 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0202 	mvn.w	r2, #2
 80044cc:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0202 	orr.w	r2, r2, #2
 80044dc:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_RTC_SetAlarm_IT+0x164>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <HAL_RTC_SetAlarm_IT+0x164>)
 80044e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e8:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <HAL_RTC_SetAlarm_IT+0x164>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	4a07      	ldr	r2, [pc, #28]	; (800450c <HAL_RTC_SetAlarm_IT+0x164>)
 80044f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f4:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004502:	2300      	movs	r3, #0
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3724      	adds	r7, #36	; 0x24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd90      	pop	{r4, r7, pc}
 800450c:	40010400 	.word	0x40010400

08004510 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00e      	beq.n	8004544 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fd fa21 	bl	800197c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f06f 0202 	mvn.w	r2, #2
 8004542:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RTC_AlarmIRQHandler+0x4c>)
 8004546:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800454a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	745a      	strb	r2, [r3, #17]
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40010400 	.word	0x40010400

08004560 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e01d      	b.n	80045b2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0208 	bic.w	r2, r2, #8
 8004584:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004586:	f7fe f997 	bl	80028b8 <HAL_GetTick>
 800458a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800458c:	e009      	b.n	80045a2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800458e:	f7fe f993 	bl	80028b8 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800459c:	d901      	bls.n	80045a2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e007      	b.n	80045b2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0ee      	beq.n	800458e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b087      	sub	sp, #28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	827b      	strh	r3, [r7, #18]
 80045c6:	2300      	movs	r3, #0
 80045c8:	823b      	strh	r3, [r7, #16]
 80045ca:	2300      	movs	r3, #0
 80045cc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80045ea:	8a7a      	ldrh	r2, [r7, #18]
 80045ec:	8a3b      	ldrh	r3, [r7, #16]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d008      	beq.n	8004604 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80045f2:	8a3b      	ldrh	r3, [r7, #16]
 80045f4:	041a      	lsls	r2, r3, #16
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	e004      	b.n	800460e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004604:	8a7b      	ldrh	r3, [r7, #18]
 8004606:	041a      	lsls	r2, r3, #16
 8004608:	89fb      	ldrh	r3, [r7, #14]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800460e:	697b      	ldr	r3, [r7, #20]
}
 8004610:	4618      	mov	r0, r3
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f85d 	bl	80046e8 <RTC_EnterInitMode>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	e011      	b.n	800465e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	0c12      	lsrs	r2, r2, #16
 8004642:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	b292      	uxth	r2, r2
 800464c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f872 	bl	8004738 <RTC_ExitInitMode>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	81fb      	strh	r3, [r7, #14]
 8004674:	2300      	movs	r3, #0
 8004676:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004688:	89fb      	ldrh	r3, [r7, #14]
 800468a:	041a      	lsls	r2, r3, #16
 800468c:	89bb      	ldrh	r3, [r7, #12]
 800468e:	4313      	orrs	r3, r2
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f81d 	bl	80046e8 <RTC_EnterInitMode>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
 80046b8:	e011      	b.n	80046de <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	0c12      	lsrs	r2, r2, #16
 80046c2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	b292      	uxth	r2, r2
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f832 	bl	8004738 <RTC_ExitInitMode>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80046f4:	f7fe f8e0 	bl	80028b8 <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80046fa:	e009      	b.n	8004710 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80046fc:	f7fe f8dc 	bl	80028b8 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800470a:	d901      	bls.n	8004710 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e00f      	b.n	8004730 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0ee      	beq.n	80046fc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0210 	orr.w	r2, r2, #16
 800472c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0210 	bic.w	r2, r2, #16
 8004752:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004754:	f7fe f8b0 	bl	80028b8 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800475a:	e009      	b.n	8004770 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800475c:	f7fe f8ac 	bl	80028b8 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800476a:	d901      	bls.n	8004770 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e007      	b.n	8004780 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0ee      	beq.n	800475c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004796:	e005      	b.n	80047a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3301      	adds	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	3b0a      	subs	r3, #10
 80047a2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	2b09      	cmp	r3, #9
 80047a8:	d8f6      	bhi.n	8004798 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	b2db      	uxtb	r3, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	4603      	mov	r3, r0
 80047ca:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	4413      	add	r3, r2
 80047f0:	b2db      	uxtb	r3, r3
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	7bdb      	ldrb	r3, [r3, #15]
 800481a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	7b5b      	ldrb	r3, [r3, #13]
 8004820:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	7b9b      	ldrb	r3, [r3, #14]
 8004826:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004828:	2300      	movs	r3, #0
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	e06f      	b.n	800490e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d011      	beq.n	8004858 <RTC_DateUpdate+0x5c>
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d00e      	beq.n	8004858 <RTC_DateUpdate+0x5c>
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b05      	cmp	r3, #5
 800483e:	d00b      	beq.n	8004858 <RTC_DateUpdate+0x5c>
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b07      	cmp	r3, #7
 8004844:	d008      	beq.n	8004858 <RTC_DateUpdate+0x5c>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d005      	beq.n	8004858 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2b0a      	cmp	r3, #10
 8004850:	d002      	beq.n	8004858 <RTC_DateUpdate+0x5c>
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b0c      	cmp	r3, #12
 8004856:	d117      	bne.n	8004888 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b1e      	cmp	r3, #30
 800485c:	d803      	bhi.n	8004866 <RTC_DateUpdate+0x6a>
      {
        day++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3301      	adds	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004864:	e050      	b.n	8004908 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b0c      	cmp	r3, #12
 800486a:	d005      	beq.n	8004878 <RTC_DateUpdate+0x7c>
        {
          month++;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	3301      	adds	r3, #1
 8004870:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004872:	2301      	movs	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004876:	e047      	b.n	8004908 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004878:	2301      	movs	r3, #1
 800487a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800487c:	2301      	movs	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
          year++;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	3301      	adds	r3, #1
 8004884:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004886:	e03f      	b.n	8004908 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b04      	cmp	r3, #4
 800488c:	d008      	beq.n	80048a0 <RTC_DateUpdate+0xa4>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b06      	cmp	r3, #6
 8004892:	d005      	beq.n	80048a0 <RTC_DateUpdate+0xa4>
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b09      	cmp	r3, #9
 8004898:	d002      	beq.n	80048a0 <RTC_DateUpdate+0xa4>
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b0b      	cmp	r3, #11
 800489e:	d10c      	bne.n	80048ba <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b1d      	cmp	r3, #29
 80048a4:	d803      	bhi.n	80048ae <RTC_DateUpdate+0xb2>
      {
        day++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80048ac:	e02c      	b.n	8004908 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3301      	adds	r3, #1
 80048b2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80048b4:	2301      	movs	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80048b8:	e026      	b.n	8004908 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d123      	bne.n	8004908 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b1b      	cmp	r3, #27
 80048c4:	d803      	bhi.n	80048ce <RTC_DateUpdate+0xd2>
      {
        day++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e01c      	b.n	8004908 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b1c      	cmp	r3, #28
 80048d2:	d111      	bne.n	80048f8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f839 	bl	8004950 <RTC_IsLeapYear>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <RTC_DateUpdate+0xf0>
        {
          day++;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e00d      	b.n	8004908 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	3301      	adds	r3, #1
 80048f0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80048f2:	2301      	movs	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e007      	b.n	8004908 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b1d      	cmp	r3, #29
 80048fc:	d104      	bne.n	8004908 <RTC_DateUpdate+0x10c>
      {
        month++;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	3301      	adds	r3, #1
 8004902:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004904:	2301      	movs	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	3301      	adds	r3, #1
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d38b      	bcc.n	800482e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	b2da      	uxtb	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	b2da      	uxtb	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	4619      	mov	r1, r3
 8004938:	6978      	ldr	r0, [r7, #20]
 800493a:	f000 f83b 	bl	80049b4 <RTC_WeekDayNum>
 800493e:	4603      	mov	r3, r0
 8004940:	461a      	mov	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	731a      	strb	r2, [r3, #12]
}
 8004946:	bf00      	nop
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	e01d      	b.n	80049a6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	4a10      	ldr	r2, [pc, #64]	; (80049b0 <RTC_IsLeapYear+0x60>)
 800496e:	fba2 1203 	umull	r1, r2, r2, r3
 8004972:	0952      	lsrs	r2, r2, #5
 8004974:	2164      	movs	r1, #100	; 0x64
 8004976:	fb01 f202 	mul.w	r2, r1, r2
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004982:	2301      	movs	r3, #1
 8004984:	e00f      	b.n	80049a6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	4a09      	ldr	r2, [pc, #36]	; (80049b0 <RTC_IsLeapYear+0x60>)
 800498a:	fba2 1203 	umull	r1, r2, r2, r3
 800498e:	09d2      	lsrs	r2, r2, #7
 8004990:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004994:	fb01 f202 	mul.w	r2, r1, r2
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80049a4:	2300      	movs	r3, #0
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr
 80049b0:	51eb851f 	.word	0x51eb851f

080049b4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
 80049c0:	4613      	mov	r3, r2
 80049c2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80049d2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d82d      	bhi.n	8004a36 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	4613      	mov	r3, r2
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	4413      	add	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	4a2c      	ldr	r2, [pc, #176]	; (8004a98 <RTC_WeekDayNum+0xe4>)
 80049e8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ec:	085a      	lsrs	r2, r3, #1
 80049ee:	78bb      	ldrb	r3, [r7, #2]
 80049f0:	441a      	add	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	441a      	add	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	441a      	add	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	4926      	ldr	r1, [pc, #152]	; (8004a9c <RTC_WeekDayNum+0xe8>)
 8004a04:	fba1 1303 	umull	r1, r3, r1, r3
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	4922      	ldr	r1, [pc, #136]	; (8004a9c <RTC_WeekDayNum+0xe8>)
 8004a12:	fba1 1303 	umull	r1, r3, r1, r3
 8004a16:	09db      	lsrs	r3, r3, #7
 8004a18:	4413      	add	r3, r2
 8004a1a:	1d1a      	adds	r2, r3, #4
 8004a1c:	4b20      	ldr	r3, [pc, #128]	; (8004aa0 <RTC_WeekDayNum+0xec>)
 8004a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a22:	1ad1      	subs	r1, r2, r3
 8004a24:	0849      	lsrs	r1, r1, #1
 8004a26:	440b      	add	r3, r1
 8004a28:	0899      	lsrs	r1, r3, #2
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a5b      	subs	r3, r3, r1
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e029      	b.n	8004a8a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <RTC_WeekDayNum+0xe4>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	085a      	lsrs	r2, r3, #1
 8004a4a:	78bb      	ldrb	r3, [r7, #2]
 8004a4c:	441a      	add	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	441a      	add	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	089b      	lsrs	r3, r3, #2
 8004a56:	441a      	add	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4910      	ldr	r1, [pc, #64]	; (8004a9c <RTC_WeekDayNum+0xe8>)
 8004a5c:	fba1 1303 	umull	r1, r3, r1, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	1ad2      	subs	r2, r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	490d      	ldr	r1, [pc, #52]	; (8004a9c <RTC_WeekDayNum+0xe8>)
 8004a68:	fba1 1303 	umull	r1, r3, r1, r3
 8004a6c:	09db      	lsrs	r3, r3, #7
 8004a6e:	4413      	add	r3, r2
 8004a70:	1c9a      	adds	r2, r3, #2
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <RTC_WeekDayNum+0xec>)
 8004a74:	fba3 1302 	umull	r1, r3, r3, r2
 8004a78:	1ad1      	subs	r1, r2, r3
 8004a7a:	0849      	lsrs	r1, r1, #1
 8004a7c:	440b      	add	r3, r1
 8004a7e:	0899      	lsrs	r1, r3, #2
 8004a80:	460b      	mov	r3, r1
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	1a5b      	subs	r3, r3, r1
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	b2db      	uxtb	r3, r3
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	38e38e39 	.word	0x38e38e39
 8004a9c:	51eb851f 	.word	0x51eb851f
 8004aa0:	24924925 	.word	0x24924925

08004aa4 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d024      	beq.n	8004b04 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01d      	beq.n	8004b04 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f821 	bl	8004b1e <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0204 	mvn.w	r2, #4
 8004ae4:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	745a      	strb	r2, [r3, #17]
 8004aec:	e005      	b.n	8004afa <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f80c 	bl	8004b0c <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f06f 0201 	mvn.w	r2, #1
 8004b02:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004b04:	bf00      	nop
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e053      	b.n	8004bea <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7fd fba7 	bl	80022b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	ea42 0103 	orr.w	r1, r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	0c1a      	lsrs	r2, r3, #16
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f002 0204 	and.w	r2, r2, #4
 8004bc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b088      	sub	sp, #32
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_SPI_Transmit+0x22>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e11e      	b.n	8004e52 <HAL_SPI_Transmit+0x260>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1c:	f7fd fe4c 	bl	80028b8 <HAL_GetTick>
 8004c20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d002      	beq.n	8004c38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
 8004c34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c36:	e103      	b.n	8004e40 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_SPI_Transmit+0x52>
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c48:	e0fa      	b.n	8004e40 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c90:	d107      	bne.n	8004ca2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d007      	beq.n	8004cc0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc8:	d14b      	bne.n	8004d62 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_SPI_Transmit+0xe6>
 8004cd2:	8afb      	ldrh	r3, [r7, #22]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d13e      	bne.n	8004d56 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	881a      	ldrh	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	1c9a      	adds	r2, r3, #2
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cfc:	e02b      	b.n	8004d56 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d112      	bne.n	8004d32 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	881a      	ldrh	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	1c9a      	adds	r2, r3, #2
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d30:	e011      	b.n	8004d56 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d32:	f7fd fdc1 	bl	80028b8 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d803      	bhi.n	8004d4a <HAL_SPI_Transmit+0x158>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d48:	d102      	bne.n	8004d50 <HAL_SPI_Transmit+0x15e>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d54:	e074      	b.n	8004e40 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1ce      	bne.n	8004cfe <HAL_SPI_Transmit+0x10c>
 8004d60:	e04c      	b.n	8004dfc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_Transmit+0x17e>
 8004d6a:	8afb      	ldrh	r3, [r7, #22]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d140      	bne.n	8004df2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	7812      	ldrb	r2, [r2, #0]
 8004d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d96:	e02c      	b.n	8004df2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d113      	bne.n	8004dce <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	7812      	ldrb	r2, [r2, #0]
 8004db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dcc:	e011      	b.n	8004df2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dce:	f7fd fd73 	bl	80028b8 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d803      	bhi.n	8004de6 <HAL_SPI_Transmit+0x1f4>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de4:	d102      	bne.n	8004dec <HAL_SPI_Transmit+0x1fa>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004df0:	e026      	b.n	8004e40 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1cd      	bne.n	8004d98 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	6839      	ldr	r1, [r7, #0]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fb91 	bl	8005528 <SPI_EndRxTxTransaction>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e000      	b.n	8004e40 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004e3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b088      	sub	sp, #32
 8004e5e:	af02      	add	r7, sp, #8
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e76:	d112      	bne.n	8004e9e <HAL_SPI_Receive+0x44>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10e      	bne.n	8004e9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2204      	movs	r2, #4
 8004e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e88:	88fa      	ldrh	r2, [r7, #6]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f8e9 	bl	800506c <HAL_SPI_TransmitReceive>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	e0e2      	b.n	8005064 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_SPI_Receive+0x52>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e0db      	b.n	8005064 <HAL_SPI_Receive+0x20a>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eb4:	f7fd fd00 	bl	80028b8 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d002      	beq.n	8004ecc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eca:	e0c2      	b.n	8005052 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_SPI_Receive+0x7e>
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004edc:	e0b9      	b.n	8005052 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	88fa      	ldrh	r2, [r7, #6]
 8004ef6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	88fa      	ldrh	r2, [r7, #6]
 8004efc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f24:	d107      	bne.n	8004f36 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d007      	beq.n	8004f54 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d162      	bne.n	8005022 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f5c:	e02e      	b.n	8004fbc <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d115      	bne.n	8004f98 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f103 020c 	add.w	r2, r3, #12
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f96:	e011      	b.n	8004fbc <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f98:	f7fd fc8e 	bl	80028b8 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d803      	bhi.n	8004fb0 <HAL_SPI_Receive+0x156>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fae:	d102      	bne.n	8004fb6 <HAL_SPI_Receive+0x15c>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fba:	e04a      	b.n	8005052 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1cb      	bne.n	8004f5e <HAL_SPI_Receive+0x104>
 8004fc6:	e031      	b.n	800502c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d113      	bne.n	8004ffe <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	b292      	uxth	r2, r2
 8004fe2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	1c9a      	adds	r2, r3, #2
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ffc:	e011      	b.n	8005022 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ffe:	f7fd fc5b 	bl	80028b8 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d803      	bhi.n	8005016 <HAL_SPI_Receive+0x1bc>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005014:	d102      	bne.n	800501c <HAL_SPI_Receive+0x1c2>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d102      	bne.n	8005022 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005020:	e017      	b.n	8005052 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1cd      	bne.n	8004fc8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	6839      	ldr	r1, [r7, #0]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fa27 	bl	8005484 <SPI_EndRxTransaction>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	75fb      	strb	r3, [r7, #23]
 800504e:	e000      	b.n	8005052 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005050:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005062:	7dfb      	ldrb	r3, [r7, #23]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	; 0x30
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800507a:	2301      	movs	r3, #1
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800508a:	2b01      	cmp	r3, #1
 800508c:	d101      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x26>
 800508e:	2302      	movs	r3, #2
 8005090:	e18a      	b.n	80053a8 <HAL_SPI_TransmitReceive+0x33c>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800509a:	f7fd fc0d 	bl	80028b8 <HAL_GetTick>
 800509e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050b0:	887b      	ldrh	r3, [r7, #2]
 80050b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d00f      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x70>
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050c2:	d107      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d103      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x68>
 80050cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d003      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050d4:	2302      	movs	r3, #2
 80050d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050da:	e15b      	b.n	8005394 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <HAL_SPI_TransmitReceive+0x82>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <HAL_SPI_TransmitReceive+0x82>
 80050e8:	887b      	ldrh	r3, [r7, #2]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050f4:	e14e      	b.n	8005394 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d003      	beq.n	800510a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2205      	movs	r2, #5
 8005106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	887a      	ldrh	r2, [r7, #2]
 800511a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	887a      	ldrh	r2, [r7, #2]
 800512c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	887a      	ldrh	r2, [r7, #2]
 8005132:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514a:	2b40      	cmp	r3, #64	; 0x40
 800514c:	d007      	beq.n	800515e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800515c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005166:	d178      	bne.n	800525a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_SPI_TransmitReceive+0x10a>
 8005170:	8b7b      	ldrh	r3, [r7, #26]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d166      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	881a      	ldrh	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800519a:	e053      	b.n	8005244 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d11b      	bne.n	80051e2 <HAL_SPI_TransmitReceive+0x176>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d016      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x176>
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d113      	bne.n	80051e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	881a      	ldrh	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	1c9a      	adds	r2, r3, #2
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d119      	bne.n	8005224 <HAL_SPI_TransmitReceive+0x1b8>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d014      	beq.n	8005224 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	b292      	uxth	r2, r2
 8005206:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	1c9a      	adds	r2, r3, #2
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005220:	2301      	movs	r3, #1
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005224:	f7fd fb48 	bl	80028b8 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005230:	429a      	cmp	r2, r3
 8005232:	d807      	bhi.n	8005244 <HAL_SPI_TransmitReceive+0x1d8>
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800523a:	d003      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005242:	e0a7      	b.n	8005394 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1a6      	bne.n	800519c <HAL_SPI_TransmitReceive+0x130>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1a1      	bne.n	800519c <HAL_SPI_TransmitReceive+0x130>
 8005258:	e07c      	b.n	8005354 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_SPI_TransmitReceive+0x1fc>
 8005262:	8b7b      	ldrh	r3, [r7, #26]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d16b      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	330c      	adds	r3, #12
 8005272:	7812      	ldrb	r2, [r2, #0]
 8005274:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800528e:	e057      	b.n	8005340 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b02      	cmp	r3, #2
 800529c:	d11c      	bne.n	80052d8 <HAL_SPI_TransmitReceive+0x26c>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d017      	beq.n	80052d8 <HAL_SPI_TransmitReceive+0x26c>
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d114      	bne.n	80052d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	7812      	ldrb	r2, [r2, #0]
 80052ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d119      	bne.n	800531a <HAL_SPI_TransmitReceive+0x2ae>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d014      	beq.n	800531a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005316:	2301      	movs	r3, #1
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800531a:	f7fd facd 	bl	80028b8 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005326:	429a      	cmp	r2, r3
 8005328:	d803      	bhi.n	8005332 <HAL_SPI_TransmitReceive+0x2c6>
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005330:	d102      	bne.n	8005338 <HAL_SPI_TransmitReceive+0x2cc>
 8005332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800533e:	e029      	b.n	8005394 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1a2      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x224>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d19d      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f8e5 	bl	8005528 <SPI_EndRxTxTransaction>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d006      	beq.n	8005372 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005370:	e010      	b.n	8005394 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10b      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	e000      	b.n	8005394 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005392:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3730      	adds	r7, #48	; 0x30
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053c0:	e04c      	b.n	800545c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053c8:	d048      	beq.n	800545c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80053ca:	f7fd fa75 	bl	80028b8 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d902      	bls.n	80053e0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d13d      	bne.n	800545c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f8:	d111      	bne.n	800541e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005402:	d004      	beq.n	800540e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540c:	d107      	bne.n	800541e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005426:	d10f      	bne.n	8005448 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005446:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e00f      	b.n	800547c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4013      	ands	r3, r2
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	429a      	cmp	r2, r3
 8005478:	d1a3      	bne.n	80053c2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005498:	d111      	bne.n	80054be <SPI_EndRxTransaction+0x3a>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a2:	d004      	beq.n	80054ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ac:	d107      	bne.n	80054be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054bc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c6:	d117      	bne.n	80054f8 <SPI_EndRxTransaction+0x74>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d0:	d112      	bne.n	80054f8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2200      	movs	r2, #0
 80054da:	2101      	movs	r1, #1
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff ff67 	bl	80053b0 <SPI_WaitFlagStateUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01a      	beq.n	800551e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e013      	b.n	8005520 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	2180      	movs	r1, #128	; 0x80
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff ff54 	bl	80053b0 <SPI_WaitFlagStateUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e000      	b.n	8005520 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2200      	movs	r2, #0
 800553c:	2180      	movs	r1, #128	; 0x80
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff ff36 	bl	80053b0 <SPI_WaitFlagStateUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e000      	b.n	800555c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e01d      	b.n	80055b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fd f85a 	bl	8002644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f000 fa32 	bl	8005a0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b085      	sub	sp, #20
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2202      	movs	r2, #2
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b06      	cmp	r3, #6
 80055da:	d007      	beq.n	80055ec <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr

08005600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b06      	cmp	r3, #6
 8005628:	d007      	beq.n	800563a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0201 	orr.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b02      	cmp	r3, #2
 800565a:	d122      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d11b      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f06f 0202 	mvn.w	r2, #2
 8005672:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f9a4 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 800568e:	e005      	b.n	800569c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f997 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f9a6 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d122      	bne.n	80056f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d11b      	bne.n	80056f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0204 	mvn.w	r2, #4
 80056c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f97a 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 80056e2:	e005      	b.n	80056f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f96d 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f97c 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b08      	cmp	r3, #8
 8005702:	d122      	bne.n	800574a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b08      	cmp	r3, #8
 8005710:	d11b      	bne.n	800574a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f06f 0208 	mvn.w	r2, #8
 800571a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2204      	movs	r2, #4
 8005720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f950 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 8005736:	e005      	b.n	8005744 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f943 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f952 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b10      	cmp	r3, #16
 8005756:	d122      	bne.n	800579e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b10      	cmp	r3, #16
 8005764:	d11b      	bne.n	800579e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f06f 0210 	mvn.w	r2, #16
 800576e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2208      	movs	r2, #8
 8005774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f926 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 800578a:	e005      	b.n	8005798 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f919 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f928 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d10e      	bne.n	80057ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d107      	bne.n	80057ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f06f 0201 	mvn.w	r2, #1
 80057c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7fc f8c5 	bl	8001954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d4:	2b80      	cmp	r3, #128	; 0x80
 80057d6:	d10e      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b80      	cmp	r3, #128	; 0x80
 80057e4:	d107      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fa50 	bl	8005c96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d10e      	bne.n	8005822 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d107      	bne.n	8005822 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800581a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f8ec 	bl	80059fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b20      	cmp	r3, #32
 800582e:	d10e      	bne.n	800584e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b20      	cmp	r3, #32
 800583c:	d107      	bne.n	800584e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f06f 0220 	mvn.w	r2, #32
 8005846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fa1b 	bl	8005c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_TIM_ConfigClockSource+0x18>
 800586a:	2302      	movs	r3, #2
 800586c:	e0a6      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x166>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800588c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005894:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b40      	cmp	r3, #64	; 0x40
 80058a4:	d067      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x120>
 80058a6:	2b40      	cmp	r3, #64	; 0x40
 80058a8:	d80b      	bhi.n	80058c2 <HAL_TIM_ConfigClockSource+0x6c>
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d073      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x140>
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d802      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x62>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d06f      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80058b6:	e078      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d06c      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x140>
 80058bc:	2b30      	cmp	r3, #48	; 0x30
 80058be:	d06a      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80058c0:	e073      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058c2:	2b70      	cmp	r3, #112	; 0x70
 80058c4:	d00d      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x8c>
 80058c6:	2b70      	cmp	r3, #112	; 0x70
 80058c8:	d804      	bhi.n	80058d4 <HAL_TIM_ConfigClockSource+0x7e>
 80058ca:	2b50      	cmp	r3, #80	; 0x50
 80058cc:	d033      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0xe0>
 80058ce:	2b60      	cmp	r3, #96	; 0x60
 80058d0:	d041      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80058d2:	e06a      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d8:	d066      	beq.n	80059a8 <HAL_TIM_ConfigClockSource+0x152>
 80058da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058de:	d017      	beq.n	8005910 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80058e0:	e063      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6899      	ldr	r1, [r3, #8]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f000 f964 	bl	8005bbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005904:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	609a      	str	r2, [r3, #8]
      break;
 800590e:	e04c      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	6899      	ldr	r1, [r3, #8]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f000 f94d 	bl	8005bbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005932:	609a      	str	r2, [r3, #8]
      break;
 8005934:	e039      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6859      	ldr	r1, [r3, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	461a      	mov	r2, r3
 8005944:	f000 f8c4 	bl	8005ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2150      	movs	r1, #80	; 0x50
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f91b 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005954:	e029      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6859      	ldr	r1, [r3, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	461a      	mov	r2, r3
 8005964:	f000 f8e2 	bl	8005b2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2160      	movs	r1, #96	; 0x60
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f90b 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005974:	e019      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6859      	ldr	r1, [r3, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	461a      	mov	r2, r3
 8005984:	f000 f8a4 	bl	8005ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2140      	movs	r1, #64	; 0x40
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f8fb 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005994:	e009      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4619      	mov	r1, r3
 80059a0:	4610      	mov	r0, r2
 80059a2:	f000 f8f2 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 80059a6:	e000      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x154>
      break;
 80059a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr

080059d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a29      	ldr	r2, [pc, #164]	; (8005ac4 <TIM_Base_SetConfig+0xb8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00b      	beq.n	8005a3c <TIM_Base_SetConfig+0x30>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2a:	d007      	beq.n	8005a3c <TIM_Base_SetConfig+0x30>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a26      	ldr	r2, [pc, #152]	; (8005ac8 <TIM_Base_SetConfig+0xbc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_Base_SetConfig+0x30>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a25      	ldr	r2, [pc, #148]	; (8005acc <TIM_Base_SetConfig+0xc0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d108      	bne.n	8005a4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1c      	ldr	r2, [pc, #112]	; (8005ac4 <TIM_Base_SetConfig+0xb8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00b      	beq.n	8005a6e <TIM_Base_SetConfig+0x62>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5c:	d007      	beq.n	8005a6e <TIM_Base_SetConfig+0x62>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a19      	ldr	r2, [pc, #100]	; (8005ac8 <TIM_Base_SetConfig+0xbc>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_Base_SetConfig+0x62>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a18      	ldr	r2, [pc, #96]	; (8005acc <TIM_Base_SetConfig+0xc0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d108      	bne.n	8005a80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a07      	ldr	r2, [pc, #28]	; (8005ac4 <TIM_Base_SetConfig+0xb8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d103      	bne.n	8005ab4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	615a      	str	r2, [r3, #20]
}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr
 8005ac4:	40012c00 	.word	0x40012c00
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800

08005ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f023 0201 	bic.w	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f023 030a 	bic.w	r3, r3, #10
 8005b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr

08005b2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f023 0210 	bic.w	r2, r3, #16
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	031b      	lsls	r3, r3, #12
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f043 0307 	orr.w	r3, r3, #7
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	609a      	str	r2, [r3, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b087      	sub	sp, #28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	021a      	lsls	r2, r3, #8
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	431a      	orrs	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	609a      	str	r2, [r3, #8]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e032      	b.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr

08005c96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e03f      	b.n	8005d3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fc fd1a 	bl	8002708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2224      	movs	r2, #36	; 0x24
 8005cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f829 	bl	8005d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d7e:	f023 030c 	bic.w	r3, r3, #12
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6812      	ldr	r2, [r2, #0]
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a52      	ldr	r2, [pc, #328]	; (8005ef0 <UART_SetConfig+0x1ac>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d14e      	bne.n	8005e4a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005dac:	f7fd fe48 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8005db0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	009a      	lsls	r2, r3, #2
 8005dbc:	441a      	add	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc8:	4a4a      	ldr	r2, [pc, #296]	; (8005ef4 <UART_SetConfig+0x1b0>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	0119      	lsls	r1, r3, #4
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009a      	lsls	r2, r3, #2
 8005ddc:	441a      	add	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005de8:	4b42      	ldr	r3, [pc, #264]	; (8005ef4 <UART_SetConfig+0x1b0>)
 8005dea:	fba3 0302 	umull	r0, r3, r3, r2
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	2064      	movs	r0, #100	; 0x64
 8005df2:	fb00 f303 	mul.w	r3, r0, r3
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	3332      	adds	r3, #50	; 0x32
 8005dfc:	4a3d      	ldr	r2, [pc, #244]	; (8005ef4 <UART_SetConfig+0x1b0>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e08:	4419      	add	r1, r3
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009a      	lsls	r2, r3, #2
 8005e14:	441a      	add	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e20:	4b34      	ldr	r3, [pc, #208]	; (8005ef4 <UART_SetConfig+0x1b0>)
 8005e22:	fba3 0302 	umull	r0, r3, r3, r2
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	2064      	movs	r0, #100	; 0x64
 8005e2a:	fb00 f303 	mul.w	r3, r0, r3
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	3332      	adds	r3, #50	; 0x32
 8005e34:	4a2f      	ldr	r2, [pc, #188]	; (8005ef4 <UART_SetConfig+0x1b0>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	f003 020f 	and.w	r2, r3, #15
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	440a      	add	r2, r1
 8005e46:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005e48:	e04d      	b.n	8005ee6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e4a:	f7fd fde5 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8005e4e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	009a      	lsls	r2, r3, #2
 8005e5a:	441a      	add	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	4a23      	ldr	r2, [pc, #140]	; (8005ef4 <UART_SetConfig+0x1b0>)
 8005e68:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	0119      	lsls	r1, r3, #4
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	009a      	lsls	r2, r3, #2
 8005e7a:	441a      	add	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e86:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <UART_SetConfig+0x1b0>)
 8005e88:	fba3 0302 	umull	r0, r3, r3, r2
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	2064      	movs	r0, #100	; 0x64
 8005e90:	fb00 f303 	mul.w	r3, r0, r3
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	3332      	adds	r3, #50	; 0x32
 8005e9a:	4a16      	ldr	r2, [pc, #88]	; (8005ef4 <UART_SetConfig+0x1b0>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea6:	4419      	add	r1, r3
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	009a      	lsls	r2, r3, #2
 8005eb2:	441a      	add	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <UART_SetConfig+0x1b0>)
 8005ec0:	fba3 0302 	umull	r0, r3, r3, r2
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	2064      	movs	r0, #100	; 0x64
 8005ec8:	fb00 f303 	mul.w	r3, r0, r3
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	3332      	adds	r3, #50	; 0x32
 8005ed2:	4a08      	ldr	r2, [pc, #32]	; (8005ef4 <UART_SetConfig+0x1b0>)
 8005ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed8:	095b      	lsrs	r3, r3, #5
 8005eda:	f003 020f 	and.w	r2, r3, #15
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	609a      	str	r2, [r3, #8]
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40013800 	.word	0x40013800
 8005ef4:	51eb851f 	.word	0x51eb851f

08005ef8 <__errno>:
 8005ef8:	4b01      	ldr	r3, [pc, #4]	; (8005f00 <__errno+0x8>)
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000084 	.word	0x20000084

08005f04 <__libc_init_array>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	2500      	movs	r5, #0
 8005f08:	4e0c      	ldr	r6, [pc, #48]	; (8005f3c <__libc_init_array+0x38>)
 8005f0a:	4c0d      	ldr	r4, [pc, #52]	; (8005f40 <__libc_init_array+0x3c>)
 8005f0c:	1ba4      	subs	r4, r4, r6
 8005f0e:	10a4      	asrs	r4, r4, #2
 8005f10:	42a5      	cmp	r5, r4
 8005f12:	d109      	bne.n	8005f28 <__libc_init_array+0x24>
 8005f14:	f000 fc34 	bl	8006780 <_init>
 8005f18:	2500      	movs	r5, #0
 8005f1a:	4e0a      	ldr	r6, [pc, #40]	; (8005f44 <__libc_init_array+0x40>)
 8005f1c:	4c0a      	ldr	r4, [pc, #40]	; (8005f48 <__libc_init_array+0x44>)
 8005f1e:	1ba4      	subs	r4, r4, r6
 8005f20:	10a4      	asrs	r4, r4, #2
 8005f22:	42a5      	cmp	r5, r4
 8005f24:	d105      	bne.n	8005f32 <__libc_init_array+0x2e>
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f2c:	4798      	blx	r3
 8005f2e:	3501      	adds	r5, #1
 8005f30:	e7ee      	b.n	8005f10 <__libc_init_array+0xc>
 8005f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f36:	4798      	blx	r3
 8005f38:	3501      	adds	r5, #1
 8005f3a:	e7f2      	b.n	8005f22 <__libc_init_array+0x1e>
 8005f3c:	080069fc 	.word	0x080069fc
 8005f40:	080069fc 	.word	0x080069fc
 8005f44:	080069fc 	.word	0x080069fc
 8005f48:	08006a00 	.word	0x08006a00

08005f4c <memset>:
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	4402      	add	r2, r0
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d100      	bne.n	8005f56 <memset+0xa>
 8005f54:	4770      	bx	lr
 8005f56:	f803 1b01 	strb.w	r1, [r3], #1
 8005f5a:	e7f9      	b.n	8005f50 <memset+0x4>

08005f5c <siprintf>:
 8005f5c:	b40e      	push	{r1, r2, r3}
 8005f5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f62:	b500      	push	{lr}
 8005f64:	b09c      	sub	sp, #112	; 0x70
 8005f66:	ab1d      	add	r3, sp, #116	; 0x74
 8005f68:	9002      	str	r0, [sp, #8]
 8005f6a:	9006      	str	r0, [sp, #24]
 8005f6c:	9107      	str	r1, [sp, #28]
 8005f6e:	9104      	str	r1, [sp, #16]
 8005f70:	4808      	ldr	r0, [pc, #32]	; (8005f94 <siprintf+0x38>)
 8005f72:	4909      	ldr	r1, [pc, #36]	; (8005f98 <siprintf+0x3c>)
 8005f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f78:	9105      	str	r1, [sp, #20]
 8005f7a:	6800      	ldr	r0, [r0, #0]
 8005f7c:	a902      	add	r1, sp, #8
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	f000 f866 	bl	8006050 <_svfiprintf_r>
 8005f84:	2200      	movs	r2, #0
 8005f86:	9b02      	ldr	r3, [sp, #8]
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	b01c      	add	sp, #112	; 0x70
 8005f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f90:	b003      	add	sp, #12
 8005f92:	4770      	bx	lr
 8005f94:	20000084 	.word	0x20000084
 8005f98:	ffff0208 	.word	0xffff0208

08005f9c <__ssputs_r>:
 8005f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa0:	688e      	ldr	r6, [r1, #8]
 8005fa2:	4682      	mov	sl, r0
 8005fa4:	429e      	cmp	r6, r3
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	4690      	mov	r8, r2
 8005faa:	4699      	mov	r9, r3
 8005fac:	d837      	bhi.n	800601e <__ssputs_r+0x82>
 8005fae:	898a      	ldrh	r2, [r1, #12]
 8005fb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fb4:	d031      	beq.n	800601a <__ssputs_r+0x7e>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	6825      	ldr	r5, [r4, #0]
 8005fba:	6909      	ldr	r1, [r1, #16]
 8005fbc:	1a6f      	subs	r7, r5, r1
 8005fbe:	6965      	ldr	r5, [r4, #20]
 8005fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fc4:	fb95 f5f3 	sdiv	r5, r5, r3
 8005fc8:	f109 0301 	add.w	r3, r9, #1
 8005fcc:	443b      	add	r3, r7
 8005fce:	429d      	cmp	r5, r3
 8005fd0:	bf38      	it	cc
 8005fd2:	461d      	movcc	r5, r3
 8005fd4:	0553      	lsls	r3, r2, #21
 8005fd6:	d530      	bpl.n	800603a <__ssputs_r+0x9e>
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f000 fb37 	bl	800664c <_malloc_r>
 8005fde:	4606      	mov	r6, r0
 8005fe0:	b950      	cbnz	r0, 8005ff8 <__ssputs_r+0x5c>
 8005fe2:	230c      	movs	r3, #12
 8005fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fe8:	f8ca 3000 	str.w	r3, [sl]
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff8:	463a      	mov	r2, r7
 8005ffa:	6921      	ldr	r1, [r4, #16]
 8005ffc:	f000 fab6 	bl	800656c <memcpy>
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600a:	81a3      	strh	r3, [r4, #12]
 800600c:	6126      	str	r6, [r4, #16]
 800600e:	443e      	add	r6, r7
 8006010:	6026      	str	r6, [r4, #0]
 8006012:	464e      	mov	r6, r9
 8006014:	6165      	str	r5, [r4, #20]
 8006016:	1bed      	subs	r5, r5, r7
 8006018:	60a5      	str	r5, [r4, #8]
 800601a:	454e      	cmp	r6, r9
 800601c:	d900      	bls.n	8006020 <__ssputs_r+0x84>
 800601e:	464e      	mov	r6, r9
 8006020:	4632      	mov	r2, r6
 8006022:	4641      	mov	r1, r8
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	f000 faac 	bl	8006582 <memmove>
 800602a:	68a3      	ldr	r3, [r4, #8]
 800602c:	2000      	movs	r0, #0
 800602e:	1b9b      	subs	r3, r3, r6
 8006030:	60a3      	str	r3, [r4, #8]
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	441e      	add	r6, r3
 8006036:	6026      	str	r6, [r4, #0]
 8006038:	e7dc      	b.n	8005ff4 <__ssputs_r+0x58>
 800603a:	462a      	mov	r2, r5
 800603c:	f000 fb60 	bl	8006700 <_realloc_r>
 8006040:	4606      	mov	r6, r0
 8006042:	2800      	cmp	r0, #0
 8006044:	d1e2      	bne.n	800600c <__ssputs_r+0x70>
 8006046:	6921      	ldr	r1, [r4, #16]
 8006048:	4650      	mov	r0, sl
 800604a:	f000 fab3 	bl	80065b4 <_free_r>
 800604e:	e7c8      	b.n	8005fe2 <__ssputs_r+0x46>

08006050 <_svfiprintf_r>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	461d      	mov	r5, r3
 8006056:	898b      	ldrh	r3, [r1, #12]
 8006058:	b09d      	sub	sp, #116	; 0x74
 800605a:	061f      	lsls	r7, r3, #24
 800605c:	4680      	mov	r8, r0
 800605e:	460c      	mov	r4, r1
 8006060:	4616      	mov	r6, r2
 8006062:	d50f      	bpl.n	8006084 <_svfiprintf_r+0x34>
 8006064:	690b      	ldr	r3, [r1, #16]
 8006066:	b96b      	cbnz	r3, 8006084 <_svfiprintf_r+0x34>
 8006068:	2140      	movs	r1, #64	; 0x40
 800606a:	f000 faef 	bl	800664c <_malloc_r>
 800606e:	6020      	str	r0, [r4, #0]
 8006070:	6120      	str	r0, [r4, #16]
 8006072:	b928      	cbnz	r0, 8006080 <_svfiprintf_r+0x30>
 8006074:	230c      	movs	r3, #12
 8006076:	f8c8 3000 	str.w	r3, [r8]
 800607a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800607e:	e0c8      	b.n	8006212 <_svfiprintf_r+0x1c2>
 8006080:	2340      	movs	r3, #64	; 0x40
 8006082:	6163      	str	r3, [r4, #20]
 8006084:	2300      	movs	r3, #0
 8006086:	9309      	str	r3, [sp, #36]	; 0x24
 8006088:	2320      	movs	r3, #32
 800608a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800608e:	2330      	movs	r3, #48	; 0x30
 8006090:	f04f 0b01 	mov.w	fp, #1
 8006094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006098:	9503      	str	r5, [sp, #12]
 800609a:	4637      	mov	r7, r6
 800609c:	463d      	mov	r5, r7
 800609e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060a2:	b10b      	cbz	r3, 80060a8 <_svfiprintf_r+0x58>
 80060a4:	2b25      	cmp	r3, #37	; 0x25
 80060a6:	d13e      	bne.n	8006126 <_svfiprintf_r+0xd6>
 80060a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80060ac:	d00b      	beq.n	80060c6 <_svfiprintf_r+0x76>
 80060ae:	4653      	mov	r3, sl
 80060b0:	4632      	mov	r2, r6
 80060b2:	4621      	mov	r1, r4
 80060b4:	4640      	mov	r0, r8
 80060b6:	f7ff ff71 	bl	8005f9c <__ssputs_r>
 80060ba:	3001      	adds	r0, #1
 80060bc:	f000 80a4 	beq.w	8006208 <_svfiprintf_r+0x1b8>
 80060c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c2:	4453      	add	r3, sl
 80060c4:	9309      	str	r3, [sp, #36]	; 0x24
 80060c6:	783b      	ldrb	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 809d 	beq.w	8006208 <_svfiprintf_r+0x1b8>
 80060ce:	2300      	movs	r3, #0
 80060d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060d8:	9304      	str	r3, [sp, #16]
 80060da:	9307      	str	r3, [sp, #28]
 80060dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060e0:	931a      	str	r3, [sp, #104]	; 0x68
 80060e2:	462f      	mov	r7, r5
 80060e4:	2205      	movs	r2, #5
 80060e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80060ea:	4850      	ldr	r0, [pc, #320]	; (800622c <_svfiprintf_r+0x1dc>)
 80060ec:	f000 fa30 	bl	8006550 <memchr>
 80060f0:	9b04      	ldr	r3, [sp, #16]
 80060f2:	b9d0      	cbnz	r0, 800612a <_svfiprintf_r+0xda>
 80060f4:	06d9      	lsls	r1, r3, #27
 80060f6:	bf44      	itt	mi
 80060f8:	2220      	movmi	r2, #32
 80060fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060fe:	071a      	lsls	r2, r3, #28
 8006100:	bf44      	itt	mi
 8006102:	222b      	movmi	r2, #43	; 0x2b
 8006104:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006108:	782a      	ldrb	r2, [r5, #0]
 800610a:	2a2a      	cmp	r2, #42	; 0x2a
 800610c:	d015      	beq.n	800613a <_svfiprintf_r+0xea>
 800610e:	462f      	mov	r7, r5
 8006110:	2000      	movs	r0, #0
 8006112:	250a      	movs	r5, #10
 8006114:	9a07      	ldr	r2, [sp, #28]
 8006116:	4639      	mov	r1, r7
 8006118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800611c:	3b30      	subs	r3, #48	; 0x30
 800611e:	2b09      	cmp	r3, #9
 8006120:	d94d      	bls.n	80061be <_svfiprintf_r+0x16e>
 8006122:	b1b8      	cbz	r0, 8006154 <_svfiprintf_r+0x104>
 8006124:	e00f      	b.n	8006146 <_svfiprintf_r+0xf6>
 8006126:	462f      	mov	r7, r5
 8006128:	e7b8      	b.n	800609c <_svfiprintf_r+0x4c>
 800612a:	4a40      	ldr	r2, [pc, #256]	; (800622c <_svfiprintf_r+0x1dc>)
 800612c:	463d      	mov	r5, r7
 800612e:	1a80      	subs	r0, r0, r2
 8006130:	fa0b f000 	lsl.w	r0, fp, r0
 8006134:	4318      	orrs	r0, r3
 8006136:	9004      	str	r0, [sp, #16]
 8006138:	e7d3      	b.n	80060e2 <_svfiprintf_r+0x92>
 800613a:	9a03      	ldr	r2, [sp, #12]
 800613c:	1d11      	adds	r1, r2, #4
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	9103      	str	r1, [sp, #12]
 8006142:	2a00      	cmp	r2, #0
 8006144:	db01      	blt.n	800614a <_svfiprintf_r+0xfa>
 8006146:	9207      	str	r2, [sp, #28]
 8006148:	e004      	b.n	8006154 <_svfiprintf_r+0x104>
 800614a:	4252      	negs	r2, r2
 800614c:	f043 0302 	orr.w	r3, r3, #2
 8006150:	9207      	str	r2, [sp, #28]
 8006152:	9304      	str	r3, [sp, #16]
 8006154:	783b      	ldrb	r3, [r7, #0]
 8006156:	2b2e      	cmp	r3, #46	; 0x2e
 8006158:	d10c      	bne.n	8006174 <_svfiprintf_r+0x124>
 800615a:	787b      	ldrb	r3, [r7, #1]
 800615c:	2b2a      	cmp	r3, #42	; 0x2a
 800615e:	d133      	bne.n	80061c8 <_svfiprintf_r+0x178>
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	3702      	adds	r7, #2
 8006164:	1d1a      	adds	r2, r3, #4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	9203      	str	r2, [sp, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	bfb8      	it	lt
 800616e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006172:	9305      	str	r3, [sp, #20]
 8006174:	4d2e      	ldr	r5, [pc, #184]	; (8006230 <_svfiprintf_r+0x1e0>)
 8006176:	2203      	movs	r2, #3
 8006178:	7839      	ldrb	r1, [r7, #0]
 800617a:	4628      	mov	r0, r5
 800617c:	f000 f9e8 	bl	8006550 <memchr>
 8006180:	b138      	cbz	r0, 8006192 <_svfiprintf_r+0x142>
 8006182:	2340      	movs	r3, #64	; 0x40
 8006184:	1b40      	subs	r0, r0, r5
 8006186:	fa03 f000 	lsl.w	r0, r3, r0
 800618a:	9b04      	ldr	r3, [sp, #16]
 800618c:	3701      	adds	r7, #1
 800618e:	4303      	orrs	r3, r0
 8006190:	9304      	str	r3, [sp, #16]
 8006192:	7839      	ldrb	r1, [r7, #0]
 8006194:	2206      	movs	r2, #6
 8006196:	4827      	ldr	r0, [pc, #156]	; (8006234 <_svfiprintf_r+0x1e4>)
 8006198:	1c7e      	adds	r6, r7, #1
 800619a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800619e:	f000 f9d7 	bl	8006550 <memchr>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d038      	beq.n	8006218 <_svfiprintf_r+0x1c8>
 80061a6:	4b24      	ldr	r3, [pc, #144]	; (8006238 <_svfiprintf_r+0x1e8>)
 80061a8:	bb13      	cbnz	r3, 80061f0 <_svfiprintf_r+0x1a0>
 80061aa:	9b03      	ldr	r3, [sp, #12]
 80061ac:	3307      	adds	r3, #7
 80061ae:	f023 0307 	bic.w	r3, r3, #7
 80061b2:	3308      	adds	r3, #8
 80061b4:	9303      	str	r3, [sp, #12]
 80061b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b8:	444b      	add	r3, r9
 80061ba:	9309      	str	r3, [sp, #36]	; 0x24
 80061bc:	e76d      	b.n	800609a <_svfiprintf_r+0x4a>
 80061be:	fb05 3202 	mla	r2, r5, r2, r3
 80061c2:	2001      	movs	r0, #1
 80061c4:	460f      	mov	r7, r1
 80061c6:	e7a6      	b.n	8006116 <_svfiprintf_r+0xc6>
 80061c8:	2300      	movs	r3, #0
 80061ca:	250a      	movs	r5, #10
 80061cc:	4619      	mov	r1, r3
 80061ce:	3701      	adds	r7, #1
 80061d0:	9305      	str	r3, [sp, #20]
 80061d2:	4638      	mov	r0, r7
 80061d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061d8:	3a30      	subs	r2, #48	; 0x30
 80061da:	2a09      	cmp	r2, #9
 80061dc:	d903      	bls.n	80061e6 <_svfiprintf_r+0x196>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0c8      	beq.n	8006174 <_svfiprintf_r+0x124>
 80061e2:	9105      	str	r1, [sp, #20]
 80061e4:	e7c6      	b.n	8006174 <_svfiprintf_r+0x124>
 80061e6:	fb05 2101 	mla	r1, r5, r1, r2
 80061ea:	2301      	movs	r3, #1
 80061ec:	4607      	mov	r7, r0
 80061ee:	e7f0      	b.n	80061d2 <_svfiprintf_r+0x182>
 80061f0:	ab03      	add	r3, sp, #12
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	4622      	mov	r2, r4
 80061f6:	4b11      	ldr	r3, [pc, #68]	; (800623c <_svfiprintf_r+0x1ec>)
 80061f8:	a904      	add	r1, sp, #16
 80061fa:	4640      	mov	r0, r8
 80061fc:	f3af 8000 	nop.w
 8006200:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006204:	4681      	mov	r9, r0
 8006206:	d1d6      	bne.n	80061b6 <_svfiprintf_r+0x166>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	065b      	lsls	r3, r3, #25
 800620c:	f53f af35 	bmi.w	800607a <_svfiprintf_r+0x2a>
 8006210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006212:	b01d      	add	sp, #116	; 0x74
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006218:	ab03      	add	r3, sp, #12
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	4622      	mov	r2, r4
 800621e:	4b07      	ldr	r3, [pc, #28]	; (800623c <_svfiprintf_r+0x1ec>)
 8006220:	a904      	add	r1, sp, #16
 8006222:	4640      	mov	r0, r8
 8006224:	f000 f882 	bl	800632c <_printf_i>
 8006228:	e7ea      	b.n	8006200 <_svfiprintf_r+0x1b0>
 800622a:	bf00      	nop
 800622c:	080069c8 	.word	0x080069c8
 8006230:	080069ce 	.word	0x080069ce
 8006234:	080069d2 	.word	0x080069d2
 8006238:	00000000 	.word	0x00000000
 800623c:	08005f9d 	.word	0x08005f9d

08006240 <_printf_common>:
 8006240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	4691      	mov	r9, r2
 8006246:	461f      	mov	r7, r3
 8006248:	688a      	ldr	r2, [r1, #8]
 800624a:	690b      	ldr	r3, [r1, #16]
 800624c:	4606      	mov	r6, r0
 800624e:	4293      	cmp	r3, r2
 8006250:	bfb8      	it	lt
 8006252:	4613      	movlt	r3, r2
 8006254:	f8c9 3000 	str.w	r3, [r9]
 8006258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800625c:	460c      	mov	r4, r1
 800625e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006262:	b112      	cbz	r2, 800626a <_printf_common+0x2a>
 8006264:	3301      	adds	r3, #1
 8006266:	f8c9 3000 	str.w	r3, [r9]
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	0699      	lsls	r1, r3, #26
 800626e:	bf42      	ittt	mi
 8006270:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006274:	3302      	addmi	r3, #2
 8006276:	f8c9 3000 	strmi.w	r3, [r9]
 800627a:	6825      	ldr	r5, [r4, #0]
 800627c:	f015 0506 	ands.w	r5, r5, #6
 8006280:	d107      	bne.n	8006292 <_printf_common+0x52>
 8006282:	f104 0a19 	add.w	sl, r4, #25
 8006286:	68e3      	ldr	r3, [r4, #12]
 8006288:	f8d9 2000 	ldr.w	r2, [r9]
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	42ab      	cmp	r3, r5
 8006290:	dc29      	bgt.n	80062e6 <_printf_common+0xa6>
 8006292:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006296:	6822      	ldr	r2, [r4, #0]
 8006298:	3300      	adds	r3, #0
 800629a:	bf18      	it	ne
 800629c:	2301      	movne	r3, #1
 800629e:	0692      	lsls	r2, r2, #26
 80062a0:	d42e      	bmi.n	8006300 <_printf_common+0xc0>
 80062a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062a6:	4639      	mov	r1, r7
 80062a8:	4630      	mov	r0, r6
 80062aa:	47c0      	blx	r8
 80062ac:	3001      	adds	r0, #1
 80062ae:	d021      	beq.n	80062f4 <_printf_common+0xb4>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	68e5      	ldr	r5, [r4, #12]
 80062b4:	f003 0306 	and.w	r3, r3, #6
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	bf18      	it	ne
 80062bc:	2500      	movne	r5, #0
 80062be:	f8d9 2000 	ldr.w	r2, [r9]
 80062c2:	f04f 0900 	mov.w	r9, #0
 80062c6:	bf08      	it	eq
 80062c8:	1aad      	subeq	r5, r5, r2
 80062ca:	68a3      	ldr	r3, [r4, #8]
 80062cc:	6922      	ldr	r2, [r4, #16]
 80062ce:	bf08      	it	eq
 80062d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062d4:	4293      	cmp	r3, r2
 80062d6:	bfc4      	itt	gt
 80062d8:	1a9b      	subgt	r3, r3, r2
 80062da:	18ed      	addgt	r5, r5, r3
 80062dc:	341a      	adds	r4, #26
 80062de:	454d      	cmp	r5, r9
 80062e0:	d11a      	bne.n	8006318 <_printf_common+0xd8>
 80062e2:	2000      	movs	r0, #0
 80062e4:	e008      	b.n	80062f8 <_printf_common+0xb8>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4652      	mov	r2, sl
 80062ea:	4639      	mov	r1, r7
 80062ec:	4630      	mov	r0, r6
 80062ee:	47c0      	blx	r8
 80062f0:	3001      	adds	r0, #1
 80062f2:	d103      	bne.n	80062fc <_printf_common+0xbc>
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fc:	3501      	adds	r5, #1
 80062fe:	e7c2      	b.n	8006286 <_printf_common+0x46>
 8006300:	2030      	movs	r0, #48	; 0x30
 8006302:	18e1      	adds	r1, r4, r3
 8006304:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800630e:	4422      	add	r2, r4
 8006310:	3302      	adds	r3, #2
 8006312:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006316:	e7c4      	b.n	80062a2 <_printf_common+0x62>
 8006318:	2301      	movs	r3, #1
 800631a:	4622      	mov	r2, r4
 800631c:	4639      	mov	r1, r7
 800631e:	4630      	mov	r0, r6
 8006320:	47c0      	blx	r8
 8006322:	3001      	adds	r0, #1
 8006324:	d0e6      	beq.n	80062f4 <_printf_common+0xb4>
 8006326:	f109 0901 	add.w	r9, r9, #1
 800632a:	e7d8      	b.n	80062de <_printf_common+0x9e>

0800632c <_printf_i>:
 800632c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006330:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006334:	460c      	mov	r4, r1
 8006336:	7e09      	ldrb	r1, [r1, #24]
 8006338:	b085      	sub	sp, #20
 800633a:	296e      	cmp	r1, #110	; 0x6e
 800633c:	4617      	mov	r7, r2
 800633e:	4606      	mov	r6, r0
 8006340:	4698      	mov	r8, r3
 8006342:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006344:	f000 80b3 	beq.w	80064ae <_printf_i+0x182>
 8006348:	d822      	bhi.n	8006390 <_printf_i+0x64>
 800634a:	2963      	cmp	r1, #99	; 0x63
 800634c:	d036      	beq.n	80063bc <_printf_i+0x90>
 800634e:	d80a      	bhi.n	8006366 <_printf_i+0x3a>
 8006350:	2900      	cmp	r1, #0
 8006352:	f000 80b9 	beq.w	80064c8 <_printf_i+0x19c>
 8006356:	2958      	cmp	r1, #88	; 0x58
 8006358:	f000 8083 	beq.w	8006462 <_printf_i+0x136>
 800635c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006360:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006364:	e032      	b.n	80063cc <_printf_i+0xa0>
 8006366:	2964      	cmp	r1, #100	; 0x64
 8006368:	d001      	beq.n	800636e <_printf_i+0x42>
 800636a:	2969      	cmp	r1, #105	; 0x69
 800636c:	d1f6      	bne.n	800635c <_printf_i+0x30>
 800636e:	6820      	ldr	r0, [r4, #0]
 8006370:	6813      	ldr	r3, [r2, #0]
 8006372:	0605      	lsls	r5, r0, #24
 8006374:	f103 0104 	add.w	r1, r3, #4
 8006378:	d52a      	bpl.n	80063d0 <_printf_i+0xa4>
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6011      	str	r1, [r2, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	da03      	bge.n	800638a <_printf_i+0x5e>
 8006382:	222d      	movs	r2, #45	; 0x2d
 8006384:	425b      	negs	r3, r3
 8006386:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800638a:	486f      	ldr	r0, [pc, #444]	; (8006548 <_printf_i+0x21c>)
 800638c:	220a      	movs	r2, #10
 800638e:	e039      	b.n	8006404 <_printf_i+0xd8>
 8006390:	2973      	cmp	r1, #115	; 0x73
 8006392:	f000 809d 	beq.w	80064d0 <_printf_i+0x1a4>
 8006396:	d808      	bhi.n	80063aa <_printf_i+0x7e>
 8006398:	296f      	cmp	r1, #111	; 0x6f
 800639a:	d020      	beq.n	80063de <_printf_i+0xb2>
 800639c:	2970      	cmp	r1, #112	; 0x70
 800639e:	d1dd      	bne.n	800635c <_printf_i+0x30>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	f043 0320 	orr.w	r3, r3, #32
 80063a6:	6023      	str	r3, [r4, #0]
 80063a8:	e003      	b.n	80063b2 <_printf_i+0x86>
 80063aa:	2975      	cmp	r1, #117	; 0x75
 80063ac:	d017      	beq.n	80063de <_printf_i+0xb2>
 80063ae:	2978      	cmp	r1, #120	; 0x78
 80063b0:	d1d4      	bne.n	800635c <_printf_i+0x30>
 80063b2:	2378      	movs	r3, #120	; 0x78
 80063b4:	4865      	ldr	r0, [pc, #404]	; (800654c <_printf_i+0x220>)
 80063b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063ba:	e055      	b.n	8006468 <_printf_i+0x13c>
 80063bc:	6813      	ldr	r3, [r2, #0]
 80063be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063c2:	1d19      	adds	r1, r3, #4
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6011      	str	r1, [r2, #0]
 80063c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063cc:	2301      	movs	r3, #1
 80063ce:	e08c      	b.n	80064ea <_printf_i+0x1be>
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063d6:	6011      	str	r1, [r2, #0]
 80063d8:	bf18      	it	ne
 80063da:	b21b      	sxthne	r3, r3
 80063dc:	e7cf      	b.n	800637e <_printf_i+0x52>
 80063de:	6813      	ldr	r3, [r2, #0]
 80063e0:	6825      	ldr	r5, [r4, #0]
 80063e2:	1d18      	adds	r0, r3, #4
 80063e4:	6010      	str	r0, [r2, #0]
 80063e6:	0628      	lsls	r0, r5, #24
 80063e8:	d501      	bpl.n	80063ee <_printf_i+0xc2>
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	e002      	b.n	80063f4 <_printf_i+0xc8>
 80063ee:	0668      	lsls	r0, r5, #25
 80063f0:	d5fb      	bpl.n	80063ea <_printf_i+0xbe>
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	296f      	cmp	r1, #111	; 0x6f
 80063f6:	bf14      	ite	ne
 80063f8:	220a      	movne	r2, #10
 80063fa:	2208      	moveq	r2, #8
 80063fc:	4852      	ldr	r0, [pc, #328]	; (8006548 <_printf_i+0x21c>)
 80063fe:	2100      	movs	r1, #0
 8006400:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006404:	6865      	ldr	r5, [r4, #4]
 8006406:	2d00      	cmp	r5, #0
 8006408:	60a5      	str	r5, [r4, #8]
 800640a:	f2c0 8095 	blt.w	8006538 <_printf_i+0x20c>
 800640e:	6821      	ldr	r1, [r4, #0]
 8006410:	f021 0104 	bic.w	r1, r1, #4
 8006414:	6021      	str	r1, [r4, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d13d      	bne.n	8006496 <_printf_i+0x16a>
 800641a:	2d00      	cmp	r5, #0
 800641c:	f040 808e 	bne.w	800653c <_printf_i+0x210>
 8006420:	4665      	mov	r5, ip
 8006422:	2a08      	cmp	r2, #8
 8006424:	d10b      	bne.n	800643e <_printf_i+0x112>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	07db      	lsls	r3, r3, #31
 800642a:	d508      	bpl.n	800643e <_printf_i+0x112>
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	6862      	ldr	r2, [r4, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	bfde      	ittt	le
 8006434:	2330      	movle	r3, #48	; 0x30
 8006436:	f805 3c01 	strble.w	r3, [r5, #-1]
 800643a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800643e:	ebac 0305 	sub.w	r3, ip, r5
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	f8cd 8000 	str.w	r8, [sp]
 8006448:	463b      	mov	r3, r7
 800644a:	aa03      	add	r2, sp, #12
 800644c:	4621      	mov	r1, r4
 800644e:	4630      	mov	r0, r6
 8006450:	f7ff fef6 	bl	8006240 <_printf_common>
 8006454:	3001      	adds	r0, #1
 8006456:	d14d      	bne.n	80064f4 <_printf_i+0x1c8>
 8006458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800645c:	b005      	add	sp, #20
 800645e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006462:	4839      	ldr	r0, [pc, #228]	; (8006548 <_printf_i+0x21c>)
 8006464:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006468:	6813      	ldr	r3, [r2, #0]
 800646a:	6821      	ldr	r1, [r4, #0]
 800646c:	1d1d      	adds	r5, r3, #4
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6015      	str	r5, [r2, #0]
 8006472:	060a      	lsls	r2, r1, #24
 8006474:	d50b      	bpl.n	800648e <_printf_i+0x162>
 8006476:	07ca      	lsls	r2, r1, #31
 8006478:	bf44      	itt	mi
 800647a:	f041 0120 	orrmi.w	r1, r1, #32
 800647e:	6021      	strmi	r1, [r4, #0]
 8006480:	b91b      	cbnz	r3, 800648a <_printf_i+0x15e>
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	f022 0220 	bic.w	r2, r2, #32
 8006488:	6022      	str	r2, [r4, #0]
 800648a:	2210      	movs	r2, #16
 800648c:	e7b7      	b.n	80063fe <_printf_i+0xd2>
 800648e:	064d      	lsls	r5, r1, #25
 8006490:	bf48      	it	mi
 8006492:	b29b      	uxthmi	r3, r3
 8006494:	e7ef      	b.n	8006476 <_printf_i+0x14a>
 8006496:	4665      	mov	r5, ip
 8006498:	fbb3 f1f2 	udiv	r1, r3, r2
 800649c:	fb02 3311 	mls	r3, r2, r1, r3
 80064a0:	5cc3      	ldrb	r3, [r0, r3]
 80064a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064a6:	460b      	mov	r3, r1
 80064a8:	2900      	cmp	r1, #0
 80064aa:	d1f5      	bne.n	8006498 <_printf_i+0x16c>
 80064ac:	e7b9      	b.n	8006422 <_printf_i+0xf6>
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	6825      	ldr	r5, [r4, #0]
 80064b2:	1d18      	adds	r0, r3, #4
 80064b4:	6961      	ldr	r1, [r4, #20]
 80064b6:	6010      	str	r0, [r2, #0]
 80064b8:	0628      	lsls	r0, r5, #24
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	d501      	bpl.n	80064c2 <_printf_i+0x196>
 80064be:	6019      	str	r1, [r3, #0]
 80064c0:	e002      	b.n	80064c8 <_printf_i+0x19c>
 80064c2:	066a      	lsls	r2, r5, #25
 80064c4:	d5fb      	bpl.n	80064be <_printf_i+0x192>
 80064c6:	8019      	strh	r1, [r3, #0]
 80064c8:	2300      	movs	r3, #0
 80064ca:	4665      	mov	r5, ip
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	e7b9      	b.n	8006444 <_printf_i+0x118>
 80064d0:	6813      	ldr	r3, [r2, #0]
 80064d2:	1d19      	adds	r1, r3, #4
 80064d4:	6011      	str	r1, [r2, #0]
 80064d6:	681d      	ldr	r5, [r3, #0]
 80064d8:	6862      	ldr	r2, [r4, #4]
 80064da:	2100      	movs	r1, #0
 80064dc:	4628      	mov	r0, r5
 80064de:	f000 f837 	bl	8006550 <memchr>
 80064e2:	b108      	cbz	r0, 80064e8 <_printf_i+0x1bc>
 80064e4:	1b40      	subs	r0, r0, r5
 80064e6:	6060      	str	r0, [r4, #4]
 80064e8:	6863      	ldr	r3, [r4, #4]
 80064ea:	6123      	str	r3, [r4, #16]
 80064ec:	2300      	movs	r3, #0
 80064ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f2:	e7a7      	b.n	8006444 <_printf_i+0x118>
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	462a      	mov	r2, r5
 80064f8:	4639      	mov	r1, r7
 80064fa:	4630      	mov	r0, r6
 80064fc:	47c0      	blx	r8
 80064fe:	3001      	adds	r0, #1
 8006500:	d0aa      	beq.n	8006458 <_printf_i+0x12c>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	079b      	lsls	r3, r3, #30
 8006506:	d413      	bmi.n	8006530 <_printf_i+0x204>
 8006508:	68e0      	ldr	r0, [r4, #12]
 800650a:	9b03      	ldr	r3, [sp, #12]
 800650c:	4298      	cmp	r0, r3
 800650e:	bfb8      	it	lt
 8006510:	4618      	movlt	r0, r3
 8006512:	e7a3      	b.n	800645c <_printf_i+0x130>
 8006514:	2301      	movs	r3, #1
 8006516:	464a      	mov	r2, r9
 8006518:	4639      	mov	r1, r7
 800651a:	4630      	mov	r0, r6
 800651c:	47c0      	blx	r8
 800651e:	3001      	adds	r0, #1
 8006520:	d09a      	beq.n	8006458 <_printf_i+0x12c>
 8006522:	3501      	adds	r5, #1
 8006524:	68e3      	ldr	r3, [r4, #12]
 8006526:	9a03      	ldr	r2, [sp, #12]
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	42ab      	cmp	r3, r5
 800652c:	dcf2      	bgt.n	8006514 <_printf_i+0x1e8>
 800652e:	e7eb      	b.n	8006508 <_printf_i+0x1dc>
 8006530:	2500      	movs	r5, #0
 8006532:	f104 0919 	add.w	r9, r4, #25
 8006536:	e7f5      	b.n	8006524 <_printf_i+0x1f8>
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1ac      	bne.n	8006496 <_printf_i+0x16a>
 800653c:	7803      	ldrb	r3, [r0, #0]
 800653e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006542:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006546:	e76c      	b.n	8006422 <_printf_i+0xf6>
 8006548:	080069d9 	.word	0x080069d9
 800654c:	080069ea 	.word	0x080069ea

08006550 <memchr>:
 8006550:	b510      	push	{r4, lr}
 8006552:	b2c9      	uxtb	r1, r1
 8006554:	4402      	add	r2, r0
 8006556:	4290      	cmp	r0, r2
 8006558:	4603      	mov	r3, r0
 800655a:	d101      	bne.n	8006560 <memchr+0x10>
 800655c:	2300      	movs	r3, #0
 800655e:	e003      	b.n	8006568 <memchr+0x18>
 8006560:	781c      	ldrb	r4, [r3, #0]
 8006562:	3001      	adds	r0, #1
 8006564:	428c      	cmp	r4, r1
 8006566:	d1f6      	bne.n	8006556 <memchr+0x6>
 8006568:	4618      	mov	r0, r3
 800656a:	bd10      	pop	{r4, pc}

0800656c <memcpy>:
 800656c:	b510      	push	{r4, lr}
 800656e:	1e43      	subs	r3, r0, #1
 8006570:	440a      	add	r2, r1
 8006572:	4291      	cmp	r1, r2
 8006574:	d100      	bne.n	8006578 <memcpy+0xc>
 8006576:	bd10      	pop	{r4, pc}
 8006578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800657c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006580:	e7f7      	b.n	8006572 <memcpy+0x6>

08006582 <memmove>:
 8006582:	4288      	cmp	r0, r1
 8006584:	b510      	push	{r4, lr}
 8006586:	eb01 0302 	add.w	r3, r1, r2
 800658a:	d807      	bhi.n	800659c <memmove+0x1a>
 800658c:	1e42      	subs	r2, r0, #1
 800658e:	4299      	cmp	r1, r3
 8006590:	d00a      	beq.n	80065a8 <memmove+0x26>
 8006592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006596:	f802 4f01 	strb.w	r4, [r2, #1]!
 800659a:	e7f8      	b.n	800658e <memmove+0xc>
 800659c:	4283      	cmp	r3, r0
 800659e:	d9f5      	bls.n	800658c <memmove+0xa>
 80065a0:	1881      	adds	r1, r0, r2
 80065a2:	1ad2      	subs	r2, r2, r3
 80065a4:	42d3      	cmn	r3, r2
 80065a6:	d100      	bne.n	80065aa <memmove+0x28>
 80065a8:	bd10      	pop	{r4, pc}
 80065aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80065b2:	e7f7      	b.n	80065a4 <memmove+0x22>

080065b4 <_free_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	4605      	mov	r5, r0
 80065b8:	2900      	cmp	r1, #0
 80065ba:	d043      	beq.n	8006644 <_free_r+0x90>
 80065bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065c0:	1f0c      	subs	r4, r1, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bfb8      	it	lt
 80065c6:	18e4      	addlt	r4, r4, r3
 80065c8:	f000 f8d0 	bl	800676c <__malloc_lock>
 80065cc:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <_free_r+0x94>)
 80065ce:	6813      	ldr	r3, [r2, #0]
 80065d0:	4610      	mov	r0, r2
 80065d2:	b933      	cbnz	r3, 80065e2 <_free_r+0x2e>
 80065d4:	6063      	str	r3, [r4, #4]
 80065d6:	6014      	str	r4, [r2, #0]
 80065d8:	4628      	mov	r0, r5
 80065da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065de:	f000 b8c6 	b.w	800676e <__malloc_unlock>
 80065e2:	42a3      	cmp	r3, r4
 80065e4:	d90b      	bls.n	80065fe <_free_r+0x4a>
 80065e6:	6821      	ldr	r1, [r4, #0]
 80065e8:	1862      	adds	r2, r4, r1
 80065ea:	4293      	cmp	r3, r2
 80065ec:	bf01      	itttt	eq
 80065ee:	681a      	ldreq	r2, [r3, #0]
 80065f0:	685b      	ldreq	r3, [r3, #4]
 80065f2:	1852      	addeq	r2, r2, r1
 80065f4:	6022      	streq	r2, [r4, #0]
 80065f6:	6063      	str	r3, [r4, #4]
 80065f8:	6004      	str	r4, [r0, #0]
 80065fa:	e7ed      	b.n	80065d8 <_free_r+0x24>
 80065fc:	4613      	mov	r3, r2
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	b10a      	cbz	r2, 8006606 <_free_r+0x52>
 8006602:	42a2      	cmp	r2, r4
 8006604:	d9fa      	bls.n	80065fc <_free_r+0x48>
 8006606:	6819      	ldr	r1, [r3, #0]
 8006608:	1858      	adds	r0, r3, r1
 800660a:	42a0      	cmp	r0, r4
 800660c:	d10b      	bne.n	8006626 <_free_r+0x72>
 800660e:	6820      	ldr	r0, [r4, #0]
 8006610:	4401      	add	r1, r0
 8006612:	1858      	adds	r0, r3, r1
 8006614:	4282      	cmp	r2, r0
 8006616:	6019      	str	r1, [r3, #0]
 8006618:	d1de      	bne.n	80065d8 <_free_r+0x24>
 800661a:	6810      	ldr	r0, [r2, #0]
 800661c:	6852      	ldr	r2, [r2, #4]
 800661e:	4401      	add	r1, r0
 8006620:	6019      	str	r1, [r3, #0]
 8006622:	605a      	str	r2, [r3, #4]
 8006624:	e7d8      	b.n	80065d8 <_free_r+0x24>
 8006626:	d902      	bls.n	800662e <_free_r+0x7a>
 8006628:	230c      	movs	r3, #12
 800662a:	602b      	str	r3, [r5, #0]
 800662c:	e7d4      	b.n	80065d8 <_free_r+0x24>
 800662e:	6820      	ldr	r0, [r4, #0]
 8006630:	1821      	adds	r1, r4, r0
 8006632:	428a      	cmp	r2, r1
 8006634:	bf01      	itttt	eq
 8006636:	6811      	ldreq	r1, [r2, #0]
 8006638:	6852      	ldreq	r2, [r2, #4]
 800663a:	1809      	addeq	r1, r1, r0
 800663c:	6021      	streq	r1, [r4, #0]
 800663e:	6062      	str	r2, [r4, #4]
 8006640:	605c      	str	r4, [r3, #4]
 8006642:	e7c9      	b.n	80065d8 <_free_r+0x24>
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	bf00      	nop
 8006648:	20000130 	.word	0x20000130

0800664c <_malloc_r>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	1ccd      	adds	r5, r1, #3
 8006650:	f025 0503 	bic.w	r5, r5, #3
 8006654:	3508      	adds	r5, #8
 8006656:	2d0c      	cmp	r5, #12
 8006658:	bf38      	it	cc
 800665a:	250c      	movcc	r5, #12
 800665c:	2d00      	cmp	r5, #0
 800665e:	4606      	mov	r6, r0
 8006660:	db01      	blt.n	8006666 <_malloc_r+0x1a>
 8006662:	42a9      	cmp	r1, r5
 8006664:	d903      	bls.n	800666e <_malloc_r+0x22>
 8006666:	230c      	movs	r3, #12
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	2000      	movs	r0, #0
 800666c:	bd70      	pop	{r4, r5, r6, pc}
 800666e:	f000 f87d 	bl	800676c <__malloc_lock>
 8006672:	4a21      	ldr	r2, [pc, #132]	; (80066f8 <_malloc_r+0xac>)
 8006674:	6814      	ldr	r4, [r2, #0]
 8006676:	4621      	mov	r1, r4
 8006678:	b991      	cbnz	r1, 80066a0 <_malloc_r+0x54>
 800667a:	4c20      	ldr	r4, [pc, #128]	; (80066fc <_malloc_r+0xb0>)
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	b91b      	cbnz	r3, 8006688 <_malloc_r+0x3c>
 8006680:	4630      	mov	r0, r6
 8006682:	f000 f863 	bl	800674c <_sbrk_r>
 8006686:	6020      	str	r0, [r4, #0]
 8006688:	4629      	mov	r1, r5
 800668a:	4630      	mov	r0, r6
 800668c:	f000 f85e 	bl	800674c <_sbrk_r>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d124      	bne.n	80066de <_malloc_r+0x92>
 8006694:	230c      	movs	r3, #12
 8006696:	4630      	mov	r0, r6
 8006698:	6033      	str	r3, [r6, #0]
 800669a:	f000 f868 	bl	800676e <__malloc_unlock>
 800669e:	e7e4      	b.n	800666a <_malloc_r+0x1e>
 80066a0:	680b      	ldr	r3, [r1, #0]
 80066a2:	1b5b      	subs	r3, r3, r5
 80066a4:	d418      	bmi.n	80066d8 <_malloc_r+0x8c>
 80066a6:	2b0b      	cmp	r3, #11
 80066a8:	d90f      	bls.n	80066ca <_malloc_r+0x7e>
 80066aa:	600b      	str	r3, [r1, #0]
 80066ac:	18cc      	adds	r4, r1, r3
 80066ae:	50cd      	str	r5, [r1, r3]
 80066b0:	4630      	mov	r0, r6
 80066b2:	f000 f85c 	bl	800676e <__malloc_unlock>
 80066b6:	f104 000b 	add.w	r0, r4, #11
 80066ba:	1d23      	adds	r3, r4, #4
 80066bc:	f020 0007 	bic.w	r0, r0, #7
 80066c0:	1ac3      	subs	r3, r0, r3
 80066c2:	d0d3      	beq.n	800666c <_malloc_r+0x20>
 80066c4:	425a      	negs	r2, r3
 80066c6:	50e2      	str	r2, [r4, r3]
 80066c8:	e7d0      	b.n	800666c <_malloc_r+0x20>
 80066ca:	684b      	ldr	r3, [r1, #4]
 80066cc:	428c      	cmp	r4, r1
 80066ce:	bf16      	itet	ne
 80066d0:	6063      	strne	r3, [r4, #4]
 80066d2:	6013      	streq	r3, [r2, #0]
 80066d4:	460c      	movne	r4, r1
 80066d6:	e7eb      	b.n	80066b0 <_malloc_r+0x64>
 80066d8:	460c      	mov	r4, r1
 80066da:	6849      	ldr	r1, [r1, #4]
 80066dc:	e7cc      	b.n	8006678 <_malloc_r+0x2c>
 80066de:	1cc4      	adds	r4, r0, #3
 80066e0:	f024 0403 	bic.w	r4, r4, #3
 80066e4:	42a0      	cmp	r0, r4
 80066e6:	d005      	beq.n	80066f4 <_malloc_r+0xa8>
 80066e8:	1a21      	subs	r1, r4, r0
 80066ea:	4630      	mov	r0, r6
 80066ec:	f000 f82e 	bl	800674c <_sbrk_r>
 80066f0:	3001      	adds	r0, #1
 80066f2:	d0cf      	beq.n	8006694 <_malloc_r+0x48>
 80066f4:	6025      	str	r5, [r4, #0]
 80066f6:	e7db      	b.n	80066b0 <_malloc_r+0x64>
 80066f8:	20000130 	.word	0x20000130
 80066fc:	20000134 	.word	0x20000134

08006700 <_realloc_r>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	4607      	mov	r7, r0
 8006704:	4614      	mov	r4, r2
 8006706:	460e      	mov	r6, r1
 8006708:	b921      	cbnz	r1, 8006714 <_realloc_r+0x14>
 800670a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800670e:	4611      	mov	r1, r2
 8006710:	f7ff bf9c 	b.w	800664c <_malloc_r>
 8006714:	b922      	cbnz	r2, 8006720 <_realloc_r+0x20>
 8006716:	f7ff ff4d 	bl	80065b4 <_free_r>
 800671a:	4625      	mov	r5, r4
 800671c:	4628      	mov	r0, r5
 800671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006720:	f000 f826 	bl	8006770 <_malloc_usable_size_r>
 8006724:	42a0      	cmp	r0, r4
 8006726:	d20f      	bcs.n	8006748 <_realloc_r+0x48>
 8006728:	4621      	mov	r1, r4
 800672a:	4638      	mov	r0, r7
 800672c:	f7ff ff8e 	bl	800664c <_malloc_r>
 8006730:	4605      	mov	r5, r0
 8006732:	2800      	cmp	r0, #0
 8006734:	d0f2      	beq.n	800671c <_realloc_r+0x1c>
 8006736:	4631      	mov	r1, r6
 8006738:	4622      	mov	r2, r4
 800673a:	f7ff ff17 	bl	800656c <memcpy>
 800673e:	4631      	mov	r1, r6
 8006740:	4638      	mov	r0, r7
 8006742:	f7ff ff37 	bl	80065b4 <_free_r>
 8006746:	e7e9      	b.n	800671c <_realloc_r+0x1c>
 8006748:	4635      	mov	r5, r6
 800674a:	e7e7      	b.n	800671c <_realloc_r+0x1c>

0800674c <_sbrk_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	2300      	movs	r3, #0
 8006750:	4c05      	ldr	r4, [pc, #20]	; (8006768 <_sbrk_r+0x1c>)
 8006752:	4605      	mov	r5, r0
 8006754:	4608      	mov	r0, r1
 8006756:	6023      	str	r3, [r4, #0]
 8006758:	f7fb fe70 	bl	800243c <_sbrk>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d102      	bne.n	8006766 <_sbrk_r+0x1a>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	b103      	cbz	r3, 8006766 <_sbrk_r+0x1a>
 8006764:	602b      	str	r3, [r5, #0]
 8006766:	bd38      	pop	{r3, r4, r5, pc}
 8006768:	20000734 	.word	0x20000734

0800676c <__malloc_lock>:
 800676c:	4770      	bx	lr

0800676e <__malloc_unlock>:
 800676e:	4770      	bx	lr

08006770 <_malloc_usable_size_r>:
 8006770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006774:	1f18      	subs	r0, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	bfbc      	itt	lt
 800677a:	580b      	ldrlt	r3, [r1, r0]
 800677c:	18c0      	addlt	r0, r0, r3
 800677e:	4770      	bx	lr

08006780 <_init>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	bf00      	nop
 8006784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006786:	bc08      	pop	{r3}
 8006788:	469e      	mov	lr, r3
 800678a:	4770      	bx	lr

0800678c <_fini>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr
