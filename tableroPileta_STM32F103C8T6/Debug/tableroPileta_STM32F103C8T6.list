
tableroPileta_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080068e0  080068e0  000168e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b44  08006b44  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  08006b44  08006b44  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b44  08006b44  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08006b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  200000e8  08006c34  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  08006c34  0002073c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159f7  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c0b  00000000  00000000  00035b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001438  00000000  00000000  00039718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  0003ab50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001856a  00000000  00000000  0003bd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013037  00000000  00000000  000542e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007bfd4  00000000  00000000  00067319  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e32ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b0  00000000  00000000  000e3368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	080068c8 	.word	0x080068c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	080068c8 	.word	0x080068c8

0800014c <spi_74HC165_init>:
 * La función de inicialización está modificada para trabajar con dos
 * integrados 74HC165 a la vez, tratándolos como distintos esclavos SPI.
 * Cada integrado contará con su propia función de lectura, así como sus
 * propias señales CE.
 */
void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CEport, uint16_t CEpin){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 800015c:	4a09      	ldr	r2, [pc, #36]	; (8000184 <spi_74HC165_init+0x38>)
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 8000162:	4a09      	ldr	r2, [pc, #36]	; (8000188 <spi_74HC165_init+0x3c>)
 8000164:	68bb      	ldr	r3, [r7, #8]
 8000166:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 8000168:	4a08      	ldr	r2, [pc, #32]	; (800018c <spi_74HC165_init+0x40>)
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	8013      	strh	r3, [r2, #0]

	portCE = CEport;
 800016e:	4a08      	ldr	r2, [pc, #32]	; (8000190 <spi_74HC165_init+0x44>)
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	6013      	str	r3, [r2, #0]
	pinCE = CEpin;
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <spi_74HC165_init+0x48>)
 8000176:	8b3b      	ldrh	r3, [r7, #24]
 8000178:	8013      	strh	r3, [r2, #0]

}
 800017a:	bf00      	nop
 800017c:	3714      	adds	r7, #20
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000134 	.word	0x20000134
 8000188:	2000013c 	.word	0x2000013c
 800018c:	20000138 	.word	0x20000138
 8000190:	20000144 	.word	0x20000144
 8000194:	20000140 	.word	0x20000140

08000198 <spi_74HC165_receiveBotones>:


void spi_74HC165_receiveBotones (uint8_t* pdata, uint16_t sizeData){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 80001a4:	4b15      	ldr	r3, [pc, #84]	; (80001fc <spi_74HC165_receiveBotones+0x64>)
 80001a6:	6818      	ldr	r0, [r3, #0]
 80001a8:	4b15      	ldr	r3, [pc, #84]	; (8000200 <spi_74HC165_receiveBotones+0x68>)
 80001aa:	881b      	ldrh	r3, [r3, #0]
 80001ac:	2200      	movs	r2, #0
 80001ae:	4619      	mov	r1, r3
 80001b0:	f003 f8db 	bl	800336a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <spi_74HC165_receiveBotones+0x64>)
 80001b6:	6818      	ldr	r0, [r3, #0]
 80001b8:	4b11      	ldr	r3, [pc, #68]	; (8000200 <spi_74HC165_receiveBotones+0x68>)
 80001ba:	881b      	ldrh	r3, [r3, #0]
 80001bc:	2201      	movs	r2, #1
 80001be:	4619      	mov	r1, r3
 80001c0:	f003 f8d3 	bl	800336a <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 80001c4:	4b0f      	ldr	r3, [pc, #60]	; (8000204 <spi_74HC165_receiveBotones+0x6c>)
 80001c6:	6818      	ldr	r0, [r3, #0]
 80001c8:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <spi_74HC165_receiveBotones+0x70>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	2200      	movs	r2, #0
 80001ce:	4619      	mov	r1, r3
 80001d0:	f003 f8cb 	bl	800336a <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 80001d4:	4b0d      	ldr	r3, [pc, #52]	; (800020c <spi_74HC165_receiveBotones+0x74>)
 80001d6:	6818      	ldr	r0, [r3, #0]
 80001d8:	887a      	ldrh	r2, [r7, #2]
 80001da:	2364      	movs	r3, #100	; 0x64
 80001dc:	6879      	ldr	r1, [r7, #4]
 80001de:	f004 fee0 	bl	8004fa2 <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 80001e2:	4b08      	ldr	r3, [pc, #32]	; (8000204 <spi_74HC165_receiveBotones+0x6c>)
 80001e4:	6818      	ldr	r0, [r3, #0]
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <spi_74HC165_receiveBotones+0x70>)
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	2201      	movs	r2, #1
 80001ec:	4619      	mov	r1, r3
 80001ee:	f003 f8bc 	bl	800336a <HAL_GPIO_WritePin>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	2000013c 	.word	0x2000013c
 8000200:	20000138 	.word	0x20000138
 8000204:	20000144 	.word	0x20000144
 8000208:	20000140 	.word	0x20000140
 800020c:	20000134 	.word	0x20000134

08000210 <spi_74HC165_receiveTeclado>:
//
//	//clock disable
//	HAL_GPIO_WritePin(portCE2, pinCE2, 1);
//}

void spi_74HC165_receiveTeclado (uint8_t* pdata, uint16_t sizeData){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	460b      	mov	r3, r1
 800021a:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 800021c:	4b17      	ldr	r3, [pc, #92]	; (800027c <spi_74HC165_receiveTeclado+0x6c>)
 800021e:	6818      	ldr	r0, [r3, #0]
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <spi_74HC165_receiveTeclado+0x70>)
 8000222:	881b      	ldrh	r3, [r3, #0]
 8000224:	2200      	movs	r2, #0
 8000226:	4619      	mov	r1, r3
 8000228:	f003 f89f 	bl	800336a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 800022c:	4b13      	ldr	r3, [pc, #76]	; (800027c <spi_74HC165_receiveTeclado+0x6c>)
 800022e:	6818      	ldr	r0, [r3, #0]
 8000230:	4b13      	ldr	r3, [pc, #76]	; (8000280 <spi_74HC165_receiveTeclado+0x70>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	2201      	movs	r2, #1
 8000236:	4619      	mov	r1, r3
 8000238:	f003 f897 	bl	800336a <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <spi_74HC165_receiveTeclado+0x74>)
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <spi_74HC165_receiveTeclado+0x78>)
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	2200      	movs	r2, #0
 8000246:	4619      	mov	r1, r3
 8000248:	f003 f88f 	bl	800336a <HAL_GPIO_WritePin>

	uint8_t auxData[2];

	//SPI
	HAL_SPI_Receive(spi_handler, auxData, 2, 100);
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <spi_74HC165_receiveTeclado+0x7c>)
 800024e:	6818      	ldr	r0, [r3, #0]
 8000250:	f107 010c 	add.w	r1, r7, #12
 8000254:	2364      	movs	r3, #100	; 0x64
 8000256:	2202      	movs	r2, #2
 8000258:	f004 fea3 	bl	8004fa2 <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <spi_74HC165_receiveTeclado+0x74>)
 800025e:	6818      	ldr	r0, [r3, #0]
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <spi_74HC165_receiveTeclado+0x78>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	2201      	movs	r2, #1
 8000266:	4619      	mov	r1, r3
 8000268:	f003 f87f 	bl	800336a <HAL_GPIO_WritePin>

	*pdata = auxData[1];
 800026c:	7b7a      	ldrb	r2, [r7, #13]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	701a      	strb	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	2000013c 	.word	0x2000013c
 8000280:	20000138 	.word	0x20000138
 8000284:	20000144 	.word	0x20000144
 8000288:	20000140 	.word	0x20000140
 800028c:	20000134 	.word	0x20000134

08000290 <spi_74HC595_init>:
SPI_HandleTypeDef* spi_handler;
GPIO_TypeDef* portST;
uint16_t pinST;


void spi_74HC595_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* STport, uint16_t STpin){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	80fb      	strh	r3, [r7, #6]

	spi_handler =hspi;
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <spi_74HC595_init+0x38>)
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	6013      	str	r3, [r2, #0]

	portST = STport;
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <spi_74HC595_init+0x3c>)
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	6013      	str	r3, [r2, #0]
	pinST = STpin;
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <spi_74HC595_init+0x40>)
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(portST, pinST, 0);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <spi_74HC595_init+0x3c>)
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <spi_74HC595_init+0x40>)
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	f003 f855 	bl	800336a <HAL_GPIO_WritePin>

} //end spi_74HC595_init()
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000134 	.word	0x20000134
 80002cc:	2000014c 	.word	0x2000014c
 80002d0:	20000148 	.word	0x20000148

080002d4 <spi_74HC595_Transmit>:


void spi_74HC595_Transmit (uint8_t* pdata, uint16_t sizeData){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(spi_handler, pdata, sizeData, 100);
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <spi_74HC595_Transmit+0x44>)
 80002e2:	6818      	ldr	r0, [r3, #0]
 80002e4:	887a      	ldrh	r2, [r7, #2]
 80002e6:	2364      	movs	r3, #100	; 0x64
 80002e8:	6879      	ldr	r1, [r7, #4]
 80002ea:	f004 fd26 	bl	8004d3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(portST, pinST, 1);
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <spi_74HC595_Transmit+0x48>)
 80002f0:	6818      	ldr	r0, [r3, #0]
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <spi_74HC595_Transmit+0x4c>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	2201      	movs	r2, #1
 80002f8:	4619      	mov	r1, r3
 80002fa:	f003 f836 	bl	800336a <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(portST, pinST, 0);
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <spi_74HC595_Transmit+0x48>)
 8000300:	6818      	ldr	r0, [r3, #0]
 8000302:	4b07      	ldr	r3, [pc, #28]	; (8000320 <spi_74HC595_Transmit+0x4c>)
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	2200      	movs	r2, #0
 8000308:	4619      	mov	r1, r3
 800030a:	f003 f82e 	bl	800336a <HAL_GPIO_WritePin>

} //end spi_74HC595_transmit()
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000134 	.word	0x20000134
 800031c:	2000014c 	.word	0x2000014c
 8000320:	20000148 	.word	0x20000148

08000324 <turnONFila>:
uint32_t read_input, last_input, fall_input, rise_input;

uint16_t write_output;


void turnONFila (uint8_t filaNum){
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]

	switch (filaNum){
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d862      	bhi.n	80003fa <turnONFila+0xd6>
 8000334:	a201      	add	r2, pc, #4	; (adr r2, 800033c <turnONFila+0x18>)
 8000336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033a:	bf00      	nop
 800033c:	0800034d 	.word	0x0800034d
 8000340:	08000379 	.word	0x08000379
 8000344:	080003a5 	.word	0x080003a5
 8000348:	080003d1 	.word	0x080003d1
		case 0:
			//pongo en 0 la fila 0; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 800034c:	2201      	movs	r2, #1
 800034e:	2120      	movs	r1, #32
 8000350:	482c      	ldr	r0, [pc, #176]	; (8000404 <turnONFila+0xe0>)
 8000352:	f003 f80a 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 8000356:	2201      	movs	r2, #1
 8000358:	2110      	movs	r1, #16
 800035a:	482a      	ldr	r0, [pc, #168]	; (8000404 <turnONFila+0xe0>)
 800035c:	f003 f805 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	2108      	movs	r1, #8
 8000364:	4827      	ldr	r0, [pc, #156]	; (8000404 <turnONFila+0xe0>)
 8000366:	f003 f800 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000370:	4825      	ldr	r0, [pc, #148]	; (8000408 <turnONFila+0xe4>)
 8000372:	f002 fffa 	bl	800336a <HAL_GPIO_WritePin>
		break;
 8000376:	e041      	b.n	80003fc <turnONFila+0xd8>
		case 1:
			//pongo en 0 la fila 1; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 8000378:	2201      	movs	r2, #1
 800037a:	2120      	movs	r1, #32
 800037c:	4821      	ldr	r0, [pc, #132]	; (8000404 <turnONFila+0xe0>)
 800037e:	f002 fff4 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	2110      	movs	r1, #16
 8000386:	481f      	ldr	r0, [pc, #124]	; (8000404 <turnONFila+0xe0>)
 8000388:	f002 ffef 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2108      	movs	r1, #8
 8000390:	481c      	ldr	r0, [pc, #112]	; (8000404 <turnONFila+0xe0>)
 8000392:	f002 ffea 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 8000396:	2201      	movs	r2, #1
 8000398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800039c:	481a      	ldr	r0, [pc, #104]	; (8000408 <turnONFila+0xe4>)
 800039e:	f002 ffe4 	bl	800336a <HAL_GPIO_WritePin>
		break;
 80003a2:	e02b      	b.n	80003fc <turnONFila+0xd8>
		case 2:
			//pongo en 0 la fila 2; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2120      	movs	r1, #32
 80003a8:	4816      	ldr	r0, [pc, #88]	; (8000404 <turnONFila+0xe0>)
 80003aa:	f002 ffde 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	4814      	ldr	r0, [pc, #80]	; (8000404 <turnONFila+0xe0>)
 80003b4:	f002 ffd9 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2108      	movs	r1, #8
 80003bc:	4811      	ldr	r0, [pc, #68]	; (8000404 <turnONFila+0xe0>)
 80003be:	f002 ffd4 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c8:	480f      	ldr	r0, [pc, #60]	; (8000408 <turnONFila+0xe4>)
 80003ca:	f002 ffce 	bl	800336a <HAL_GPIO_WritePin>
		break;
 80003ce:	e015      	b.n	80003fc <turnONFila+0xd8>
		case 3:
			//pongo en 0 la fila 3; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2120      	movs	r1, #32
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <turnONFila+0xe0>)
 80003d6:	f002 ffc8 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 80003da:	2201      	movs	r2, #1
 80003dc:	2110      	movs	r1, #16
 80003de:	4809      	ldr	r0, [pc, #36]	; (8000404 <turnONFila+0xe0>)
 80003e0:	f002 ffc3 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2108      	movs	r1, #8
 80003e8:	4806      	ldr	r0, [pc, #24]	; (8000404 <turnONFila+0xe0>)
 80003ea:	f002 ffbe 	bl	800336a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <turnONFila+0xe4>)
 80003f6:	f002 ffb8 	bl	800336a <HAL_GPIO_WritePin>
		default:
		break;
 80003fa:	bf00      	nop
	}//end witch
}//end turnONFila
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40010c00 	.word	0x40010c00
 8000408:	40010800 	.word	0x40010800

0800040c <lecturaTeclas>:


void lecturaTeclas (void){
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

//	last_input = read_input;

	//pulsadores:
	spi_74HC165_receiveBotones (&read_teclas, 1);
 8000412:	2101      	movs	r1, #1
 8000414:	481a      	ldr	r0, [pc, #104]	; (8000480 <lecturaTeclas+0x74>)
 8000416:	f7ff febf 	bl	8000198 <spi_74HC165_receiveBotones>

	//teclado matricial:

	for (uint8_t i = 0; i < 4; i++){
 800041a:	2300      	movs	r3, #0
 800041c:	71fb      	strb	r3, [r7, #7]
 800041e:	e00d      	b.n	800043c <lecturaTeclas+0x30>
		turnONFila(i);
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff7e 	bl	8000324 <turnONFila>
		spi_74HC165_receiveTeclado(&read_teclado[i], 1);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	4a16      	ldr	r2, [pc, #88]	; (8000484 <lecturaTeclas+0x78>)
 800042c:	4413      	add	r3, r2
 800042e:	2101      	movs	r1, #1
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff feed 	bl	8000210 <spi_74HC165_receiveTeclado>
	for (uint8_t i = 0; i < 4; i++){
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	3301      	adds	r3, #1
 800043a:	71fb      	strb	r3, [r7, #7]
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2b03      	cmp	r3, #3
 8000440:	d9ee      	bls.n	8000420 <lecturaTeclas+0x14>
//							(read_teclado[0] << 6) |
//							(read_teclado[1] << 10) |
//							(read_teclado[2] << 14) |
//							(read_teclado[3] << 18));

	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <lecturaTeclas+0x78>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	f003 020f 	and.w	r2, r3, #15
							( (read_teclado[1] & 0b1111) << 4) |
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <lecturaTeclas+0x78>)
 800044c:	785b      	ldrb	r3, [r3, #1]
 800044e:	011b      	lsls	r3, r3, #4
 8000450:	b2db      	uxtb	r3, r3
	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000452:	431a      	orrs	r2, r3
							( (read_teclado[2] & 0b1111) << 8) |
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <lecturaTeclas+0x78>)
 8000456:	789b      	ldrb	r3, [r3, #2]
 8000458:	021b      	lsls	r3, r3, #8
 800045a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
							( (read_teclado[1] & 0b1111) << 4) |
 800045e:	431a      	orrs	r2, r3
							( (read_teclado[3] & 0b1111) << 12) |
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <lecturaTeclas+0x78>)
 8000462:	78db      	ldrb	r3, [r3, #3]
 8000464:	031b      	lsls	r3, r3, #12
 8000466:	b29b      	uxth	r3, r3
							( (read_teclado[2] & 0b1111) << 8) |
 8000468:	431a      	orrs	r2, r3
							(read_teclas << 16) );
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <lecturaTeclas+0x74>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	041b      	lsls	r3, r3, #16
							( (read_teclado[3] & 0b1111) << 12) |
 8000470:	4313      	orrs	r3, r2
	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000472:	461a      	mov	r2, r3
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <lecturaTeclas+0x7c>)
 8000476:	601a      	str	r2, [r3, #0]


} //end lecturaTeclas()
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000180 	.word	0x20000180
 8000484:	20000154 	.word	0x20000154
 8000488:	20000158 	.word	0x20000158

0800048c <update_teclas>:


void update_teclas(void){ //ESTADO DE LAS TECLAS CON LOGICA NEGATIVA
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0


	fall_input = last_input & ~read_input;
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <update_teclas+0x34>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	43da      	mvns	r2, r3
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <update_teclas+0x38>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4013      	ands	r3, r2
 800049c:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <update_teclas+0x3c>)
 800049e:	6013      	str	r3, [r2, #0]
	rise_input = ~last_input & read_input;
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <update_teclas+0x38>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	43da      	mvns	r2, r3
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <update_teclas+0x34>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4013      	ands	r3, r2
 80004ac:	4a07      	ldr	r2, [pc, #28]	; (80004cc <update_teclas+0x40>)
 80004ae:	6013      	str	r3, [r2, #0]

	last_input = read_input;
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <update_teclas+0x34>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <update_teclas+0x38>)
 80004b6:	6013      	str	r3, [r2, #0]

} //end teclas
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	20000158 	.word	0x20000158
 80004c4:	2000017c 	.word	0x2000017c
 80004c8:	2000015c 	.word	0x2000015c
 80004cc:	20000160 	.word	0x20000160

080004d0 <getStatBoton>:


T_INPUT getStatBoton (T_POS_INPUT b){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]

	if ( (fall_input & (1 << b)) != 0)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2201      	movs	r2, #1
 80004de:	fa02 f303 	lsl.w	r3, r2, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <getStatBoton+0x74>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4013      	ands	r3, r2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <getStatBoton+0x22>
		return FALL;
 80004ee:	2302      	movs	r3, #2
 80004f0:	e022      	b.n	8000538 <getStatBoton+0x68>

	if (rise_input & (1 << b) != 0)
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2201      	movs	r2, #1
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	bf14      	ite	ne
 80004fe:	2301      	movne	r3, #1
 8000500:	2300      	moveq	r3, #0
 8000502:	b2db      	uxtb	r3, r3
 8000504:	461a      	mov	r2, r3
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <getStatBoton+0x78>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4013      	ands	r3, r2
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <getStatBoton+0x44>
		return RISE;
 8000510:	2303      	movs	r3, #3
 8000512:	e011      	b.n	8000538 <getStatBoton+0x68>

	if (read_input & (1 << b) != 0)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2201      	movs	r2, #1
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	2b00      	cmp	r3, #0
 800051e:	bf14      	ite	ne
 8000520:	2301      	movne	r3, #1
 8000522:	2300      	moveq	r3, #0
 8000524:	b2db      	uxtb	r3, r3
 8000526:	461a      	mov	r2, r3
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <getStatBoton+0x7c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4013      	ands	r3, r2
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <getStatBoton+0x66>
		return HIGH_L;
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <getStatBoton+0x68>

	return LOW_L;
 8000536:	2300      	movs	r3, #0

} //end getStatBoton()
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	2000015c 	.word	0x2000015c
 8000548:	20000160 	.word	0x20000160
 800054c:	20000158 	.word	0x20000158

08000550 <getNumber>:


int8_t getNumber (void){
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

	if (fall_input & (1 << IN_0))
 8000554:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <getNumber+0xb0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <getNumber+0x14>
			return 0;
 8000560:	2300      	movs	r3, #0
 8000562:	e049      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_1))
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <getNumber+0xb0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <getNumber+0x24>
			return 1;
 8000570:	2301      	movs	r3, #1
 8000572:	e041      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_2))
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <getNumber+0xb0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f003 0302 	and.w	r3, r3, #2
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <getNumber+0x34>
			return 2;
 8000580:	2302      	movs	r3, #2
 8000582:	e039      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_3))
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <getNumber+0xb0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <getNumber+0x44>
			return 3;
 8000590:	2303      	movs	r3, #3
 8000592:	e031      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_4))
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <getNumber+0xb0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <getNumber+0x54>
			return 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	e029      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_5))
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <getNumber+0xb0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 0320 	and.w	r3, r3, #32
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <getNumber+0x64>
			return 5;
 80005b0:	2305      	movs	r3, #5
 80005b2:	e021      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_6))
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <getNumber+0xb0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <getNumber+0x74>
			return 6;
 80005c0:	2306      	movs	r3, #6
 80005c2:	e019      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_7))
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <getNumber+0xb0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <getNumber+0x84>
			return 7;
 80005d0:	2307      	movs	r3, #7
 80005d2:	e011      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_8))
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <getNumber+0xb0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <getNumber+0x94>
			return 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	e009      	b.n	80005f8 <getNumber+0xa8>
	if (fall_input & (1 << IN_9))
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <getNumber+0xb0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <getNumber+0xa4>
			return 9;
 80005f0:	2309      	movs	r3, #9
 80005f2:	e001      	b.n	80005f8 <getNumber+0xa8>

	return -1;
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
} //end getNumber()
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	2000015c 	.word	0x2000015c

08000604 <setOutput>:


void setOutput (T_POS_OUTPUT s, uint8_t val){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	460a      	mov	r2, r1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	4613      	mov	r3, r2
 8000612:	71bb      	strb	r3, [r7, #6]

	if (val != 0){
 8000614:	79bb      	ldrb	r3, [r7, #6]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00b      	beq.n	8000632 <setOutput+0x2e>
		write_output |= (uint16_t)(1 << s);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2201      	movs	r2, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <setOutput+0x54>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	4313      	orrs	r3, r2
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <setOutput+0x54>)
 800062e:	801a      	strh	r2, [r3, #0]
		return;
 8000630:	e00e      	b.n	8000650 <setOutput+0x4c>
	}else{
		write_output &= ~( (uint16_t)(1 << s) );
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2201      	movs	r2, #1
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	b21b      	sxth	r3, r3
 800063c:	43db      	mvns	r3, r3
 800063e:	b21a      	sxth	r2, r3
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <setOutput+0x54>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	b21b      	sxth	r3, r3
 8000646:	4013      	ands	r3, r2
 8000648:	b21b      	sxth	r3, r3
 800064a:	b29a      	uxth	r2, r3
 800064c:	4b02      	ldr	r3, [pc, #8]	; (8000658 <setOutput+0x54>)
 800064e:	801a      	strh	r2, [r3, #0]
	}

} //end setOutput()
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000150 	.word	0x20000150

0800065c <toggleOutput>:

void toggleOutput (T_POS_OUTPUT s){
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]

	write_output ^= (uint16_t)(1 << s);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2201      	movs	r2, #1
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <toggleOutput+0x2c>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	4053      	eors	r3, r2
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <toggleOutput+0x2c>)
 800067a:	801a      	strh	r2, [r3, #0]

} //end toggleOutput()
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000150 	.word	0x20000150

0800068c <update_outputs>:


void update_outputs (void){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

	spi_74HC595_Transmit( (uint8_t*)&write_output, 2); // 2 bytes.
 8000690:	2102      	movs	r1, #2
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <update_outputs+0x10>)
 8000694:	f7ff fe1e 	bl	80002d4 <spi_74HC595_Transmit>

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000150 	.word	0x20000150

080006a0 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	e01f      	b.n	80006f0 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 80006b0:	79fa      	ldrb	r2, [r7, #7]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	480e      	ldr	r0, [pc, #56]	; (8000700 <SendByteSPI+0x60>)
 80006c6:	f002 fe50 	bl	800336a <HAL_GPIO_WritePin>
 80006ca:	e004      	b.n	80006d6 <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 80006cc:	2200      	movs	r2, #0
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <SendByteSPI+0x60>)
 80006d2:	f002 fe4a 	bl	800336a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 80006d6:	2200      	movs	r2, #0
 80006d8:	2120      	movs	r1, #32
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <SendByteSPI+0x60>)
 80006dc:	f002 fe45 	bl	800336a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 80006e0:	2201      	movs	r2, #1
 80006e2:	2120      	movs	r1, #32
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <SendByteSPI+0x60>)
 80006e6:	f002 fe40 	bl	800336a <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	dddc      	ble.n	80006b0 <SendByteSPI+0x10>

	}
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40010800 	.word	0x40010800

08000704 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800070e:	2201      	movs	r2, #1
 8000710:	2140      	movs	r1, #64	; 0x40
 8000712:	480f      	ldr	r0, [pc, #60]	; (8000750 <ST7920_SendCmd+0x4c>)
 8000714:	f002 fe29 	bl	800336a <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 8000718:	20f8      	movs	r0, #248	; 0xf8
 800071a:	f7ff ffc1 	bl	80006a0 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f023 030f 	bic.w	r3, r3, #15
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffba 	bl	80006a0 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	011b      	lsls	r3, r3, #4
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffb4 	bl	80006a0 <SendByteSPI>
	delay_us(50);
 8000738:	2032      	movs	r0, #50	; 0x32
 800073a:	f000 fa05 	bl	8000b48 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800073e:	2200      	movs	r2, #0
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <ST7920_SendCmd+0x4c>)
 8000744:	f002 fe11 	bl	800336a <HAL_GPIO_WritePin>

}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40010800 	.word	0x40010800

08000754 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800075e:	2201      	movs	r2, #1
 8000760:	2140      	movs	r1, #64	; 0x40
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <ST7920_SendData+0x4c>)
 8000764:	f002 fe01 	bl	800336a <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8000768:	20fa      	movs	r0, #250	; 0xfa
 800076a:	f7ff ff99 	bl	80006a0 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f023 030f 	bic.w	r3, r3, #15
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff92 	bl	80006a0 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff8c 	bl	80006a0 <SendByteSPI>
	delay_us(50);
 8000788:	2032      	movs	r0, #50	; 0x32
 800078a:	f000 f9dd 	bl	8000b48 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800078e:	2200      	movs	r2, #0
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	4803      	ldr	r0, [pc, #12]	; (80007a0 <ST7920_SendData+0x4c>)
 8000794:	f002 fde9 	bl	800336a <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40010800 	.word	0x40010800

080007a4 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
    switch (row)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d81e      	bhi.n	80007f4 <ST7920_SendString+0x50>
 80007b6:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <ST7920_SendString+0x18>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	080007cd 	.word	0x080007cd
 80007c0:	080007d7 	.word	0x080007d7
 80007c4:	080007e1 	.word	0x080007e1
 80007c8:	080007eb 	.word	0x080007eb
    {
        case 0:
            col |= 0x80;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d2:	60bb      	str	r3, [r7, #8]
            break;
 80007d4:	e013      	b.n	80007fe <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80007dc:	60bb      	str	r3, [r7, #8]
            break;
 80007de:	e00e      	b.n	80007fe <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80007e6:	60bb      	str	r3, [r7, #8]
            break;
 80007e8:	e009      	b.n	80007fe <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 80007f0:	60bb      	str	r3, [r7, #8]
            break;
 80007f2:	e004      	b.n	80007fe <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fa:	60bb      	str	r3, [r7, #8]
            break;
 80007fc:	bf00      	nop
    }

    ST7920_SendCmd(col);
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff7e 	bl	8000704 <ST7920_SendCmd>

    while (*string)
 8000808:	e006      	b.n	8000818 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff9e 	bl	8000754 <ST7920_SendData>
    while (*string)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1f4      	bne.n	800080a <ST7920_SendString+0x66>
    	}
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <ST7920_DrawBitmap>:
		Graphic_Check = 0;  // update the variable
	}
}

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]
 8000834:	e06a      	b.n	800090c <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	2b1f      	cmp	r3, #31
 800083a:	d830      	bhi.n	800089e <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 800083c:	2300      	movs	r3, #0
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	e029      	b.n	8000896 <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff5a 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff53 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	4413      	add	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff6f 	bl	8000754 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	4413      	add	r3, r2
 8000882:	461a      	mov	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff62 	bl	8000754 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	3301      	adds	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	2b07      	cmp	r3, #7
 800089a:	d9d2      	bls.n	8000842 <ST7920_DrawBitmap+0x1a>
 800089c:	e033      	b.n	8000906 <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e02d      	b.n	8000900 <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	3b20      	subs	r3, #32
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff25 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	f063 0377 	orn	r3, r3, #119	; 0x77
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff1e 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 80008c8:	7bfa      	ldrb	r2, [r7, #15]
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	4413      	add	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	461a      	mov	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff3a 	bl	8000754 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	7bbb      	ldrb	r3, [r7, #14]
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	4413      	add	r3, r2
 80008ec:	461a      	mov	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff2d 	bl	8000754 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	3301      	adds	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	2b07      	cmp	r3, #7
 8000904:	d9ce      	bls.n	80008a4 <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	3301      	adds	r3, #1
 800090a:	73bb      	strb	r3, [r7, #14]
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	2b3f      	cmp	r3, #63	; 0x3f
 8000910:	d991      	bls.n	8000836 <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <ST7920_Update+0x10>)
 8000922:	f7ff ff81 	bl	8000828 <ST7920_DrawBitmap>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000188 	.word	0x20000188

08000930 <ST7920_Clear>:



void ST7920_Clear()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <ST7920_Clear+0x8c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d134      	bne.n	80009a8 <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 800093e:	2300      	movs	r3, #0
 8000940:	71bb      	strb	r3, [r7, #6]
 8000942:	e02d      	b.n	80009a0 <ST7920_Clear+0x70>
		{
			if(y < 32)
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	2b1f      	cmp	r3, #31
 8000948:	d80a      	bhi.n	8000960 <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 800094a:	79bb      	ldrb	r3, [r7, #6]
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fed6 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000958:	2080      	movs	r0, #128	; 0x80
 800095a:	f7ff fed3 	bl	8000704 <ST7920_SendCmd>
 800095e:	e00d      	b.n	800097c <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	3b20      	subs	r3, #32
 8000964:	b2db      	uxtb	r3, r3
 8000966:	b25b      	sxtb	r3, r3
 8000968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800096c:	b25b      	sxtb	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fec7 	bl	8000704 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8000976:	2088      	movs	r0, #136	; 0x88
 8000978:	f7ff fec4 	bl	8000704 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 800097c:	2300      	movs	r3, #0
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	e008      	b.n	8000994 <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff fee6 	bl	8000754 <ST7920_SendData>
				ST7920_SendData(0);
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fee3 	bl	8000754 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	3301      	adds	r3, #1
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b07      	cmp	r3, #7
 8000998:	d9f3      	bls.n	8000982 <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 800099a:	79bb      	ldrb	r3, [r7, #6]
 800099c:	3301      	adds	r3, #1
 800099e:	71bb      	strb	r3, [r7, #6]
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	2b3f      	cmp	r3, #63	; 0x3f
 80009a4:	d9ce      	bls.n	8000944 <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 80009a6:	e005      	b.n	80009b4 <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);   // clear the display using command
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff feab 	bl	8000704 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 80009ae:	2002      	movs	r0, #2
 80009b0:	f002 f830 	bl	8002a14 <HAL_Delay>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000104 	.word	0x20000104

080009c0 <ST7920_Init>:


void ST7920_Init (void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80009c4:	2200      	movs	r2, #0
 80009c6:	2101      	movs	r1, #1
 80009c8:	481c      	ldr	r0, [pc, #112]	; (8000a3c <ST7920_Init+0x7c>)
 80009ca:	f002 fcce 	bl	800336a <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 80009ce:	200a      	movs	r0, #10
 80009d0:	f002 f820 	bl	8002a14 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 80009d4:	2201      	movs	r2, #1
 80009d6:	2101      	movs	r1, #1
 80009d8:	4818      	ldr	r0, [pc, #96]	; (8000a3c <ST7920_Init+0x7c>)
 80009da:	f002 fcc6 	bl	800336a <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 80009de:	2032      	movs	r0, #50	; 0x32
 80009e0:	f002 f818 	bl	8002a14 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 80009e4:	2030      	movs	r0, #48	; 0x30
 80009e6:	f7ff fe8d 	bl	8000704 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 80009ea:	206e      	movs	r0, #110	; 0x6e
 80009ec:	f000 f8ac 	bl	8000b48 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 80009f0:	2030      	movs	r0, #48	; 0x30
 80009f2:	f7ff fe87 	bl	8000704 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 80009f6:	2028      	movs	r0, #40	; 0x28
 80009f8:	f000 f8a6 	bl	8000b48 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 80009fc:	2008      	movs	r0, #8
 80009fe:	f7ff fe81 	bl	8000704 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 8000a02:	206e      	movs	r0, #110	; 0x6e
 8000a04:	f000 f8a0 	bl	8000b48 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fe7b 	bl	8000704 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8000a0e:	200c      	movs	r0, #12
 8000a10:	f002 f800 	bl	8002a14 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000a14:	2006      	movs	r0, #6
 8000a16:	f7ff fe75 	bl	8000704 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f001 fffa 	bl	8002a14 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000a20:	200c      	movs	r0, #12
 8000a22:	f7ff fe6f 	bl	8000704 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000a26:	2001      	movs	r0, #1
 8000a28:	f001 fff4 	bl	8002a14 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff fe69 	bl	8000704 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000a32:	2001      	movs	r0, #1
 8000a34:	f001 ffee 	bl	8002a14 <HAL_Delay>

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40010c00 	.word	0x40010c00

08000a40 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a52:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <MX_ADC1_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a6a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a7e:	f001 ffeb 	bl	8002a58 <HAL_ADC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a88:	f001 f854 	bl	8001b34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_ADC1_Init+0x74>)
 8000a9e:	f002 f8b3 	bl	8002c08 <HAL_ADC_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000aa8:	f001 f844 	bl	8001b34 <Error_Handler>
  }

}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000058c 	.word	0x2000058c
 8000ab8:	40012400 	.word	0x40012400

08000abc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <HAL_ADC_MspInit+0x6c>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d121      	bne.n	8000b20 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_ADC_MspInit+0x70>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b10:	2303      	movs	r3, #3
 8000b12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_ADC_MspInit+0x74>)
 8000b1c:	f002 fab4 	bl	8003088 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40012400 	.word	0x40012400
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010800 	.word	0x40010800

08000b34 <delay_init>:

extern TIM_HandleTypeDef htim3;


void delay_init ()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim3);  // change this according to ur setup
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <delay_init+0x10>)
 8000b3a:	f004 fde2 	bl	8005702 <HAL_TIM_Base_Start>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000674 	.word	0x20000674

08000b48 <delay_us>:

void delay_us (uint16_t delay)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);  // reset the counter
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <delay_us+0x2c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<delay);  // wait for the delay to complete
 8000b5a:	bf00      	nop
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <delay_us+0x2c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d3f9      	bcc.n	8000b5c <delay_us+0x14>
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000674 	.word	0x20000674

08000b78 <init_pantalla>:
#include "ST7920_SERIAL.h"
#include "delay.h"

uint8_t flag_pantalla = 0;

void init_pantalla (void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	delay_init();
 8000b7c:	f7ff ffda 	bl	8000b34 <delay_init>
	ST7920_Init();
 8000b80:	f7ff ff1e 	bl	80009c0 <ST7920_Init>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <set_pantalla>:
//	ST7920_Clear();
//	ST7920_SendString(0, 0, texto);
//	//flag_pantalla = 1;
//}

void set_pantalla (T_PANTALLA p){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	ST7920_Clear();
 8000b92:	f7ff fecd 	bl	8000930 <ST7920_Clear>
	switch (p){
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b15      	cmp	r3, #21
 8000b9a:	f200 8117 	bhi.w	8000dcc <set_pantalla+0x244>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <set_pantalla+0x1c>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000bfd 	.word	0x08000bfd
 8000ba8:	08000c13 	.word	0x08000c13
 8000bac:	08000c29 	.word	0x08000c29
 8000bb0:	08000c3f 	.word	0x08000c3f
 8000bb4:	08000c5f 	.word	0x08000c5f
 8000bb8:	08000c6b 	.word	0x08000c6b
 8000bbc:	08000c77 	.word	0x08000c77
 8000bc0:	08000c8d 	.word	0x08000c8d
 8000bc4:	08000ca3 	.word	0x08000ca3
 8000bc8:	08000cb9 	.word	0x08000cb9
 8000bcc:	08000cd9 	.word	0x08000cd9
 8000bd0:	08000cef 	.word	0x08000cef
 8000bd4:	08000d05 	.word	0x08000d05
 8000bd8:	08000d11 	.word	0x08000d11
 8000bdc:	08000d1d 	.word	0x08000d1d
 8000be0:	08000d33 	.word	0x08000d33
 8000be4:	08000d49 	.word	0x08000d49
 8000be8:	08000d5f 	.word	0x08000d5f
 8000bec:	08000d75 	.word	0x08000d75
 8000bf0:	08000d8b 	.word	0x08000d8b
 8000bf4:	08000da1 	.word	0x08000da1
 8000bf8:	08000db7 	.word	0x08000db7
		case PANT_init_menuPrincipal:
			ST7920_SendString(0, 0, "Estoy en el menu");
 8000bfc:	4a75      	ldr	r2, [pc, #468]	; (8000dd4 <set_pantalla+0x24c>)
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fdcf 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "principal.");
 8000c06:	4a74      	ldr	r2, [pc, #464]	; (8000dd8 <set_pantalla+0x250>)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff fdca 	bl	80007a4 <ST7920_SendString>
		break;
 8000c10:	e0dc      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_sensor_conectado:
			ST7920_SendString(0, 0, "Sensor");
 8000c12:	4a72      	ldr	r2, [pc, #456]	; (8000ddc <set_pantalla+0x254>)
 8000c14:	2100      	movs	r1, #0
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fdc4 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "conectado?");
 8000c1c:	4a70      	ldr	r2, [pc, #448]	; (8000de0 <set_pantalla+0x258>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fdbf 	bl	80007a4 <ST7920_SendString>
		break;
 8000c26:	e0d1      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_llenando_terminar:
			ST7920_SendString(0, 0, "Llenando.");
 8000c28:	4a6e      	ldr	r2, [pc, #440]	; (8000de4 <set_pantalla+0x25c>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fdb9 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "Terminar?");
 8000c32:	4a6d      	ldr	r2, [pc, #436]	; (8000de8 <set_pantalla+0x260>)
 8000c34:	2100      	movs	r1, #0
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff fdb4 	bl	80007a4 <ST7920_SendString>
		break;
 8000c3c:	e0c6      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_init_skimmer:
			ST7920_SendString(0, 0, "COMPRUEBE EL");
 8000c3e:	4a6b      	ldr	r2, [pc, #428]	; (8000dec <set_pantalla+0x264>)
 8000c40:	2100      	movs	r1, #0
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fdae 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "ESTADO DE LA");
 8000c48:	4a69      	ldr	r2, [pc, #420]	; (8000df0 <set_pantalla+0x268>)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff fda9 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(2, 0, "BOMBA");
 8000c52:	4a68      	ldr	r2, [pc, #416]	; (8000df4 <set_pantalla+0x26c>)
 8000c54:	2100      	movs	r1, #0
 8000c56:	2002      	movs	r0, #2
 8000c58:	f7ff fda4 	bl	80007a4 <ST7920_SendString>
		break;
 8000c5c:	e0b6      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_init_hidro:
			ST7920_SendString(0, 0, "LIMITE DE TIEMPO");
 8000c5e:	4a66      	ldr	r2, [pc, #408]	; (8000df8 <set_pantalla+0x270>)
 8000c60:	2100      	movs	r1, #0
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fd9e 	bl	80007a4 <ST7920_SendString>
		break;
 8000c68:	e0b0      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_init_lucesExt:
			ST7920_SendString(0, 0, "LIMITE DE TIEMPO");
 8000c6a:	4a63      	ldr	r2, [pc, #396]	; (8000df8 <set_pantalla+0x270>)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fd98 	bl	80007a4 <ST7920_SendString>
		break;
 8000c74:	e0aa      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_init_setLlenado:
			ST7920_SendString(0, 0, "elije tiempo");
 8000c76:	4a61      	ldr	r2, [pc, #388]	; (8000dfc <set_pantalla+0x274>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff fd92 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "on u off");
 8000c80:	4a5f      	ldr	r2, [pc, #380]	; (8000e00 <set_pantalla+0x278>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff fd8d 	bl	80007a4 <ST7920_SendString>
		break;
 8000c8a:	e09f      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PERIODO_ON_LLENADO:
			ST7920_SendString(0, 0, "defina el tiempo");
 8000c8c:	4a5d      	ldr	r2, [pc, #372]	; (8000e04 <set_pantalla+0x27c>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fd87 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion ON:");
 8000c96:	4a5c      	ldr	r2, [pc, #368]	; (8000e08 <set_pantalla+0x280>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fd82 	bl	80007a4 <ST7920_SendString>
		break;
 8000ca0:	e094      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PERIODO_OFF_LLENADO:
			ST7920_SendString(0, 0, "defina el tiempo");
 8000ca2:	4a58      	ldr	r2, [pc, #352]	; (8000e04 <set_pantalla+0x27c>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fd7c 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion OFF:");
 8000cac:	4a57      	ldr	r2, [pc, #348]	; (8000e0c <set_pantalla+0x284>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fd77 	bl	80007a4 <ST7920_SendString>
		break;
 8000cb6:	e089      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_COMPRUEBE_SENSOR:
			ST7920_SendString(0, 0, "COMPRUEBE EL");
 8000cb8:	4a4c      	ldr	r2, [pc, #304]	; (8000dec <set_pantalla+0x264>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fd71 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "SENSOR Y PULSE");
 8000cc2:	4a53      	ldr	r2, [pc, #332]	; (8000e10 <set_pantalla+0x288>)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff fd6c 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(2, 0, "EL BOTON...");
 8000ccc:	4a51      	ldr	r2, [pc, #324]	; (8000e14 <set_pantalla+0x28c>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff fd67 	bl	80007a4 <ST7920_SendString>
		break;
 8000cd6:	e079      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_CONECTE_SENSOR:
			ST7920_SendString(0, 0, "CONECTE EL");
 8000cd8:	4a4f      	ldr	r2, [pc, #316]	; (8000e18 <set_pantalla+0x290>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fd61 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "SENSOR");
 8000ce2:	4a4e      	ldr	r2, [pc, #312]	; (8000e1c <set_pantalla+0x294>)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fd5c 	bl	80007a4 <ST7920_SendString>
		break;
 8000cec:	e06e      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PREGUNTA_SENSOR:
			ST7920_SendString(0, 0, "Sensor");
 8000cee:	4a3b      	ldr	r2, [pc, #236]	; (8000ddc <set_pantalla+0x254>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fd56 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "conectado?");
 8000cf8:	4a39      	ldr	r2, [pc, #228]	; (8000de0 <set_pantalla+0x258>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff fd51 	bl	80007a4 <ST7920_SendString>
		break;
 8000d02:	e063      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_LLENANDO:
			ST7920_SendString(0, 0, "Llenando...");
 8000d04:	4a46      	ldr	r2, [pc, #280]	; (8000e20 <set_pantalla+0x298>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fd4b 	bl	80007a4 <ST7920_SendString>
		break;
 8000d0e:	e05d      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PILETA_LLENA:
			ST7920_SendString(0, 0, "Pileta llena.");
 8000d10:	4a44      	ldr	r2, [pc, #272]	; (8000e24 <set_pantalla+0x29c>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fd45 	bl	80007a4 <ST7920_SendString>
		break;
 8000d1a:	e057      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_OPCIONES_SKIMMER:
			ST7920_SendString(0, 0, "Elija freecuecia");
 8000d1c:	4a42      	ldr	r2, [pc, #264]	; (8000e28 <set_pantalla+0x2a0>)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fd3f 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "u horario");
 8000d26:	4a41      	ldr	r2, [pc, #260]	; (8000e2c <set_pantalla+0x2a4>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff fd3a 	bl	80007a4 <ST7920_SendString>
		break;
 8000d30:	e04c      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_ELIJE_FRECUENCIA_SKIMMER:
			ST7920_SendString(0, 0, "Elijo timepo ON");
 8000d32:	4a3f      	ldr	r2, [pc, #252]	; (8000e30 <set_pantalla+0x2a8>)
 8000d34:	2100      	movs	r1, #0
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fd34 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "o timepo OFF");
 8000d3c:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <set_pantalla+0x2ac>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fd2f 	bl	80007a4 <ST7920_SendString>
		break;
 8000d46:	e041      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_ELIJE_PROGRAMA_SKIMMER:
			ST7920_SendString(0, 0, "Elijo programa 1");
 8000d48:	4a3b      	ldr	r2, [pc, #236]	; (8000e38 <set_pantalla+0x2b0>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff fd29 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "o programa 2");
 8000d52:	4a3a      	ldr	r2, [pc, #232]	; (8000e3c <set_pantalla+0x2b4>)
 8000d54:	2100      	movs	r1, #0
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fd24 	bl	80007a4 <ST7920_SendString>
		break;
 8000d5c:	e036      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PERIODO_ON_SKIMMER:
			ST7920_SendString(0, 0, "Defina el tiempo");
 8000d5e:	4a38      	ldr	r2, [pc, #224]	; (8000e40 <set_pantalla+0x2b8>)
 8000d60:	2100      	movs	r1, #0
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff fd1e 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion ON:");
 8000d68:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <set_pantalla+0x280>)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff fd19 	bl	80007a4 <ST7920_SendString>
		break;
 8000d72:	e02b      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_PERIODO_OFF_SKIMMER:
			ST7920_SendString(0, 0, "Defina el tiempo");
 8000d74:	4a32      	ldr	r2, [pc, #200]	; (8000e40 <set_pantalla+0x2b8>)
 8000d76:	2100      	movs	r1, #0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fd13 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion OFF:");
 8000d7e:	4a23      	ldr	r2, [pc, #140]	; (8000e0c <set_pantalla+0x284>)
 8000d80:	2100      	movs	r1, #0
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff fd0e 	bl	80007a4 <ST7920_SendString>
		break;
 8000d88:	e020      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_ELIJE_ON_OFF_HORARIO_SKIMMER:
			ST7920_SendString(0, 0, "Elije horario ON");
 8000d8a:	4a2e      	ldr	r2, [pc, #184]	; (8000e44 <set_pantalla+0x2bc>)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fd08 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "u horario OFF");
 8000d94:	4a2c      	ldr	r2, [pc, #176]	; (8000e48 <set_pantalla+0x2c0>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff fd03 	bl	80007a4 <ST7920_SendString>
		break;
 8000d9e:	e015      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_HORARIO_ON_SKIMMER:
			ST7920_SendString(0, 0, "Defina el");
 8000da0:	4a2a      	ldr	r2, [pc, #168]	; (8000e4c <set_pantalla+0x2c4>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fcfd 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "horario ON");
 8000daa:	4a29      	ldr	r2, [pc, #164]	; (8000e50 <set_pantalla+0x2c8>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff fcf8 	bl	80007a4 <ST7920_SendString>
		break;
 8000db4:	e00a      	b.n	8000dcc <set_pantalla+0x244>
		case PANT_HORARIO_OFF_SKIMMER:
			ST7920_SendString(0, 0, "Defina el");
 8000db6:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <set_pantalla+0x2c4>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fcf2 	bl	80007a4 <ST7920_SendString>
			ST7920_SendString(1, 0, "horario OFF");
 8000dc0:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <set_pantalla+0x2cc>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fced 	bl	80007a4 <ST7920_SendString>
		break;
 8000dca:	bf00      	nop

	} //end switch p
//	flag_pantalla = 1;
} //end set_pantalla()
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	080068e0 	.word	0x080068e0
 8000dd8:	080068f4 	.word	0x080068f4
 8000ddc:	08006900 	.word	0x08006900
 8000de0:	08006908 	.word	0x08006908
 8000de4:	08006914 	.word	0x08006914
 8000de8:	08006920 	.word	0x08006920
 8000dec:	0800692c 	.word	0x0800692c
 8000df0:	0800693c 	.word	0x0800693c
 8000df4:	0800694c 	.word	0x0800694c
 8000df8:	08006954 	.word	0x08006954
 8000dfc:	08006968 	.word	0x08006968
 8000e00:	08006978 	.word	0x08006978
 8000e04:	08006984 	.word	0x08006984
 8000e08:	08006998 	.word	0x08006998
 8000e0c:	080069a8 	.word	0x080069a8
 8000e10:	080069bc 	.word	0x080069bc
 8000e14:	080069cc 	.word	0x080069cc
 8000e18:	080069d8 	.word	0x080069d8
 8000e1c:	080069e4 	.word	0x080069e4
 8000e20:	080069ec 	.word	0x080069ec
 8000e24:	080069f8 	.word	0x080069f8
 8000e28:	08006a08 	.word	0x08006a08
 8000e2c:	08006a1c 	.word	0x08006a1c
 8000e30:	08006a28 	.word	0x08006a28
 8000e34:	08006a38 	.word	0x08006a38
 8000e38:	08006a48 	.word	0x08006a48
 8000e3c:	08006a5c 	.word	0x08006a5c
 8000e40:	08006a6c 	.word	0x08006a6c
 8000e44:	08006a80 	.word	0x08006a80
 8000e48:	08006a94 	.word	0x08006a94
 8000e4c:	08006aa4 	.word	0x08006aa4
 8000e50:	08006ab0 	.word	0x08006ab0
 8000e54:	08006abc 	.word	0x08006abc

08000e58 <setTexto_pantalla>:

void setTexto_pantalla (char* texto){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	ST7920_Clear();
 8000e60:	f7ff fd66 	bl	8000930 <ST7920_Clear>
	ST7920_SendString(0, 0, texto);
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	2100      	movs	r1, #0
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff fc9b 	bl	80007a4 <ST7920_SendString>
	//flag_pantalla = 1;
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <pantallaUpdate>:

void pantallaLista(void){
	flag_pantalla = 1;
}

void pantallaUpdate(void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	if (flag_pantalla != 0){
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <pantallaUpdate+0x1c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d004      	beq.n	8000e8e <pantallaUpdate+0x16>
		ST7920_Update();
 8000e84:	f7ff fd4a 	bl	800091c <ST7920_Update>
		flag_pantalla = 0;
 8000e88:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <pantallaUpdate+0x1c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
	}
} //end pantallaUpdate()
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000105 	.word	0x20000105

08000e98 <setProg_hidro>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

T_PROG_OUTPUT setProg_hidro (T_PROG_CMD cmd){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]

	int8_t newNumber = getNumber();
 8000ea2:	f7ff fb55 	bl	8000550 <getNumber>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	73fb      	strb	r3, [r7, #15]

	switch (statusTiempoHidro) {
 8000eaa:	4b7b      	ldr	r3, [pc, #492]	; (8001098 <setProg_hidro+0x200>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	f200 80e3 	bhi.w	800107a <setProg_hidro+0x1e2>
 8000eb4:	a201      	add	r2, pc, #4	; (adr r2, 8000ebc <setProg_hidro+0x24>)
 8000eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eba:	bf00      	nop
 8000ebc:	08000ecd 	.word	0x08000ecd
 8000ec0:	08000f0f 	.word	0x08000f0f
 8000ec4:	08000fad 	.word	0x08000fad
 8000ec8:	08001067 	.word	0x08001067
		case 0: //tiempo en 0.
			if (getStatBoton(IN_AST) == FALL) {
 8000ecc:	200c      	movs	r0, #12
 8000ece:	f7ff faff 	bl	80004d0 <getStatBoton>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d101      	bne.n	8000edc <setProg_hidro+0x44>
//			menuActual = menuActual->menuPadre;
//			HMI_setPage(menuActual->nombre);
				return PROG_IDLE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e0d8      	b.n	800108e <setProg_hidro+0x1f6>
			}

			if (newNumber > 0) {
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f340 80cc 	ble.w	800107e <setProg_hidro+0x1e6>
				tiempoHidroAux = newNumber;
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	4b6b      	ldr	r3, [pc, #428]	; (800109c <setProg_hidro+0x204>)
 8000eee:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000ef0:	4b6a      	ldr	r3, [pc, #424]	; (800109c <setProg_hidro+0x204>)
 8000ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4969      	ldr	r1, [pc, #420]	; (80010a0 <setProg_hidro+0x208>)
 8000efa:	486a      	ldr	r0, [pc, #424]	; (80010a4 <setProg_hidro+0x20c>)
 8000efc:	f005 f8d2 	bl	80060a4 <siprintf>
				setTexto_pantalla(texto);
 8000f00:	4868      	ldr	r0, [pc, #416]	; (80010a4 <setProg_hidro+0x20c>)
 8000f02:	f7ff ffa9 	bl	8000e58 <setTexto_pantalla>
				statusTiempoHidro = 1;
 8000f06:	4b64      	ldr	r3, [pc, #400]	; (8001098 <setProg_hidro+0x200>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000f0c:	e0b7      	b.n	800107e <setProg_hidro+0x1e6>
		case 1: //lote entre 1 y 9.
			if (getStatBoton(IN_AST) == FALL) {
 8000f0e:	200c      	movs	r0, #12
 8000f10:	f7ff fade 	bl	80004d0 <getStatBoton>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d111      	bne.n	8000f3e <setProg_hidro+0xa6>
				tiempoHidroAux = 0;
 8000f1a:	4b60      	ldr	r3, [pc, #384]	; (800109c <setProg_hidro+0x204>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000f20:	4b5e      	ldr	r3, [pc, #376]	; (800109c <setProg_hidro+0x204>)
 8000f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f26:	461a      	mov	r2, r3
 8000f28:	495d      	ldr	r1, [pc, #372]	; (80010a0 <setProg_hidro+0x208>)
 8000f2a:	485e      	ldr	r0, [pc, #376]	; (80010a4 <setProg_hidro+0x20c>)
 8000f2c:	f005 f8ba 	bl	80060a4 <siprintf>
				setTexto_pantalla(texto);
 8000f30:	485c      	ldr	r0, [pc, #368]	; (80010a4 <setProg_hidro+0x20c>)
 8000f32:	f7ff ff91 	bl	8000e58 <setTexto_pantalla>
				statusTiempoHidro = 0;
 8000f36:	4b58      	ldr	r3, [pc, #352]	; (8001098 <setProg_hidro+0x200>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
				break;
 8000f3c:	e0a6      	b.n	800108c <setProg_hidro+0x1f4>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8000f3e:	200e      	movs	r0, #14
 8000f40:	f7ff fac6 	bl	80004d0 <getStatBoton>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d103      	bne.n	8000f52 <setProg_hidro+0xba>
				statusTiempoHidro = 3;
 8000f4a:	4b53      	ldr	r3, [pc, #332]	; (8001098 <setProg_hidro+0x200>)
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	701a      	strb	r2, [r3, #0]
				break;
 8000f50:	e09c      	b.n	800108c <setProg_hidro+0x1f4>
			}

			if (newNumber != -1) {
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f5a:	f000 8092 	beq.w	8001082 <setProg_hidro+0x1ea>
				tiempoHidroAux *= 10;
 8000f5e:	4b4f      	ldr	r3, [pc, #316]	; (800109c <setProg_hidro+0x204>)
 8000f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	4b4a      	ldr	r3, [pc, #296]	; (800109c <setProg_hidro+0x204>)
 8000f74:	801a      	strh	r2, [r3, #0]
				tiempoHidroAux += newNumber;
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <setProg_hidro+0x204>)
 8000f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4413      	add	r3, r2
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b44      	ldr	r3, [pc, #272]	; (800109c <setProg_hidro+0x204>)
 8000f8c:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000f8e:	4b43      	ldr	r3, [pc, #268]	; (800109c <setProg_hidro+0x204>)
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4942      	ldr	r1, [pc, #264]	; (80010a0 <setProg_hidro+0x208>)
 8000f98:	4842      	ldr	r0, [pc, #264]	; (80010a4 <setProg_hidro+0x20c>)
 8000f9a:	f005 f883 	bl	80060a4 <siprintf>
				setTexto_pantalla(texto);
 8000f9e:	4841      	ldr	r0, [pc, #260]	; (80010a4 <setProg_hidro+0x20c>)
 8000fa0:	f7ff ff5a 	bl	8000e58 <setTexto_pantalla>
				statusTiempoHidro = 2;
 8000fa4:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <setProg_hidro+0x200>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	701a      	strb	r2, [r3, #0]
				break;
 8000faa:	e06f      	b.n	800108c <setProg_hidro+0x1f4>
			}

		break;
		case 2: //lote en 10 o más...
			if (getStatBoton(IN_AST) == FALL) {
 8000fac:	200c      	movs	r0, #12
 8000fae:	f7ff fa8f 	bl	80004d0 <getStatBoton>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d11e      	bne.n	8000ff6 <setProg_hidro+0x15e>
				tiempoHidroAux /= 10;
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <setProg_hidro+0x204>)
 8000fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbe:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <setProg_hidro+0x210>)
 8000fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc4:	1092      	asrs	r2, r2, #2
 8000fc6:	17db      	asrs	r3, r3, #31
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b33      	ldr	r3, [pc, #204]	; (800109c <setProg_hidro+0x204>)
 8000fce:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <setProg_hidro+0x204>)
 8000fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4931      	ldr	r1, [pc, #196]	; (80010a0 <setProg_hidro+0x208>)
 8000fda:	4832      	ldr	r0, [pc, #200]	; (80010a4 <setProg_hidro+0x20c>)
 8000fdc:	f005 f862 	bl	80060a4 <siprintf>
				setTexto_pantalla(texto);
 8000fe0:	4830      	ldr	r0, [pc, #192]	; (80010a4 <setProg_hidro+0x20c>)
 8000fe2:	f7ff ff39 	bl	8000e58 <setTexto_pantalla>
				if (statusTiempoHidro < 10) {
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <setProg_hidro+0x200>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b09      	cmp	r3, #9
 8000fec:	d84b      	bhi.n	8001086 <setProg_hidro+0x1ee>
					statusTiempoHidro = 1;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <setProg_hidro+0x200>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000ff4:	e047      	b.n	8001086 <setProg_hidro+0x1ee>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8000ff6:	200e      	movs	r0, #14
 8000ff8:	f7ff fa6a 	bl	80004d0 <getStatBoton>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d103      	bne.n	800100a <setProg_hidro+0x172>
				statusTiempoHidro = 3;
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <setProg_hidro+0x200>)
 8001004:	2203      	movs	r2, #3
 8001006:	701a      	strb	r2, [r3, #0]
				break;
 8001008:	e040      	b.n	800108c <setProg_hidro+0x1f4>
			}

			if (tiempoHidroAux < 120) {
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <setProg_hidro+0x204>)
 800100c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001010:	2b77      	cmp	r3, #119	; 0x77
 8001012:	dc3a      	bgt.n	800108a <setProg_hidro+0x1f2>
				if (newNumber != -1) {
 8001014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800101c:	d035      	beq.n	800108a <setProg_hidro+0x1f2>
					tiempoHidroAux *= 10;
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <setProg_hidro+0x204>)
 8001020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001024:	b29b      	uxth	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	b29b      	uxth	r3, r3
 8001030:	b21a      	sxth	r2, r3
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <setProg_hidro+0x204>)
 8001034:	801a      	strh	r2, [r3, #0]
					tiempoHidroAux += newNumber;
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <setProg_hidro+0x204>)
 800103e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4413      	add	r3, r2
 8001046:	b29b      	uxth	r3, r3
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <setProg_hidro+0x204>)
 800104c:	801a      	strh	r2, [r3, #0]
					sprintf(texto, "%d min.", tiempoHidroAux);
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <setProg_hidro+0x204>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	461a      	mov	r2, r3
 8001056:	4912      	ldr	r1, [pc, #72]	; (80010a0 <setProg_hidro+0x208>)
 8001058:	4812      	ldr	r0, [pc, #72]	; (80010a4 <setProg_hidro+0x20c>)
 800105a:	f005 f823 	bl	80060a4 <siprintf>
					setTexto_pantalla(texto);
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <setProg_hidro+0x20c>)
 8001060:	f7ff fefa 	bl	8000e58 <setTexto_pantalla>
					break;
 8001064:	e012      	b.n	800108c <setProg_hidro+0x1f4>
			}

		break;
		case 3: //retorna y graba el valor

			tiempoHidro = tiempoHidroAux;
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <setProg_hidro+0x204>)
 8001068:	f9b3 2000 	ldrsh.w	r2, [r3]
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <setProg_hidro+0x214>)
 800106e:	801a      	strh	r2, [r3, #0]
			statusTiempoHidro = 0;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <setProg_hidro+0x200>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]

			return PROG_FINISHED;
 8001076:	2303      	movs	r3, #3
 8001078:	e009      	b.n	800108e <setProg_hidro+0x1f6>
		break;

		default:
			return PROG_ERROR;
 800107a:	2300      	movs	r3, #0
 800107c:	e007      	b.n	800108e <setProg_hidro+0x1f6>
		break;
 800107e:	bf00      	nop
 8001080:	e004      	b.n	800108c <setProg_hidro+0x1f4>
		break;
 8001082:	bf00      	nop
 8001084:	e002      	b.n	800108c <setProg_hidro+0x1f4>
				break;
 8001086:	bf00      	nop
 8001088:	e000      	b.n	800108c <setProg_hidro+0x1f4>
		break;
 800108a:	bf00      	nop
		break;
	} //end switch statusTiempoHidro.

	return PROG_BUSY;
 800108c:	2302      	movs	r3, #2

} //end setProg_hidro()
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000010a 	.word	0x2000010a
 800109c:	20000106 	.word	0x20000106
 80010a0:	08006ac8 	.word	0x08006ac8
 80010a4:	200005c0 	.word	0x200005c0
 80010a8:	66666667 	.word	0x66666667
 80010ac:	20000108 	.word	0x20000108

080010b0 <setProg_luz>:
T_PROG_OUTPUT setProg_skimmer (T_PROG_CMD cmd){
	__NOP();
} //end setProg_skimmer()


T_PROG_OUTPUT setProg_luz (T_PROG_CMD cmd){
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	__NOP();
 80010ba:	bf00      	nop
} //end setProg_luz()
 80010bc:	bf00      	nop
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <runProg_hidro>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

T_PROG_OUTPUT runProg_hidro (T_PROG_CMD cmd){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]

	switch (cmd) {
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d005      	beq.n	80010e4 <runProg_hidro+0x1c>
 80010d8:	2b03      	cmp	r3, #3
 80010da:	f000 80a7 	beq.w	800122c <runProg_hidro+0x164>
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d051      	beq.n	8001186 <runProg_hidro+0xbe>
//			return PROG_FINISHED;
			status_progHidro = PROG_IDLE;
		break;

		default:
		break;
 80010e2:	e0b2      	b.n	800124a <runProg_hidro+0x182>
			setOutput(OUT_rele_jet, 1); //logica positiva
 80010e4:	2101      	movs	r1, #1
 80010e6:	2004      	movs	r0, #4
 80010e8:	f7ff fa8c 	bl	8000604 <setOutput>
			set_led(OUT_led_jet, TITILA_LENTO);
 80010ec:	2102      	movs	r1, #2
 80010ee:	200a      	movs	r0, #10
 80010f0:	f000 fc04 	bl	80018fc <set_led>
			fecha_hidro = get_fecha();
 80010f4:	f000 fb8e 	bl	8001814 <get_fecha>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <runProg_hidro+0x190>)
 80010fc:	4611      	mov	r1, r2
 80010fe:	7019      	strb	r1, [r3, #0]
 8001100:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001104:	7059      	strb	r1, [r3, #1]
 8001106:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800110a:	7099      	strb	r1, [r3, #2]
 800110c:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8001110:	70da      	strb	r2, [r3, #3]
			hora_hidro = get_hora();
 8001112:	f000 fb77 	bl	8001804 <get_hora>
 8001116:	4602      	mov	r2, r0
 8001118:	4b50      	ldr	r3, [pc, #320]	; (800125c <runProg_hidro+0x194>)
 800111a:	4611      	mov	r1, r2
 800111c:	7019      	strb	r1, [r3, #0]
 800111e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001122:	7059      	strb	r1, [r3, #1]
 8001124:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001128:	709a      	strb	r2, [r3, #2]
			hora_hidro.Minutes += tiempoHidro;
 800112a:	4b4c      	ldr	r3, [pc, #304]	; (800125c <runProg_hidro+0x194>)
 800112c:	785a      	ldrb	r2, [r3, #1]
 800112e:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <runProg_hidro+0x198>)
 8001130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b48      	ldr	r3, [pc, #288]	; (800125c <runProg_hidro+0x194>)
 800113c:	705a      	strb	r2, [r3, #1]
			if (hora_hidro.Minutes > 59){
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <runProg_hidro+0x194>)
 8001140:	785b      	ldrb	r3, [r3, #1]
 8001142:	2b3b      	cmp	r3, #59	; 0x3b
 8001144:	d91b      	bls.n	800117e <runProg_hidro+0xb6>
				hora_hidro.Minutes -= 59;
 8001146:	4b45      	ldr	r3, [pc, #276]	; (800125c <runProg_hidro+0x194>)
 8001148:	785b      	ldrb	r3, [r3, #1]
 800114a:	3b3b      	subs	r3, #59	; 0x3b
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b43      	ldr	r3, [pc, #268]	; (800125c <runProg_hidro+0x194>)
 8001150:	705a      	strb	r2, [r3, #1]
				hora_hidro.Hours++;
 8001152:	4b42      	ldr	r3, [pc, #264]	; (800125c <runProg_hidro+0x194>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b40      	ldr	r3, [pc, #256]	; (800125c <runProg_hidro+0x194>)
 800115c:	701a      	strb	r2, [r3, #0]
				if (hora_hidro.Hours > 23){
 800115e:	4b3f      	ldr	r3, [pc, #252]	; (800125c <runProg_hidro+0x194>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b17      	cmp	r3, #23
 8001164:	d90b      	bls.n	800117e <runProg_hidro+0xb6>
					hora_hidro.Hours -= 23;
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <runProg_hidro+0x194>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	3b17      	subs	r3, #23
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b3b      	ldr	r3, [pc, #236]	; (800125c <runProg_hidro+0x194>)
 8001170:	701a      	strb	r2, [r3, #0]
					fecha_hidro.Date++;
 8001172:	4b39      	ldr	r3, [pc, #228]	; (8001258 <runProg_hidro+0x190>)
 8001174:	789b      	ldrb	r3, [r3, #2]
 8001176:	3301      	adds	r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <runProg_hidro+0x190>)
 800117c:	709a      	strb	r2, [r3, #2]
			status_progHidro = PROG_BUSY;
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <runProg_hidro+0x19c>)
 8001180:	2202      	movs	r2, #2
 8001182:	701a      	strb	r2, [r3, #0]
		break;
 8001184:	e061      	b.n	800124a <runProg_hidro+0x182>
			if (status_progHidro == PROG_IDLE){
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <runProg_hidro+0x19c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d05a      	beq.n	8001244 <runProg_hidro+0x17c>
			auxFecha = get_fecha();
 800118e:	f000 fb41 	bl	8001814 <get_fecha>
 8001192:	4602      	mov	r2, r0
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <runProg_hidro+0x1a0>)
 8001196:	4611      	mov	r1, r2
 8001198:	7019      	strb	r1, [r3, #0]
 800119a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800119e:	7059      	strb	r1, [r3, #1]
 80011a0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80011a4:	7099      	strb	r1, [r3, #2]
 80011a6:	f3c2 6207 	ubfx	r2, r2, #24, #8
 80011aa:	70da      	strb	r2, [r3, #3]
			auxHora = get_hora();
 80011ac:	f000 fb2a 	bl	8001804 <get_hora>
 80011b0:	4602      	mov	r2, r0
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <runProg_hidro+0x1a4>)
 80011b4:	4611      	mov	r1, r2
 80011b6:	7019      	strb	r1, [r3, #0]
 80011b8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80011bc:	7059      	strb	r1, [r3, #1]
 80011be:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80011c2:	709a      	strb	r2, [r3, #2]
			if (fecha_hidro.Date < auxFecha.Date){
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <runProg_hidro+0x190>)
 80011c6:	789a      	ldrb	r2, [r3, #2]
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <runProg_hidro+0x1a0>)
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d20a      	bcs.n	80011e6 <runProg_hidro+0x11e>
				setOutput(OUT_rele_jet, 0); //logica positiva
 80011d0:	2100      	movs	r1, #0
 80011d2:	2004      	movs	r0, #4
 80011d4:	f7ff fa16 	bl	8000604 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 80011d8:	2100      	movs	r1, #0
 80011da:	200a      	movs	r0, #10
 80011dc:	f000 fb8e 	bl	80018fc <set_led>
				status_progHidro = PROG_IDLE;
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <runProg_hidro+0x19c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
			if (hora_hidro.Hours < auxHora.Hours){
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <runProg_hidro+0x194>)
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <runProg_hidro+0x1a4>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d20a      	bcs.n	8001208 <runProg_hidro+0x140>
				setOutput(OUT_rele_jet, 0); //logica positiva
 80011f2:	2100      	movs	r1, #0
 80011f4:	2004      	movs	r0, #4
 80011f6:	f7ff fa05 	bl	8000604 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 80011fa:	2100      	movs	r1, #0
 80011fc:	200a      	movs	r0, #10
 80011fe:	f000 fb7d 	bl	80018fc <set_led>
				status_progHidro = PROG_IDLE;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <runProg_hidro+0x19c>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
			if (hora_hidro.Minutes < auxHora.Minutes){
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <runProg_hidro+0x194>)
 800120a:	785a      	ldrb	r2, [r3, #1]
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <runProg_hidro+0x1a4>)
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	429a      	cmp	r2, r3
 8001212:	d219      	bcs.n	8001248 <runProg_hidro+0x180>
				setOutput(OUT_rele_jet, 0); //logica positiva
 8001214:	2100      	movs	r1, #0
 8001216:	2004      	movs	r0, #4
 8001218:	f7ff f9f4 	bl	8000604 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 800121c:	2100      	movs	r1, #0
 800121e:	200a      	movs	r0, #10
 8001220:	f000 fb6c 	bl	80018fc <set_led>
				status_progHidro = PROG_IDLE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <runProg_hidro+0x19c>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
		break;
 800122a:	e00d      	b.n	8001248 <runProg_hidro+0x180>
			setOutput(OUT_rele_jet, 0); //logica positiva
 800122c:	2100      	movs	r1, #0
 800122e:	2004      	movs	r0, #4
 8001230:	f7ff f9e8 	bl	8000604 <setOutput>
			set_led(OUT_led_jet, APAGADO);
 8001234:	2100      	movs	r1, #0
 8001236:	200a      	movs	r0, #10
 8001238:	f000 fb60 	bl	80018fc <set_led>
			status_progHidro = PROG_IDLE;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <runProg_hidro+0x19c>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
		break;
 8001242:	e002      	b.n	800124a <runProg_hidro+0x182>
				break;
 8001244:	bf00      	nop
 8001246:	e000      	b.n	800124a <runProg_hidro+0x182>
		break;
 8001248:	bf00      	nop
	} //end switch progCmd_hidro

	return status_progHidro;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <runProg_hidro+0x19c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
} //end runProg_hidro()
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200005bc 	.word	0x200005bc
 800125c:	200005f0 	.word	0x200005f0
 8001260:	20000108 	.word	0x20000108
 8001264:	200005e8 	.word	0x200005e8
 8001268:	200005ec 	.word	0x200005ec
 800126c:	200005f4 	.word	0x200005f4

08001270 <runProg_llenado>:

T_PROG_OUTPUT runProg_llenado (T_PROG_CMD cmd){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]

	switch (cmd) {
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d005      	beq.n	800128c <runProg_llenado+0x1c>
 8001280:	2b03      	cmp	r3, #3
 8001282:	f000 8194 	beq.w	80015ae <runProg_llenado+0x33e>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d054      	beq.n	8001334 <runProg_llenado+0xc4>

			status_progLlenado = PROG_IDLE;
		break;

		default:
		break;
 800128a:	e19d      	b.n	80015c8 <runProg_llenado+0x358>
			setOutput(OUT_rele_napa, 1); //logica positiva
 800128c:	2101      	movs	r1, #1
 800128e:	2003      	movs	r0, #3
 8001290:	f7ff f9b8 	bl	8000604 <setOutput>
			set_led(OUT_led_napa, TITILA_LENTO);
 8001294:	2102      	movs	r1, #2
 8001296:	2009      	movs	r0, #9
 8001298:	f000 fb30 	bl	80018fc <set_led>
			flag_bombaNapa = 1;
 800129c:	4b79      	ldr	r3, [pc, #484]	; (8001484 <runProg_llenado+0x214>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
			fecha_llenadoOn = get_fecha();
 80012a2:	f000 fab7 	bl	8001814 <get_fecha>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b77      	ldr	r3, [pc, #476]	; (8001488 <runProg_llenado+0x218>)
 80012aa:	4611      	mov	r1, r2
 80012ac:	7019      	strb	r1, [r3, #0]
 80012ae:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80012b2:	7059      	strb	r1, [r3, #1]
 80012b4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80012b8:	7099      	strb	r1, [r3, #2]
 80012ba:	f3c2 6207 	ubfx	r2, r2, #24, #8
 80012be:	70da      	strb	r2, [r3, #3]
			hora_llenadoOn = get_hora();
 80012c0:	f000 faa0 	bl	8001804 <get_hora>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b71      	ldr	r3, [pc, #452]	; (800148c <runProg_llenado+0x21c>)
 80012c8:	4611      	mov	r1, r2
 80012ca:	7019      	strb	r1, [r3, #0]
 80012cc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80012d0:	7059      	strb	r1, [r3, #1]
 80012d2:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80012d6:	709a      	strb	r2, [r3, #2]
			hora_llenadoOn.Minutes += tiempoLlenado_ON;
 80012d8:	4b6c      	ldr	r3, [pc, #432]	; (800148c <runProg_llenado+0x21c>)
 80012da:	785a      	ldrb	r2, [r3, #1]
 80012dc:	4b6c      	ldr	r3, [pc, #432]	; (8001490 <runProg_llenado+0x220>)
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b68      	ldr	r3, [pc, #416]	; (800148c <runProg_llenado+0x21c>)
 80012ea:	705a      	strb	r2, [r3, #1]
			if (hora_llenadoOn.Minutes > 59) {
 80012ec:	4b67      	ldr	r3, [pc, #412]	; (800148c <runProg_llenado+0x21c>)
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	2b3b      	cmp	r3, #59	; 0x3b
 80012f2:	d91b      	bls.n	800132c <runProg_llenado+0xbc>
				hora_llenadoOn.Minutes -= 59;
 80012f4:	4b65      	ldr	r3, [pc, #404]	; (800148c <runProg_llenado+0x21c>)
 80012f6:	785b      	ldrb	r3, [r3, #1]
 80012f8:	3b3b      	subs	r3, #59	; 0x3b
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b63      	ldr	r3, [pc, #396]	; (800148c <runProg_llenado+0x21c>)
 80012fe:	705a      	strb	r2, [r3, #1]
				hora_llenadoOn.Hours++;
 8001300:	4b62      	ldr	r3, [pc, #392]	; (800148c <runProg_llenado+0x21c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b60      	ldr	r3, [pc, #384]	; (800148c <runProg_llenado+0x21c>)
 800130a:	701a      	strb	r2, [r3, #0]
				if (hora_llenadoOn.Hours > 23) {
 800130c:	4b5f      	ldr	r3, [pc, #380]	; (800148c <runProg_llenado+0x21c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b17      	cmp	r3, #23
 8001312:	d90b      	bls.n	800132c <runProg_llenado+0xbc>
					hora_llenadoOn.Hours -= 23;
 8001314:	4b5d      	ldr	r3, [pc, #372]	; (800148c <runProg_llenado+0x21c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	3b17      	subs	r3, #23
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b5b      	ldr	r3, [pc, #364]	; (800148c <runProg_llenado+0x21c>)
 800131e:	701a      	strb	r2, [r3, #0]
					fecha_llenadoOn.Date++;
 8001320:	4b59      	ldr	r3, [pc, #356]	; (8001488 <runProg_llenado+0x218>)
 8001322:	789b      	ldrb	r3, [r3, #2]
 8001324:	3301      	adds	r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b57      	ldr	r3, [pc, #348]	; (8001488 <runProg_llenado+0x218>)
 800132a:	709a      	strb	r2, [r3, #2]
			status_progLlenado = PROG_BUSY;
 800132c:	4b59      	ldr	r3, [pc, #356]	; (8001494 <runProg_llenado+0x224>)
 800132e:	2202      	movs	r2, #2
 8001330:	701a      	strb	r2, [r3, #0]
		break;
 8001332:	e149      	b.n	80015c8 <runProg_llenado+0x358>
			if (status_progLlenado == PROG_IDLE) {
 8001334:	4b57      	ldr	r3, [pc, #348]	; (8001494 <runProg_llenado+0x224>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	f000 8144 	beq.w	80015c6 <runProg_llenado+0x356>
			auxFecha = get_fecha();
 800133e:	f000 fa69 	bl	8001814 <get_fecha>
 8001342:	4602      	mov	r2, r0
 8001344:	4b54      	ldr	r3, [pc, #336]	; (8001498 <runProg_llenado+0x228>)
 8001346:	4611      	mov	r1, r2
 8001348:	7019      	strb	r1, [r3, #0]
 800134a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800134e:	7059      	strb	r1, [r3, #1]
 8001350:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8001354:	7099      	strb	r1, [r3, #2]
 8001356:	f3c2 6207 	ubfx	r2, r2, #24, #8
 800135a:	70da      	strb	r2, [r3, #3]
			auxHora = get_hora();
 800135c:	f000 fa52 	bl	8001804 <get_hora>
 8001360:	4602      	mov	r2, r0
 8001362:	4b4e      	ldr	r3, [pc, #312]	; (800149c <runProg_llenado+0x22c>)
 8001364:	4611      	mov	r1, r2
 8001366:	7019      	strb	r1, [r3, #0]
 8001368:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800136c:	7059      	strb	r1, [r3, #1]
 800136e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001372:	709a      	strb	r2, [r3, #2]
			switch (flag_bombaNapa) {
 8001374:	4b43      	ldr	r3, [pc, #268]	; (8001484 <runProg_llenado+0x214>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8097 	beq.w	80014ac <runProg_llenado+0x23c>
 800137e:	2b01      	cmp	r3, #1
 8001380:	d000      	beq.n	8001384 <runProg_llenado+0x114>
				break;
 8001382:	e112      	b.n	80015aa <runProg_llenado+0x33a>
					if (fecha_llenadoOn.Date < auxFecha.Date) {
 8001384:	4b40      	ldr	r3, [pc, #256]	; (8001488 <runProg_llenado+0x218>)
 8001386:	789a      	ldrb	r2, [r3, #2]
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <runProg_llenado+0x228>)
 800138a:	789b      	ldrb	r3, [r3, #2]
 800138c:	429a      	cmp	r2, r3
 800138e:	d20a      	bcs.n	80013a6 <runProg_llenado+0x136>
						setOutput(OUT_rele_napa, 0); //logica positiva
 8001390:	2100      	movs	r1, #0
 8001392:	2003      	movs	r0, #3
 8001394:	f7ff f936 	bl	8000604 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 8001398:	2101      	movs	r1, #1
 800139a:	2009      	movs	r0, #9
 800139c:	f000 faae 	bl	80018fc <set_led>
						flag_bombaNapa = 0;
 80013a0:	4b38      	ldr	r3, [pc, #224]	; (8001484 <runProg_llenado+0x214>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOn.Hours < auxHora.Hours) {
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <runProg_llenado+0x21c>)
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	4b3c      	ldr	r3, [pc, #240]	; (800149c <runProg_llenado+0x22c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d20a      	bcs.n	80013c8 <runProg_llenado+0x158>
						setOutput(OUT_rele_napa, 0); //logica positiva
 80013b2:	2100      	movs	r1, #0
 80013b4:	2003      	movs	r0, #3
 80013b6:	f7ff f925 	bl	8000604 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 80013ba:	2101      	movs	r1, #1
 80013bc:	2009      	movs	r0, #9
 80013be:	f000 fa9d 	bl	80018fc <set_led>
						flag_bombaNapa = 0;
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <runProg_llenado+0x214>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOn.Minutes < auxHora.Minutes) {
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <runProg_llenado+0x21c>)
 80013ca:	785a      	ldrb	r2, [r3, #1]
 80013cc:	4b33      	ldr	r3, [pc, #204]	; (800149c <runProg_llenado+0x22c>)
 80013ce:	785b      	ldrb	r3, [r3, #1]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d20a      	bcs.n	80013ea <runProg_llenado+0x17a>
						setOutput(OUT_rele_napa, 0); //logica positiva
 80013d4:	2100      	movs	r1, #0
 80013d6:	2003      	movs	r0, #3
 80013d8:	f7ff f914 	bl	8000604 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 80013dc:	2101      	movs	r1, #1
 80013de:	2009      	movs	r0, #9
 80013e0:	f000 fa8c 	bl	80018fc <set_led>
						flag_bombaNapa = 0;
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <runProg_llenado+0x214>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
					if (!flag_bombaNapa) {
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <runProg_llenado+0x214>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 80d9 	bne.w	80015a6 <runProg_llenado+0x336>
						fecha_llenadoOff = get_fecha();
 80013f4:	f000 fa0e 	bl	8001814 <get_fecha>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <runProg_llenado+0x230>)
 80013fc:	4611      	mov	r1, r2
 80013fe:	7019      	strb	r1, [r3, #0]
 8001400:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001404:	7059      	strb	r1, [r3, #1]
 8001406:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800140a:	7099      	strb	r1, [r3, #2]
 800140c:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8001410:	70da      	strb	r2, [r3, #3]
						hora_llenadoOff = get_hora();
 8001412:	f000 f9f7 	bl	8001804 <get_hora>
 8001416:	4602      	mov	r2, r0
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <runProg_llenado+0x234>)
 800141a:	4611      	mov	r1, r2
 800141c:	7019      	strb	r1, [r3, #0]
 800141e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001422:	7059      	strb	r1, [r3, #1]
 8001424:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001428:	709a      	strb	r2, [r3, #2]
						hora_llenadoOff.Minutes += tiempoLlenado_OFF;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <runProg_llenado+0x234>)
 800142c:	785a      	ldrb	r2, [r3, #1]
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <runProg_llenado+0x238>)
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4413      	add	r3, r2
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <runProg_llenado+0x234>)
 800143c:	705a      	strb	r2, [r3, #1]
						if (hora_llenadoOff.Minutes > 59) {
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <runProg_llenado+0x234>)
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	2b3b      	cmp	r3, #59	; 0x3b
 8001444:	f240 80af 	bls.w	80015a6 <runProg_llenado+0x336>
							hora_llenadoOff.Minutes -= 59;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <runProg_llenado+0x234>)
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	3b3b      	subs	r3, #59	; 0x3b
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <runProg_llenado+0x234>)
 8001452:	705a      	strb	r2, [r3, #1]
							hora_llenadoOff.Hours++;
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <runProg_llenado+0x234>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <runProg_llenado+0x234>)
 800145e:	701a      	strb	r2, [r3, #0]
							if (hora_llenadoOff.Hours > 23) {
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <runProg_llenado+0x234>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b17      	cmp	r3, #23
 8001466:	f240 809e 	bls.w	80015a6 <runProg_llenado+0x336>
								hora_llenadoOff.Hours -= 23;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <runProg_llenado+0x234>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	3b17      	subs	r3, #23
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <runProg_llenado+0x234>)
 8001474:	701a      	strb	r2, [r3, #0]
								fecha_llenadoOff.Date++;
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <runProg_llenado+0x230>)
 8001478:	789b      	ldrb	r3, [r3, #2]
 800147a:	3301      	adds	r3, #1
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <runProg_llenado+0x230>)
 8001480:	709a      	strb	r2, [r3, #2]
				break;
 8001482:	e090      	b.n	80015a6 <runProg_llenado+0x336>
 8001484:	20000110 	.word	0x20000110
 8001488:	200005e4 	.word	0x200005e4
 800148c:	200005d4 	.word	0x200005d4
 8001490:	2000010c 	.word	0x2000010c
 8001494:	200005e0 	.word	0x200005e0
 8001498:	200005ec 	.word	0x200005ec
 800149c:	200005f4 	.word	0x200005f4
 80014a0:	200005dc 	.word	0x200005dc
 80014a4:	200005d8 	.word	0x200005d8
 80014a8:	2000010e 	.word	0x2000010e
					if (fecha_llenadoOff.Date < auxFecha.Date) {
 80014ac:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <runProg_llenado+0x37c>)
 80014ae:	789a      	ldrb	r2, [r3, #2]
 80014b0:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <runProg_llenado+0x380>)
 80014b2:	789b      	ldrb	r3, [r3, #2]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d20a      	bcs.n	80014ce <runProg_llenado+0x25e>
						setOutput(OUT_rele_napa, 1); //logica positiva
 80014b8:	2101      	movs	r1, #1
 80014ba:	2003      	movs	r0, #3
 80014bc:	f7ff f8a2 	bl	8000604 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 80014c0:	2102      	movs	r1, #2
 80014c2:	2009      	movs	r0, #9
 80014c4:	f000 fa1a 	bl	80018fc <set_led>
						flag_bombaNapa = 1;
 80014c8:	4b4a      	ldr	r3, [pc, #296]	; (80015f4 <runProg_llenado+0x384>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOff.Hours < auxHora.Hours) {
 80014ce:	4b4a      	ldr	r3, [pc, #296]	; (80015f8 <runProg_llenado+0x388>)
 80014d0:	781a      	ldrb	r2, [r3, #0]
 80014d2:	4b4a      	ldr	r3, [pc, #296]	; (80015fc <runProg_llenado+0x38c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d20a      	bcs.n	80014f0 <runProg_llenado+0x280>
						setOutput(OUT_rele_napa, 1); //logica positiva
 80014da:	2101      	movs	r1, #1
 80014dc:	2003      	movs	r0, #3
 80014de:	f7ff f891 	bl	8000604 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 80014e2:	2102      	movs	r1, #2
 80014e4:	2009      	movs	r0, #9
 80014e6:	f000 fa09 	bl	80018fc <set_led>
						flag_bombaNapa = 1;
 80014ea:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <runProg_llenado+0x384>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOff.Minutes < auxHora.Minutes) {
 80014f0:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <runProg_llenado+0x388>)
 80014f2:	785a      	ldrb	r2, [r3, #1]
 80014f4:	4b41      	ldr	r3, [pc, #260]	; (80015fc <runProg_llenado+0x38c>)
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d20a      	bcs.n	8001512 <runProg_llenado+0x2a2>
						setOutput(OUT_rele_napa, 1); //logica positiva
 80014fc:	2101      	movs	r1, #1
 80014fe:	2003      	movs	r0, #3
 8001500:	f7ff f880 	bl	8000604 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 8001504:	2102      	movs	r1, #2
 8001506:	2009      	movs	r0, #9
 8001508:	f000 f9f8 	bl	80018fc <set_led>
						flag_bombaNapa = 1;
 800150c:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <runProg_llenado+0x384>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
					if (flag_bombaNapa != 0) {
 8001512:	4b38      	ldr	r3, [pc, #224]	; (80015f4 <runProg_llenado+0x384>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d047      	beq.n	80015aa <runProg_llenado+0x33a>
						fecha_llenadoOn = get_fecha();
 800151a:	f000 f97b 	bl	8001814 <get_fecha>
 800151e:	4602      	mov	r2, r0
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <runProg_llenado+0x390>)
 8001522:	4611      	mov	r1, r2
 8001524:	7019      	strb	r1, [r3, #0]
 8001526:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800152a:	7059      	strb	r1, [r3, #1]
 800152c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8001530:	7099      	strb	r1, [r3, #2]
 8001532:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8001536:	70da      	strb	r2, [r3, #3]
						hora_llenadoOn = get_hora();
 8001538:	f000 f964 	bl	8001804 <get_hora>
 800153c:	4602      	mov	r2, r0
 800153e:	4b31      	ldr	r3, [pc, #196]	; (8001604 <runProg_llenado+0x394>)
 8001540:	4611      	mov	r1, r2
 8001542:	7019      	strb	r1, [r3, #0]
 8001544:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001548:	7059      	strb	r1, [r3, #1]
 800154a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800154e:	709a      	strb	r2, [r3, #2]
						hora_llenadoOn.Minutes += tiempoLlenado_ON;
 8001550:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <runProg_llenado+0x394>)
 8001552:	785a      	ldrb	r2, [r3, #1]
 8001554:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <runProg_llenado+0x398>)
 8001556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <runProg_llenado+0x394>)
 8001562:	705a      	strb	r2, [r3, #1]
						if (hora_llenadoOn.Minutes > 59) {
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <runProg_llenado+0x394>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	2b3b      	cmp	r3, #59	; 0x3b
 800156a:	d91e      	bls.n	80015aa <runProg_llenado+0x33a>
							hora_llenadoOn.Minutes -= 59;
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <runProg_llenado+0x394>)
 800156e:	785b      	ldrb	r3, [r3, #1]
 8001570:	3b3b      	subs	r3, #59	; 0x3b
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <runProg_llenado+0x394>)
 8001576:	705a      	strb	r2, [r3, #1]
							hora_llenadoOn.Hours++;
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <runProg_llenado+0x394>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <runProg_llenado+0x394>)
 8001582:	701a      	strb	r2, [r3, #0]
							if (hora_llenadoOn.Hours > 23) {
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <runProg_llenado+0x394>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b17      	cmp	r3, #23
 800158a:	d90e      	bls.n	80015aa <runProg_llenado+0x33a>
								hora_llenadoOn.Hours -= 23;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <runProg_llenado+0x394>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3b17      	subs	r3, #23
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <runProg_llenado+0x394>)
 8001596:	701a      	strb	r2, [r3, #0]
								fecha_llenadoOn.Date++;
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <runProg_llenado+0x390>)
 800159a:	789b      	ldrb	r3, [r3, #2]
 800159c:	3301      	adds	r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <runProg_llenado+0x390>)
 80015a2:	709a      	strb	r2, [r3, #2]
				break;
 80015a4:	e001      	b.n	80015aa <runProg_llenado+0x33a>
				break;
 80015a6:	bf00      	nop
 80015a8:	e00e      	b.n	80015c8 <runProg_llenado+0x358>
				break;
 80015aa:	bf00      	nop
		break;
 80015ac:	e00c      	b.n	80015c8 <runProg_llenado+0x358>
			setOutput(OUT_rele_napa, 0); //logica positiva
 80015ae:	2100      	movs	r1, #0
 80015b0:	2003      	movs	r0, #3
 80015b2:	f7ff f827 	bl	8000604 <setOutput>
			set_led(OUT_led_napa, APAGADO);
 80015b6:	2100      	movs	r1, #0
 80015b8:	2009      	movs	r0, #9
 80015ba:	f000 f99f 	bl	80018fc <set_led>
			status_progLlenado = PROG_IDLE;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <runProg_llenado+0x39c>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
		break;
 80015c4:	e000      	b.n	80015c8 <runProg_llenado+0x358>
				break;
 80015c6:	bf00      	nop
	} //end switch cmd

	if (!HAL_GPIO_ReadPin(IN_nivelAgua_GPIO_Port, IN_nivelAgua_Pin)) { //LOGICA NEGATIVA
 80015c8:	2104      	movs	r1, #4
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <runProg_llenado+0x3a0>)
 80015cc:	f001 feb6 	bl	800333c <HAL_GPIO_ReadPin>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d105      	bne.n	80015e2 <runProg_llenado+0x372>
		setOutput(OUT_rele_napa, 0); //logica positiva
 80015d6:	2100      	movs	r1, #0
 80015d8:	2003      	movs	r0, #3
 80015da:	f7ff f813 	bl	8000604 <setOutput>
		//falta manejar los led
		return PROG_FINISHED;
 80015de:	2303      	movs	r3, #3
 80015e0:	e000      	b.n	80015e4 <runProg_llenado+0x374>
	}
	return PROG_BUSY;
 80015e2:	2302      	movs	r3, #2

} //end runProg_llenado()
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200005dc 	.word	0x200005dc
 80015f0:	200005ec 	.word	0x200005ec
 80015f4:	20000110 	.word	0x20000110
 80015f8:	200005d8 	.word	0x200005d8
 80015fc:	200005f4 	.word	0x200005f4
 8001600:	200005e4 	.word	0x200005e4
 8001604:	200005d4 	.word	0x200005d4
 8001608:	2000010c 	.word	0x2000010c
 800160c:	200005e0 	.word	0x200005e0
 8001610:	40010800 	.word	0x40010800

08001614 <runProg_skimmer>:

T_PROG_OUTPUT runProg_skimmer (T_PROG_CMD cmd){
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	__NOP();
 800161e:	bf00      	nop

	switch (cmd) {
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	3b01      	subs	r3, #1
 8001624:	2b04      	cmp	r3, #4
 8001626:	d843      	bhi.n	80016b0 <runProg_skimmer+0x9c>
 8001628:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <runProg_skimmer+0x1c>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	0800167f 	.word	0x0800167f
 8001634:	080016b1 	.word	0x080016b1
 8001638:	08001661 	.word	0x08001661
 800163c:	08001645 	.word	0x08001645
 8001640:	08001653 	.word	0x08001653
		case PROG_SET1: //con programa
			status_modoPileta = 1;
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <runProg_skimmer+0xb0>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_BUSY;
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <runProg_skimmer+0xb4>)
 800164c:	2202      	movs	r2, #2
 800164e:	701a      	strb	r2, [r3, #0]
			break;
 8001650:	e031      	b.n	80016b6 <runProg_skimmer+0xa2>
		case PROG_SET2: //sin programa
			status_modoPileta = 2;
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <runProg_skimmer+0xb0>)
 8001654:	2202      	movs	r2, #2
 8001656:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_BUSY;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <runProg_skimmer+0xb4>)
 800165a:	2202      	movs	r2, #2
 800165c:	701a      	strb	r2, [r3, #0]
			break;
 800165e:	e02a      	b.n	80016b6 <runProg_skimmer+0xa2>
		case PROG_STOP:
			setOutput(OUT_rele_pileta, 0); //LOGICA POSITIVA
 8001660:	2100      	movs	r1, #0
 8001662:	2005      	movs	r0, #5
 8001664:	f7fe ffce 	bl	8000604 <setOutput>
			set_led(OUT_led_pileta, APAGADO);
 8001668:	2100      	movs	r1, #0
 800166a:	200b      	movs	r0, #11
 800166c:	f000 f946 	bl	80018fc <set_led>
			status_modoPileta = 0;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <runProg_skimmer+0xb0>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_IDLE;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <runProg_skimmer+0xb4>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
			break;
 800167c:	e01b      	b.n	80016b6 <runProg_skimmer+0xa2>
		case PROG_CHECK:
			if (status_progHidro == PROG_IDLE){
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <runProg_skimmer+0xb8>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d016      	beq.n	80016b4 <runProg_skimmer+0xa0>
				//return PROG_IDLE;
				break;
			}

			switch (status_modoPileta) {
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <runProg_skimmer+0xb0>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d00d      	beq.n	80016aa <runProg_skimmer+0x96>
 800168e:	2b02      	cmp	r3, #2
 8001690:	d002      	beq.n	8001698 <runProg_skimmer+0x84>
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <runProg_skimmer+0x9a>
				case 2:
					setOutput(OUT_rele_pileta, 1); //logica positiva
					set_led(OUT_led_pileta, TITILA_RAPIDO);
					break;
				default:
					break;
 8001696:	e00b      	b.n	80016b0 <runProg_skimmer+0x9c>
					setOutput(OUT_rele_pileta, 1); //logica positiva
 8001698:	2101      	movs	r1, #1
 800169a:	2005      	movs	r0, #5
 800169c:	f7fe ffb2 	bl	8000604 <setOutput>
					set_led(OUT_led_pileta, TITILA_RAPIDO);
 80016a0:	2103      	movs	r1, #3
 80016a2:	200b      	movs	r0, #11
 80016a4:	f000 f92a 	bl	80018fc <set_led>
					break;
 80016a8:	e002      	b.n	80016b0 <runProg_skimmer+0x9c>
					break;
 80016aa:	bf00      	nop
 80016ac:	e000      	b.n	80016b0 <runProg_skimmer+0x9c>
					break;
 80016ae:	bf00      	nop
			}

		default:
			break;
 80016b0:	bf00      	nop
 80016b2:	e000      	b.n	80016b6 <runProg_skimmer+0xa2>
				break;
 80016b4:	bf00      	nop
	} //end switch cmd

	return status_progPileta;
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <runProg_skimmer+0xb4>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000111 	.word	0x20000111
 80016c8:	200005d7 	.word	0x200005d7
 80016cc:	200005e8 	.word	0x200005e8

080016d0 <runProg_luz>:

T_PROG_OUTPUT runProg_luz (T_PROG_CMD cmd){
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	__NOP();
 80016da:	bf00      	nop
}
 80016dc:	bf00      	nop
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fc:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <MX_GPIO_Init+0xe8>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <MX_GPIO_Init+0xe8>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <MX_GPIO_Init+0xe8>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <MX_GPIO_Init+0xe8>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <MX_GPIO_Init+0xe8>)
 800171a:	f043 0320 	orr.w	r3, r3, #32
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <MX_GPIO_Init+0xe8>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0320 	and.w	r3, r3, #32
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <MX_GPIO_Init+0xe8>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <MX_GPIO_Init+0xe8>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <MX_GPIO_Init+0xe8>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <MX_GPIO_Init+0xe8>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <MX_GPIO_Init+0xe8>)
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <MX_GPIO_Init+0xe8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE_Pin
 800175c:	2200      	movs	r2, #0
 800175e:	f248 31e0 	movw	r1, #33760	; 0x83e0
 8001762:	481c      	ldr	r0, [pc, #112]	; (80017d4 <MX_GPIO_Init+0xec>)
 8001764:	f001 fe01 	bl	800336a <HAL_GPIO_WritePin>
                          |OUT_PL_Pin|OUT_fila3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_GLCD_RST_Pin|OUT_ST_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 8001768:	2200      	movs	r2, #0
 800176a:	f241 0139 	movw	r1, #4153	; 0x1039
 800176e:	481a      	ldr	r0, [pc, #104]	; (80017d8 <MX_GPIO_Init+0xf0>)
 8001770:	f001 fdfb 	bl	800336a <HAL_GPIO_WritePin>
                          |OUT_fila0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_nivelAgua_Pin;
 8001774:	2304      	movs	r3, #4
 8001776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN_nivelAgua_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	4813      	ldr	r0, [pc, #76]	; (80017d4 <MX_GPIO_Init+0xec>)
 8001788:	f001 fc7e 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE_Pin
 800178c:	f248 33e0 	movw	r3, #33760	; 0x83e0
 8001790:	613b      	str	r3, [r7, #16]
                          |OUT_PL_Pin|OUT_fila3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2302      	movs	r3, #2
 800179c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	4619      	mov	r1, r3
 80017a4:	480b      	ldr	r0, [pc, #44]	; (80017d4 <MX_GPIO_Init+0xec>)
 80017a6:	f001 fc6f 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_GLCD_RST_Pin|OUT_ST_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 80017aa:	f241 0339 	movw	r3, #4153	; 0x1039
 80017ae:	613b      	str	r3, [r7, #16]
                          |OUT_fila0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_GPIO_Init+0xf0>)
 80017c4:	f001 fc60 	bl	8003088 <HAL_GPIO_Init>

}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010800 	.word	0x40010800
 80017d8:	40010c00 	.word	0x40010c00

080017dc <update_horaFecha>:
#include "hora_tablero.h"

RTC_TimeTypeDef hora;
RTC_DateTypeDef aux_fecha;

void update_horaFecha (void){
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	 //segun el proyecto "MAQUINA_MD":
	  HAL_RTC_GetTime(&hrtc, &hora, RTC_FORMAT_BIN);
 80017e0:	2200      	movs	r2, #0
 80017e2:	4905      	ldr	r1, [pc, #20]	; (80017f8 <update_horaFecha+0x1c>)
 80017e4:	4805      	ldr	r0, [pc, #20]	; (80017fc <update_horaFecha+0x20>)
 80017e6:	f002 fca1 	bl	800412c <HAL_RTC_GetTime>
	  //HAL_RTC_GetTime(&hrtc, &aux_tiempo, RTC_FORMAT_BIN);
	  HAL_RTC_GetDate(&hrtc, &aux_fecha, RTC_FORMAT_BIN);
 80017ea:	2200      	movs	r2, #0
 80017ec:	4904      	ldr	r1, [pc, #16]	; (8001800 <update_horaFecha+0x24>)
 80017ee:	4803      	ldr	r0, [pc, #12]	; (80017fc <update_horaFecha+0x20>)
 80017f0:	f002 fe2a 	bl	8004448 <HAL_RTC_GetDate>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200005f8 	.word	0x200005f8
 80017fc:	20000608 	.word	0x20000608
 8001800:	2000011c 	.word	0x2000011c

08001804 <get_hora>:

void set_fecha (void){
	__NOP();
}

RTC_TimeTypeDef get_hora (void){
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	__NOP();
 8001808:	bf00      	nop
}
 800180a:	bf00      	nop
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <get_fecha>:

RTC_DateTypeDef get_fecha (void){
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

}
 8001818:	bf00      	nop
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
	...

08001824 <update_leds>:

uint8_t demora_rapida = 19; //equivale a 200 ms: (valor + 1)*10ms
uint8_t demora_lenta = 49; //equivale a 500 ms: (valor + 1)*10ms


void update_leds (void){ //LOGICA NEGATIVA
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

	for (uint8_t i=0; i < 6; i++){
 800182a:	2300      	movs	r3, #0
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	e03c      	b.n	80018aa <update_leds+0x86>

		switch (status_led[i]) {
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <update_leds+0xcc>)
 8001834:	5cd3      	ldrb	r3, [r2, r3]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d82f      	bhi.n	800189a <update_leds+0x76>
 800183a:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <update_leds+0x1c>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	08001851 	.word	0x08001851
 8001844:	08001861 	.word	0x08001861
 8001848:	0800186f 	.word	0x0800186f
 800184c:	08001885 	.word	0x08001885
			case APAGADO:
				setOutput(OUT_led_tomas + i, 1); //APAGA LED
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	3306      	adds	r3, #6
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2101      	movs	r1, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fed3 	bl	8000604 <setOutput>
			break;
 800185e:	e021      	b.n	80018a4 <update_leds+0x80>
			case PRENDIDO:
				setOutput(OUT_led_tomas + i, 0); //PRENDE LED
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	3306      	adds	r3, #6
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fecb 	bl	8000604 <setOutput>
			case TITILA_LENTO:
				if (!demora_lenta){
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <update_leds+0xd0>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d113      	bne.n	800189e <update_leds+0x7a>
					toggleOutput (OUT_led_tomas + i);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	3306      	adds	r3, #6
 800187a:	b2db      	uxtb	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe feed 	bl	800065c <toggleOutput>
					break;
 8001882:	e00f      	b.n	80018a4 <update_leds+0x80>
				}
			break;
			case TITILA_RAPIDO:
				if (!demora_rapida){
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <update_leds+0xd4>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10a      	bne.n	80018a2 <update_leds+0x7e>
					toggleOutput (OUT_led_tomas + i);
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	3306      	adds	r3, #6
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fee2 	bl	800065c <toggleOutput>
					break;
 8001898:	e004      	b.n	80018a4 <update_leds+0x80>
				}
			break;
			default:
			break;
 800189a:	bf00      	nop
 800189c:	e002      	b.n	80018a4 <update_leds+0x80>
			break;
 800189e:	bf00      	nop
 80018a0:	e000      	b.n	80018a4 <update_leds+0x80>
			break;
 80018a2:	bf00      	nop
	for (uint8_t i=0; i < 6; i++){
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	3301      	adds	r3, #1
 80018a8:	71fb      	strb	r3, [r7, #7]
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d9bf      	bls.n	8001830 <update_leds+0xc>
		} //end switch status_led

	} //end for uint8_t i...

	if (demora_lenta != 0){
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <update_leds+0xd0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <update_leds+0xa2>
		demora_lenta--;
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <update_leds+0xd0>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <update_leds+0xd0>)
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e002      	b.n	80018cc <update_leds+0xa8>
	}else{
		demora_lenta = 5; // por 100 ms.
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <update_leds+0xd0>)
 80018c8:	2205      	movs	r2, #5
 80018ca:	701a      	strb	r2, [r3, #0]
	}

	if (demora_rapida != 0){
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <update_leds+0xd4>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <update_leds+0xbe>
		demora_rapida--;
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <update_leds+0xd4>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	3b01      	subs	r3, #1
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <update_leds+0xd4>)
 80018de:	701a      	strb	r2, [r3, #0]
	}else{
		demora_rapida = 1; // por 100 ms.
	}

} //end update_leds()
 80018e0:	e002      	b.n	80018e8 <update_leds+0xc4>
		demora_rapida = 1; // por 100 ms.
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <update_leds+0xd4>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
} //end update_leds()
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000114 	.word	0x20000114
 80018f4:	20000003 	.word	0x20000003
 80018f8:	20000002 	.word	0x20000002

080018fc <set_led>:


void set_led (T_POS_OUTPUT l, T_STATUS_LED val){
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	460a      	mov	r2, r1
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	4613      	mov	r3, r2
 800190a:	71bb      	strb	r3, [r7, #6]

	if (l < OUT_led_tomas) return;
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d905      	bls.n	800191e <set_led+0x22>

	status_led [l - OUT_led_tomas] = val;
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	3b06      	subs	r3, #6
 8001916:	4904      	ldr	r1, [pc, #16]	; (8001928 <set_led+0x2c>)
 8001918:	79ba      	ldrb	r2, [r7, #6]
 800191a:	54ca      	strb	r2, [r1, r3]
 800191c:	e000      	b.n	8001920 <set_led+0x24>
	if (l < OUT_led_tomas) return;
 800191e:	bf00      	nop

} //end set_led()
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	20000114 	.word	0x20000114

0800192c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001932:	f001 f80d 	bl	8002950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001936:	f000 f87f 	bl	8001a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193a:	f7ff fed5 	bl	80016e8 <MX_GPIO_Init>
  MX_RTC_Init();
 800193e:	f000 fc8d 	bl	800225c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001942:	f000 ff5b 	bl	80027fc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001946:	f000 fe87 	bl	8002658 <MX_TIM2_Init>
  MX_SPI2_Init();
 800194a:	f000 fd1f 	bl	800238c <MX_SPI2_Init>
  MX_ADC1_Init();
 800194e:	f7ff f877 	bl	8000a40 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001952:	f000 fecd 	bl	80026f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  spi_74HC165_init(&hspi2, OUT_PL_GPIO_Port, OUT_PL_Pin, OUT_CE_GPIO_Port, OUT_CE_Pin);
 8001956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <main+0xec>)
 800195e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001962:	492d      	ldr	r1, [pc, #180]	; (8001a18 <main+0xec>)
 8001964:	482d      	ldr	r0, [pc, #180]	; (8001a1c <main+0xf0>)
 8001966:	f7fe fbf1 	bl	800014c <spi_74HC165_init>
  spi_74HC595_init(&hspi2, OUT_ST_GPIO_Port, OUT_ST_Pin);
 800196a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800196e:	492c      	ldr	r1, [pc, #176]	; (8001a20 <main+0xf4>)
 8001970:	482a      	ldr	r0, [pc, #168]	; (8001a1c <main+0xf0>)
 8001972:	f7fe fc8d 	bl	8000290 <spi_74HC595_init>

  HAL_TIM_Base_Start_IT(&htim2); //ticks eery 10 ms.
 8001976:	482b      	ldr	r0, [pc, #172]	; (8001a24 <main+0xf8>)
 8001978:	f003 fee6 	bl	8005748 <HAL_TIM_Base_Start_IT>


  start_menu();
 800197c:	f000 f8e0 	bl	8001b40 <start_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  update_teclas();
 8001980:	f7fe fd84 	bl	800048c <update_teclas>

	  uint8_t pruebaNumero = getNumber();
 8001984:	f7fe fde4 	bl	8000550 <getNumber>
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]

	  if (flag_tick){ //ticks every 10 ms.
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <main+0xfc>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d031      	beq.n	80019f8 <main+0xcc>

		  update_horaFecha();
 8001994:	f7ff ff22 	bl	80017dc <update_horaFecha>

//		  update_teclas();

		  if (flag_lecturas != 0){ //para demorar las lecturas de teclas cada 30 ms.
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <main+0x100>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <main+0x82>
			  flag_lecturas--;
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <main+0x100>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <main+0x100>)
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e004      	b.n	80019b8 <main+0x8c>
		  }else{
			  lecturaTeclas();
 80019ae:	f7fe fd2d 	bl	800040c <lecturaTeclas>

			  flag_lecturas = 2;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <main+0x100>)
 80019b4:	2202      	movs	r2, #2
 80019b6:	701a      	strb	r2, [r3, #0]
		  }

		  if (flag_salidas != 0){ //para demorar la escritura de las salidas cada 100 ms.
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <main+0x104>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <main+0xa2>
			  flag_salidas--;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <main+0x104>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <main+0x104>)
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e006      	b.n	80019dc <main+0xb0>
		  }else{
			  update_leds();
 80019ce:	f7ff ff29 	bl	8001824 <update_leds>
			  update_outputs();
 80019d2:	f7fe fe5b 	bl	800068c <update_outputs>

			  flag_salidas = 9;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <main+0x104>)
 80019d8:	2209      	movs	r2, #9
 80019da:	701a      	strb	r2, [r3, #0]
		  }

		  if (refresh_pantalla != 0){ //refresca cada 300 ms
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <main+0x108>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <main+0xc2>
			  pantallaUpdate();
 80019e4:	f7ff fa48 	bl	8000e78 <pantallaUpdate>
			  refresh_pantalla = 29;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <main+0x108>)
 80019ea:	221d      	movs	r2, #29
 80019ec:	701a      	strb	r2, [r3, #0]
		  }

		  check_pulsadores();
 80019ee:	f000 f8c1 	bl	8001b74 <check_pulsadores>

		  flag_tick = 0;
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <main+0xfc>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
	  }//end if flag_tick

	  check_menu();
 80019f8:	f000 f8b2 	bl	8001b60 <check_menu>
	  runProg_hidro(PROG_CHECK);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7ff fb63 	bl	80010c8 <runProg_hidro>
	  runProg_llenado(PROG_CHECK);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f7ff fc34 	bl	8001270 <runProg_llenado>
	  runProg_luz(PROG_CHECK);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff fe61 	bl	80016d0 <runProg_luz>
	  runProg_skimmer(PROG_CHECK);
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f7ff fe00 	bl	8001614 <runProg_skimmer>
  {
 8001a14:	e7b4      	b.n	8001980 <main+0x54>
 8001a16:	bf00      	nop
 8001a18:	40010800 	.word	0x40010800
 8001a1c:	2000061c 	.word	0x2000061c
 8001a20:	40010c00 	.word	0x40010c00
 8001a24:	200006b4 	.word	0x200006b4
 8001a28:	20000120 	.word	0x20000120
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000001 	.word	0x20000001
 8001a34:	20000004 	.word	0x20000004

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b094      	sub	sp, #80	; 0x50
 8001a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a42:	2228      	movs	r2, #40	; 0x28
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f004 fb24 	bl	8006094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a68:	2309      	movs	r3, #9
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a76:	2301      	movs	r3, #1
 8001a78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a88:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a92:	4618      	mov	r0, r3
 8001a94:	f001 fc8e 	bl	80033b4 <HAL_RCC_OscConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001a9e:	f000 f849 	bl	8001b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2102      	movs	r1, #2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 fef8 	bl	80038b4 <HAL_RCC_ClockConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001aca:	f000 f833 	bl	8001b34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001adc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 f883 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001aec:	f000 f822 	bl	8001b34 <Error_Handler>
  }
}
 8001af0:	bf00      	nop
 8001af2:	3750      	adds	r7, #80	; 0x50
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b08:	d102      	bne.n	8001b10 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tick = 1;
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
	}
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000120 	.word	0x20000120

08001b20 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	__NOP();
 8001b28:	bf00      	nop
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <start_menu>:
T_STATUS_LUCESEXT status_menuLucesExt = LIMITE_TIEMPO_LUCESEXT;

/////////////////////////////////////////
//         FUNCIONES PUBLICAS          //
/////////////////////////////////////////
void start_menu (void){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	init_pantalla();
 8001b44:	f7ff f818 	bl	8000b78 <init_pantalla>
	init_menuPrincipal();
 8001b48:	f000 f8b2 	bl	8001cb0 <init_menuPrincipal>
	menuActual = &menu[MENU_PRINCIPAL];
 8001b4c:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <start_menu+0x18>)
 8001b4e:	4a03      	ldr	r2, [pc, #12]	; (8001b5c <start_menu+0x1c>)
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200005fc 	.word	0x200005fc
 8001b5c:	20000008 	.word	0x20000008

08001b60 <check_menu>:

void check_menu (void){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	menuActual->accion();
 8001b64:	4b02      	ldr	r3, [pc, #8]	; (8001b70 <check_menu+0x10>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4798      	blx	r3
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200005fc 	.word	0x200005fc

08001b74 <check_pulsadores>:

void check_pulsadores (void){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0

	if (getStatBoton(IN_jet) == FALL){
 8001b78:	2014      	movs	r0, #20
 8001b7a:	f7fe fca9 	bl	80004d0 <getStatBoton>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d112      	bne.n	8001baa <check_pulsadores+0x36>
		if (runProg_hidro(PROG_CHECK) == PROG_BUSY){
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff fa9f 	bl	80010c8 <runProg_hidro>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d103      	bne.n	8001b98 <check_pulsadores+0x24>
			runProg_hidro(PROG_STOP);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f7ff fa99 	bl	80010c8 <runProg_hidro>
 8001b96:	e008      	b.n	8001baa <check_pulsadores+0x36>
		}else if(runProg_hidro(PROG_CHECK) == PROG_IDLE){
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff fa95 	bl	80010c8 <runProg_hidro>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d102      	bne.n	8001baa <check_pulsadores+0x36>
			runProg_hidro(PROG_RUN);
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f7ff fa8f 	bl	80010c8 <runProg_hidro>
		}
	} //end if getStatBoton IN_jet

	if (getStatBoton(IN_napa) == FALL){
 8001baa:	2013      	movs	r0, #19
 8001bac:	f7fe fc90 	bl	80004d0 <getStatBoton>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d10e      	bne.n	8001bd4 <check_pulsadores+0x60>

		menuAux = menuActual;
 8001bb6:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <check_pulsadores+0x120>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a37      	ldr	r2, [pc, #220]	; (8001c98 <check_pulsadores+0x124>)
 8001bbc:	6013      	str	r3, [r2, #0]
		menuActual = &menu[MENU_SET_LLENADO];
 8001bbe:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <check_pulsadores+0x120>)
 8001bc0:	4a36      	ldr	r2, [pc, #216]	; (8001c9c <check_pulsadores+0x128>)
 8001bc2:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8001bc4:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <check_pulsadores+0x120>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a35      	ldr	r2, [pc, #212]	; (8001ca0 <check_pulsadores+0x12c>)
 8001bca:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8001bcc:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <check_pulsadores+0x120>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4798      	blx	r3
	} //end if getStatBoton(IN_napa)...

	if (getStatBoton(IN_tomas) == FALL){
 8001bd4:	2010      	movs	r0, #16
 8001bd6:	f7fe fc7b 	bl	80004d0 <getStatBoton>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d11a      	bne.n	8001c16 <check_pulsadores+0xa2>
		if (!flag_tomas){
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <check_pulsadores+0x130>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10b      	bne.n	8001c00 <check_pulsadores+0x8c>
			setOutput(OUT_rele_tomas, 1); //logica positiva
 8001be8:	2101      	movs	r1, #1
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7fe fd0a 	bl	8000604 <setOutput>
			set_led(OUT_led_tomas, PRENDIDO);
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	2006      	movs	r0, #6
 8001bf4:	f7ff fe82 	bl	80018fc <set_led>
			flag_tomas = 0;
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <check_pulsadores+0x130>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e00a      	b.n	8001c16 <check_pulsadores+0xa2>
		}else{
			setOutput(OUT_rele_tomas, 0); //logica positiva
 8001c00:	2100      	movs	r1, #0
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7fe fcfe 	bl	8000604 <setOutput>
			set_led(OUT_led_tomas, APAGADO);
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2006      	movs	r0, #6
 8001c0c:	f7ff fe76 	bl	80018fc <set_led>
			flag_tomas = 1;
 8001c10:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <check_pulsadores+0x130>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
		}
	} //end if IN_tomas

	if (getStatBoton(IN_pileta) == FALL){
 8001c16:	2015      	movs	r0, #21
 8001c18:	f7fe fc5a 	bl	80004d0 <getStatBoton>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d118      	bne.n	8001c54 <check_pulsadores+0xe0>
		aux_progOutput = runProg_skimmer(PROG_CHECK);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff fcf6 	bl	8001614 <runProg_skimmer>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <check_pulsadores+0x134>)
 8001c2e:	701a      	strb	r2, [r3, #0]

		if (aux_progOutput == PROG_IDLE){
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <check_pulsadores+0x134>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d103      	bne.n	8001c40 <check_pulsadores+0xcc>
			pulsoLargo_skimmer = 150; //en 10 * ms.
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <check_pulsadores+0x138>)
 8001c3a:	2296      	movs	r2, #150	; 0x96
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	e009      	b.n	8001c54 <check_pulsadores+0xe0>
		}else if(aux_progOutput == PROG_BUSY){
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <check_pulsadores+0x134>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d105      	bne.n	8001c54 <check_pulsadores+0xe0>
			pulsoLargo_skimmer = 0;
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <check_pulsadores+0x138>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
			runProg_skimmer(PROG_STOP);
 8001c4e:	2003      	movs	r0, #3
 8001c50:	f7ff fce0 	bl	8001614 <runProg_skimmer>
		}


	}
	if (pulsoLargo_skimmer != 0){
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <check_pulsadores+0x138>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d016      	beq.n	8001c8a <check_pulsadores+0x116>
		if (getStatBoton(IN_pileta) == HIGH_L){ //pulso corto
 8001c5c:	2015      	movs	r0, #21
 8001c5e:	f7fe fc37 	bl	80004d0 <getStatBoton>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d103      	bne.n	8001c70 <check_pulsadores+0xfc>
			runProg_skimmer(PROG_SET1); //con programa
 8001c68:	2004      	movs	r0, #4
 8001c6a:	f7ff fcd3 	bl	8001614 <runProg_skimmer>
 8001c6e:	e00c      	b.n	8001c8a <check_pulsadores+0x116>
		}else{
			pulsoLargo_skimmer--;
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <check_pulsadores+0x138>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <check_pulsadores+0x138>)
 8001c7a:	701a      	strb	r2, [r3, #0]
			if (!pulsoLargo_skimmer){ //pulso largo
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <check_pulsadores+0x138>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <check_pulsadores+0x116>
				runProg_skimmer(PROG_SET2); //sin programa
 8001c84:	2005      	movs	r0, #5
 8001c86:	f7ff fcc5 	bl	8001614 <runProg_skimmer>
			}
		}
	}
	if (getStatBoton(IN_pileta) == LOW_L){
 8001c8a:	2015      	movs	r0, #21
 8001c8c:	f7fe fc20 	bl	80004d0 <getStatBoton>

	}

}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200005fc 	.word	0x200005fc
 8001c98:	20000600 	.word	0x20000600
 8001c9c:	20000018 	.word	0x20000018
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	20000121 	.word	0x20000121
 8001ca8:	20000604 	.word	0x20000604
 8001cac:	20000122 	.word	0x20000122

08001cb0 <init_menuPrincipal>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

void init_menuPrincipal (void){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0

	set_pantalla(PANT_init_menuPrincipal);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7fe ff67 	bl	8000b88 <set_pantalla>
//	menuActual = &menu[MENU_PRINCIPAL];
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <init_llenado>:
	set_pantalla(PANT_init_setLlenado);

} //end init_llenado()


void init_llenado (void){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <init_llenado+0x3c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d010      	beq.n	8001cee <init_llenado+0x2e>
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d00a      	beq.n	8001ce6 <init_llenado+0x26>
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d000      	beq.n	8001cd6 <init_llenado+0x16>
			//status_menuLlenado = 90;
		break;
		case CONECTE_SENSOR:
			set_pantalla(PANT_CONECTE_SENSOR);
		default:
		break;
 8001cd4:	e00e      	b.n	8001cf4 <init_llenado+0x34>
			set_led(OUT_led_napa, PRENDIDO);
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	2009      	movs	r0, #9
 8001cda:	f7ff fe0f 	bl	80018fc <set_led>
			set_pantalla(PANT_sensor_conectado);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7fe ff52 	bl	8000b88 <set_pantalla>
		break;
 8001ce4:	e007      	b.n	8001cf6 <init_llenado+0x36>
			set_pantalla(PANT_llenando_terminar);
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f7fe ff4e 	bl	8000b88 <set_pantalla>
		break;
 8001cec:	e003      	b.n	8001cf6 <init_llenado+0x36>
			set_pantalla(PANT_CONECTE_SENSOR);
 8001cee:	200a      	movs	r0, #10
 8001cf0:	f7fe ff4a 	bl	8000b88 <set_pantalla>
		break;
 8001cf4:	bf00      	nop
	} //end switch status_menuTablero

} //end init_llenado()
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000123 	.word	0x20000123

08001d00 <init_skimmer>:


void init_skimmer (void){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_skimmer);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f7fe ff3f 	bl	8000b88 <set_pantalla>
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <init_hidro>:


void init_hidro (void){
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_hidro);
 8001d12:	2004      	movs	r0, #4
 8001d14:	f7fe ff38 	bl	8000b88 <set_pantalla>
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <init_lucesExt>:


void init_lucesExt (void){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_lucesExt);
 8001d20:	2005      	movs	r0, #5
 8001d22:	f7fe ff31 	bl	8000b88 <set_pantalla>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <init_lucesLed>:


void init_lucesLed (void){
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <init_config>:


void init_config (void){
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
	...

08001d44 <acc_menuPrincipal>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

void acc_menuPrincipal (void){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0

	if (getStatBoton(IN_napa)==FALL){
 8001d48:	2013      	movs	r0, #19
 8001d4a:	f7fe fbc1 	bl	80004d0 <getStatBoton>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d10b      	bne.n	8001d6c <acc_menuPrincipal+0x28>
		menuActual = &menu[MENU_SET_LLENADO];
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <acc_menuPrincipal+0x50>)
 8001d56:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <acc_menuPrincipal+0x54>)
 8001d58:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <acc_menuPrincipal+0x50>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <acc_menuPrincipal+0x58>)
 8001d60:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <acc_menuPrincipal+0x50>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4798      	blx	r3
		return;
 8001d6a:	e011      	b.n	8001d90 <acc_menuPrincipal+0x4c>
	}

	//RE VER: debería ejecutar el programa y no configurarlo...
	if (getStatBoton(IN_jet)==FALL){
 8001d6c:	2014      	movs	r0, #20
 8001d6e:	f7fe fbaf 	bl	80004d0 <getStatBoton>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d10b      	bne.n	8001d90 <acc_menuPrincipal+0x4c>
		menuActual = &menu[MENU_HIDRO];
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <acc_menuPrincipal+0x50>)
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <acc_menuPrincipal+0x5c>)
 8001d7c:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <acc_menuPrincipal+0x50>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <acc_menuPrincipal+0x58>)
 8001d84:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8001d86:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <acc_menuPrincipal+0x50>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4798      	blx	r3
		return;
 8001d8e:	bf00      	nop
	}
}
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200005fc 	.word	0x200005fc
 8001d98:	20000018 	.word	0x20000018
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	20000038 	.word	0x20000038

08001da4 <acc_llenado>:
	} //end switch status_menuLlenado

} //end acc_setLlenado ()


void acc_llenado (void){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 8001da8:	4b79      	ldr	r3, [pc, #484]	; (8001f90 <acc_llenado+0x1ec>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	f200 80e2 	bhi.w	8001f76 <acc_llenado+0x1d2>
 8001db2:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <acc_llenado+0x14>)
 8001db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db8:	08001dd1 	.word	0x08001dd1
 8001dbc:	08001e07 	.word	0x08001e07
 8001dc0:	08001e47 	.word	0x08001e47
 8001dc4:	08001e83 	.word	0x08001e83
 8001dc8:	08001ee1 	.word	0x08001ee1
 8001dcc:	08001f3f 	.word	0x08001f3f
		case PREGUNTA_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001dd0:	200e      	movs	r0, #14
 8001dd2:	f7fe fb7d 	bl	80004d0 <getStatBoton>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d106      	bne.n	8001dea <acc_llenado+0x46>
				set_pantalla(PANT_COMPRUEBE_SENSOR);
 8001ddc:	2009      	movs	r0, #9
 8001dde:	f7fe fed3 	bl	8000b88 <set_pantalla>
				status_menuLlenado = COMPRUEBE_SENSOR;
 8001de2:	4b6b      	ldr	r3, [pc, #428]	; (8001f90 <acc_llenado+0x1ec>)
 8001de4:	2202      	movs	r2, #2
 8001de6:	701a      	strb	r2, [r3, #0]
				break;
 8001de8:	e0d0      	b.n	8001f8c <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_AST) == FALL) { //niego
 8001dea:	200c      	movs	r0, #12
 8001dec:	f7fe fb70 	bl	80004d0 <getStatBoton>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	f040 80c1 	bne.w	8001f7a <acc_llenado+0x1d6>
				set_pantalla(PANT_CONECTE_SENSOR);
 8001df8:	200a      	movs	r0, #10
 8001dfa:	f7fe fec5 	bl	8000b88 <set_pantalla>
				status_menuLlenado = CONECTE_SENSOR;
 8001dfe:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <acc_llenado+0x1ec>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
				break;
 8001e04:	e0c2      	b.n	8001f8c <acc_llenado+0x1e8>
			}

		break;
		case CONECTE_SENSOR:

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001e06:	200c      	movs	r0, #12
 8001e08:	f7fe fb62 	bl	80004d0 <getStatBoton>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d10b      	bne.n	8001e2a <acc_llenado+0x86>
				//vuelve al menu principal
				set_led(OUT_led_napa, APAGADO);
 8001e12:	2100      	movs	r1, #0
 8001e14:	2009      	movs	r0, #9
 8001e16:	f7ff fd71 	bl	80018fc <set_led>
				menuActual = &menu[MENU_PRINCIPAL];
 8001e1a:	4b5e      	ldr	r3, [pc, #376]	; (8001f94 <acc_llenado+0x1f0>)
 8001e1c:	4a5e      	ldr	r2, [pc, #376]	; (8001f98 <acc_llenado+0x1f4>)
 8001e1e:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001e20:	4b5c      	ldr	r3, [pc, #368]	; (8001f94 <acc_llenado+0x1f0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	4798      	blx	r3
				break;
 8001e28:	e0b0      	b.n	8001f8c <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001e2a:	200e      	movs	r0, #14
 8001e2c:	f7fe fb50 	bl	80004d0 <getStatBoton>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	f040 80a3 	bne.w	8001f7e <acc_llenado+0x1da>
				set_pantalla(PANT_PREGUNTA_SENSOR);
 8001e38:	200b      	movs	r0, #11
 8001e3a:	f7fe fea5 	bl	8000b88 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 8001e3e:	4b54      	ldr	r3, [pc, #336]	; (8001f90 <acc_llenado+0x1ec>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
				break;
 8001e44:	e0a2      	b.n	8001f8c <acc_llenado+0x1e8>
			}
		break;
		case COMPRUEBE_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001e46:	200e      	movs	r0, #14
 8001e48:	f7fe fb42 	bl	80004d0 <getStatBoton>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d109      	bne.n	8001e66 <acc_llenado+0xc2>
				set_pantalla(PANT_LLENANDO);
 8001e52:	200c      	movs	r0, #12
 8001e54:	f7fe fe98 	bl	8000b88 <set_pantalla>
				runProg_llenado(PROG_RUN);
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f7ff fa09 	bl	8001270 <runProg_llenado>
				status_menuLlenado = LLENANDO;
 8001e5e:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <acc_llenado+0x1ec>)
 8001e60:	2203      	movs	r2, #3
 8001e62:	701a      	strb	r2, [r3, #0]
				break;
 8001e64:	e092      	b.n	8001f8c <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001e66:	200c      	movs	r0, #12
 8001e68:	f7fe fb32 	bl	80004d0 <getStatBoton>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	f040 8087 	bne.w	8001f82 <acc_llenado+0x1de>
				set_pantalla(PANT_PREGUNTA_SENSOR);
 8001e74:	200b      	movs	r0, #11
 8001e76:	f7fe fe87 	bl	8000b88 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 8001e7a:	4b45      	ldr	r3, [pc, #276]	; (8001f90 <acc_llenado+0x1ec>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
				break;
 8001e80:	e084      	b.n	8001f8c <acc_llenado+0x1e8>
			}

		break;
		case LLENANDO:
			if (runProg_llenado(PROG_CHECK) == PROG_FINISHED ) { //LOGICA NEGATIVA
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff f9f4 	bl	8001270 <runProg_llenado>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d106      	bne.n	8001e9c <acc_llenado+0xf8>
				set_pantalla(PANT_PILETA_LLENA);
 8001e8e:	200d      	movs	r0, #13
 8001e90:	f7fe fe7a 	bl	8000b88 <set_pantalla>
				status_menuLlenado = PILETA_LLENA;
 8001e94:	4b3e      	ldr	r3, [pc, #248]	; (8001f90 <acc_llenado+0x1ec>)
 8001e96:	2205      	movs	r2, #5
 8001e98:	701a      	strb	r2, [r3, #0]
				break;
 8001e9a:	e077      	b.n	8001f8c <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001e9c:	200e      	movs	r0, #14
 8001e9e:	f7fe fb17 	bl	80004d0 <getStatBoton>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d10a      	bne.n	8001ebe <acc_llenado+0x11a>
				//vuelve al menu principal
				status_menuLlenado = LLENANDO_CHECK;
 8001ea8:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <acc_llenado+0x1ec>)
 8001eaa:	2204      	movs	r2, #4
 8001eac:	701a      	strb	r2, [r3, #0]
				menuActual = &menu[MENU_PRINCIPAL];
 8001eae:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <acc_llenado+0x1f0>)
 8001eb0:	4a39      	ldr	r2, [pc, #228]	; (8001f98 <acc_llenado+0x1f4>)
 8001eb2:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001eb4:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <acc_llenado+0x1f0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4798      	blx	r3
				break;
 8001ebc:	e066      	b.n	8001f8c <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001ebe:	200c      	movs	r0, #12
 8001ec0:	f7fe fb06 	bl	80004d0 <getStatBoton>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d15d      	bne.n	8001f86 <acc_llenado+0x1e2>
				//vuelve al menu principal
				status_menuLlenado = LLENANDO_CHECK;
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <acc_llenado+0x1ec>)
 8001ecc:	2204      	movs	r2, #4
 8001ece:	701a      	strb	r2, [r3, #0]
				menuActual = &menu[MENU_PRINCIPAL];
 8001ed0:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <acc_llenado+0x1f0>)
 8001ed2:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <acc_llenado+0x1f4>)
 8001ed4:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001ed6:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <acc_llenado+0x1f0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4798      	blx	r3
				break;
 8001ede:	e055      	b.n	8001f8c <acc_llenado+0x1e8>
			}
		break;
		case LLENANDO_CHECK:
			if (runProg_llenado(PROG_CHECK) == PROG_FINISHED ) { //LOGICA NEGATIVA
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7ff f9c5 	bl	8001270 <runProg_llenado>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d106      	bne.n	8001efa <acc_llenado+0x156>
				set_pantalla(PANT_PILETA_LLENA);
 8001eec:	200d      	movs	r0, #13
 8001eee:	f7fe fe4b 	bl	8000b88 <set_pantalla>
				status_menuLlenado = PILETA_LLENA;
 8001ef2:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <acc_llenado+0x1ec>)
 8001ef4:	2205      	movs	r2, #5
 8001ef6:	701a      	strb	r2, [r3, #0]
				break;
 8001ef8:	e048      	b.n	8001f8c <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001efa:	200e      	movs	r0, #14
 8001efc:	f7fe fae8 	bl	80004d0 <getStatBoton>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d10d      	bne.n	8001f22 <acc_llenado+0x17e>
				status_menuLlenado = PREGUNTA_SENSOR;
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <acc_llenado+0x1ec>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
				runProg_llenado(PROG_STOP);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f7ff f9af 	bl	8001270 <runProg_llenado>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <acc_llenado+0x1f0>)
 8001f14:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <acc_llenado+0x1f4>)
 8001f16:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <acc_llenado+0x1f0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	4798      	blx	r3
				break;
 8001f20:	e034      	b.n	8001f8c <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001f22:	200c      	movs	r0, #12
 8001f24:	f7fe fad4 	bl	80004d0 <getStatBoton>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d12d      	bne.n	8001f8a <acc_llenado+0x1e6>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001f2e:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <acc_llenado+0x1f0>)
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <acc_llenado+0x1f4>)
 8001f32:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <acc_llenado+0x1f0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	4798      	blx	r3
				break;
 8001f3c:	e026      	b.n	8001f8c <acc_llenado+0x1e8>
			}
		break;
		case PILETA_LLENA:
			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001f3e:	200e      	movs	r0, #14
 8001f40:	f7fe fac6 	bl	80004d0 <getStatBoton>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d107      	bne.n	8001f5a <acc_llenado+0x1b6>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <acc_llenado+0x1f0>)
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <acc_llenado+0x1f4>)
 8001f4e:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <acc_llenado+0x1f0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4798      	blx	r3
				break;
 8001f58:	e018      	b.n	8001f8c <acc_llenado+0x1e8>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001f5a:	200c      	movs	r0, #12
 8001f5c:	f7fe fab8 	bl	80004d0 <getStatBoton>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d107      	bne.n	8001f76 <acc_llenado+0x1d2>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <acc_llenado+0x1f0>)
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <acc_llenado+0x1f4>)
 8001f6a:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <acc_llenado+0x1f0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4798      	blx	r3
				break;
 8001f74:	e00a      	b.n	8001f8c <acc_llenado+0x1e8>
			}

		default:
		break;
 8001f76:	bf00      	nop
 8001f78:	e008      	b.n	8001f8c <acc_llenado+0x1e8>
		break;
 8001f7a:	bf00      	nop
 8001f7c:	e006      	b.n	8001f8c <acc_llenado+0x1e8>
		break;
 8001f7e:	bf00      	nop
 8001f80:	e004      	b.n	8001f8c <acc_llenado+0x1e8>
		break;
 8001f82:	bf00      	nop
 8001f84:	e002      	b.n	8001f8c <acc_llenado+0x1e8>
		break;
 8001f86:	bf00      	nop
 8001f88:	e000      	b.n	8001f8c <acc_llenado+0x1e8>
		break;
 8001f8a:	bf00      	nop
	} //end switch status_menuLlenado

} //end acc_llenado ()
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000123 	.word	0x20000123
 8001f94:	200005fc 	.word	0x200005fc
 8001f98:	20000008 	.word	0x20000008

08001f9c <acc_skimmer>:


void acc_skimmer (void){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	switch (status_menuSkimmer) {
 8001fa0:	4b69      	ldr	r3, [pc, #420]	; (8002148 <acc_skimmer+0x1ac>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	f200 80cd 	bhi.w	8002144 <acc_skimmer+0x1a8>
 8001faa:	a201      	add	r2, pc, #4	; (adr r2, 8001fb0 <acc_skimmer+0x14>)
 8001fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb0:	08001fd5 	.word	0x08001fd5
 8001fb4:	0800200b 	.word	0x0800200b
 8001fb8:	08002045 	.word	0x08002045
 8001fbc:	0800212f 	.word	0x0800212f
 8001fc0:	0800212f 	.word	0x0800212f
 8001fc4:	08002093 	.word	0x08002093
 8001fc8:	080020e1 	.word	0x080020e1
 8001fcc:	0800212f 	.word	0x0800212f
 8001fd0:	0800212f 	.word	0x0800212f
		case COMPRUEBE_BOMBA:
			if (getStatBoton(IN_AST) == FALL) {
 8001fd4:	200c      	movs	r0, #12
 8001fd6:	f7fe fa7b 	bl	80004d0 <getStatBoton>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d106      	bne.n	8001fee <acc_skimmer+0x52>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001fe0:	4b5a      	ldr	r3, [pc, #360]	; (800214c <acc_skimmer+0x1b0>)
 8001fe2:	4a5b      	ldr	r2, [pc, #364]	; (8002150 <acc_skimmer+0x1b4>)
 8001fe4:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001fe6:	4b59      	ldr	r3, [pc, #356]	; (800214c <acc_skimmer+0x1b0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4798      	blx	r3
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001fee:	200e      	movs	r0, #14
 8001ff0:	f7fe fa6e 	bl	80004d0 <getStatBoton>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	f040 809b 	bne.w	8002132 <acc_skimmer+0x196>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 8001ffc:	200e      	movs	r0, #14
 8001ffe:	f7fe fdc3 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 8002002:	4b51      	ldr	r3, [pc, #324]	; (8002148 <acc_skimmer+0x1ac>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
				break;
 8002008:	e09c      	b.n	8002144 <acc_skimmer+0x1a8>
			}
		break;
		case OPCIONES_SKIMMER:
			if (getStatBoton(IN_AST) == FALL) {
 800200a:	200c      	movs	r0, #12
 800200c:	f7fe fa60 	bl	80004d0 <getStatBoton>
				//vuelve al menu principal
			}

			if (getStatBoton(IN_1) == FALL) {
 8002010:	2000      	movs	r0, #0
 8002012:	f7fe fa5d 	bl	80004d0 <getStatBoton>
 8002016:	4603      	mov	r3, r0
 8002018:	2b02      	cmp	r3, #2
 800201a:	d106      	bne.n	800202a <acc_skimmer+0x8e>
				set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
 800201c:	200f      	movs	r0, #15
 800201e:	f7fe fdb3 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
 8002022:	4b49      	ldr	r3, [pc, #292]	; (8002148 <acc_skimmer+0x1ac>)
 8002024:	2202      	movs	r2, #2
 8002026:	701a      	strb	r2, [r3, #0]
				break;
 8002028:	e08c      	b.n	8002144 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 800202a:	2001      	movs	r0, #1
 800202c:	f7fe fa50 	bl	80004d0 <getStatBoton>
 8002030:	4603      	mov	r3, r0
 8002032:	2b02      	cmp	r3, #2
 8002034:	d17f      	bne.n	8002136 <acc_skimmer+0x19a>
				set_pantalla(PANT_ELIJE_PROGRAMA_SKIMMER);
 8002036:	2010      	movs	r0, #16
 8002038:	f7fe fda6 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 800203c:	4b42      	ldr	r3, [pc, #264]	; (8002148 <acc_skimmer+0x1ac>)
 800203e:	2205      	movs	r2, #5
 8002040:	701a      	strb	r2, [r3, #0]
				break;
 8002042:	e07f      	b.n	8002144 <acc_skimmer+0x1a8>
			}
		break;
		case ELIJE_FRECUENCIA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8002044:	2000      	movs	r0, #0
 8002046:	f7fe fa43 	bl	80004d0 <getStatBoton>
 800204a:	4603      	mov	r3, r0
 800204c:	2b02      	cmp	r3, #2
 800204e:	d106      	bne.n	800205e <acc_skimmer+0xc2>
				set_pantalla(PANT_PERIODO_ON_SKIMMER);
 8002050:	2011      	movs	r0, #17
 8002052:	f7fe fd99 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = PERIODO_ON_SKIMMER;
 8002056:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <acc_skimmer+0x1ac>)
 8002058:	2203      	movs	r2, #3
 800205a:	701a      	strb	r2, [r3, #0]
				break;
 800205c:	e072      	b.n	8002144 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 800205e:	2001      	movs	r0, #1
 8002060:	f7fe fa36 	bl	80004d0 <getStatBoton>
 8002064:	4603      	mov	r3, r0
 8002066:	2b02      	cmp	r3, #2
 8002068:	d106      	bne.n	8002078 <acc_skimmer+0xdc>
				set_pantalla(PANT_PERIODO_OFF_SKIMMER);
 800206a:	2012      	movs	r0, #18
 800206c:	f7fe fd8c 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = PERIODO_OFF_SKIMMER;
 8002070:	4b35      	ldr	r3, [pc, #212]	; (8002148 <acc_skimmer+0x1ac>)
 8002072:	2204      	movs	r2, #4
 8002074:	701a      	strb	r2, [r3, #0]
				break;
 8002076:	e065      	b.n	8002144 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 8002078:	200c      	movs	r0, #12
 800207a:	f7fe fa29 	bl	80004d0 <getStatBoton>
 800207e:	4603      	mov	r3, r0
 8002080:	2b02      	cmp	r3, #2
 8002082:	d15a      	bne.n	800213a <acc_skimmer+0x19e>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 8002084:	200e      	movs	r0, #14
 8002086:	f7fe fd7f 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <acc_skimmer+0x1ac>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
				break;
 8002090:	e058      	b.n	8002144 <acc_skimmer+0x1a8>
		break;
		case PERIODO_OFF_SKIMMER:
			//funcion de seteo de periodo off
		break;
		case ELIJE_PROGRAMA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8002092:	2000      	movs	r0, #0
 8002094:	f7fe fa1c 	bl	80004d0 <getStatBoton>
 8002098:	4603      	mov	r3, r0
 800209a:	2b02      	cmp	r3, #2
 800209c:	d106      	bne.n	80020ac <acc_skimmer+0x110>
				//levanta el flag de modificar el programa 1
				set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 800209e:	2013      	movs	r0, #19
 80020a0:	f7fe fd72 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <acc_skimmer+0x1ac>)
 80020a6:	2206      	movs	r2, #6
 80020a8:	701a      	strb	r2, [r3, #0]
				break;
 80020aa:	e04b      	b.n	8002144 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7fe fa0f 	bl	80004d0 <getStatBoton>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d106      	bne.n	80020c6 <acc_skimmer+0x12a>
				//levanta el flag de modificar el programa 2
				set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 80020b8:	2013      	movs	r0, #19
 80020ba:	f7fe fd65 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <acc_skimmer+0x1ac>)
 80020c0:	2206      	movs	r2, #6
 80020c2:	701a      	strb	r2, [r3, #0]
				break;
 80020c4:	e03e      	b.n	8002144 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 80020c6:	200c      	movs	r0, #12
 80020c8:	f7fe fa02 	bl	80004d0 <getStatBoton>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d135      	bne.n	800213e <acc_skimmer+0x1a2>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 80020d2:	200e      	movs	r0, #14
 80020d4:	f7fe fd58 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <acc_skimmer+0x1ac>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
				break;
 80020de:	e031      	b.n	8002144 <acc_skimmer+0x1a8>
			}
		break;
		case ELIJE_ON_OFF_HORARIO_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7fe f9f5 	bl	80004d0 <getStatBoton>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d106      	bne.n	80020fa <acc_skimmer+0x15e>
				//levanta el flag de modificar el horario ON
				set_pantalla(PANT_HORARIO_ON_SKIMMER);
 80020ec:	2014      	movs	r0, #20
 80020ee:	f7fe fd4b 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = HORARIO_ON_SKIMMER;
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <acc_skimmer+0x1ac>)
 80020f4:	2207      	movs	r2, #7
 80020f6:	701a      	strb	r2, [r3, #0]
				break;
 80020f8:	e024      	b.n	8002144 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 80020fa:	2001      	movs	r0, #1
 80020fc:	f7fe f9e8 	bl	80004d0 <getStatBoton>
 8002100:	4603      	mov	r3, r0
 8002102:	2b02      	cmp	r3, #2
 8002104:	d106      	bne.n	8002114 <acc_skimmer+0x178>
				//levanta el flag de modificar el horario OFF
				set_pantalla(PANT_HORARIO_OFF_SKIMMER);
 8002106:	2015      	movs	r0, #21
 8002108:	f7fe fd3e 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = HORARIO_OFF_SKIMMER;
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <acc_skimmer+0x1ac>)
 800210e:	2208      	movs	r2, #8
 8002110:	701a      	strb	r2, [r3, #0]
				break;
 8002112:	e017      	b.n	8002144 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 8002114:	200c      	movs	r0, #12
 8002116:	f7fe f9db 	bl	80004d0 <getStatBoton>
 800211a:	4603      	mov	r3, r0
 800211c:	2b02      	cmp	r3, #2
 800211e:	d110      	bne.n	8002142 <acc_skimmer+0x1a6>
				set_pantalla(PANT_ELIJE_PROGRAMA_SKIMMER);
 8002120:	2010      	movs	r0, #16
 8002122:	f7fe fd31 	bl	8000b88 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <acc_skimmer+0x1ac>)
 8002128:	2205      	movs	r2, #5
 800212a:	701a      	strb	r2, [r3, #0]
				break;
 800212c:	e00a      	b.n	8002144 <acc_skimmer+0x1a8>
		break;
 800212e:	bf00      	nop
 8002130:	e008      	b.n	8002144 <acc_skimmer+0x1a8>
		break;
 8002132:	bf00      	nop
 8002134:	e006      	b.n	8002144 <acc_skimmer+0x1a8>
		break;
 8002136:	bf00      	nop
 8002138:	e004      	b.n	8002144 <acc_skimmer+0x1a8>
		break;
 800213a:	bf00      	nop
 800213c:	e002      	b.n	8002144 <acc_skimmer+0x1a8>
		break;
 800213e:	bf00      	nop
 8002140:	e000      	b.n	8002144 <acc_skimmer+0x1a8>
			}
		break;
 8002142:	bf00      	nop
		break;
		case HORARIO_OFF_SKIMMER:
			//funcion de seteo de horario off
		break;
	} //end switch status_menuSkimmer
} //end acc_skimmer()
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000124 	.word	0x20000124
 800214c:	200005fc 	.word	0x200005fc
 8002150:	20000008 	.word	0x20000008

08002154 <acc_hidro>:


void acc_hidro (void){
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0

	switch (status_menuHidro) {
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <acc_hidro+0x84>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <acc_hidro+0x12>
 8002160:	2b01      	cmp	r3, #1
 8002162:	d018      	beq.n	8002196 <acc_hidro+0x42>
			} //end switch status_menuHidro

		break;
	} //end switch status_menuHidro

} //end acc_hidro()
 8002164:	e036      	b.n	80021d4 <acc_hidro+0x80>
			if (getStatBoton(IN_AST) == FALL) {
 8002166:	200c      	movs	r0, #12
 8002168:	f7fe f9b2 	bl	80004d0 <getStatBoton>
 800216c:	4603      	mov	r3, r0
 800216e:	2b02      	cmp	r3, #2
 8002170:	d107      	bne.n	8002182 <acc_hidro+0x2e>
				menuActual = &menu[MENU_PRINCIPAL];
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <acc_hidro+0x88>)
 8002174:	4a1a      	ldr	r2, [pc, #104]	; (80021e0 <acc_hidro+0x8c>)
 8002176:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <acc_hidro+0x88>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	4798      	blx	r3
				break;
 8002180:	e028      	b.n	80021d4 <acc_hidro+0x80>
			if (getStatBoton(IN_HASH) == FALL) {
 8002182:	200e      	movs	r0, #14
 8002184:	f7fe f9a4 	bl	80004d0 <getStatBoton>
 8002188:	4603      	mov	r3, r0
 800218a:	2b02      	cmp	r3, #2
 800218c:	d121      	bne.n	80021d2 <acc_hidro+0x7e>
				status_menuHidro = ELIJE_TIEMPO_HIDRO;
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <acc_hidro+0x84>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
				break;
 8002194:	e01e      	b.n	80021d4 <acc_hidro+0x80>
			aux_progOutput = setProg_hidro(PROG_RUN);
 8002196:	2002      	movs	r0, #2
 8002198:	f7fe fe7e 	bl	8000e98 <setProg_hidro>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <acc_hidro+0x90>)
 80021a2:	701a      	strb	r2, [r3, #0]
			switch (aux_progOutput) {
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <acc_hidro+0x90>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d002      	beq.n	80021b2 <acc_hidro+0x5e>
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d004      	beq.n	80021ba <acc_hidro+0x66>
				break;
 80021b0:	e00d      	b.n	80021ce <acc_hidro+0x7a>
					status_menuHidro = LIMITE_TIEMPO_HIDRO;
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <acc_hidro+0x84>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
				break;
 80021b8:	e00a      	b.n	80021d0 <acc_hidro+0x7c>
					status_menuHidro = LIMITE_TIEMPO_HIDRO;
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <acc_hidro+0x84>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
					menuActual = &menu[MENU_PRINCIPAL];
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <acc_hidro+0x88>)
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <acc_hidro+0x8c>)
 80021c4:	601a      	str	r2, [r3, #0]
					menuActual->inicia_menu();
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <acc_hidro+0x88>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4798      	blx	r3
				break;
 80021ce:	bf00      	nop
		break;
 80021d0:	e000      	b.n	80021d4 <acc_hidro+0x80>
		break;
 80021d2:	bf00      	nop
} //end acc_hidro()
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000125 	.word	0x20000125
 80021dc:	200005fc 	.word	0x200005fc
 80021e0:	20000008 	.word	0x20000008
 80021e4:	20000604 	.word	0x20000604

080021e8 <acc_lucesExt>:


void acc_lucesExt (void){ //luces Amarillas
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	switch (status_menuLucesExt) {
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <acc_lucesExt+0x50>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <acc_lucesExt+0x12>
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d017      	beq.n	8002228 <acc_lucesExt+0x40>
			case ELIJE_TIEMPO_LUCESEXT:
				//funcion de seteo de timepo de hidro
				setProg_luz(PROG_RUN);
			break;
		} //end switch status_menuLucesExt
} //end acc_lucesExt()
 80021f8:	e01b      	b.n	8002232 <acc_lucesExt+0x4a>
				if (getStatBoton(IN_AST) == FALL) {
 80021fa:	200c      	movs	r0, #12
 80021fc:	f7fe f968 	bl	80004d0 <getStatBoton>
 8002200:	4603      	mov	r3, r0
 8002202:	2b02      	cmp	r3, #2
 8002204:	d106      	bne.n	8002214 <acc_lucesExt+0x2c>
					menuActual = &menu[MENU_PRINCIPAL];
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <acc_lucesExt+0x54>)
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <acc_lucesExt+0x58>)
 800220a:	601a      	str	r2, [r3, #0]
					menuActual->inicia_menu();
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <acc_lucesExt+0x54>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4798      	blx	r3
				if (getStatBoton(IN_HASH) == FALL) {
 8002214:	200e      	movs	r0, #14
 8002216:	f7fe f95b 	bl	80004d0 <getStatBoton>
 800221a:	4603      	mov	r3, r0
 800221c:	2b02      	cmp	r3, #2
 800221e:	d107      	bne.n	8002230 <acc_lucesExt+0x48>
					status_menuLucesExt = ELIJE_TIEMPO_LUCESEXT;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <acc_lucesExt+0x50>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
					break;
 8002226:	e004      	b.n	8002232 <acc_lucesExt+0x4a>
				setProg_luz(PROG_RUN);
 8002228:	2002      	movs	r0, #2
 800222a:	f7fe ff41 	bl	80010b0 <setProg_luz>
			break;
 800222e:	e000      	b.n	8002232 <acc_lucesExt+0x4a>
			break;
 8002230:	bf00      	nop
} //end acc_lucesExt()
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000126 	.word	0x20000126
 800223c:	200005fc 	.word	0x200005fc
 8002240:	20000008 	.word	0x20000008

08002244 <acc_lucesLed>:


void acc_lucesLed (void){
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <acc_config>:


void acc_config (void){
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	2100      	movs	r1, #0
 8002268:	460a      	mov	r2, r1
 800226a:	801a      	strh	r2, [r3, #0]
 800226c:	460a      	mov	r2, r1
 800226e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8002274:	463b      	mov	r3, r7
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <MX_RTC_Init+0xc0>)
 800227e:	4a28      	ldr	r2, [pc, #160]	; (8002320 <MX_RTC_Init+0xc4>)
 8002280:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <MX_RTC_Init+0xc0>)
 8002284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002288:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <MX_RTC_Init+0xc0>)
 800228c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002290:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002292:	4822      	ldr	r0, [pc, #136]	; (800231c <MX_RTC_Init+0xc0>)
 8002294:	f001 fe1c 	bl	8003ed0 <HAL_RTC_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800229e:	f7ff fc49 	bl	8001b34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80022a2:	2312      	movs	r3, #18
 80022a4:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x59;
 80022a6:	2359      	movs	r3, #89	; 0x59
 80022a8:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x30;
 80022aa:	2330      	movs	r3, #48	; 0x30
 80022ac:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	2201      	movs	r2, #1
 80022b4:	4619      	mov	r1, r3
 80022b6:	4819      	ldr	r0, [pc, #100]	; (800231c <MX_RTC_Init+0xc0>)
 80022b8:	f001 fea0 	bl	8003ffc <HAL_RTC_SetTime>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80022c2:	f7ff fc37 	bl	8001b34 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022c6:	2301      	movs	r3, #1
 80022c8:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_MAY;
 80022ca:	2305      	movs	r3, #5
 80022cc:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	2201      	movs	r2, #1
 80022dc:	4619      	mov	r1, r3
 80022de:	480f      	ldr	r0, [pc, #60]	; (800231c <MX_RTC_Init+0xc0>)
 80022e0:	f001 fffc 	bl	80042dc <HAL_RTC_SetDate>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80022ea:	f7ff fc23 	bl	8001b34 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 80022ee:	2313      	movs	r3, #19
 80022f0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022fe:	463b      	mov	r3, r7
 8002300:	2201      	movs	r2, #1
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_RTC_Init+0xc0>)
 8002306:	f002 f8f3 	bl	80044f0 <HAL_RTC_SetAlarm_IT>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8002310:	f7ff fc10 	bl	8001b34 <Error_Handler>
  }

}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000608 	.word	0x20000608
 8002320:	40002800 	.word	0x40002800

08002324 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <HAL_RTC_MspInit+0x5c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d120      	bne.n	8002378 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002336:	f001 f831 	bl	800339c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RTC_MspInit+0x60>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_RTC_MspInit+0x60>)
 8002340:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002344:	61d3      	str	r3, [r2, #28]
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_RTC_MspInit+0x60>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RTC_MspInit+0x64>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002358:	2200      	movs	r2, #0
 800235a:	2100      	movs	r1, #0
 800235c:	2003      	movs	r0, #3
 800235e:	f000 fe5c 	bl	800301a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002362:	2003      	movs	r0, #3
 8002364:	f000 fe75 	bl	8003052 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002368:	2200      	movs	r2, #0
 800236a:	2100      	movs	r1, #0
 800236c:	2029      	movs	r0, #41	; 0x29
 800236e:	f000 fe54 	bl	800301a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002372:	2029      	movs	r0, #41	; 0x29
 8002374:	f000 fe6d 	bl	8003052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40002800 	.word	0x40002800
 8002384:	40021000 	.word	0x40021000
 8002388:	4242043c 	.word	0x4242043c

0800238c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002390:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <MX_SPI2_Init+0x64>)
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <MX_SPI2_Init+0x68>)
 8002394:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <MX_SPI2_Init+0x64>)
 8002398:	f44f 7282 	mov.w	r2, #260	; 0x104
 800239c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <MX_SPI2_Init+0x64>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <MX_SPI2_Init+0x64>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <MX_SPI2_Init+0x64>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <MX_SPI2_Init+0x64>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <MX_SPI2_Init+0x64>)
 80023b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <MX_SPI2_Init+0x64>)
 80023c0:	2238      	movs	r2, #56	; 0x38
 80023c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <MX_SPI2_Init+0x64>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <MX_SPI2_Init+0x64>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <MX_SPI2_Init+0x64>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <MX_SPI2_Init+0x64>)
 80023d8:	220a      	movs	r2, #10
 80023da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023dc:	4804      	ldr	r0, [pc, #16]	; (80023f0 <MX_SPI2_Init+0x64>)
 80023de:	f002 fc4b 	bl	8004c78 <HAL_SPI_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80023e8:	f7ff fba4 	bl	8001b34 <Error_Handler>
  }

}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	2000061c 	.word	0x2000061c
 80023f4:	40003800 	.word	0x40003800

080023f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <HAL_SPI_MspInit+0x8c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d131      	bne.n	800247c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_SPI_MspInit+0x90>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a1a      	ldr	r2, [pc, #104]	; (8002488 <HAL_SPI_MspInit+0x90>)
 800241e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002422:	61d3      	str	r3, [r2, #28]
 8002424:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_SPI_MspInit+0x90>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002430:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_SPI_MspInit+0x90>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4a14      	ldr	r2, [pc, #80]	; (8002488 <HAL_SPI_MspInit+0x90>)
 8002436:	f043 0308 	orr.w	r3, r3, #8
 800243a:	6193      	str	r3, [r2, #24]
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_SPI_MspInit+0x90>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002448:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800244c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4619      	mov	r1, r3
 800245c:	480b      	ldr	r0, [pc, #44]	; (800248c <HAL_SPI_MspInit+0x94>)
 800245e:	f000 fe13 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002462:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	4619      	mov	r1, r3
 8002476:	4805      	ldr	r0, [pc, #20]	; (800248c <HAL_SPI_MspInit+0x94>)
 8002478:	f000 fe06 	bl	8003088 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40003800 	.word	0x40003800
 8002488:	40021000 	.word	0x40021000
 800248c:	40010c00 	.word	0x40010c00

08002490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_MspInit+0x5c>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	4a14      	ldr	r2, [pc, #80]	; (80024ec <HAL_MspInit+0x5c>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6193      	str	r3, [r2, #24]
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_MspInit+0x5c>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_MspInit+0x5c>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <HAL_MspInit+0x5c>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	61d3      	str	r3, [r2, #28]
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_MspInit+0x5c>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_MspInit+0x60>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_MspInit+0x60>)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010000 	.word	0x40010000

080024f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <HardFault_Handler+0x4>

08002506 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <MemManage_Handler+0x4>

0800250c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <BusFault_Handler+0x4>

08002512 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <UsageFault_Handler+0x4>

08002518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002540:	f000 fa4c 	bl	80029dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}

08002548 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <RTC_IRQHandler+0x10>)
 800254e:	f002 fb4d 	bl	8004bec <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000608 	.word	0x20000608

0800255c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <TIM2_IRQHandler+0x10>)
 8002562:	f003 f914 	bl	800578e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200006b4 	.word	0x200006b4

08002570 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <RTC_Alarm_IRQHandler+0x10>)
 8002576:	f002 f86f 	bl	8004658 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000608 	.word	0x20000608

08002584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800258c:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <_sbrk+0x5c>)
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <_sbrk+0x60>)
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <_sbrk+0x64>)
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <_sbrk+0x68>)
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d207      	bcs.n	80025c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b4:	f003 fd44 	bl	8006040 <__errno>
 80025b8:	4602      	mov	r2, r0
 80025ba:	230c      	movs	r3, #12
 80025bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025c2:	e009      	b.n	80025d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <_sbrk+0x64>)
 80025d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20005000 	.word	0x20005000
 80025e4:	00000400 	.word	0x00000400
 80025e8:	20000128 	.word	0x20000128
 80025ec:	20000740 	.word	0x20000740

080025f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80025f4:	4b15      	ldr	r3, [pc, #84]	; (800264c <SystemInit+0x5c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <SystemInit+0x5c>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <SystemInit+0x5c>)
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4911      	ldr	r1, [pc, #68]	; (800264c <SystemInit+0x5c>)
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <SystemInit+0x60>)
 8002608:	4013      	ands	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <SystemInit+0x5c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0e      	ldr	r2, [pc, #56]	; (800264c <SystemInit+0x5c>)
 8002612:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <SystemInit+0x5c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <SystemInit+0x5c>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <SystemInit+0x5c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a07      	ldr	r2, [pc, #28]	; (800264c <SystemInit+0x5c>)
 800262e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002632:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <SystemInit+0x5c>)
 8002636:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800263a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <SystemInit+0x64>)
 800263e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002642:	609a      	str	r2, [r3, #8]
#endif 
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	40021000 	.word	0x40021000
 8002650:	f8ff0000 	.word	0xf8ff0000
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266c:	463b      	mov	r3, r7
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <MX_TIM2_Init+0x94>)
 8002676:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800267a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <MX_TIM2_Init+0x94>)
 800267e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002682:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <MX_TIM2_Init+0x94>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <MX_TIM2_Init+0x94>)
 800268c:	2263      	movs	r2, #99	; 0x63
 800268e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <MX_TIM2_Init+0x94>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <MX_TIM2_Init+0x94>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800269c:	4813      	ldr	r0, [pc, #76]	; (80026ec <MX_TIM2_Init+0x94>)
 800269e:	f003 f805 	bl	80056ac <HAL_TIM_Base_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026a8:	f7ff fa44 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	4619      	mov	r1, r3
 80026b8:	480c      	ldr	r0, [pc, #48]	; (80026ec <MX_TIM2_Init+0x94>)
 80026ba:	f003 f970 	bl	800599e <HAL_TIM_ConfigClockSource>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80026c4:	f7ff fa36 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026d0:	463b      	mov	r3, r7
 80026d2:	4619      	mov	r1, r3
 80026d4:	4805      	ldr	r0, [pc, #20]	; (80026ec <MX_TIM2_Init+0x94>)
 80026d6:	f003 fb35 	bl	8005d44 <HAL_TIMEx_MasterConfigSynchronization>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80026e0:	f7ff fa28 	bl	8001b34 <Error_Handler>
  }

}
 80026e4:	bf00      	nop
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200006b4 	.word	0x200006b4

080026f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f6:	f107 0308 	add.w	r3, r7, #8
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002704:	463b      	mov	r3, r7
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800270c:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <MX_TIM3_Init+0x94>)
 800270e:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <MX_TIM3_Init+0x98>)
 8002710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <MX_TIM3_Init+0x94>)
 8002714:	2248      	movs	r2, #72	; 0x48
 8002716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <MX_TIM3_Init+0x94>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <MX_TIM3_Init+0x94>)
 8002720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002724:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <MX_TIM3_Init+0x94>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272c:	4b15      	ldr	r3, [pc, #84]	; (8002784 <MX_TIM3_Init+0x94>)
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002732:	4814      	ldr	r0, [pc, #80]	; (8002784 <MX_TIM3_Init+0x94>)
 8002734:	f002 ffba 	bl	80056ac <HAL_TIM_Base_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800273e:	f7ff f9f9 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002748:	f107 0308 	add.w	r3, r7, #8
 800274c:	4619      	mov	r1, r3
 800274e:	480d      	ldr	r0, [pc, #52]	; (8002784 <MX_TIM3_Init+0x94>)
 8002750:	f003 f925 	bl	800599e <HAL_TIM_ConfigClockSource>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800275a:	f7ff f9eb 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002766:	463b      	mov	r3, r7
 8002768:	4619      	mov	r1, r3
 800276a:	4806      	ldr	r0, [pc, #24]	; (8002784 <MX_TIM3_Init+0x94>)
 800276c:	f003 faea 	bl	8005d44 <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002776:	f7ff f9dd 	bl	8001b34 <Error_Handler>
  }

}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000674 	.word	0x20000674
 8002788:	40000400 	.word	0x40000400

0800278c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279c:	d114      	bne.n	80027c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_TIM_Base_MspInit+0x68>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_TIM_Base_MspInit+0x68>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	61d3      	str	r3, [r2, #28]
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_TIM_Base_MspInit+0x68>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	201c      	movs	r0, #28
 80027bc:	f000 fc2d 	bl	800301a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027c0:	201c      	movs	r0, #28
 80027c2:	f000 fc46 	bl	8003052 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80027c6:	e010      	b.n	80027ea <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <HAL_TIM_Base_MspInit+0x6c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d10b      	bne.n	80027ea <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_TIM_Base_MspInit+0x68>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <HAL_TIM_Base_MspInit+0x68>)
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	61d3      	str	r3, [r2, #28]
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_TIM_Base_MspInit+0x68>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40000400 	.word	0x40000400

080027fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <MX_USART1_UART_Init+0x4c>)
 8002802:	4a12      	ldr	r2, [pc, #72]	; (800284c <MX_USART1_UART_Init+0x50>)
 8002804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <MX_USART1_UART_Init+0x4c>)
 8002808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800280c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <MX_USART1_UART_Init+0x4c>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <MX_USART1_UART_Init+0x4c>)
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <MX_USART1_UART_Init+0x4c>)
 800281c:	2200      	movs	r2, #0
 800281e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <MX_USART1_UART_Init+0x4c>)
 8002822:	220c      	movs	r2, #12
 8002824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <MX_USART1_UART_Init+0x4c>)
 8002828:	2200      	movs	r2, #0
 800282a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <MX_USART1_UART_Init+0x4c>)
 800282e:	2200      	movs	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002832:	4805      	ldr	r0, [pc, #20]	; (8002848 <MX_USART1_UART_Init+0x4c>)
 8002834:	f003 fadc 	bl	8005df0 <HAL_UART_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800283e:	f7ff f979 	bl	8001b34 <Error_Handler>
  }

}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200006f4 	.word	0x200006f4
 800284c:	40013800 	.word	0x40013800

08002850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <HAL_UART_MspInit+0xa4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d13d      	bne.n	80028ec <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002870:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <HAL_UART_MspInit+0xa8>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <HAL_UART_MspInit+0xa8>)
 8002876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287a:	6193      	str	r3, [r2, #24]
 800287c:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <HAL_UART_MspInit+0xa8>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_UART_MspInit+0xa8>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <HAL_UART_MspInit+0xa8>)
 800288e:	f043 0308 	orr.w	r3, r3, #8
 8002892:	6193      	str	r3, [r2, #24]
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_UART_MspInit+0xa8>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028a0:	2340      	movs	r3, #64	; 0x40
 80028a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4619      	mov	r1, r3
 80028b2:	4812      	ldr	r0, [pc, #72]	; (80028fc <HAL_UART_MspInit+0xac>)
 80028b4:	f000 fbe8 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	4619      	mov	r1, r3
 80028ca:	480c      	ldr	r0, [pc, #48]	; (80028fc <HAL_UART_MspInit+0xac>)
 80028cc:	f000 fbdc 	bl	8003088 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_UART_MspInit+0xb0>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	4a06      	ldr	r2, [pc, #24]	; (8002900 <HAL_UART_MspInit+0xb0>)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40013800 	.word	0x40013800
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40010c00 	.word	0x40010c00
 8002900:	40010000 	.word	0x40010000

08002904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002904:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002906:	e003      	b.n	8002910 <LoopCopyDataInit>

08002908 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800290a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800290c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800290e:	3104      	adds	r1, #4

08002910 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002910:	480a      	ldr	r0, [pc, #40]	; (800293c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002914:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002916:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002918:	d3f6      	bcc.n	8002908 <CopyDataInit>
  ldr r2, =_sbss
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800291c:	e002      	b.n	8002924 <LoopFillZerobss>

0800291e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002920:	f842 3b04 	str.w	r3, [r2], #4

08002924 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002926:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002928:	d3f9      	bcc.n	800291e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800292a:	f7ff fe61 	bl	80025f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800292e:	f003 fb8d 	bl	800604c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002932:	f7fe fffb 	bl	800192c <main>
  bx lr
 8002936:	4770      	bx	lr
  ldr r3, =_sidata
 8002938:	08006b4c 	.word	0x08006b4c
  ldr r0, =_sdata
 800293c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002940:	200000e8 	.word	0x200000e8
  ldr r2, =_sbss
 8002944:	200000e8 	.word	0x200000e8
  ldr r3, = _ebss
 8002948:	2000073c 	.word	0x2000073c

0800294c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC1_2_IRQHandler>
	...

08002950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <HAL_Init+0x28>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a07      	ldr	r2, [pc, #28]	; (8002978 <HAL_Init+0x28>)
 800295a:	f043 0310 	orr.w	r3, r3, #16
 800295e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002960:	2003      	movs	r0, #3
 8002962:	f000 fb4f 	bl	8003004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002966:	2000      	movs	r0, #0
 8002968:	f000 f808 	bl	800297c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800296c:	f7ff fd90 	bl	8002490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40022000 	.word	0x40022000

0800297c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_InitTick+0x54>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_InitTick+0x58>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4619      	mov	r1, r3
 800298e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002992:	fbb3 f3f1 	udiv	r3, r3, r1
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fb67 	bl	800306e <HAL_SYSTICK_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00e      	b.n	80029c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b0f      	cmp	r3, #15
 80029ae:	d80a      	bhi.n	80029c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b0:	2200      	movs	r2, #0
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029b8:	f000 fb2f 	bl	800301a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <HAL_InitTick+0x5c>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000078 	.word	0x20000078
 80029d4:	20000080 	.word	0x20000080
 80029d8:	2000007c 	.word	0x2000007c

080029dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_IncTick+0x1c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_IncTick+0x20>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a03      	ldr	r2, [pc, #12]	; (80029fc <HAL_IncTick+0x20>)
 80029ee:	6013      	str	r3, [r2, #0]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	20000080 	.word	0x20000080
 80029fc:	20000734 	.word	0x20000734

08002a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <HAL_GetTick+0x10>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20000734 	.word	0x20000734

08002a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff fff0 	bl	8002a00 <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2c:	d005      	beq.n	8002a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_Delay+0x40>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a3a:	bf00      	nop
 8002a3c:	f7ff ffe0 	bl	8002a00 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d8f7      	bhi.n	8002a3c <HAL_Delay+0x28>
  {
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000080 	.word	0x20000080

08002a58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0be      	b.n	8002bf8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe f810 	bl	8000abc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f9ab 	bl	8002df8 <ADC_ConversionStop_Disable>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 8099 	bne.w	8002be6 <HAL_ADC_Init+0x18e>
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 8095 	bne.w	8002be6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ac4:	f023 0302 	bic.w	r3, r3, #2
 8002ac8:	f043 0202 	orr.w	r2, r3, #2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ad8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7b1b      	ldrb	r3, [r3, #12]
 8002ade:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ae0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af0:	d003      	beq.n	8002afa <HAL_ADC_Init+0xa2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d102      	bne.n	8002b00 <HAL_ADC_Init+0xa8>
 8002afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afe:	e000      	b.n	8002b02 <HAL_ADC_Init+0xaa>
 8002b00:	2300      	movs	r3, #0
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7d1b      	ldrb	r3, [r3, #20]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d119      	bne.n	8002b44 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7b1b      	ldrb	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	035a      	lsls	r2, r3, #13
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	e00b      	b.n	8002b44 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	f043 0220 	orr.w	r2, r3, #32
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <HAL_ADC_Init+0x1a8>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b74:	d003      	beq.n	8002b7e <HAL_ADC_Init+0x126>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d104      	bne.n	8002b88 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	051b      	lsls	r3, r3, #20
 8002b86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_ADC_Init+0x1ac>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d10b      	bne.n	8002bc4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bc2:	e018      	b.n	8002bf6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	f023 0312 	bic.w	r3, r3, #18
 8002bcc:	f043 0210 	orr.w	r2, r3, #16
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002be4:	e007      	b.n	8002bf6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	f043 0210 	orr.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	ffe1f7fd 	.word	0xffe1f7fd
 8002c04:	ff1f0efe 	.word	0xff1f0efe

08002c08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x20>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e0dc      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x1da>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d81c      	bhi.n	8002c72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	3b05      	subs	r3, #5
 8002c4a:	221f      	movs	r2, #31
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	4019      	ands	r1, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	3b05      	subs	r3, #5
 8002c64:	fa00 f203 	lsl.w	r2, r0, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8002c70:	e03c      	b.n	8002cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d81c      	bhi.n	8002cb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	3b23      	subs	r3, #35	; 0x23
 8002c8c:	221f      	movs	r2, #31
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	4019      	ands	r1, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3b23      	subs	r3, #35	; 0x23
 8002ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb2:	e01b      	b.n	8002cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b41      	subs	r3, #65	; 0x41
 8002cc6:	221f      	movs	r2, #31
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	4019      	ands	r1, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	3b41      	subs	r3, #65	; 0x41
 8002ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b09      	cmp	r3, #9
 8002cf2:	d91c      	bls.n	8002d2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68d9      	ldr	r1, [r3, #12]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	3b1e      	subs	r3, #30
 8002d06:	2207      	movs	r2, #7
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	4019      	ands	r1, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6898      	ldr	r0, [r3, #8]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3b1e      	subs	r3, #30
 8002d20:	fa00 f203 	lsl.w	r2, r0, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	60da      	str	r2, [r3, #12]
 8002d2c:	e019      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6919      	ldr	r1, [r3, #16]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	2207      	movs	r2, #7
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	4019      	ands	r1, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6898      	ldr	r0, [r3, #8]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d003      	beq.n	8002d72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d6e:	2b11      	cmp	r3, #17
 8002d70:	d132      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <HAL_ADC_ConfigChannel+0x1e4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d125      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d126      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d98:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d11a      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002da2:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	0c9a      	lsrs	r2, r3, #18
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002db8:	e002      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f9      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x1b2>
 8002dc6:	e007      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	f043 0220 	orr.w	r2, r3, #32
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	40012400 	.word	0x40012400
 8002df0:	20000078 	.word	0x20000078
 8002df4:	431bde83 	.word	0x431bde83

08002df8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d127      	bne.n	8002e62 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e22:	f7ff fded 	bl	8002a00 <HAL_GetTick>
 8002e26:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e28:	e014      	b.n	8002e54 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e2a:	f7ff fde9 	bl	8002a00 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d90d      	bls.n	8002e54 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	f043 0210 	orr.w	r2, r3, #16
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	f043 0201 	orr.w	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e007      	b.n	8002e64 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d0e3      	beq.n	8002e2a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <__NVIC_GetPriorityGrouping+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db0b      	blt.n	8002efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	4906      	ldr	r1, [pc, #24]	; (8002f04 <__NVIC_EnableIRQ+0x34>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	e000e100 	.word	0xe000e100

08002f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	db0a      	blt.n	8002f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	490c      	ldr	r1, [pc, #48]	; (8002f54 <__NVIC_SetPriority+0x4c>)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	0112      	lsls	r2, r2, #4
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f30:	e00a      	b.n	8002f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4908      	ldr	r1, [pc, #32]	; (8002f58 <__NVIC_SetPriority+0x50>)
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	3b04      	subs	r3, #4
 8002f40:	0112      	lsls	r2, r2, #4
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	440b      	add	r3, r1
 8002f46:	761a      	strb	r2, [r3, #24]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000e100 	.word	0xe000e100
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f1c3 0307 	rsb	r3, r3, #7
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	bf28      	it	cs
 8002f7a:	2304      	movcs	r3, #4
 8002f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d902      	bls.n	8002f8c <NVIC_EncodePriority+0x30>
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3b03      	subs	r3, #3
 8002f8a:	e000      	b.n	8002f8e <NVIC_EncodePriority+0x32>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	43d9      	mvns	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	4313      	orrs	r3, r2
         );
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3724      	adds	r7, #36	; 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fd0:	d301      	bcc.n	8002fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00f      	b.n	8002ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <SysTick_Config+0x40>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fde:	210f      	movs	r1, #15
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fe4:	f7ff ff90 	bl	8002f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <SysTick_Config+0x40>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fee:	4b04      	ldr	r3, [pc, #16]	; (8003000 <SysTick_Config+0x40>)
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	e000e010 	.word	0xe000e010

08003004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff2d 	bl	8002e6c <__NVIC_SetPriorityGrouping>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800302c:	f7ff ff42 	bl	8002eb4 <__NVIC_GetPriorityGrouping>
 8003030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	6978      	ldr	r0, [r7, #20]
 8003038:	f7ff ff90 	bl	8002f5c <NVIC_EncodePriority>
 800303c:	4602      	mov	r2, r0
 800303e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ff5f 	bl	8002f08 <__NVIC_SetPriority>
}
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff35 	bl	8002ed0 <__NVIC_EnableIRQ>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff ffa2 	bl	8002fc0 <SysTick_Config>
 800307c:	4603      	mov	r3, r0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b480      	push	{r7}
 800308a:	b08b      	sub	sp, #44	; 0x2c
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309a:	e127      	b.n	80032ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800309c:	2201      	movs	r2, #1
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	f040 8116 	bne.w	80032e6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b12      	cmp	r3, #18
 80030c0:	d034      	beq.n	800312c <HAL_GPIO_Init+0xa4>
 80030c2:	2b12      	cmp	r3, #18
 80030c4:	d80d      	bhi.n	80030e2 <HAL_GPIO_Init+0x5a>
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d02b      	beq.n	8003122 <HAL_GPIO_Init+0x9a>
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d804      	bhi.n	80030d8 <HAL_GPIO_Init+0x50>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d031      	beq.n	8003136 <HAL_GPIO_Init+0xae>
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d01c      	beq.n	8003110 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030d6:	e048      	b.n	800316a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d043      	beq.n	8003164 <HAL_GPIO_Init+0xdc>
 80030dc:	2b11      	cmp	r3, #17
 80030de:	d01b      	beq.n	8003118 <HAL_GPIO_Init+0x90>
          break;
 80030e0:	e043      	b.n	800316a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030e2:	4a89      	ldr	r2, [pc, #548]	; (8003308 <HAL_GPIO_Init+0x280>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d026      	beq.n	8003136 <HAL_GPIO_Init+0xae>
 80030e8:	4a87      	ldr	r2, [pc, #540]	; (8003308 <HAL_GPIO_Init+0x280>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d806      	bhi.n	80030fc <HAL_GPIO_Init+0x74>
 80030ee:	4a87      	ldr	r2, [pc, #540]	; (800330c <HAL_GPIO_Init+0x284>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d020      	beq.n	8003136 <HAL_GPIO_Init+0xae>
 80030f4:	4a86      	ldr	r2, [pc, #536]	; (8003310 <HAL_GPIO_Init+0x288>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01d      	beq.n	8003136 <HAL_GPIO_Init+0xae>
          break;
 80030fa:	e036      	b.n	800316a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030fc:	4a85      	ldr	r2, [pc, #532]	; (8003314 <HAL_GPIO_Init+0x28c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d019      	beq.n	8003136 <HAL_GPIO_Init+0xae>
 8003102:	4a85      	ldr	r2, [pc, #532]	; (8003318 <HAL_GPIO_Init+0x290>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d016      	beq.n	8003136 <HAL_GPIO_Init+0xae>
 8003108:	4a84      	ldr	r2, [pc, #528]	; (800331c <HAL_GPIO_Init+0x294>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_GPIO_Init+0xae>
          break;
 800310e:	e02c      	b.n	800316a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	623b      	str	r3, [r7, #32]
          break;
 8003116:	e028      	b.n	800316a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	3304      	adds	r3, #4
 800311e:	623b      	str	r3, [r7, #32]
          break;
 8003120:	e023      	b.n	800316a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	3308      	adds	r3, #8
 8003128:	623b      	str	r3, [r7, #32]
          break;
 800312a:	e01e      	b.n	800316a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	330c      	adds	r3, #12
 8003132:	623b      	str	r3, [r7, #32]
          break;
 8003134:	e019      	b.n	800316a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800313e:	2304      	movs	r3, #4
 8003140:	623b      	str	r3, [r7, #32]
          break;
 8003142:	e012      	b.n	800316a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d105      	bne.n	8003158 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800314c:	2308      	movs	r3, #8
 800314e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	611a      	str	r2, [r3, #16]
          break;
 8003156:	e008      	b.n	800316a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003158:	2308      	movs	r3, #8
 800315a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	615a      	str	r2, [r3, #20]
          break;
 8003162:	e002      	b.n	800316a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
          break;
 8003168:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2bff      	cmp	r3, #255	; 0xff
 800316e:	d801      	bhi.n	8003174 <HAL_GPIO_Init+0xec>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	e001      	b.n	8003178 <HAL_GPIO_Init+0xf0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2bff      	cmp	r3, #255	; 0xff
 800317e:	d802      	bhi.n	8003186 <HAL_GPIO_Init+0xfe>
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_Init+0x104>
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	3b08      	subs	r3, #8
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	210f      	movs	r1, #15
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	401a      	ands	r2, r3
 800319e:	6a39      	ldr	r1, [r7, #32]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	431a      	orrs	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8096 	beq.w	80032e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031ba:	4b59      	ldr	r3, [pc, #356]	; (8003320 <HAL_GPIO_Init+0x298>)
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	4a58      	ldr	r2, [pc, #352]	; (8003320 <HAL_GPIO_Init+0x298>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6193      	str	r3, [r2, #24]
 80031c6:	4b56      	ldr	r3, [pc, #344]	; (8003320 <HAL_GPIO_Init+0x298>)
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031d2:	4a54      	ldr	r2, [pc, #336]	; (8003324 <HAL_GPIO_Init+0x29c>)
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	3302      	adds	r3, #2
 80031da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	220f      	movs	r2, #15
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4013      	ands	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4b      	ldr	r2, [pc, #300]	; (8003328 <HAL_GPIO_Init+0x2a0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x19e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4a      	ldr	r2, [pc, #296]	; (800332c <HAL_GPIO_Init+0x2a4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x19a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a49      	ldr	r2, [pc, #292]	; (8003330 <HAL_GPIO_Init+0x2a8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x196>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a48      	ldr	r2, [pc, #288]	; (8003334 <HAL_GPIO_Init+0x2ac>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x192>
 8003216:	2303      	movs	r3, #3
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x1a0>
 800321a:	2304      	movs	r3, #4
 800321c:	e004      	b.n	8003228 <HAL_GPIO_Init+0x1a0>
 800321e:	2302      	movs	r3, #2
 8003220:	e002      	b.n	8003228 <HAL_GPIO_Init+0x1a0>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_GPIO_Init+0x1a0>
 8003226:	2300      	movs	r3, #0
 8003228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322a:	f002 0203 	and.w	r2, r2, #3
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	4093      	lsls	r3, r2
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003238:	493a      	ldr	r1, [pc, #232]	; (8003324 <HAL_GPIO_Init+0x29c>)
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3302      	adds	r3, #2
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003252:	4b39      	ldr	r3, [pc, #228]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4938      	ldr	r1, [pc, #224]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
 800325e:	e006      	b.n	800326e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003260:	4b35      	ldr	r3, [pc, #212]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	43db      	mvns	r3, r3
 8003268:	4933      	ldr	r1, [pc, #204]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 800326a:	4013      	ands	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800327a:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	492e      	ldr	r1, [pc, #184]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
 8003286:	e006      	b.n	8003296 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003288:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	43db      	mvns	r3, r3
 8003290:	4929      	ldr	r1, [pc, #164]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 8003292:	4013      	ands	r3, r2
 8003294:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d006      	beq.n	80032b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032a2:	4b25      	ldr	r3, [pc, #148]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	4924      	ldr	r1, [pc, #144]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
 80032ae:	e006      	b.n	80032be <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032b0:	4b21      	ldr	r3, [pc, #132]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	491f      	ldr	r1, [pc, #124]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d006      	beq.n	80032d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	491a      	ldr	r1, [pc, #104]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60cb      	str	r3, [r1, #12]
 80032d6:	e006      	b.n	80032e6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	43db      	mvns	r3, r3
 80032e0:	4915      	ldr	r1, [pc, #84]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	3301      	adds	r3, #1
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	fa22 f303 	lsr.w	r3, r2, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f47f aed0 	bne.w	800309c <HAL_GPIO_Init+0x14>
  }
}
 80032fc:	bf00      	nop
 80032fe:	372c      	adds	r7, #44	; 0x2c
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	10210000 	.word	0x10210000
 800330c:	10110000 	.word	0x10110000
 8003310:	10120000 	.word	0x10120000
 8003314:	10310000 	.word	0x10310000
 8003318:	10320000 	.word	0x10320000
 800331c:	10220000 	.word	0x10220000
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000
 8003328:	40010800 	.word	0x40010800
 800332c:	40010c00 	.word	0x40010c00
 8003330:	40011000 	.word	0x40011000
 8003334:	40011400 	.word	0x40011400
 8003338:	40010400 	.word	0x40010400

0800333c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
 8003358:	e001      	b.n	800335e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800335a:	2300      	movs	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	460b      	mov	r3, r1
 8003374:	807b      	strh	r3, [r7, #2]
 8003376:	4613      	mov	r3, r2
 8003378:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800337a:	787b      	ldrb	r3, [r7, #1]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003380:	887a      	ldrh	r2, [r7, #2]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003386:	e003      	b.n	8003390 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	041a      	lsls	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	611a      	str	r2, [r3, #16]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
	...

0800339c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	420e0020 	.word	0x420e0020

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e26c      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8087 	beq.w	80034e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d4:	4b92      	ldr	r3, [pc, #584]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d00c      	beq.n	80033fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033e0:	4b8f      	ldr	r3, [pc, #572]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d112      	bne.n	8003412 <HAL_RCC_OscConfig+0x5e>
 80033ec:	4b8c      	ldr	r3, [pc, #560]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f8:	d10b      	bne.n	8003412 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fa:	4b89      	ldr	r3, [pc, #548]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d06c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x12c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d168      	bne.n	80034e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e246      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341a:	d106      	bne.n	800342a <HAL_RCC_OscConfig+0x76>
 800341c:	4b80      	ldr	r3, [pc, #512]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a7f      	ldr	r2, [pc, #508]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	e02e      	b.n	8003488 <HAL_RCC_OscConfig+0xd4>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x98>
 8003432:	4b7b      	ldr	r3, [pc, #492]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a7a      	ldr	r2, [pc, #488]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b78      	ldr	r3, [pc, #480]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a77      	ldr	r2, [pc, #476]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e01d      	b.n	8003488 <HAL_RCC_OscConfig+0xd4>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0xbc>
 8003456:	4b72      	ldr	r3, [pc, #456]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a71      	ldr	r2, [pc, #452]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 800345c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b6f      	ldr	r3, [pc, #444]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a6e      	ldr	r2, [pc, #440]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0xd4>
 8003470:	4b6b      	ldr	r3, [pc, #428]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a6a      	ldr	r2, [pc, #424]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b68      	ldr	r3, [pc, #416]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a67      	ldr	r2, [pc, #412]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003486:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7ff fab6 	bl	8002a00 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003498:	f7ff fab2 	bl	8002a00 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e1fa      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b5d      	ldr	r3, [pc, #372]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0xe4>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7ff faa2 	bl	8002a00 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c0:	f7ff fa9e 	bl	8002a00 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e1e6      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x10c>
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d063      	beq.n	80035b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ee:	4b4c      	ldr	r3, [pc, #304]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00b      	beq.n	8003512 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034fa:	4b49      	ldr	r3, [pc, #292]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b08      	cmp	r3, #8
 8003504:	d11c      	bne.n	8003540 <HAL_RCC_OscConfig+0x18c>
 8003506:	4b46      	ldr	r3, [pc, #280]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d116      	bne.n	8003540 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	4b43      	ldr	r3, [pc, #268]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_RCC_OscConfig+0x176>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d001      	beq.n	800352a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e1ba      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352a:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4939      	ldr	r1, [pc, #228]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	e03a      	b.n	80035b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d020      	beq.n	800358a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003548:	4b36      	ldr	r3, [pc, #216]	; (8003624 <HAL_RCC_OscConfig+0x270>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7ff fa57 	bl	8002a00 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003556:	f7ff fa53 	bl	8002a00 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e19b      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003568:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b2a      	ldr	r3, [pc, #168]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4927      	ldr	r1, [pc, #156]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
 8003588:	e015      	b.n	80035b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358a:	4b26      	ldr	r3, [pc, #152]	; (8003624 <HAL_RCC_OscConfig+0x270>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7ff fa36 	bl	8002a00 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003598:	f7ff fa32 	bl	8002a00 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e17a      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035aa:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d03a      	beq.n	8003638 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d019      	beq.n	80035fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ca:	4b17      	ldr	r3, [pc, #92]	; (8003628 <HAL_RCC_OscConfig+0x274>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d0:	f7ff fa16 	bl	8002a00 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d8:	f7ff fa12 	bl	8002a00 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e15a      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035f6:	2001      	movs	r0, #1
 80035f8:	f000 fada 	bl	8003bb0 <RCC_Delay>
 80035fc:	e01c      	b.n	8003638 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <HAL_RCC_OscConfig+0x274>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7ff f9fc 	bl	8002a00 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360a:	e00f      	b.n	800362c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800360c:	f7ff f9f8 	bl	8002a00 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d908      	bls.n	800362c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e140      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	42420000 	.word	0x42420000
 8003628:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	4b9e      	ldr	r3, [pc, #632]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e9      	bne.n	800360c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80a6 	beq.w	8003792 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364a:	4b97      	ldr	r3, [pc, #604]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10d      	bne.n	8003672 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	4b94      	ldr	r3, [pc, #592]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4a93      	ldr	r2, [pc, #588]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800365c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003660:	61d3      	str	r3, [r2, #28]
 8003662:	4b91      	ldr	r3, [pc, #580]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366e:	2301      	movs	r3, #1
 8003670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	4b8e      	ldr	r3, [pc, #568]	; (80038ac <HAL_RCC_OscConfig+0x4f8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d118      	bne.n	80036b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367e:	4b8b      	ldr	r3, [pc, #556]	; (80038ac <HAL_RCC_OscConfig+0x4f8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a8a      	ldr	r2, [pc, #552]	; (80038ac <HAL_RCC_OscConfig+0x4f8>)
 8003684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368a:	f7ff f9b9 	bl	8002a00 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003692:	f7ff f9b5 	bl	8002a00 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b64      	cmp	r3, #100	; 0x64
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0fd      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	4b81      	ldr	r3, [pc, #516]	; (80038ac <HAL_RCC_OscConfig+0x4f8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d106      	bne.n	80036c6 <HAL_RCC_OscConfig+0x312>
 80036b8:	4b7b      	ldr	r3, [pc, #492]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4a7a      	ldr	r2, [pc, #488]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6213      	str	r3, [r2, #32]
 80036c4:	e02d      	b.n	8003722 <HAL_RCC_OscConfig+0x36e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x334>
 80036ce:	4b76      	ldr	r3, [pc, #472]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4a75      	ldr	r2, [pc, #468]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6213      	str	r3, [r2, #32]
 80036da:	4b73      	ldr	r3, [pc, #460]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4a72      	ldr	r2, [pc, #456]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	6213      	str	r3, [r2, #32]
 80036e6:	e01c      	b.n	8003722 <HAL_RCC_OscConfig+0x36e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d10c      	bne.n	800370a <HAL_RCC_OscConfig+0x356>
 80036f0:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	4a6c      	ldr	r2, [pc, #432]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	6213      	str	r3, [r2, #32]
 80036fc:	4b6a      	ldr	r3, [pc, #424]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4a69      	ldr	r2, [pc, #420]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6213      	str	r3, [r2, #32]
 8003708:	e00b      	b.n	8003722 <HAL_RCC_OscConfig+0x36e>
 800370a:	4b67      	ldr	r3, [pc, #412]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4a66      	ldr	r2, [pc, #408]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	6213      	str	r3, [r2, #32]
 8003716:	4b64      	ldr	r3, [pc, #400]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a63      	ldr	r2, [pc, #396]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d015      	beq.n	8003756 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372a:	f7ff f969 	bl	8002a00 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7ff f965 	bl	8002a00 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0ab      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003748:	4b57      	ldr	r3, [pc, #348]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ee      	beq.n	8003732 <HAL_RCC_OscConfig+0x37e>
 8003754:	e014      	b.n	8003780 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7ff f953 	bl	8002a00 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375c:	e00a      	b.n	8003774 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7ff f94f 	bl	8002a00 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	; 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e095      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003774:	4b4c      	ldr	r3, [pc, #304]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ee      	bne.n	800375e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d105      	bne.n	8003792 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003786:	4b48      	ldr	r3, [pc, #288]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4a47      	ldr	r2, [pc, #284]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003790:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8081 	beq.w	800389e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800379c:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d061      	beq.n	800386c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d146      	bne.n	800383e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b0:	4b3f      	ldr	r3, [pc, #252]	; (80038b0 <HAL_RCC_OscConfig+0x4fc>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7ff f923 	bl	8002a00 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7ff f91f 	bl	8002a00 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e067      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d0:	4b35      	ldr	r3, [pc, #212]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d108      	bne.n	80037f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037e6:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	492d      	ldr	r1, [pc, #180]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a19      	ldr	r1, [r3, #32]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	430b      	orrs	r3, r1
 800380a:	4927      	ldr	r1, [pc, #156]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003810:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <HAL_RCC_OscConfig+0x4fc>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003816:	f7ff f8f3 	bl	8002a00 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381e:	f7ff f8ef 	bl	8002a00 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e037      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x46a>
 800383c:	e02f      	b.n	800389e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383e:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <HAL_RCC_OscConfig+0x4fc>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7ff f8dc 	bl	8002a00 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384c:	f7ff f8d8 	bl	8002a00 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e020      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x498>
 800386a:	e018      	b.n	800389e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e013      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	429a      	cmp	r2, r3
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40007000 	.word	0x40007000
 80038b0:	42420060 	.word	0x42420060

080038b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0d0      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b6a      	ldr	r3, [pc, #424]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b67      	ldr	r3, [pc, #412]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 0207 	bic.w	r2, r3, #7
 80038de:	4965      	ldr	r1, [pc, #404]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800391a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003928:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003932:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	494d      	ldr	r1, [pc, #308]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d040      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b41      	ldr	r3, [pc, #260]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e073      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b3d      	ldr	r3, [pc, #244]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06b      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4936      	ldr	r1, [pc, #216]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a4:	f7ff f82c 	bl	8002a00 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7ff f828 	bl	8002a00 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e053      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d210      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 0207 	bic.w	r2, r3, #7
 80039ea:	4922      	ldr	r1, [pc, #136]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4916      	ldr	r1, [pc, #88]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	490e      	ldr	r1, [pc, #56]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a42:	f000 f821 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a46:	4601      	mov	r1, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <HAL_RCC_ClockConfig+0x1c8>)
 8003a54:	5cd3      	ldrb	r3, [r2, r3]
 8003a56:	fa21 f303 	lsr.w	r3, r1, r3
 8003a5a:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <HAL_RCC_ClockConfig+0x1cc>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1d0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe ff8a 	bl	800297c <HAL_InitTick>

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40022000 	.word	0x40022000
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08006af8 	.word	0x08006af8
 8003a80:	20000078 	.word	0x20000078
 8003a84:	2000007c 	.word	0x2000007c

08003a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	b490      	push	{r4, r7}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a8e:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a90:	1d3c      	adds	r4, r7, #4
 8003a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a98:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ab2:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d002      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x46>
 8003ac6:	e02d      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ac8:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aca:	623b      	str	r3, [r7, #32]
      break;
 8003acc:	e02d      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	0c9b      	lsrs	r3, r3, #18
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ada:	4413      	add	r3, r2
 8003adc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ae0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	0c5b      	lsrs	r3, r3, #17
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003afa:	4413      	add	r3, r2
 8003afc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	4a0f      	ldr	r2, [pc, #60]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b06:	fb02 f203 	mul.w	r2, r2, r3
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
 8003b12:	e004      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	623b      	str	r3, [r7, #32]
      break;
 8003b22:	e002      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b24:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b26:	623b      	str	r3, [r7, #32]
      break;
 8003b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3728      	adds	r7, #40	; 0x28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc90      	pop	{r4, r7}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	08006ad0 	.word	0x08006ad0
 8003b3c:	08006ae0 	.word	0x08006ae0
 8003b40:	40021000 	.word	0x40021000
 8003b44:	007a1200 	.word	0x007a1200
 8003b48:	003d0900 	.word	0x003d0900

08003b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b50:	4b02      	ldr	r3, [pc, #8]	; (8003b5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	20000078 	.word	0x20000078

08003b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b64:	f7ff fff2 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b68:	4601      	mov	r1, r0
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4a03      	ldr	r2, [pc, #12]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b76:	5cd3      	ldrb	r3, [r2, r3]
 8003b78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08006b08 	.word	0x08006b08

08003b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b8c:	f7ff ffde 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b90:	4601      	mov	r1, r0
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	0adb      	lsrs	r3, r3, #11
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4a03      	ldr	r2, [pc, #12]	; (8003bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	08006b08 	.word	0x08006b08

08003bb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <RCC_Delay+0x34>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <RCC_Delay+0x38>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	0a5b      	lsrs	r3, r3, #9
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bcc:	bf00      	nop
  }
  while (Delay --);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1e5a      	subs	r2, r3, #1
 8003bd2:	60fa      	str	r2, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f9      	bne.n	8003bcc <RCC_Delay+0x1c>
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000078 	.word	0x20000078
 8003be8:	10624dd3 	.word	0x10624dd3

08003bec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d07d      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0c:	4b4f      	ldr	r3, [pc, #316]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10d      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c18:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	4a4b      	ldr	r2, [pc, #300]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c22:	61d3      	str	r3, [r2, #28]
 8003c24:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d118      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c40:	4b43      	ldr	r3, [pc, #268]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a42      	ldr	r2, [pc, #264]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4c:	f7fe fed8 	bl	8002a00 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c52:	e008      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c54:	f7fe fed4 	bl	8002a00 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e06d      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c66:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c72:	4b36      	ldr	r3, [pc, #216]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d02e      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d027      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c90:	4b2e      	ldr	r3, [pc, #184]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca0:	4b2c      	ldr	r3, [pc, #176]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ca6:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d014      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fea3 	bl	8002a00 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fe fe9f 	bl	8002a00 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e036      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ee      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4917      	ldr	r1, [pc, #92]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf8:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	490b      	ldr	r1, [pc, #44]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	4904      	ldr	r1, [pc, #16]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40007000 	.word	0x40007000
 8003d54:	42420440 	.word	0x42420440

08003d58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b08d      	sub	sp, #52	; 0x34
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d60:	4b55      	ldr	r3, [pc, #340]	; (8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003d62:	f107 040c 	add.w	r4, r7, #12
 8003d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d6c:	4b53      	ldr	r3, [pc, #332]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
 8003d76:	2300      	movs	r3, #0
 8003d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	2300      	movs	r3, #0
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d07f      	beq.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d002      	beq.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d048      	beq.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d94:	e08b      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003d96:	4b4a      	ldr	r3, [pc, #296]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d9c:	4b48      	ldr	r3, [pc, #288]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d07f      	beq.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	0c9b      	lsrs	r3, r3, #18
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003db4:	4413      	add	r3, r2
 8003db6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003dba:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d018      	beq.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dc6:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	0c5b      	lsrs	r3, r3, #17
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003de6:	4a37      	ldr	r2, [pc, #220]	; (8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	fb02 f303 	mul.w	r3, r2, r3
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df6:	e004      	b.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	4a33      	ldr	r2, [pc, #204]	; (8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003dfc:	fb02 f303 	mul.w	r3, r2, r3
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e02:	4b2f      	ldr	r3, [pc, #188]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0e:	d102      	bne.n	8003e16 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e14:	e048      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4a2c      	ldr	r2, [pc, #176]	; (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e24:	e040      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003e26:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e36:	d108      	bne.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e48:	e01f      	b.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e54:	d109      	bne.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003e62:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e68:	e00f      	b.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e74:	d11a      	bne.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d014      	beq.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003e82:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e88:	e010      	b.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003e8a:	e00f      	b.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e8c:	f7ff fe7c 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	0b9b      	lsrs	r3, r3, #14
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ea6:	e002      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003ea8:	bf00      	nop
 8003eaa:	e000      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003eac:	bf00      	nop
    }
  }
  return (frequency);
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3734      	adds	r7, #52	; 0x34
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd90      	pop	{r4, r7, pc}
 8003eb8:	08006ae4 	.word	0x08006ae4
 8003ebc:	08006af4 	.word	0x08006af4
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	007a1200 	.word	0x007a1200
 8003ec8:	003d0900 	.word	0x003d0900
 8003ecc:	aaaaaaab 	.word	0xaaaaaaab

08003ed0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e084      	b.n	8003ff0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	7c5b      	ldrb	r3, [r3, #17]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fe fa14 	bl	8002324 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fbd0 	bl	80046a8 <HAL_RTC_WaitForSynchro>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d004      	beq.n	8003f18 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2204      	movs	r2, #4
 8003f12:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e06b      	b.n	8003ff0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fc89 	bl	8004830 <RTC_EnterInitMode>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2204      	movs	r2, #4
 8003f28:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e060      	b.n	8003ff0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0207 	bic.w	r2, r2, #7
 8003f3c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003f46:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <HAL_RTC_Init+0x128>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <HAL_RTC_Init+0x128>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003f52:	4b29      	ldr	r3, [pc, #164]	; (8003ff8 <HAL_RTC_Init+0x128>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	4926      	ldr	r1, [pc, #152]	; (8003ff8 <HAL_RTC_Init+0x128>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f6c:	d003      	beq.n	8003f76 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e00e      	b.n	8003f94 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003f76:	2001      	movs	r0, #1
 8003f78:	f7ff feee 	bl	8003d58 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f7c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2204      	movs	r2, #4
 8003f88:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e030      	b.n	8003ff0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f023 010f 	bic.w	r1, r3, #15
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	0c1a      	lsrs	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	b291      	uxth	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fc5d 	bl	8004880 <RTC_ExitInitMode>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d004      	beq.n	8003fd6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e00c      	b.n	8003ff0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003fee:	2300      	movs	r3, #0
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40006c00 	.word	0x40006c00

08003ffc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_RTC_SetTime+0x20>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e080      	b.n	8004122 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	7c1b      	ldrb	r3, [r3, #16]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_RTC_SetTime+0x30>
 8004028:	2302      	movs	r3, #2
 800402a:	e07a      	b.n	8004122 <HAL_RTC_SetTime+0x126>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2202      	movs	r2, #2
 8004036:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d113      	bne.n	8004066 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004048:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	785b      	ldrb	r3, [r3, #1]
 8004050:	4619      	mov	r1, r3
 8004052:	460b      	mov	r3, r1
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	1a5b      	subs	r3, r3, r1
 8004058:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800405a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004060:	4413      	add	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e01e      	b.n	80040a4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fc4d 	bl	800490a <RTC_Bcd2ToByte>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004078:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fc42 	bl	800490a <RTC_Bcd2ToByte>
 8004086:	4603      	mov	r3, r0
 8004088:	461a      	mov	r2, r3
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004092:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	789b      	ldrb	r3, [r3, #2]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fc36 	bl	800490a <RTC_Bcd2ToByte>
 800409e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80040a0:	4423      	add	r3, r4
 80040a2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80040a4:	6979      	ldr	r1, [r7, #20]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fb5b 	bl	8004762 <RTC_WriteTimeCounter>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2204      	movs	r2, #4
 80040b6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e02f      	b.n	8004122 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0205 	bic.w	r2, r2, #5
 80040d0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fb6c 	bl	80047b0 <RTC_ReadAlarmCounter>
 80040d8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e0:	d018      	beq.n	8004114 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d214      	bcs.n	8004114 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80040f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80040f4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80040f6:	6939      	ldr	r1, [r7, #16]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 fb72 	bl	80047e2 <RTC_WriteAlarmCounter>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2204      	movs	r2, #4
 8004108:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e006      	b.n	8004122 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004120:	2300      	movs	r3, #0
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd90      	pop	{r4, r7, pc}
	...

0800412c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_RTC_GetTime+0x28>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0b5      	b.n	80042c4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e0ac      	b.n	80042c4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fac9 	bl	8004702 <RTC_ReadTimeCounter>
 8004170:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	4a55      	ldr	r2, [pc, #340]	; (80042cc <HAL_RTC_GetTime+0x1a0>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	0adb      	lsrs	r3, r3, #11
 800417c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4b52      	ldr	r3, [pc, #328]	; (80042cc <HAL_RTC_GetTime+0x1a0>)
 8004182:	fba3 1302 	umull	r1, r3, r3, r2
 8004186:	0adb      	lsrs	r3, r3, #11
 8004188:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	4a4f      	ldr	r2, [pc, #316]	; (80042d0 <HAL_RTC_GetTime+0x1a4>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	b2da      	uxtb	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4a4a      	ldr	r2, [pc, #296]	; (80042cc <HAL_RTC_GetTime+0x1a0>)
 80041a4:	fba2 1203 	umull	r1, r2, r2, r3
 80041a8:	0ad2      	lsrs	r2, r2, #11
 80041aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80041ae:	fb01 f202 	mul.w	r2, r1, r2
 80041b2:	1a9a      	subs	r2, r3, r2
 80041b4:	4b46      	ldr	r3, [pc, #280]	; (80042d0 <HAL_RTC_GetTime+0x1a4>)
 80041b6:	fba3 1302 	umull	r1, r3, r3, r2
 80041ba:	0959      	lsrs	r1, r3, #5
 80041bc:	460b      	mov	r3, r1
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a5b      	subs	r3, r3, r1
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	1ad1      	subs	r1, r2, r3
 80041c6:	b2ca      	uxtb	r2, r1
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b17      	cmp	r3, #23
 80041d0:	d955      	bls.n	800427e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4a3f      	ldr	r2, [pc, #252]	; (80042d4 <HAL_RTC_GetTime+0x1a8>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80041de:	6939      	ldr	r1, [r7, #16]
 80041e0:	4b3c      	ldr	r3, [pc, #240]	; (80042d4 <HAL_RTC_GetTime+0x1a8>)
 80041e2:	fba3 2301 	umull	r2, r3, r3, r1
 80041e6:	091a      	lsrs	r2, r3, #4
 80041e8:	4613      	mov	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4413      	add	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	1aca      	subs	r2, r1, r3
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fad9 	bl	80047b0 <RTC_ReadAlarmCounter>
 80041fe:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004206:	d008      	beq.n	800421a <HAL_RTC_GetTime+0xee>
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	429a      	cmp	r2, r3
 800420e:	d904      	bls.n	800421a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	e002      	b.n	8004220 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800421a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800421e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	4a2d      	ldr	r2, [pc, #180]	; (80042d8 <HAL_RTC_GetTime+0x1ac>)
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800422e:	69b9      	ldr	r1, [r7, #24]
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fa96 	bl	8004762 <RTC_WriteTimeCounter>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e041      	b.n	80042c4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004246:	d00c      	beq.n	8004262 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4413      	add	r3, r2
 800424e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004250:	69f9      	ldr	r1, [r7, #28]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fac5 	bl	80047e2 <RTC_WriteAlarmCounter>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e030      	b.n	80042c4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004262:	69f9      	ldr	r1, [r7, #28]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fabc 	bl	80047e2 <RTC_WriteAlarmCounter>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e027      	b.n	80042c4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004274:	6979      	ldr	r1, [r7, #20]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fb64 	bl	8004944 <RTC_DateUpdate>
 800427c:	e003      	b.n	8004286 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01a      	beq.n	80042c2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fb1d 	bl	80048d0 <RTC_ByteToBcd2>
 8004296:	4603      	mov	r3, r0
 8004298:	461a      	mov	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fb14 	bl	80048d0 <RTC_ByteToBcd2>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	789b      	ldrb	r3, [r3, #2]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fb0b 	bl	80048d0 <RTC_ByteToBcd2>
 80042ba:	4603      	mov	r3, r0
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3720      	adds	r7, #32
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	91a2b3c5 	.word	0x91a2b3c5
 80042d0:	88888889 	.word	0x88888889
 80042d4:	aaaaaaab 	.word	0xaaaaaaab
 80042d8:	00015180 	.word	0x00015180

080042dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	2300      	movs	r3, #0
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_RTC_SetDate+0x24>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e097      	b.n	8004434 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	7c1b      	ldrb	r3, [r3, #16]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_RTC_SetDate+0x34>
 800430c:	2302      	movs	r3, #2
 800430e:	e091      	b.n	8004434 <HAL_RTC_SetDate+0x158>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2202      	movs	r2, #2
 800431a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10c      	bne.n	800433c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	78da      	ldrb	r2, [r3, #3]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	785a      	ldrb	r2, [r3, #1]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	789a      	ldrb	r2, [r3, #2]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	739a      	strb	r2, [r3, #14]
 800433a:	e01a      	b.n	8004372 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	78db      	ldrb	r3, [r3, #3]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fae2 	bl	800490a <RTC_Bcd2ToByte>
 8004346:	4603      	mov	r3, r0
 8004348:	461a      	mov	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	785b      	ldrb	r3, [r3, #1]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fad9 	bl	800490a <RTC_Bcd2ToByte>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	789b      	ldrb	r3, [r3, #2]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fad0 	bl	800490a <RTC_Bcd2ToByte>
 800436a:	4603      	mov	r3, r0
 800436c:	461a      	mov	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	7bdb      	ldrb	r3, [r3, #15]
 8004376:	4618      	mov	r0, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	7b59      	ldrb	r1, [r3, #13]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	7b9b      	ldrb	r3, [r3, #14]
 8004380:	461a      	mov	r2, r3
 8004382:	f000 fbbb 	bl	8004afc <RTC_WeekDayNum>
 8004386:	4603      	mov	r3, r0
 8004388:	461a      	mov	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	7b1a      	ldrb	r2, [r3, #12]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f9b3 	bl	8004702 <RTC_ReadTimeCounter>
 800439c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4a26      	ldr	r2, [pc, #152]	; (800443c <HAL_RTC_SetDate+0x160>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	0adb      	lsrs	r3, r3, #11
 80043a8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b18      	cmp	r3, #24
 80043ae:	d93a      	bls.n	8004426 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	4a23      	ldr	r2, [pc, #140]	; (8004440 <HAL_RTC_SetDate+0x164>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	4a22      	ldr	r2, [pc, #136]	; (8004444 <HAL_RTC_SetDate+0x168>)
 80043bc:	fb02 f303 	mul.w	r3, r2, r3
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80043c6:	69f9      	ldr	r1, [r7, #28]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f9ca 	bl	8004762 <RTC_WriteTimeCounter>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2204      	movs	r2, #4
 80043d8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e027      	b.n	8004434 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f9e3 	bl	80047b0 <RTC_ReadAlarmCounter>
 80043ea:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f2:	d018      	beq.n	8004426 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d214      	bcs.n	8004426 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004402:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004406:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004408:	69b9      	ldr	r1, [r7, #24]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f9e9 	bl	80047e2 <RTC_WriteAlarmCounter>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2204      	movs	r2, #4
 800441a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e006      	b.n	8004434 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	91a2b3c5 	.word	0x91a2b3c5
 8004440:	aaaaaaab 	.word	0xaaaaaaab
 8004444:	00015180 	.word	0x00015180

08004448 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004454:	f107 0314 	add.w	r3, r7, #20
 8004458:	2100      	movs	r1, #0
 800445a:	460a      	mov	r2, r1
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	460a      	mov	r2, r1
 8004460:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_RTC_GetDate+0x26>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e03a      	b.n	80044e8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004472:	f107 0314 	add.w	r3, r7, #20
 8004476:	2200      	movs	r2, #0
 8004478:	4619      	mov	r1, r3
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f7ff fe56 	bl	800412c <HAL_RTC_GetTime>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e02e      	b.n	80044e8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	7b1a      	ldrb	r2, [r3, #12]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	7bda      	ldrb	r2, [r3, #15]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	7b5a      	ldrb	r2, [r3, #13]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	7b9a      	ldrb	r2, [r3, #14]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01a      	beq.n	80044e6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	78db      	ldrb	r3, [r3, #3]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fa0b 	bl	80048d0 <RTC_ByteToBcd2>
 80044ba:	4603      	mov	r3, r0
 80044bc:	461a      	mov	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	785b      	ldrb	r3, [r3, #1]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fa02 	bl	80048d0 <RTC_ByteToBcd2>
 80044cc:	4603      	mov	r3, r0
 80044ce:	461a      	mov	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	789b      	ldrb	r3, [r3, #2]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f9f9 	bl	80048d0 <RTC_ByteToBcd2>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004500:	f107 0314 	add.w	r3, r7, #20
 8004504:	2100      	movs	r1, #0
 8004506:	460a      	mov	r2, r1
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	460a      	mov	r2, r1
 800450c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_RTC_SetAlarm_IT+0x2a>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e096      	b.n	800464c <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	7c1b      	ldrb	r3, [r3, #16]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_RTC_SetAlarm_IT+0x3a>
 8004526:	2302      	movs	r3, #2
 8004528:	e090      	b.n	800464c <HAL_RTC_SetAlarm_IT+0x15c>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2202      	movs	r2, #2
 8004534:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	2200      	movs	r2, #0
 800453c:	4619      	mov	r1, r3
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f7ff fdf4 	bl	800412c <HAL_RTC_GetTime>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e07e      	b.n	800464c <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800454e:	7d3b      	ldrb	r3, [r7, #20]
 8004550:	461a      	mov	r2, r3
 8004552:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004556:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800455a:	7d7b      	ldrb	r3, [r7, #21]
 800455c:	4619      	mov	r1, r3
 800455e:	460b      	mov	r3, r1
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	1a5b      	subs	r3, r3, r1
 8004564:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004566:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004568:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800456a:	4413      	add	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d113      	bne.n	800459c <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	461a      	mov	r2, r3
 800457a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800457e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	4619      	mov	r1, r3
 8004588:	460b      	mov	r3, r1
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a5b      	subs	r3, r3, r1
 800458e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004590:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004596:	4413      	add	r3, r2
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	e01e      	b.n	80045da <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 f9b2 	bl	800490a <RTC_Bcd2ToByte>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80045ae:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f9a7 	bl	800490a <RTC_Bcd2ToByte>
 80045bc:	4603      	mov	r3, r0
 80045be:	461a      	mov	r2, r3
 80045c0:	4613      	mov	r3, r2
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80045c8:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	789b      	ldrb	r3, [r3, #2]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f99b 	bl	800490a <RTC_Bcd2ToByte>
 80045d4:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80045d6:	4423      	add	r3, r4
 80045d8:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d205      	bcs.n	80045ee <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80045e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80045ec:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80045ee:	69f9      	ldr	r1, [r7, #28]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f8f6 	bl	80047e2 <RTC_WriteAlarmCounter>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2204      	movs	r2, #4
 8004600:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e01f      	b.n	800464c <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0202 	mvn.w	r2, #2
 8004614:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0202 	orr.w	r2, r2, #2
 8004624:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RTC_SetAlarm_IT+0x164>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <HAL_RTC_SetAlarm_IT+0x164>)
 800462c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004630:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004632:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_RTC_SetAlarm_IT+0x164>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	4a07      	ldr	r2, [pc, #28]	; (8004654 <HAL_RTC_SetAlarm_IT+0x164>)
 8004638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463c:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800464a:	2300      	movs	r3, #0
  }
}
 800464c:	4618      	mov	r0, r3
 800464e:	3724      	adds	r7, #36	; 0x24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd90      	pop	{r4, r7, pc}
 8004654:	40010400 	.word	0x40010400

08004658 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00e      	beq.n	800468c <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7fd fa4f 	bl	8001b20 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f06f 0202 	mvn.w	r2, #2
 800468a:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RTC_AlarmIRQHandler+0x4c>)
 800468e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004692:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	745a      	strb	r2, [r3, #17]
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40010400 	.word	0x40010400

080046a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e01d      	b.n	80046fa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0208 	bic.w	r2, r2, #8
 80046cc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80046ce:	f7fe f997 	bl	8002a00 <HAL_GetTick>
 80046d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80046d4:	e009      	b.n	80046ea <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80046d6:	f7fe f993 	bl	8002a00 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046e4:	d901      	bls.n	80046ea <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e007      	b.n	80046fa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ee      	beq.n	80046d6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004702:	b480      	push	{r7}
 8004704:	b087      	sub	sp, #28
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	827b      	strh	r3, [r7, #18]
 800470e:	2300      	movs	r3, #0
 8004710:	823b      	strh	r3, [r7, #16]
 8004712:	2300      	movs	r3, #0
 8004714:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004732:	8a7a      	ldrh	r2, [r7, #18]
 8004734:	8a3b      	ldrh	r3, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	d008      	beq.n	800474c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800473a:	8a3b      	ldrh	r3, [r7, #16]
 800473c:	041a      	lsls	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	b29b      	uxth	r3, r3
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e004      	b.n	8004756 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800474c:	8a7b      	ldrh	r3, [r7, #18]
 800474e:	041a      	lsls	r2, r3, #16
 8004750:	89fb      	ldrh	r3, [r7, #14]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004756:	697b      	ldr	r3, [r7, #20]
}
 8004758:	4618      	mov	r0, r3
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f85d 	bl	8004830 <RTC_EnterInitMode>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	e011      	b.n	80047a6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	0c12      	lsrs	r2, r2, #16
 800478a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	b292      	uxth	r2, r2
 8004794:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f872 	bl	8004880 <RTC_ExitInitMode>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	81fb      	strh	r3, [r7, #14]
 80047bc:	2300      	movs	r3, #0
 80047be:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80047d0:	89fb      	ldrh	r3, [r7, #14]
 80047d2:	041a      	lsls	r2, r3, #16
 80047d4:	89bb      	ldrh	r3, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f81d 	bl	8004830 <RTC_EnterInitMode>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	e011      	b.n	8004826 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	0c12      	lsrs	r2, r2, #16
 800480a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	b292      	uxth	r2, r2
 8004814:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f832 	bl	8004880 <RTC_ExitInitMode>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004826:	7bfb      	ldrb	r3, [r7, #15]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800483c:	f7fe f8e0 	bl	8002a00 <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004842:	e009      	b.n	8004858 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004844:	f7fe f8dc 	bl	8002a00 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004852:	d901      	bls.n	8004858 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e00f      	b.n	8004878 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0ee      	beq.n	8004844 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0210 	orr.w	r2, r2, #16
 8004874:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0210 	bic.w	r2, r2, #16
 800489a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800489c:	f7fe f8b0 	bl	8002a00 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048a2:	e009      	b.n	80048b8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80048a4:	f7fe f8ac 	bl	8002a00 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048b2:	d901      	bls.n	80048b8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e007      	b.n	80048c8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0ee      	beq.n	80048a4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80048de:	e005      	b.n	80048ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	3b0a      	subs	r3, #10
 80048ea:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	2b09      	cmp	r3, #9
 80048f0:	d8f6      	bhi.n	80048e0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	b2db      	uxtb	r3, r3
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr

0800490a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	4603      	mov	r3, r0
 8004912:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	b2da      	uxtb	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	4413      	add	r3, r2
 8004938:	b2db      	uxtb	r3, r3
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	7bdb      	ldrb	r3, [r3, #15]
 8004962:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	7b5b      	ldrb	r3, [r3, #13]
 8004968:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	7b9b      	ldrb	r3, [r3, #14]
 800496e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004970:	2300      	movs	r3, #0
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	e06f      	b.n	8004a56 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d011      	beq.n	80049a0 <RTC_DateUpdate+0x5c>
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b03      	cmp	r3, #3
 8004980:	d00e      	beq.n	80049a0 <RTC_DateUpdate+0x5c>
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b05      	cmp	r3, #5
 8004986:	d00b      	beq.n	80049a0 <RTC_DateUpdate+0x5c>
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b07      	cmp	r3, #7
 800498c:	d008      	beq.n	80049a0 <RTC_DateUpdate+0x5c>
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d005      	beq.n	80049a0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b0a      	cmp	r3, #10
 8004998:	d002      	beq.n	80049a0 <RTC_DateUpdate+0x5c>
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b0c      	cmp	r3, #12
 800499e:	d117      	bne.n	80049d0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b1e      	cmp	r3, #30
 80049a4:	d803      	bhi.n	80049ae <RTC_DateUpdate+0x6a>
      {
        day++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3301      	adds	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80049ac:	e050      	b.n	8004a50 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b0c      	cmp	r3, #12
 80049b2:	d005      	beq.n	80049c0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	3301      	adds	r3, #1
 80049b8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80049ba:	2301      	movs	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80049be:	e047      	b.n	8004a50 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80049c0:	2301      	movs	r3, #1
 80049c2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80049c4:	2301      	movs	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
          year++;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	3301      	adds	r3, #1
 80049cc:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80049ce:	e03f      	b.n	8004a50 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d008      	beq.n	80049e8 <RTC_DateUpdate+0xa4>
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b06      	cmp	r3, #6
 80049da:	d005      	beq.n	80049e8 <RTC_DateUpdate+0xa4>
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b09      	cmp	r3, #9
 80049e0:	d002      	beq.n	80049e8 <RTC_DateUpdate+0xa4>
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b0b      	cmp	r3, #11
 80049e6:	d10c      	bne.n	8004a02 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b1d      	cmp	r3, #29
 80049ec:	d803      	bhi.n	80049f6 <RTC_DateUpdate+0xb2>
      {
        day++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3301      	adds	r3, #1
 80049f2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80049f4:	e02c      	b.n	8004a50 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3301      	adds	r3, #1
 80049fa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80049fc:	2301      	movs	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004a00:	e026      	b.n	8004a50 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d123      	bne.n	8004a50 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b1b      	cmp	r3, #27
 8004a0c:	d803      	bhi.n	8004a16 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3301      	adds	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e01c      	b.n	8004a50 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b1c      	cmp	r3, #28
 8004a1a:	d111      	bne.n	8004a40 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 f839 	bl	8004a98 <RTC_IsLeapYear>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	e00d      	b.n	8004a50 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	3301      	adds	r3, #1
 8004a38:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e007      	b.n	8004a50 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b1d      	cmp	r3, #29
 8004a44:	d104      	bne.n	8004a50 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	3301      	adds	r3, #1
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d38b      	bcc.n	8004976 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6978      	ldr	r0, [r7, #20]
 8004a82:	f000 f83b 	bl	8004afc <RTC_WeekDayNum>
 8004a86:	4603      	mov	r3, r0
 8004a88:	461a      	mov	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	731a      	strb	r2, [r3, #12]
}
 8004a8e:	bf00      	nop
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e01d      	b.n	8004aee <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	4a10      	ldr	r2, [pc, #64]	; (8004af8 <RTC_IsLeapYear+0x60>)
 8004ab6:	fba2 1203 	umull	r1, r2, r2, r3
 8004aba:	0952      	lsrs	r2, r2, #5
 8004abc:	2164      	movs	r1, #100	; 0x64
 8004abe:	fb01 f202 	mul.w	r2, r1, r2
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e00f      	b.n	8004aee <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <RTC_IsLeapYear+0x60>)
 8004ad2:	fba2 1203 	umull	r1, r2, r2, r3
 8004ad6:	09d2      	lsrs	r2, r2, #7
 8004ad8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004adc:	fb01 f202 	mul.w	r2, r1, r2
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004aec:	2300      	movs	r3, #0
  }
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	51eb851f 	.word	0x51eb851f

08004afc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004b1a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d82d      	bhi.n	8004b7e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	4613      	mov	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	4413      	add	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	4a2c      	ldr	r2, [pc, #176]	; (8004be0 <RTC_WeekDayNum+0xe4>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	085a      	lsrs	r2, r3, #1
 8004b36:	78bb      	ldrb	r3, [r7, #2]
 8004b38:	441a      	add	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	441a      	add	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	4926      	ldr	r1, [pc, #152]	; (8004be4 <RTC_WeekDayNum+0xe8>)
 8004b4c:	fba1 1303 	umull	r1, r3, r1, r3
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	4922      	ldr	r1, [pc, #136]	; (8004be4 <RTC_WeekDayNum+0xe8>)
 8004b5a:	fba1 1303 	umull	r1, r3, r1, r3
 8004b5e:	09db      	lsrs	r3, r3, #7
 8004b60:	4413      	add	r3, r2
 8004b62:	1d1a      	adds	r2, r3, #4
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <RTC_WeekDayNum+0xec>)
 8004b66:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6a:	1ad1      	subs	r1, r2, r3
 8004b6c:	0849      	lsrs	r1, r1, #1
 8004b6e:	440b      	add	r3, r1
 8004b70:	0899      	lsrs	r1, r3, #2
 8004b72:	460b      	mov	r3, r1
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	1a5b      	subs	r3, r3, r1
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	e029      	b.n	8004bd2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004b7e:	78fa      	ldrb	r2, [r7, #3]
 8004b80:	4613      	mov	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	4413      	add	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	4a15      	ldr	r2, [pc, #84]	; (8004be0 <RTC_WeekDayNum+0xe4>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	085a      	lsrs	r2, r3, #1
 8004b92:	78bb      	ldrb	r3, [r7, #2]
 8004b94:	441a      	add	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	441a      	add	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4910      	ldr	r1, [pc, #64]	; (8004be4 <RTC_WeekDayNum+0xe8>)
 8004ba4:	fba1 1303 	umull	r1, r3, r1, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	1ad2      	subs	r2, r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	490d      	ldr	r1, [pc, #52]	; (8004be4 <RTC_WeekDayNum+0xe8>)
 8004bb0:	fba1 1303 	umull	r1, r3, r1, r3
 8004bb4:	09db      	lsrs	r3, r3, #7
 8004bb6:	4413      	add	r3, r2
 8004bb8:	1c9a      	adds	r2, r3, #2
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <RTC_WeekDayNum+0xec>)
 8004bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc0:	1ad1      	subs	r1, r2, r3
 8004bc2:	0849      	lsrs	r1, r1, #1
 8004bc4:	440b      	add	r3, r1
 8004bc6:	0899      	lsrs	r1, r3, #2
 8004bc8:	460b      	mov	r3, r1
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	1a5b      	subs	r3, r3, r1
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	b2db      	uxtb	r3, r3
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr
 8004be0:	38e38e39 	.word	0x38e38e39
 8004be4:	51eb851f 	.word	0x51eb851f
 8004be8:	24924925 	.word	0x24924925

08004bec <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d024      	beq.n	8004c4c <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01d      	beq.n	8004c4c <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f821 	bl	8004c66 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0204 	mvn.w	r2, #4
 8004c2c:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2204      	movs	r2, #4
 8004c32:	745a      	strb	r2, [r3, #17]
 8004c34:	e005      	b.n	8004c42 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f80c 	bl	8004c54 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f06f 0201 	mvn.w	r2, #1
 8004c4a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr

08004c66 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr

08004c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e053      	b.n	8004d32 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7fd fba7 	bl	80023f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	ea42 0103 	orr.w	r1, r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	0c1a      	lsrs	r2, r3, #16
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f002 0204 	and.w	r2, r2, #4
 8004d10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b088      	sub	sp, #32
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_SPI_Transmit+0x22>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e11e      	b.n	8004f9a <HAL_SPI_Transmit+0x260>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d64:	f7fd fe4c 	bl	8002a00 <HAL_GetTick>
 8004d68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d002      	beq.n	8004d80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d7e:	e103      	b.n	8004f88 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_Transmit+0x52>
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d90:	e0fa      	b.n	8004f88 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2203      	movs	r2, #3
 8004d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	88fa      	ldrh	r2, [r7, #6]
 8004daa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd8:	d107      	bne.n	8004dea <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004de8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b40      	cmp	r3, #64	; 0x40
 8004df6:	d007      	beq.n	8004e08 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e10:	d14b      	bne.n	8004eaa <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_Transmit+0xe6>
 8004e1a:	8afb      	ldrh	r3, [r7, #22]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d13e      	bne.n	8004e9e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	881a      	ldrh	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	1c9a      	adds	r2, r3, #2
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e44:	e02b      	b.n	8004e9e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d112      	bne.n	8004e7a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	881a      	ldrh	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e78:	e011      	b.n	8004e9e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e7a:	f7fd fdc1 	bl	8002a00 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d803      	bhi.n	8004e92 <HAL_SPI_Transmit+0x158>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e90:	d102      	bne.n	8004e98 <HAL_SPI_Transmit+0x15e>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e9c:	e074      	b.n	8004f88 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ce      	bne.n	8004e46 <HAL_SPI_Transmit+0x10c>
 8004ea8:	e04c      	b.n	8004f44 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_SPI_Transmit+0x17e>
 8004eb2:	8afb      	ldrh	r3, [r7, #22]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d140      	bne.n	8004f3a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	7812      	ldrb	r2, [r2, #0]
 8004ec4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ede:	e02c      	b.n	8004f3a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d113      	bne.n	8004f16 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f14:	e011      	b.n	8004f3a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f16:	f7fd fd73 	bl	8002a00 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d803      	bhi.n	8004f2e <HAL_SPI_Transmit+0x1f4>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f2c:	d102      	bne.n	8004f34 <HAL_SPI_Transmit+0x1fa>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f38:	e026      	b.n	8004f88 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1cd      	bne.n	8004ee0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fb91 	bl	8005670 <SPI_EndRxTxTransaction>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e000      	b.n	8004f88 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004f86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f98:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b088      	sub	sp, #32
 8004fa6:	af02      	add	r7, sp, #8
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fbe:	d112      	bne.n	8004fe6 <HAL_SPI_Receive+0x44>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10e      	bne.n	8004fe6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004fd0:	88fa      	ldrh	r2, [r7, #6]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f8e9 	bl	80051b4 <HAL_SPI_TransmitReceive>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	e0e2      	b.n	80051ac <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_SPI_Receive+0x52>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e0db      	b.n	80051ac <HAL_SPI_Receive+0x20a>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ffc:	f7fd fd00 	bl	8002a00 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	d002      	beq.n	8005014 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800500e:	2302      	movs	r3, #2
 8005010:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005012:	e0c2      	b.n	800519a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_SPI_Receive+0x7e>
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005024:	e0b9      	b.n	800519a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2204      	movs	r2, #4
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506c:	d107      	bne.n	800507e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800507c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d007      	beq.n	800509c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800509a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d162      	bne.n	800516a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050a4:	e02e      	b.n	8005104 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d115      	bne.n	80050e0 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f103 020c 	add.w	r2, r3, #12
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050de:	e011      	b.n	8005104 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e0:	f7fd fc8e 	bl	8002a00 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d803      	bhi.n	80050f8 <HAL_SPI_Receive+0x156>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050f6:	d102      	bne.n	80050fe <HAL_SPI_Receive+0x15c>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d102      	bne.n	8005104 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005102:	e04a      	b.n	800519a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1cb      	bne.n	80050a6 <HAL_SPI_Receive+0x104>
 800510e:	e031      	b.n	8005174 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b01      	cmp	r3, #1
 800511c:	d113      	bne.n	8005146 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	b292      	uxth	r2, r2
 800512a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	1c9a      	adds	r2, r3, #2
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005144:	e011      	b.n	800516a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005146:	f7fd fc5b 	bl	8002a00 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d803      	bhi.n	800515e <HAL_SPI_Receive+0x1bc>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800515c:	d102      	bne.n	8005164 <HAL_SPI_Receive+0x1c2>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005168:	e017      	b.n	800519a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1cd      	bne.n	8005110 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 fa27 	bl	80055cc <SPI_EndRxTransaction>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	75fb      	strb	r3, [r7, #23]
 8005196:	e000      	b.n	800519a <HAL_SPI_Receive+0x1f8>
  }

error :
 8005198:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08c      	sub	sp, #48	; 0x30
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051c2:	2301      	movs	r3, #1
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_SPI_TransmitReceive+0x26>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e18a      	b.n	80054f0 <HAL_SPI_TransmitReceive+0x33c>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051e2:	f7fd fc0d 	bl	8002a00 <HAL_GetTick>
 80051e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80051f8:	887b      	ldrh	r3, [r7, #2]
 80051fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005200:	2b01      	cmp	r3, #1
 8005202:	d00f      	beq.n	8005224 <HAL_SPI_TransmitReceive+0x70>
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800520a:	d107      	bne.n	800521c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <HAL_SPI_TransmitReceive+0x68>
 8005214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005218:	2b04      	cmp	r3, #4
 800521a:	d003      	beq.n	8005224 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800521c:	2302      	movs	r3, #2
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005222:	e15b      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <HAL_SPI_TransmitReceive+0x82>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_SPI_TransmitReceive+0x82>
 8005230:	887b      	ldrh	r3, [r7, #2]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d103      	bne.n	800523e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800523c:	e14e      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b04      	cmp	r3, #4
 8005248:	d003      	beq.n	8005252 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2205      	movs	r2, #5
 800524e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	887a      	ldrh	r2, [r7, #2]
 8005262:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	887a      	ldrh	r2, [r7, #2]
 8005268:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	887a      	ldrh	r2, [r7, #2]
 8005274:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	887a      	ldrh	r2, [r7, #2]
 800527a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d007      	beq.n	80052a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ae:	d178      	bne.n	80053a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_SPI_TransmitReceive+0x10a>
 80052b8:	8b7b      	ldrh	r3, [r7, #26]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d166      	bne.n	800538c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	881a      	ldrh	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e2:	e053      	b.n	800538c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d11b      	bne.n	800532a <HAL_SPI_TransmitReceive+0x176>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d016      	beq.n	800532a <HAL_SPI_TransmitReceive+0x176>
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d113      	bne.n	800532a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d119      	bne.n	800536c <HAL_SPI_TransmitReceive+0x1b8>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d014      	beq.n	800536c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	b292      	uxth	r2, r2
 800534e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	1c9a      	adds	r2, r3, #2
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005368:	2301      	movs	r3, #1
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800536c:	f7fd fb48 	bl	8002a00 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005378:	429a      	cmp	r2, r3
 800537a:	d807      	bhi.n	800538c <HAL_SPI_TransmitReceive+0x1d8>
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005382:	d003      	beq.n	800538c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800538a:	e0a7      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1a6      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x130>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1a1      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x130>
 80053a0:	e07c      	b.n	800549c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_SPI_TransmitReceive+0x1fc>
 80053aa:	8b7b      	ldrh	r3, [r7, #26]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d16b      	bne.n	8005488 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d6:	e057      	b.n	8005488 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d11c      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x26c>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d017      	beq.n	8005420 <HAL_SPI_TransmitReceive+0x26c>
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d114      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	330c      	adds	r3, #12
 8005400:	7812      	ldrb	r2, [r2, #0]
 8005402:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b01      	cmp	r3, #1
 800542c:	d119      	bne.n	8005462 <HAL_SPI_TransmitReceive+0x2ae>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d014      	beq.n	8005462 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800545e:	2301      	movs	r3, #1
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005462:	f7fd facd 	bl	8002a00 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800546e:	429a      	cmp	r2, r3
 8005470:	d803      	bhi.n	800547a <HAL_SPI_TransmitReceive+0x2c6>
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005478:	d102      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x2cc>
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005486:	e029      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1a2      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x224>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d19d      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800549c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f8e5 	bl	8005670 <SPI_EndRxTxTransaction>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d006      	beq.n	80054ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80054b8:	e010      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10b      	bne.n	80054da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	e000      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80054da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3730      	adds	r7, #48	; 0x30
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005508:	e04c      	b.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005510:	d048      	beq.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005512:	f7fd fa75 	bl	8002a00 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d902      	bls.n	8005528 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d13d      	bne.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005536:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005540:	d111      	bne.n	8005566 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554a:	d004      	beq.n	8005556 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005554:	d107      	bne.n	8005566 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005564:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800556e:	d10f      	bne.n	8005590 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800558e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e00f      	b.n	80055c4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d1a3      	bne.n	800550a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055e0:	d111      	bne.n	8005606 <SPI_EndRxTransaction+0x3a>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ea:	d004      	beq.n	80055f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f4:	d107      	bne.n	8005606 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005604:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800560e:	d117      	bne.n	8005640 <SPI_EndRxTransaction+0x74>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005618:	d112      	bne.n	8005640 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2200      	movs	r2, #0
 8005622:	2101      	movs	r1, #1
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f7ff ff67 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01a      	beq.n	8005666 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e013      	b.n	8005668 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2200      	movs	r2, #0
 8005648:	2180      	movs	r1, #128	; 0x80
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff ff54 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d007      	beq.n	8005666 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e000      	b.n	8005668 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af02      	add	r7, sp, #8
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2200      	movs	r2, #0
 8005684:	2180      	movs	r1, #128	; 0x80
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff ff36 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	f043 0220 	orr.w	r2, r3, #32
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e000      	b.n	80056a4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e01d      	b.n	80056fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fd f85a 	bl	800278c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fa32 	bl	8005b54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b06      	cmp	r3, #6
 8005722:	d007      	beq.n	8005734 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b06      	cmp	r3, #6
 8005770:	d007      	beq.n	8005782 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d122      	bne.n	80057ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d11b      	bne.n	80057ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f06f 0202 	mvn.w	r2, #2
 80057ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f9a4 	bl	8005b1e <HAL_TIM_IC_CaptureCallback>
 80057d6:	e005      	b.n	80057e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f997 	bl	8005b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9a6 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d122      	bne.n	800583e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b04      	cmp	r3, #4
 8005804:	d11b      	bne.n	800583e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f06f 0204 	mvn.w	r2, #4
 800580e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f97a 	bl	8005b1e <HAL_TIM_IC_CaptureCallback>
 800582a:	e005      	b.n	8005838 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f96d 	bl	8005b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f97c 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b08      	cmp	r3, #8
 800584a:	d122      	bne.n	8005892 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b08      	cmp	r3, #8
 8005858:	d11b      	bne.n	8005892 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f06f 0208 	mvn.w	r2, #8
 8005862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2204      	movs	r2, #4
 8005868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f950 	bl	8005b1e <HAL_TIM_IC_CaptureCallback>
 800587e:	e005      	b.n	800588c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f943 	bl	8005b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f952 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b10      	cmp	r3, #16
 800589e:	d122      	bne.n	80058e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d11b      	bne.n	80058e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f06f 0210 	mvn.w	r2, #16
 80058b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2208      	movs	r2, #8
 80058bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f926 	bl	8005b1e <HAL_TIM_IC_CaptureCallback>
 80058d2:	e005      	b.n	80058e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f919 	bl	8005b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f928 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d10e      	bne.n	8005912 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f06f 0201 	mvn.w	r2, #1
 800590a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7fc f8f3 	bl	8001af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591c:	2b80      	cmp	r3, #128	; 0x80
 800591e:	d10e      	bne.n	800593e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b80      	cmp	r3, #128	; 0x80
 800592c:	d107      	bne.n	800593e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fa50 	bl	8005dde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b40      	cmp	r3, #64	; 0x40
 800594a:	d10e      	bne.n	800596a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	d107      	bne.n	800596a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f8ec 	bl	8005b42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b20      	cmp	r3, #32
 8005976:	d10e      	bne.n	8005996 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b20      	cmp	r3, #32
 8005984:	d107      	bne.n	8005996 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f06f 0220 	mvn.w	r2, #32
 800598e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fa1b 	bl	8005dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_TIM_ConfigClockSource+0x18>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e0a6      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x166>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059dc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b40      	cmp	r3, #64	; 0x40
 80059ec:	d067      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x120>
 80059ee:	2b40      	cmp	r3, #64	; 0x40
 80059f0:	d80b      	bhi.n	8005a0a <HAL_TIM_ConfigClockSource+0x6c>
 80059f2:	2b10      	cmp	r3, #16
 80059f4:	d073      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x140>
 80059f6:	2b10      	cmp	r3, #16
 80059f8:	d802      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x62>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d06f      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80059fe:	e078      	b.n	8005af2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d06c      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x140>
 8005a04:	2b30      	cmp	r3, #48	; 0x30
 8005a06:	d06a      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005a08:	e073      	b.n	8005af2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a0a:	2b70      	cmp	r3, #112	; 0x70
 8005a0c:	d00d      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x8c>
 8005a0e:	2b70      	cmp	r3, #112	; 0x70
 8005a10:	d804      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x7e>
 8005a12:	2b50      	cmp	r3, #80	; 0x50
 8005a14:	d033      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0xe0>
 8005a16:	2b60      	cmp	r3, #96	; 0x60
 8005a18:	d041      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005a1a:	e06a      	b.n	8005af2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a20:	d066      	beq.n	8005af0 <HAL_TIM_ConfigClockSource+0x152>
 8005a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a26:	d017      	beq.n	8005a58 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005a28:	e063      	b.n	8005af2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f000 f964 	bl	8005d06 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	609a      	str	r2, [r3, #8]
      break;
 8005a56:	e04c      	b.n	8005af2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6899      	ldr	r1, [r3, #8]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f000 f94d 	bl	8005d06 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a7a:	609a      	str	r2, [r3, #8]
      break;
 8005a7c:	e039      	b.n	8005af2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6859      	ldr	r1, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f000 f8c4 	bl	8005c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2150      	movs	r1, #80	; 0x50
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f91b 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 8005a9c:	e029      	b.n	8005af2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f000 f8e2 	bl	8005c74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2160      	movs	r1, #96	; 0x60
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f90b 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 8005abc:	e019      	b.n	8005af2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 f8a4 	bl	8005c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2140      	movs	r1, #64	; 0x40
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f8fb 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 8005adc:	e009      	b.n	8005af2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4610      	mov	r0, r2
 8005aea:	f000 f8f2 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 8005aee:	e000      	b.n	8005af2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005af0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr

08005b1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr

08005b42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a29      	ldr	r2, [pc, #164]	; (8005c0c <TIM_Base_SetConfig+0xb8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <TIM_Base_SetConfig+0x30>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b72:	d007      	beq.n	8005b84 <TIM_Base_SetConfig+0x30>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a26      	ldr	r2, [pc, #152]	; (8005c10 <TIM_Base_SetConfig+0xbc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_Base_SetConfig+0x30>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a25      	ldr	r2, [pc, #148]	; (8005c14 <TIM_Base_SetConfig+0xc0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d108      	bne.n	8005b96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a1c      	ldr	r2, [pc, #112]	; (8005c0c <TIM_Base_SetConfig+0xb8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00b      	beq.n	8005bb6 <TIM_Base_SetConfig+0x62>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba4:	d007      	beq.n	8005bb6 <TIM_Base_SetConfig+0x62>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a19      	ldr	r2, [pc, #100]	; (8005c10 <TIM_Base_SetConfig+0xbc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_Base_SetConfig+0x62>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a18      	ldr	r2, [pc, #96]	; (8005c14 <TIM_Base_SetConfig+0xc0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d108      	bne.n	8005bc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a07      	ldr	r2, [pc, #28]	; (8005c0c <TIM_Base_SetConfig+0xb8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d103      	bne.n	8005bfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	615a      	str	r2, [r3, #20]
}
 8005c02:	bf00      	nop
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	40000400 	.word	0x40000400
 8005c14:	40000800 	.word	0x40000800

08005c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f023 0201 	bic.w	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f023 030a 	bic.w	r3, r3, #10
 8005c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f023 0210 	bic.w	r2, r3, #16
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	031b      	lsls	r3, r3, #12
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	621a      	str	r2, [r3, #32]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr

08005cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f043 0307 	orr.w	r3, r3, #7
 8005cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	021a      	lsls	r2, r3, #8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	609a      	str	r2, [r3, #8]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e032      	b.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d94:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e03f      	b.n	8005e82 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fc fd1a 	bl	8002850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2224      	movs	r2, #36	; 0x24
 8005e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f829 	bl	8005e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695a      	ldr	r2, [r3, #20]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ec6:	f023 030c 	bic.w	r3, r3, #12
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	68f9      	ldr	r1, [r7, #12]
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a52      	ldr	r2, [pc, #328]	; (8006038 <UART_SetConfig+0x1ac>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d14e      	bne.n	8005f92 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ef4:	f7fd fe48 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 8005ef8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	4613      	mov	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	009a      	lsls	r2, r3, #2
 8005f04:	441a      	add	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	4a4a      	ldr	r2, [pc, #296]	; (800603c <UART_SetConfig+0x1b0>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	0119      	lsls	r1, r3, #4
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009a      	lsls	r2, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f30:	4b42      	ldr	r3, [pc, #264]	; (800603c <UART_SetConfig+0x1b0>)
 8005f32:	fba3 0302 	umull	r0, r3, r3, r2
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	2064      	movs	r0, #100	; 0x64
 8005f3a:	fb00 f303 	mul.w	r3, r0, r3
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	3332      	adds	r3, #50	; 0x32
 8005f44:	4a3d      	ldr	r2, [pc, #244]	; (800603c <UART_SetConfig+0x1b0>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f50:	4419      	add	r1, r3
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009a      	lsls	r2, r3, #2
 8005f5c:	441a      	add	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f68:	4b34      	ldr	r3, [pc, #208]	; (800603c <UART_SetConfig+0x1b0>)
 8005f6a:	fba3 0302 	umull	r0, r3, r3, r2
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	2064      	movs	r0, #100	; 0x64
 8005f72:	fb00 f303 	mul.w	r3, r0, r3
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	3332      	adds	r3, #50	; 0x32
 8005f7c:	4a2f      	ldr	r2, [pc, #188]	; (800603c <UART_SetConfig+0x1b0>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	f003 020f 	and.w	r2, r3, #15
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005f90:	e04d      	b.n	800602e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f92:	f7fd fde5 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8005f96:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009a      	lsls	r2, r3, #2
 8005fa2:	441a      	add	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fae:	4a23      	ldr	r2, [pc, #140]	; (800603c <UART_SetConfig+0x1b0>)
 8005fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	0119      	lsls	r1, r3, #4
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009a      	lsls	r2, r3, #2
 8005fc2:	441a      	add	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fce:	4b1b      	ldr	r3, [pc, #108]	; (800603c <UART_SetConfig+0x1b0>)
 8005fd0:	fba3 0302 	umull	r0, r3, r3, r2
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	2064      	movs	r0, #100	; 0x64
 8005fd8:	fb00 f303 	mul.w	r3, r0, r3
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	3332      	adds	r3, #50	; 0x32
 8005fe2:	4a16      	ldr	r2, [pc, #88]	; (800603c <UART_SetConfig+0x1b0>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fee:	4419      	add	r1, r3
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009a      	lsls	r2, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	fbb2 f2f3 	udiv	r2, r2, r3
 8006006:	4b0d      	ldr	r3, [pc, #52]	; (800603c <UART_SetConfig+0x1b0>)
 8006008:	fba3 0302 	umull	r0, r3, r3, r2
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	2064      	movs	r0, #100	; 0x64
 8006010:	fb00 f303 	mul.w	r3, r0, r3
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	3332      	adds	r3, #50	; 0x32
 800601a:	4a08      	ldr	r2, [pc, #32]	; (800603c <UART_SetConfig+0x1b0>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	f003 020f 	and.w	r2, r3, #15
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	440a      	add	r2, r1
 800602c:	609a      	str	r2, [r3, #8]
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40013800 	.word	0x40013800
 800603c:	51eb851f 	.word	0x51eb851f

08006040 <__errno>:
 8006040:	4b01      	ldr	r3, [pc, #4]	; (8006048 <__errno+0x8>)
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000084 	.word	0x20000084

0800604c <__libc_init_array>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	2500      	movs	r5, #0
 8006050:	4e0c      	ldr	r6, [pc, #48]	; (8006084 <__libc_init_array+0x38>)
 8006052:	4c0d      	ldr	r4, [pc, #52]	; (8006088 <__libc_init_array+0x3c>)
 8006054:	1ba4      	subs	r4, r4, r6
 8006056:	10a4      	asrs	r4, r4, #2
 8006058:	42a5      	cmp	r5, r4
 800605a:	d109      	bne.n	8006070 <__libc_init_array+0x24>
 800605c:	f000 fc34 	bl	80068c8 <_init>
 8006060:	2500      	movs	r5, #0
 8006062:	4e0a      	ldr	r6, [pc, #40]	; (800608c <__libc_init_array+0x40>)
 8006064:	4c0a      	ldr	r4, [pc, #40]	; (8006090 <__libc_init_array+0x44>)
 8006066:	1ba4      	subs	r4, r4, r6
 8006068:	10a4      	asrs	r4, r4, #2
 800606a:	42a5      	cmp	r5, r4
 800606c:	d105      	bne.n	800607a <__libc_init_array+0x2e>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006074:	4798      	blx	r3
 8006076:	3501      	adds	r5, #1
 8006078:	e7ee      	b.n	8006058 <__libc_init_array+0xc>
 800607a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800607e:	4798      	blx	r3
 8006080:	3501      	adds	r5, #1
 8006082:	e7f2      	b.n	800606a <__libc_init_array+0x1e>
 8006084:	08006b44 	.word	0x08006b44
 8006088:	08006b44 	.word	0x08006b44
 800608c:	08006b44 	.word	0x08006b44
 8006090:	08006b48 	.word	0x08006b48

08006094 <memset>:
 8006094:	4603      	mov	r3, r0
 8006096:	4402      	add	r2, r0
 8006098:	4293      	cmp	r3, r2
 800609a:	d100      	bne.n	800609e <memset+0xa>
 800609c:	4770      	bx	lr
 800609e:	f803 1b01 	strb.w	r1, [r3], #1
 80060a2:	e7f9      	b.n	8006098 <memset+0x4>

080060a4 <siprintf>:
 80060a4:	b40e      	push	{r1, r2, r3}
 80060a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060aa:	b500      	push	{lr}
 80060ac:	b09c      	sub	sp, #112	; 0x70
 80060ae:	ab1d      	add	r3, sp, #116	; 0x74
 80060b0:	9002      	str	r0, [sp, #8]
 80060b2:	9006      	str	r0, [sp, #24]
 80060b4:	9107      	str	r1, [sp, #28]
 80060b6:	9104      	str	r1, [sp, #16]
 80060b8:	4808      	ldr	r0, [pc, #32]	; (80060dc <siprintf+0x38>)
 80060ba:	4909      	ldr	r1, [pc, #36]	; (80060e0 <siprintf+0x3c>)
 80060bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80060c0:	9105      	str	r1, [sp, #20]
 80060c2:	6800      	ldr	r0, [r0, #0]
 80060c4:	a902      	add	r1, sp, #8
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	f000 f866 	bl	8006198 <_svfiprintf_r>
 80060cc:	2200      	movs	r2, #0
 80060ce:	9b02      	ldr	r3, [sp, #8]
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	b01c      	add	sp, #112	; 0x70
 80060d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060d8:	b003      	add	sp, #12
 80060da:	4770      	bx	lr
 80060dc:	20000084 	.word	0x20000084
 80060e0:	ffff0208 	.word	0xffff0208

080060e4 <__ssputs_r>:
 80060e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e8:	688e      	ldr	r6, [r1, #8]
 80060ea:	4682      	mov	sl, r0
 80060ec:	429e      	cmp	r6, r3
 80060ee:	460c      	mov	r4, r1
 80060f0:	4690      	mov	r8, r2
 80060f2:	4699      	mov	r9, r3
 80060f4:	d837      	bhi.n	8006166 <__ssputs_r+0x82>
 80060f6:	898a      	ldrh	r2, [r1, #12]
 80060f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060fc:	d031      	beq.n	8006162 <__ssputs_r+0x7e>
 80060fe:	2302      	movs	r3, #2
 8006100:	6825      	ldr	r5, [r4, #0]
 8006102:	6909      	ldr	r1, [r1, #16]
 8006104:	1a6f      	subs	r7, r5, r1
 8006106:	6965      	ldr	r5, [r4, #20]
 8006108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800610c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006110:	f109 0301 	add.w	r3, r9, #1
 8006114:	443b      	add	r3, r7
 8006116:	429d      	cmp	r5, r3
 8006118:	bf38      	it	cc
 800611a:	461d      	movcc	r5, r3
 800611c:	0553      	lsls	r3, r2, #21
 800611e:	d530      	bpl.n	8006182 <__ssputs_r+0x9e>
 8006120:	4629      	mov	r1, r5
 8006122:	f000 fb37 	bl	8006794 <_malloc_r>
 8006126:	4606      	mov	r6, r0
 8006128:	b950      	cbnz	r0, 8006140 <__ssputs_r+0x5c>
 800612a:	230c      	movs	r3, #12
 800612c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006130:	f8ca 3000 	str.w	r3, [sl]
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800613a:	81a3      	strh	r3, [r4, #12]
 800613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006140:	463a      	mov	r2, r7
 8006142:	6921      	ldr	r1, [r4, #16]
 8006144:	f000 fab6 	bl	80066b4 <memcpy>
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800614e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006152:	81a3      	strh	r3, [r4, #12]
 8006154:	6126      	str	r6, [r4, #16]
 8006156:	443e      	add	r6, r7
 8006158:	6026      	str	r6, [r4, #0]
 800615a:	464e      	mov	r6, r9
 800615c:	6165      	str	r5, [r4, #20]
 800615e:	1bed      	subs	r5, r5, r7
 8006160:	60a5      	str	r5, [r4, #8]
 8006162:	454e      	cmp	r6, r9
 8006164:	d900      	bls.n	8006168 <__ssputs_r+0x84>
 8006166:	464e      	mov	r6, r9
 8006168:	4632      	mov	r2, r6
 800616a:	4641      	mov	r1, r8
 800616c:	6820      	ldr	r0, [r4, #0]
 800616e:	f000 faac 	bl	80066ca <memmove>
 8006172:	68a3      	ldr	r3, [r4, #8]
 8006174:	2000      	movs	r0, #0
 8006176:	1b9b      	subs	r3, r3, r6
 8006178:	60a3      	str	r3, [r4, #8]
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	441e      	add	r6, r3
 800617e:	6026      	str	r6, [r4, #0]
 8006180:	e7dc      	b.n	800613c <__ssputs_r+0x58>
 8006182:	462a      	mov	r2, r5
 8006184:	f000 fb60 	bl	8006848 <_realloc_r>
 8006188:	4606      	mov	r6, r0
 800618a:	2800      	cmp	r0, #0
 800618c:	d1e2      	bne.n	8006154 <__ssputs_r+0x70>
 800618e:	6921      	ldr	r1, [r4, #16]
 8006190:	4650      	mov	r0, sl
 8006192:	f000 fab3 	bl	80066fc <_free_r>
 8006196:	e7c8      	b.n	800612a <__ssputs_r+0x46>

08006198 <_svfiprintf_r>:
 8006198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	461d      	mov	r5, r3
 800619e:	898b      	ldrh	r3, [r1, #12]
 80061a0:	b09d      	sub	sp, #116	; 0x74
 80061a2:	061f      	lsls	r7, r3, #24
 80061a4:	4680      	mov	r8, r0
 80061a6:	460c      	mov	r4, r1
 80061a8:	4616      	mov	r6, r2
 80061aa:	d50f      	bpl.n	80061cc <_svfiprintf_r+0x34>
 80061ac:	690b      	ldr	r3, [r1, #16]
 80061ae:	b96b      	cbnz	r3, 80061cc <_svfiprintf_r+0x34>
 80061b0:	2140      	movs	r1, #64	; 0x40
 80061b2:	f000 faef 	bl	8006794 <_malloc_r>
 80061b6:	6020      	str	r0, [r4, #0]
 80061b8:	6120      	str	r0, [r4, #16]
 80061ba:	b928      	cbnz	r0, 80061c8 <_svfiprintf_r+0x30>
 80061bc:	230c      	movs	r3, #12
 80061be:	f8c8 3000 	str.w	r3, [r8]
 80061c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061c6:	e0c8      	b.n	800635a <_svfiprintf_r+0x1c2>
 80061c8:	2340      	movs	r3, #64	; 0x40
 80061ca:	6163      	str	r3, [r4, #20]
 80061cc:	2300      	movs	r3, #0
 80061ce:	9309      	str	r3, [sp, #36]	; 0x24
 80061d0:	2320      	movs	r3, #32
 80061d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061d6:	2330      	movs	r3, #48	; 0x30
 80061d8:	f04f 0b01 	mov.w	fp, #1
 80061dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061e0:	9503      	str	r5, [sp, #12]
 80061e2:	4637      	mov	r7, r6
 80061e4:	463d      	mov	r5, r7
 80061e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061ea:	b10b      	cbz	r3, 80061f0 <_svfiprintf_r+0x58>
 80061ec:	2b25      	cmp	r3, #37	; 0x25
 80061ee:	d13e      	bne.n	800626e <_svfiprintf_r+0xd6>
 80061f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80061f4:	d00b      	beq.n	800620e <_svfiprintf_r+0x76>
 80061f6:	4653      	mov	r3, sl
 80061f8:	4632      	mov	r2, r6
 80061fa:	4621      	mov	r1, r4
 80061fc:	4640      	mov	r0, r8
 80061fe:	f7ff ff71 	bl	80060e4 <__ssputs_r>
 8006202:	3001      	adds	r0, #1
 8006204:	f000 80a4 	beq.w	8006350 <_svfiprintf_r+0x1b8>
 8006208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620a:	4453      	add	r3, sl
 800620c:	9309      	str	r3, [sp, #36]	; 0x24
 800620e:	783b      	ldrb	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 809d 	beq.w	8006350 <_svfiprintf_r+0x1b8>
 8006216:	2300      	movs	r3, #0
 8006218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800621c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006220:	9304      	str	r3, [sp, #16]
 8006222:	9307      	str	r3, [sp, #28]
 8006224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006228:	931a      	str	r3, [sp, #104]	; 0x68
 800622a:	462f      	mov	r7, r5
 800622c:	2205      	movs	r2, #5
 800622e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006232:	4850      	ldr	r0, [pc, #320]	; (8006374 <_svfiprintf_r+0x1dc>)
 8006234:	f000 fa30 	bl	8006698 <memchr>
 8006238:	9b04      	ldr	r3, [sp, #16]
 800623a:	b9d0      	cbnz	r0, 8006272 <_svfiprintf_r+0xda>
 800623c:	06d9      	lsls	r1, r3, #27
 800623e:	bf44      	itt	mi
 8006240:	2220      	movmi	r2, #32
 8006242:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006246:	071a      	lsls	r2, r3, #28
 8006248:	bf44      	itt	mi
 800624a:	222b      	movmi	r2, #43	; 0x2b
 800624c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006250:	782a      	ldrb	r2, [r5, #0]
 8006252:	2a2a      	cmp	r2, #42	; 0x2a
 8006254:	d015      	beq.n	8006282 <_svfiprintf_r+0xea>
 8006256:	462f      	mov	r7, r5
 8006258:	2000      	movs	r0, #0
 800625a:	250a      	movs	r5, #10
 800625c:	9a07      	ldr	r2, [sp, #28]
 800625e:	4639      	mov	r1, r7
 8006260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006264:	3b30      	subs	r3, #48	; 0x30
 8006266:	2b09      	cmp	r3, #9
 8006268:	d94d      	bls.n	8006306 <_svfiprintf_r+0x16e>
 800626a:	b1b8      	cbz	r0, 800629c <_svfiprintf_r+0x104>
 800626c:	e00f      	b.n	800628e <_svfiprintf_r+0xf6>
 800626e:	462f      	mov	r7, r5
 8006270:	e7b8      	b.n	80061e4 <_svfiprintf_r+0x4c>
 8006272:	4a40      	ldr	r2, [pc, #256]	; (8006374 <_svfiprintf_r+0x1dc>)
 8006274:	463d      	mov	r5, r7
 8006276:	1a80      	subs	r0, r0, r2
 8006278:	fa0b f000 	lsl.w	r0, fp, r0
 800627c:	4318      	orrs	r0, r3
 800627e:	9004      	str	r0, [sp, #16]
 8006280:	e7d3      	b.n	800622a <_svfiprintf_r+0x92>
 8006282:	9a03      	ldr	r2, [sp, #12]
 8006284:	1d11      	adds	r1, r2, #4
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	9103      	str	r1, [sp, #12]
 800628a:	2a00      	cmp	r2, #0
 800628c:	db01      	blt.n	8006292 <_svfiprintf_r+0xfa>
 800628e:	9207      	str	r2, [sp, #28]
 8006290:	e004      	b.n	800629c <_svfiprintf_r+0x104>
 8006292:	4252      	negs	r2, r2
 8006294:	f043 0302 	orr.w	r3, r3, #2
 8006298:	9207      	str	r2, [sp, #28]
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	783b      	ldrb	r3, [r7, #0]
 800629e:	2b2e      	cmp	r3, #46	; 0x2e
 80062a0:	d10c      	bne.n	80062bc <_svfiprintf_r+0x124>
 80062a2:	787b      	ldrb	r3, [r7, #1]
 80062a4:	2b2a      	cmp	r3, #42	; 0x2a
 80062a6:	d133      	bne.n	8006310 <_svfiprintf_r+0x178>
 80062a8:	9b03      	ldr	r3, [sp, #12]
 80062aa:	3702      	adds	r7, #2
 80062ac:	1d1a      	adds	r2, r3, #4
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	9203      	str	r2, [sp, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bfb8      	it	lt
 80062b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80062ba:	9305      	str	r3, [sp, #20]
 80062bc:	4d2e      	ldr	r5, [pc, #184]	; (8006378 <_svfiprintf_r+0x1e0>)
 80062be:	2203      	movs	r2, #3
 80062c0:	7839      	ldrb	r1, [r7, #0]
 80062c2:	4628      	mov	r0, r5
 80062c4:	f000 f9e8 	bl	8006698 <memchr>
 80062c8:	b138      	cbz	r0, 80062da <_svfiprintf_r+0x142>
 80062ca:	2340      	movs	r3, #64	; 0x40
 80062cc:	1b40      	subs	r0, r0, r5
 80062ce:	fa03 f000 	lsl.w	r0, r3, r0
 80062d2:	9b04      	ldr	r3, [sp, #16]
 80062d4:	3701      	adds	r7, #1
 80062d6:	4303      	orrs	r3, r0
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	7839      	ldrb	r1, [r7, #0]
 80062dc:	2206      	movs	r2, #6
 80062de:	4827      	ldr	r0, [pc, #156]	; (800637c <_svfiprintf_r+0x1e4>)
 80062e0:	1c7e      	adds	r6, r7, #1
 80062e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062e6:	f000 f9d7 	bl	8006698 <memchr>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d038      	beq.n	8006360 <_svfiprintf_r+0x1c8>
 80062ee:	4b24      	ldr	r3, [pc, #144]	; (8006380 <_svfiprintf_r+0x1e8>)
 80062f0:	bb13      	cbnz	r3, 8006338 <_svfiprintf_r+0x1a0>
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	3307      	adds	r3, #7
 80062f6:	f023 0307 	bic.w	r3, r3, #7
 80062fa:	3308      	adds	r3, #8
 80062fc:	9303      	str	r3, [sp, #12]
 80062fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006300:	444b      	add	r3, r9
 8006302:	9309      	str	r3, [sp, #36]	; 0x24
 8006304:	e76d      	b.n	80061e2 <_svfiprintf_r+0x4a>
 8006306:	fb05 3202 	mla	r2, r5, r2, r3
 800630a:	2001      	movs	r0, #1
 800630c:	460f      	mov	r7, r1
 800630e:	e7a6      	b.n	800625e <_svfiprintf_r+0xc6>
 8006310:	2300      	movs	r3, #0
 8006312:	250a      	movs	r5, #10
 8006314:	4619      	mov	r1, r3
 8006316:	3701      	adds	r7, #1
 8006318:	9305      	str	r3, [sp, #20]
 800631a:	4638      	mov	r0, r7
 800631c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006320:	3a30      	subs	r2, #48	; 0x30
 8006322:	2a09      	cmp	r2, #9
 8006324:	d903      	bls.n	800632e <_svfiprintf_r+0x196>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0c8      	beq.n	80062bc <_svfiprintf_r+0x124>
 800632a:	9105      	str	r1, [sp, #20]
 800632c:	e7c6      	b.n	80062bc <_svfiprintf_r+0x124>
 800632e:	fb05 2101 	mla	r1, r5, r1, r2
 8006332:	2301      	movs	r3, #1
 8006334:	4607      	mov	r7, r0
 8006336:	e7f0      	b.n	800631a <_svfiprintf_r+0x182>
 8006338:	ab03      	add	r3, sp, #12
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4622      	mov	r2, r4
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <_svfiprintf_r+0x1ec>)
 8006340:	a904      	add	r1, sp, #16
 8006342:	4640      	mov	r0, r8
 8006344:	f3af 8000 	nop.w
 8006348:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800634c:	4681      	mov	r9, r0
 800634e:	d1d6      	bne.n	80062fe <_svfiprintf_r+0x166>
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	065b      	lsls	r3, r3, #25
 8006354:	f53f af35 	bmi.w	80061c2 <_svfiprintf_r+0x2a>
 8006358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800635a:	b01d      	add	sp, #116	; 0x74
 800635c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006360:	ab03      	add	r3, sp, #12
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	4622      	mov	r2, r4
 8006366:	4b07      	ldr	r3, [pc, #28]	; (8006384 <_svfiprintf_r+0x1ec>)
 8006368:	a904      	add	r1, sp, #16
 800636a:	4640      	mov	r0, r8
 800636c:	f000 f882 	bl	8006474 <_printf_i>
 8006370:	e7ea      	b.n	8006348 <_svfiprintf_r+0x1b0>
 8006372:	bf00      	nop
 8006374:	08006b10 	.word	0x08006b10
 8006378:	08006b16 	.word	0x08006b16
 800637c:	08006b1a 	.word	0x08006b1a
 8006380:	00000000 	.word	0x00000000
 8006384:	080060e5 	.word	0x080060e5

08006388 <_printf_common>:
 8006388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	4691      	mov	r9, r2
 800638e:	461f      	mov	r7, r3
 8006390:	688a      	ldr	r2, [r1, #8]
 8006392:	690b      	ldr	r3, [r1, #16]
 8006394:	4606      	mov	r6, r0
 8006396:	4293      	cmp	r3, r2
 8006398:	bfb8      	it	lt
 800639a:	4613      	movlt	r3, r2
 800639c:	f8c9 3000 	str.w	r3, [r9]
 80063a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063a4:	460c      	mov	r4, r1
 80063a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063aa:	b112      	cbz	r2, 80063b2 <_printf_common+0x2a>
 80063ac:	3301      	adds	r3, #1
 80063ae:	f8c9 3000 	str.w	r3, [r9]
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	0699      	lsls	r1, r3, #26
 80063b6:	bf42      	ittt	mi
 80063b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80063bc:	3302      	addmi	r3, #2
 80063be:	f8c9 3000 	strmi.w	r3, [r9]
 80063c2:	6825      	ldr	r5, [r4, #0]
 80063c4:	f015 0506 	ands.w	r5, r5, #6
 80063c8:	d107      	bne.n	80063da <_printf_common+0x52>
 80063ca:	f104 0a19 	add.w	sl, r4, #25
 80063ce:	68e3      	ldr	r3, [r4, #12]
 80063d0:	f8d9 2000 	ldr.w	r2, [r9]
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	42ab      	cmp	r3, r5
 80063d8:	dc29      	bgt.n	800642e <_printf_common+0xa6>
 80063da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063de:	6822      	ldr	r2, [r4, #0]
 80063e0:	3300      	adds	r3, #0
 80063e2:	bf18      	it	ne
 80063e4:	2301      	movne	r3, #1
 80063e6:	0692      	lsls	r2, r2, #26
 80063e8:	d42e      	bmi.n	8006448 <_printf_common+0xc0>
 80063ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063ee:	4639      	mov	r1, r7
 80063f0:	4630      	mov	r0, r6
 80063f2:	47c0      	blx	r8
 80063f4:	3001      	adds	r0, #1
 80063f6:	d021      	beq.n	800643c <_printf_common+0xb4>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	68e5      	ldr	r5, [r4, #12]
 80063fc:	f003 0306 	and.w	r3, r3, #6
 8006400:	2b04      	cmp	r3, #4
 8006402:	bf18      	it	ne
 8006404:	2500      	movne	r5, #0
 8006406:	f8d9 2000 	ldr.w	r2, [r9]
 800640a:	f04f 0900 	mov.w	r9, #0
 800640e:	bf08      	it	eq
 8006410:	1aad      	subeq	r5, r5, r2
 8006412:	68a3      	ldr	r3, [r4, #8]
 8006414:	6922      	ldr	r2, [r4, #16]
 8006416:	bf08      	it	eq
 8006418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800641c:	4293      	cmp	r3, r2
 800641e:	bfc4      	itt	gt
 8006420:	1a9b      	subgt	r3, r3, r2
 8006422:	18ed      	addgt	r5, r5, r3
 8006424:	341a      	adds	r4, #26
 8006426:	454d      	cmp	r5, r9
 8006428:	d11a      	bne.n	8006460 <_printf_common+0xd8>
 800642a:	2000      	movs	r0, #0
 800642c:	e008      	b.n	8006440 <_printf_common+0xb8>
 800642e:	2301      	movs	r3, #1
 8006430:	4652      	mov	r2, sl
 8006432:	4639      	mov	r1, r7
 8006434:	4630      	mov	r0, r6
 8006436:	47c0      	blx	r8
 8006438:	3001      	adds	r0, #1
 800643a:	d103      	bne.n	8006444 <_printf_common+0xbc>
 800643c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006444:	3501      	adds	r5, #1
 8006446:	e7c2      	b.n	80063ce <_printf_common+0x46>
 8006448:	2030      	movs	r0, #48	; 0x30
 800644a:	18e1      	adds	r1, r4, r3
 800644c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006456:	4422      	add	r2, r4
 8006458:	3302      	adds	r3, #2
 800645a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800645e:	e7c4      	b.n	80063ea <_printf_common+0x62>
 8006460:	2301      	movs	r3, #1
 8006462:	4622      	mov	r2, r4
 8006464:	4639      	mov	r1, r7
 8006466:	4630      	mov	r0, r6
 8006468:	47c0      	blx	r8
 800646a:	3001      	adds	r0, #1
 800646c:	d0e6      	beq.n	800643c <_printf_common+0xb4>
 800646e:	f109 0901 	add.w	r9, r9, #1
 8006472:	e7d8      	b.n	8006426 <_printf_common+0x9e>

08006474 <_printf_i>:
 8006474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006478:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800647c:	460c      	mov	r4, r1
 800647e:	7e09      	ldrb	r1, [r1, #24]
 8006480:	b085      	sub	sp, #20
 8006482:	296e      	cmp	r1, #110	; 0x6e
 8006484:	4617      	mov	r7, r2
 8006486:	4606      	mov	r6, r0
 8006488:	4698      	mov	r8, r3
 800648a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800648c:	f000 80b3 	beq.w	80065f6 <_printf_i+0x182>
 8006490:	d822      	bhi.n	80064d8 <_printf_i+0x64>
 8006492:	2963      	cmp	r1, #99	; 0x63
 8006494:	d036      	beq.n	8006504 <_printf_i+0x90>
 8006496:	d80a      	bhi.n	80064ae <_printf_i+0x3a>
 8006498:	2900      	cmp	r1, #0
 800649a:	f000 80b9 	beq.w	8006610 <_printf_i+0x19c>
 800649e:	2958      	cmp	r1, #88	; 0x58
 80064a0:	f000 8083 	beq.w	80065aa <_printf_i+0x136>
 80064a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80064ac:	e032      	b.n	8006514 <_printf_i+0xa0>
 80064ae:	2964      	cmp	r1, #100	; 0x64
 80064b0:	d001      	beq.n	80064b6 <_printf_i+0x42>
 80064b2:	2969      	cmp	r1, #105	; 0x69
 80064b4:	d1f6      	bne.n	80064a4 <_printf_i+0x30>
 80064b6:	6820      	ldr	r0, [r4, #0]
 80064b8:	6813      	ldr	r3, [r2, #0]
 80064ba:	0605      	lsls	r5, r0, #24
 80064bc:	f103 0104 	add.w	r1, r3, #4
 80064c0:	d52a      	bpl.n	8006518 <_printf_i+0xa4>
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6011      	str	r1, [r2, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da03      	bge.n	80064d2 <_printf_i+0x5e>
 80064ca:	222d      	movs	r2, #45	; 0x2d
 80064cc:	425b      	negs	r3, r3
 80064ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80064d2:	486f      	ldr	r0, [pc, #444]	; (8006690 <_printf_i+0x21c>)
 80064d4:	220a      	movs	r2, #10
 80064d6:	e039      	b.n	800654c <_printf_i+0xd8>
 80064d8:	2973      	cmp	r1, #115	; 0x73
 80064da:	f000 809d 	beq.w	8006618 <_printf_i+0x1a4>
 80064de:	d808      	bhi.n	80064f2 <_printf_i+0x7e>
 80064e0:	296f      	cmp	r1, #111	; 0x6f
 80064e2:	d020      	beq.n	8006526 <_printf_i+0xb2>
 80064e4:	2970      	cmp	r1, #112	; 0x70
 80064e6:	d1dd      	bne.n	80064a4 <_printf_i+0x30>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	f043 0320 	orr.w	r3, r3, #32
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	e003      	b.n	80064fa <_printf_i+0x86>
 80064f2:	2975      	cmp	r1, #117	; 0x75
 80064f4:	d017      	beq.n	8006526 <_printf_i+0xb2>
 80064f6:	2978      	cmp	r1, #120	; 0x78
 80064f8:	d1d4      	bne.n	80064a4 <_printf_i+0x30>
 80064fa:	2378      	movs	r3, #120	; 0x78
 80064fc:	4865      	ldr	r0, [pc, #404]	; (8006694 <_printf_i+0x220>)
 80064fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006502:	e055      	b.n	80065b0 <_printf_i+0x13c>
 8006504:	6813      	ldr	r3, [r2, #0]
 8006506:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800650a:	1d19      	adds	r1, r3, #4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6011      	str	r1, [r2, #0]
 8006510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006514:	2301      	movs	r3, #1
 8006516:	e08c      	b.n	8006632 <_printf_i+0x1be>
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800651e:	6011      	str	r1, [r2, #0]
 8006520:	bf18      	it	ne
 8006522:	b21b      	sxthne	r3, r3
 8006524:	e7cf      	b.n	80064c6 <_printf_i+0x52>
 8006526:	6813      	ldr	r3, [r2, #0]
 8006528:	6825      	ldr	r5, [r4, #0]
 800652a:	1d18      	adds	r0, r3, #4
 800652c:	6010      	str	r0, [r2, #0]
 800652e:	0628      	lsls	r0, r5, #24
 8006530:	d501      	bpl.n	8006536 <_printf_i+0xc2>
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	e002      	b.n	800653c <_printf_i+0xc8>
 8006536:	0668      	lsls	r0, r5, #25
 8006538:	d5fb      	bpl.n	8006532 <_printf_i+0xbe>
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	296f      	cmp	r1, #111	; 0x6f
 800653e:	bf14      	ite	ne
 8006540:	220a      	movne	r2, #10
 8006542:	2208      	moveq	r2, #8
 8006544:	4852      	ldr	r0, [pc, #328]	; (8006690 <_printf_i+0x21c>)
 8006546:	2100      	movs	r1, #0
 8006548:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800654c:	6865      	ldr	r5, [r4, #4]
 800654e:	2d00      	cmp	r5, #0
 8006550:	60a5      	str	r5, [r4, #8]
 8006552:	f2c0 8095 	blt.w	8006680 <_printf_i+0x20c>
 8006556:	6821      	ldr	r1, [r4, #0]
 8006558:	f021 0104 	bic.w	r1, r1, #4
 800655c:	6021      	str	r1, [r4, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d13d      	bne.n	80065de <_printf_i+0x16a>
 8006562:	2d00      	cmp	r5, #0
 8006564:	f040 808e 	bne.w	8006684 <_printf_i+0x210>
 8006568:	4665      	mov	r5, ip
 800656a:	2a08      	cmp	r2, #8
 800656c:	d10b      	bne.n	8006586 <_printf_i+0x112>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	07db      	lsls	r3, r3, #31
 8006572:	d508      	bpl.n	8006586 <_printf_i+0x112>
 8006574:	6923      	ldr	r3, [r4, #16]
 8006576:	6862      	ldr	r2, [r4, #4]
 8006578:	429a      	cmp	r2, r3
 800657a:	bfde      	ittt	le
 800657c:	2330      	movle	r3, #48	; 0x30
 800657e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006582:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006586:	ebac 0305 	sub.w	r3, ip, r5
 800658a:	6123      	str	r3, [r4, #16]
 800658c:	f8cd 8000 	str.w	r8, [sp]
 8006590:	463b      	mov	r3, r7
 8006592:	aa03      	add	r2, sp, #12
 8006594:	4621      	mov	r1, r4
 8006596:	4630      	mov	r0, r6
 8006598:	f7ff fef6 	bl	8006388 <_printf_common>
 800659c:	3001      	adds	r0, #1
 800659e:	d14d      	bne.n	800663c <_printf_i+0x1c8>
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065a4:	b005      	add	sp, #20
 80065a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065aa:	4839      	ldr	r0, [pc, #228]	; (8006690 <_printf_i+0x21c>)
 80065ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80065b0:	6813      	ldr	r3, [r2, #0]
 80065b2:	6821      	ldr	r1, [r4, #0]
 80065b4:	1d1d      	adds	r5, r3, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6015      	str	r5, [r2, #0]
 80065ba:	060a      	lsls	r2, r1, #24
 80065bc:	d50b      	bpl.n	80065d6 <_printf_i+0x162>
 80065be:	07ca      	lsls	r2, r1, #31
 80065c0:	bf44      	itt	mi
 80065c2:	f041 0120 	orrmi.w	r1, r1, #32
 80065c6:	6021      	strmi	r1, [r4, #0]
 80065c8:	b91b      	cbnz	r3, 80065d2 <_printf_i+0x15e>
 80065ca:	6822      	ldr	r2, [r4, #0]
 80065cc:	f022 0220 	bic.w	r2, r2, #32
 80065d0:	6022      	str	r2, [r4, #0]
 80065d2:	2210      	movs	r2, #16
 80065d4:	e7b7      	b.n	8006546 <_printf_i+0xd2>
 80065d6:	064d      	lsls	r5, r1, #25
 80065d8:	bf48      	it	mi
 80065da:	b29b      	uxthmi	r3, r3
 80065dc:	e7ef      	b.n	80065be <_printf_i+0x14a>
 80065de:	4665      	mov	r5, ip
 80065e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80065e4:	fb02 3311 	mls	r3, r2, r1, r3
 80065e8:	5cc3      	ldrb	r3, [r0, r3]
 80065ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065ee:	460b      	mov	r3, r1
 80065f0:	2900      	cmp	r1, #0
 80065f2:	d1f5      	bne.n	80065e0 <_printf_i+0x16c>
 80065f4:	e7b9      	b.n	800656a <_printf_i+0xf6>
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	6825      	ldr	r5, [r4, #0]
 80065fa:	1d18      	adds	r0, r3, #4
 80065fc:	6961      	ldr	r1, [r4, #20]
 80065fe:	6010      	str	r0, [r2, #0]
 8006600:	0628      	lsls	r0, r5, #24
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	d501      	bpl.n	800660a <_printf_i+0x196>
 8006606:	6019      	str	r1, [r3, #0]
 8006608:	e002      	b.n	8006610 <_printf_i+0x19c>
 800660a:	066a      	lsls	r2, r5, #25
 800660c:	d5fb      	bpl.n	8006606 <_printf_i+0x192>
 800660e:	8019      	strh	r1, [r3, #0]
 8006610:	2300      	movs	r3, #0
 8006612:	4665      	mov	r5, ip
 8006614:	6123      	str	r3, [r4, #16]
 8006616:	e7b9      	b.n	800658c <_printf_i+0x118>
 8006618:	6813      	ldr	r3, [r2, #0]
 800661a:	1d19      	adds	r1, r3, #4
 800661c:	6011      	str	r1, [r2, #0]
 800661e:	681d      	ldr	r5, [r3, #0]
 8006620:	6862      	ldr	r2, [r4, #4]
 8006622:	2100      	movs	r1, #0
 8006624:	4628      	mov	r0, r5
 8006626:	f000 f837 	bl	8006698 <memchr>
 800662a:	b108      	cbz	r0, 8006630 <_printf_i+0x1bc>
 800662c:	1b40      	subs	r0, r0, r5
 800662e:	6060      	str	r0, [r4, #4]
 8006630:	6863      	ldr	r3, [r4, #4]
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	2300      	movs	r3, #0
 8006636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800663a:	e7a7      	b.n	800658c <_printf_i+0x118>
 800663c:	6923      	ldr	r3, [r4, #16]
 800663e:	462a      	mov	r2, r5
 8006640:	4639      	mov	r1, r7
 8006642:	4630      	mov	r0, r6
 8006644:	47c0      	blx	r8
 8006646:	3001      	adds	r0, #1
 8006648:	d0aa      	beq.n	80065a0 <_printf_i+0x12c>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	079b      	lsls	r3, r3, #30
 800664e:	d413      	bmi.n	8006678 <_printf_i+0x204>
 8006650:	68e0      	ldr	r0, [r4, #12]
 8006652:	9b03      	ldr	r3, [sp, #12]
 8006654:	4298      	cmp	r0, r3
 8006656:	bfb8      	it	lt
 8006658:	4618      	movlt	r0, r3
 800665a:	e7a3      	b.n	80065a4 <_printf_i+0x130>
 800665c:	2301      	movs	r3, #1
 800665e:	464a      	mov	r2, r9
 8006660:	4639      	mov	r1, r7
 8006662:	4630      	mov	r0, r6
 8006664:	47c0      	blx	r8
 8006666:	3001      	adds	r0, #1
 8006668:	d09a      	beq.n	80065a0 <_printf_i+0x12c>
 800666a:	3501      	adds	r5, #1
 800666c:	68e3      	ldr	r3, [r4, #12]
 800666e:	9a03      	ldr	r2, [sp, #12]
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	42ab      	cmp	r3, r5
 8006674:	dcf2      	bgt.n	800665c <_printf_i+0x1e8>
 8006676:	e7eb      	b.n	8006650 <_printf_i+0x1dc>
 8006678:	2500      	movs	r5, #0
 800667a:	f104 0919 	add.w	r9, r4, #25
 800667e:	e7f5      	b.n	800666c <_printf_i+0x1f8>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1ac      	bne.n	80065de <_printf_i+0x16a>
 8006684:	7803      	ldrb	r3, [r0, #0]
 8006686:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800668a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800668e:	e76c      	b.n	800656a <_printf_i+0xf6>
 8006690:	08006b21 	.word	0x08006b21
 8006694:	08006b32 	.word	0x08006b32

08006698 <memchr>:
 8006698:	b510      	push	{r4, lr}
 800669a:	b2c9      	uxtb	r1, r1
 800669c:	4402      	add	r2, r0
 800669e:	4290      	cmp	r0, r2
 80066a0:	4603      	mov	r3, r0
 80066a2:	d101      	bne.n	80066a8 <memchr+0x10>
 80066a4:	2300      	movs	r3, #0
 80066a6:	e003      	b.n	80066b0 <memchr+0x18>
 80066a8:	781c      	ldrb	r4, [r3, #0]
 80066aa:	3001      	adds	r0, #1
 80066ac:	428c      	cmp	r4, r1
 80066ae:	d1f6      	bne.n	800669e <memchr+0x6>
 80066b0:	4618      	mov	r0, r3
 80066b2:	bd10      	pop	{r4, pc}

080066b4 <memcpy>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	1e43      	subs	r3, r0, #1
 80066b8:	440a      	add	r2, r1
 80066ba:	4291      	cmp	r1, r2
 80066bc:	d100      	bne.n	80066c0 <memcpy+0xc>
 80066be:	bd10      	pop	{r4, pc}
 80066c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c8:	e7f7      	b.n	80066ba <memcpy+0x6>

080066ca <memmove>:
 80066ca:	4288      	cmp	r0, r1
 80066cc:	b510      	push	{r4, lr}
 80066ce:	eb01 0302 	add.w	r3, r1, r2
 80066d2:	d807      	bhi.n	80066e4 <memmove+0x1a>
 80066d4:	1e42      	subs	r2, r0, #1
 80066d6:	4299      	cmp	r1, r3
 80066d8:	d00a      	beq.n	80066f0 <memmove+0x26>
 80066da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80066e2:	e7f8      	b.n	80066d6 <memmove+0xc>
 80066e4:	4283      	cmp	r3, r0
 80066e6:	d9f5      	bls.n	80066d4 <memmove+0xa>
 80066e8:	1881      	adds	r1, r0, r2
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	42d3      	cmn	r3, r2
 80066ee:	d100      	bne.n	80066f2 <memmove+0x28>
 80066f0:	bd10      	pop	{r4, pc}
 80066f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066fa:	e7f7      	b.n	80066ec <memmove+0x22>

080066fc <_free_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4605      	mov	r5, r0
 8006700:	2900      	cmp	r1, #0
 8006702:	d043      	beq.n	800678c <_free_r+0x90>
 8006704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006708:	1f0c      	subs	r4, r1, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfb8      	it	lt
 800670e:	18e4      	addlt	r4, r4, r3
 8006710:	f000 f8d0 	bl	80068b4 <__malloc_lock>
 8006714:	4a1e      	ldr	r2, [pc, #120]	; (8006790 <_free_r+0x94>)
 8006716:	6813      	ldr	r3, [r2, #0]
 8006718:	4610      	mov	r0, r2
 800671a:	b933      	cbnz	r3, 800672a <_free_r+0x2e>
 800671c:	6063      	str	r3, [r4, #4]
 800671e:	6014      	str	r4, [r2, #0]
 8006720:	4628      	mov	r0, r5
 8006722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006726:	f000 b8c6 	b.w	80068b6 <__malloc_unlock>
 800672a:	42a3      	cmp	r3, r4
 800672c:	d90b      	bls.n	8006746 <_free_r+0x4a>
 800672e:	6821      	ldr	r1, [r4, #0]
 8006730:	1862      	adds	r2, r4, r1
 8006732:	4293      	cmp	r3, r2
 8006734:	bf01      	itttt	eq
 8006736:	681a      	ldreq	r2, [r3, #0]
 8006738:	685b      	ldreq	r3, [r3, #4]
 800673a:	1852      	addeq	r2, r2, r1
 800673c:	6022      	streq	r2, [r4, #0]
 800673e:	6063      	str	r3, [r4, #4]
 8006740:	6004      	str	r4, [r0, #0]
 8006742:	e7ed      	b.n	8006720 <_free_r+0x24>
 8006744:	4613      	mov	r3, r2
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	b10a      	cbz	r2, 800674e <_free_r+0x52>
 800674a:	42a2      	cmp	r2, r4
 800674c:	d9fa      	bls.n	8006744 <_free_r+0x48>
 800674e:	6819      	ldr	r1, [r3, #0]
 8006750:	1858      	adds	r0, r3, r1
 8006752:	42a0      	cmp	r0, r4
 8006754:	d10b      	bne.n	800676e <_free_r+0x72>
 8006756:	6820      	ldr	r0, [r4, #0]
 8006758:	4401      	add	r1, r0
 800675a:	1858      	adds	r0, r3, r1
 800675c:	4282      	cmp	r2, r0
 800675e:	6019      	str	r1, [r3, #0]
 8006760:	d1de      	bne.n	8006720 <_free_r+0x24>
 8006762:	6810      	ldr	r0, [r2, #0]
 8006764:	6852      	ldr	r2, [r2, #4]
 8006766:	4401      	add	r1, r0
 8006768:	6019      	str	r1, [r3, #0]
 800676a:	605a      	str	r2, [r3, #4]
 800676c:	e7d8      	b.n	8006720 <_free_r+0x24>
 800676e:	d902      	bls.n	8006776 <_free_r+0x7a>
 8006770:	230c      	movs	r3, #12
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	e7d4      	b.n	8006720 <_free_r+0x24>
 8006776:	6820      	ldr	r0, [r4, #0]
 8006778:	1821      	adds	r1, r4, r0
 800677a:	428a      	cmp	r2, r1
 800677c:	bf01      	itttt	eq
 800677e:	6811      	ldreq	r1, [r2, #0]
 8006780:	6852      	ldreq	r2, [r2, #4]
 8006782:	1809      	addeq	r1, r1, r0
 8006784:	6021      	streq	r1, [r4, #0]
 8006786:	6062      	str	r2, [r4, #4]
 8006788:	605c      	str	r4, [r3, #4]
 800678a:	e7c9      	b.n	8006720 <_free_r+0x24>
 800678c:	bd38      	pop	{r3, r4, r5, pc}
 800678e:	bf00      	nop
 8006790:	2000012c 	.word	0x2000012c

08006794 <_malloc_r>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	1ccd      	adds	r5, r1, #3
 8006798:	f025 0503 	bic.w	r5, r5, #3
 800679c:	3508      	adds	r5, #8
 800679e:	2d0c      	cmp	r5, #12
 80067a0:	bf38      	it	cc
 80067a2:	250c      	movcc	r5, #12
 80067a4:	2d00      	cmp	r5, #0
 80067a6:	4606      	mov	r6, r0
 80067a8:	db01      	blt.n	80067ae <_malloc_r+0x1a>
 80067aa:	42a9      	cmp	r1, r5
 80067ac:	d903      	bls.n	80067b6 <_malloc_r+0x22>
 80067ae:	230c      	movs	r3, #12
 80067b0:	6033      	str	r3, [r6, #0]
 80067b2:	2000      	movs	r0, #0
 80067b4:	bd70      	pop	{r4, r5, r6, pc}
 80067b6:	f000 f87d 	bl	80068b4 <__malloc_lock>
 80067ba:	4a21      	ldr	r2, [pc, #132]	; (8006840 <_malloc_r+0xac>)
 80067bc:	6814      	ldr	r4, [r2, #0]
 80067be:	4621      	mov	r1, r4
 80067c0:	b991      	cbnz	r1, 80067e8 <_malloc_r+0x54>
 80067c2:	4c20      	ldr	r4, [pc, #128]	; (8006844 <_malloc_r+0xb0>)
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	b91b      	cbnz	r3, 80067d0 <_malloc_r+0x3c>
 80067c8:	4630      	mov	r0, r6
 80067ca:	f000 f863 	bl	8006894 <_sbrk_r>
 80067ce:	6020      	str	r0, [r4, #0]
 80067d0:	4629      	mov	r1, r5
 80067d2:	4630      	mov	r0, r6
 80067d4:	f000 f85e 	bl	8006894 <_sbrk_r>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d124      	bne.n	8006826 <_malloc_r+0x92>
 80067dc:	230c      	movs	r3, #12
 80067de:	4630      	mov	r0, r6
 80067e0:	6033      	str	r3, [r6, #0]
 80067e2:	f000 f868 	bl	80068b6 <__malloc_unlock>
 80067e6:	e7e4      	b.n	80067b2 <_malloc_r+0x1e>
 80067e8:	680b      	ldr	r3, [r1, #0]
 80067ea:	1b5b      	subs	r3, r3, r5
 80067ec:	d418      	bmi.n	8006820 <_malloc_r+0x8c>
 80067ee:	2b0b      	cmp	r3, #11
 80067f0:	d90f      	bls.n	8006812 <_malloc_r+0x7e>
 80067f2:	600b      	str	r3, [r1, #0]
 80067f4:	18cc      	adds	r4, r1, r3
 80067f6:	50cd      	str	r5, [r1, r3]
 80067f8:	4630      	mov	r0, r6
 80067fa:	f000 f85c 	bl	80068b6 <__malloc_unlock>
 80067fe:	f104 000b 	add.w	r0, r4, #11
 8006802:	1d23      	adds	r3, r4, #4
 8006804:	f020 0007 	bic.w	r0, r0, #7
 8006808:	1ac3      	subs	r3, r0, r3
 800680a:	d0d3      	beq.n	80067b4 <_malloc_r+0x20>
 800680c:	425a      	negs	r2, r3
 800680e:	50e2      	str	r2, [r4, r3]
 8006810:	e7d0      	b.n	80067b4 <_malloc_r+0x20>
 8006812:	684b      	ldr	r3, [r1, #4]
 8006814:	428c      	cmp	r4, r1
 8006816:	bf16      	itet	ne
 8006818:	6063      	strne	r3, [r4, #4]
 800681a:	6013      	streq	r3, [r2, #0]
 800681c:	460c      	movne	r4, r1
 800681e:	e7eb      	b.n	80067f8 <_malloc_r+0x64>
 8006820:	460c      	mov	r4, r1
 8006822:	6849      	ldr	r1, [r1, #4]
 8006824:	e7cc      	b.n	80067c0 <_malloc_r+0x2c>
 8006826:	1cc4      	adds	r4, r0, #3
 8006828:	f024 0403 	bic.w	r4, r4, #3
 800682c:	42a0      	cmp	r0, r4
 800682e:	d005      	beq.n	800683c <_malloc_r+0xa8>
 8006830:	1a21      	subs	r1, r4, r0
 8006832:	4630      	mov	r0, r6
 8006834:	f000 f82e 	bl	8006894 <_sbrk_r>
 8006838:	3001      	adds	r0, #1
 800683a:	d0cf      	beq.n	80067dc <_malloc_r+0x48>
 800683c:	6025      	str	r5, [r4, #0]
 800683e:	e7db      	b.n	80067f8 <_malloc_r+0x64>
 8006840:	2000012c 	.word	0x2000012c
 8006844:	20000130 	.word	0x20000130

08006848 <_realloc_r>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	4607      	mov	r7, r0
 800684c:	4614      	mov	r4, r2
 800684e:	460e      	mov	r6, r1
 8006850:	b921      	cbnz	r1, 800685c <_realloc_r+0x14>
 8006852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006856:	4611      	mov	r1, r2
 8006858:	f7ff bf9c 	b.w	8006794 <_malloc_r>
 800685c:	b922      	cbnz	r2, 8006868 <_realloc_r+0x20>
 800685e:	f7ff ff4d 	bl	80066fc <_free_r>
 8006862:	4625      	mov	r5, r4
 8006864:	4628      	mov	r0, r5
 8006866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006868:	f000 f826 	bl	80068b8 <_malloc_usable_size_r>
 800686c:	42a0      	cmp	r0, r4
 800686e:	d20f      	bcs.n	8006890 <_realloc_r+0x48>
 8006870:	4621      	mov	r1, r4
 8006872:	4638      	mov	r0, r7
 8006874:	f7ff ff8e 	bl	8006794 <_malloc_r>
 8006878:	4605      	mov	r5, r0
 800687a:	2800      	cmp	r0, #0
 800687c:	d0f2      	beq.n	8006864 <_realloc_r+0x1c>
 800687e:	4631      	mov	r1, r6
 8006880:	4622      	mov	r2, r4
 8006882:	f7ff ff17 	bl	80066b4 <memcpy>
 8006886:	4631      	mov	r1, r6
 8006888:	4638      	mov	r0, r7
 800688a:	f7ff ff37 	bl	80066fc <_free_r>
 800688e:	e7e9      	b.n	8006864 <_realloc_r+0x1c>
 8006890:	4635      	mov	r5, r6
 8006892:	e7e7      	b.n	8006864 <_realloc_r+0x1c>

08006894 <_sbrk_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	2300      	movs	r3, #0
 8006898:	4c05      	ldr	r4, [pc, #20]	; (80068b0 <_sbrk_r+0x1c>)
 800689a:	4605      	mov	r5, r0
 800689c:	4608      	mov	r0, r1
 800689e:	6023      	str	r3, [r4, #0]
 80068a0:	f7fb fe70 	bl	8002584 <_sbrk>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d102      	bne.n	80068ae <_sbrk_r+0x1a>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	b103      	cbz	r3, 80068ae <_sbrk_r+0x1a>
 80068ac:	602b      	str	r3, [r5, #0]
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	20000738 	.word	0x20000738

080068b4 <__malloc_lock>:
 80068b4:	4770      	bx	lr

080068b6 <__malloc_unlock>:
 80068b6:	4770      	bx	lr

080068b8 <_malloc_usable_size_r>:
 80068b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068bc:	1f18      	subs	r0, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bfbc      	itt	lt
 80068c2:	580b      	ldrlt	r3, [r1, r0]
 80068c4:	18c0      	addlt	r0, r0, r3
 80068c6:	4770      	bx	lr

080068c8 <_init>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	bf00      	nop
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr

080068d4 <_fini>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	bf00      	nop
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr
