
tableroPileta_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08007fa8  08007fa8  00017fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a4  080082a4  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  080082a4  080082a4  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082a4  080082a4  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a4  080082a4  000182a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082a8  080082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080082ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000100  080083ac  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  080083ac  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e45  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c1e  00000000  00000000  00035f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  0003afd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001857e  00000000  00000000  0003c200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013252  00000000  00000000  0005477e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c207  00000000  00000000  000679d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3bd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f4  00000000  00000000  000e3c54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	08007f90 	.word	0x08007f90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	08007f90 	.word	0x08007f90

0800014c <spi_74HC165_init>:
 * La función de inicialización está modificada para trabajar con dos
 * integrados 74HC165 a la vez, tratándolos como distintos esclavos SPI.
 * Cada integrado contará con su propia función de lectura, así como sus
 * propias señales CE.
 */
void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CEport, uint16_t CEpin){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 800015c:	4a09      	ldr	r2, [pc, #36]	; (8000184 <spi_74HC165_init+0x38>)
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 8000162:	4a09      	ldr	r2, [pc, #36]	; (8000188 <spi_74HC165_init+0x3c>)
 8000164:	68bb      	ldr	r3, [r7, #8]
 8000166:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 8000168:	4a08      	ldr	r2, [pc, #32]	; (800018c <spi_74HC165_init+0x40>)
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	8013      	strh	r3, [r2, #0]

	portCE = CEport;
 800016e:	4a08      	ldr	r2, [pc, #32]	; (8000190 <spi_74HC165_init+0x44>)
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	6013      	str	r3, [r2, #0]
	pinCE = CEpin;
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <spi_74HC165_init+0x48>)
 8000176:	8b3b      	ldrh	r3, [r7, #24]
 8000178:	8013      	strh	r3, [r2, #0]

}
 800017a:	bf00      	nop
 800017c:	3714      	adds	r7, #20
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000168 	.word	0x20000168
 8000188:	20000170 	.word	0x20000170
 800018c:	2000016c 	.word	0x2000016c
 8000190:	20000178 	.word	0x20000178
 8000194:	20000174 	.word	0x20000174

08000198 <spi_74HC165_receiveBotones>:


void spi_74HC165_receiveBotones (uint8_t* pdata, uint16_t sizeData){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 80001a4:	4b15      	ldr	r3, [pc, #84]	; (80001fc <spi_74HC165_receiveBotones+0x64>)
 80001a6:	6818      	ldr	r0, [r3, #0]
 80001a8:	4b15      	ldr	r3, [pc, #84]	; (8000200 <spi_74HC165_receiveBotones+0x68>)
 80001aa:	881b      	ldrh	r3, [r3, #0]
 80001ac:	2200      	movs	r2, #0
 80001ae:	4619      	mov	r1, r3
 80001b0:	f004 fc3f 	bl	8004a32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <spi_74HC165_receiveBotones+0x64>)
 80001b6:	6818      	ldr	r0, [r3, #0]
 80001b8:	4b11      	ldr	r3, [pc, #68]	; (8000200 <spi_74HC165_receiveBotones+0x68>)
 80001ba:	881b      	ldrh	r3, [r3, #0]
 80001bc:	2201      	movs	r2, #1
 80001be:	4619      	mov	r1, r3
 80001c0:	f004 fc37 	bl	8004a32 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 80001c4:	4b0f      	ldr	r3, [pc, #60]	; (8000204 <spi_74HC165_receiveBotones+0x6c>)
 80001c6:	6818      	ldr	r0, [r3, #0]
 80001c8:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <spi_74HC165_receiveBotones+0x70>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	2200      	movs	r2, #0
 80001ce:	4619      	mov	r1, r3
 80001d0:	f004 fc2f 	bl	8004a32 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 80001d4:	4b0d      	ldr	r3, [pc, #52]	; (800020c <spi_74HC165_receiveBotones+0x74>)
 80001d6:	6818      	ldr	r0, [r3, #0]
 80001d8:	887a      	ldrh	r2, [r7, #2]
 80001da:	2364      	movs	r3, #100	; 0x64
 80001dc:	6879      	ldr	r1, [r7, #4]
 80001de:	f006 fa44 	bl	800666a <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 80001e2:	4b08      	ldr	r3, [pc, #32]	; (8000204 <spi_74HC165_receiveBotones+0x6c>)
 80001e4:	6818      	ldr	r0, [r3, #0]
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <spi_74HC165_receiveBotones+0x70>)
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	2201      	movs	r2, #1
 80001ec:	4619      	mov	r1, r3
 80001ee:	f004 fc20 	bl	8004a32 <HAL_GPIO_WritePin>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000170 	.word	0x20000170
 8000200:	2000016c 	.word	0x2000016c
 8000204:	20000178 	.word	0x20000178
 8000208:	20000174 	.word	0x20000174
 800020c:	20000168 	.word	0x20000168

08000210 <spi_74HC165_receiveTeclado>:
//
//	//clock disable
//	HAL_GPIO_WritePin(portCE2, pinCE2, 1);
//}

void spi_74HC165_receiveTeclado (uint8_t* pdata, uint16_t sizeData){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	460b      	mov	r3, r1
 800021a:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 800021c:	4b17      	ldr	r3, [pc, #92]	; (800027c <spi_74HC165_receiveTeclado+0x6c>)
 800021e:	6818      	ldr	r0, [r3, #0]
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <spi_74HC165_receiveTeclado+0x70>)
 8000222:	881b      	ldrh	r3, [r3, #0]
 8000224:	2200      	movs	r2, #0
 8000226:	4619      	mov	r1, r3
 8000228:	f004 fc03 	bl	8004a32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 800022c:	4b13      	ldr	r3, [pc, #76]	; (800027c <spi_74HC165_receiveTeclado+0x6c>)
 800022e:	6818      	ldr	r0, [r3, #0]
 8000230:	4b13      	ldr	r3, [pc, #76]	; (8000280 <spi_74HC165_receiveTeclado+0x70>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	2201      	movs	r2, #1
 8000236:	4619      	mov	r1, r3
 8000238:	f004 fbfb 	bl	8004a32 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <spi_74HC165_receiveTeclado+0x74>)
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <spi_74HC165_receiveTeclado+0x78>)
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	2200      	movs	r2, #0
 8000246:	4619      	mov	r1, r3
 8000248:	f004 fbf3 	bl	8004a32 <HAL_GPIO_WritePin>

	uint8_t auxData[2];

	//SPI
	HAL_SPI_Receive(spi_handler, auxData, 2, 100);
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <spi_74HC165_receiveTeclado+0x7c>)
 800024e:	6818      	ldr	r0, [r3, #0]
 8000250:	f107 010c 	add.w	r1, r7, #12
 8000254:	2364      	movs	r3, #100	; 0x64
 8000256:	2202      	movs	r2, #2
 8000258:	f006 fa07 	bl	800666a <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <spi_74HC165_receiveTeclado+0x74>)
 800025e:	6818      	ldr	r0, [r3, #0]
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <spi_74HC165_receiveTeclado+0x78>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	2201      	movs	r2, #1
 8000266:	4619      	mov	r1, r3
 8000268:	f004 fbe3 	bl	8004a32 <HAL_GPIO_WritePin>

	*pdata = auxData[1];
 800026c:	7b7a      	ldrb	r2, [r7, #13]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	701a      	strb	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000170 	.word	0x20000170
 8000280:	2000016c 	.word	0x2000016c
 8000284:	20000178 	.word	0x20000178
 8000288:	20000174 	.word	0x20000174
 800028c:	20000168 	.word	0x20000168

08000290 <spi_74HC595_init>:
SPI_HandleTypeDef* spi_handler;
GPIO_TypeDef* portST;
uint16_t pinST;


void spi_74HC595_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* STport, uint16_t STpin){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	80fb      	strh	r3, [r7, #6]

	spi_handler =hspi;
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <spi_74HC595_init+0x38>)
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	6013      	str	r3, [r2, #0]

	portST = STport;
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <spi_74HC595_init+0x3c>)
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	6013      	str	r3, [r2, #0]
	pinST = STpin;
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <spi_74HC595_init+0x40>)
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(portST, pinST, 0);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <spi_74HC595_init+0x3c>)
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <spi_74HC595_init+0x40>)
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	f004 fbb9 	bl	8004a32 <HAL_GPIO_WritePin>

} //end spi_74HC595_init()
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000168 	.word	0x20000168
 80002cc:	20000180 	.word	0x20000180
 80002d0:	2000017c 	.word	0x2000017c

080002d4 <spi_74HC595_Transmit>:


void spi_74HC595_Transmit (uint8_t* pdata, uint16_t sizeData){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(spi_handler, pdata, sizeData, 100);
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <spi_74HC595_Transmit+0x44>)
 80002e2:	6818      	ldr	r0, [r3, #0]
 80002e4:	887a      	ldrh	r2, [r7, #2]
 80002e6:	2364      	movs	r3, #100	; 0x64
 80002e8:	6879      	ldr	r1, [r7, #4]
 80002ea:	f006 f88a 	bl	8006402 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(portST, pinST, 1);
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <spi_74HC595_Transmit+0x48>)
 80002f0:	6818      	ldr	r0, [r3, #0]
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <spi_74HC595_Transmit+0x4c>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	2201      	movs	r2, #1
 80002f8:	4619      	mov	r1, r3
 80002fa:	f004 fb9a 	bl	8004a32 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(portST, pinST, 0);
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <spi_74HC595_Transmit+0x48>)
 8000300:	6818      	ldr	r0, [r3, #0]
 8000302:	4b07      	ldr	r3, [pc, #28]	; (8000320 <spi_74HC595_Transmit+0x4c>)
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	2200      	movs	r2, #0
 8000308:	4619      	mov	r1, r3
 800030a:	f004 fb92 	bl	8004a32 <HAL_GPIO_WritePin>

} //end spi_74HC595_transmit()
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000168 	.word	0x20000168
 800031c:	20000180 	.word	0x20000180
 8000320:	2000017c 	.word	0x2000017c

08000324 <turnONFila>:
uint32_t read_input, last_input, fall_input, rise_input;

uint16_t write_output;


void turnONFila (uint8_t filaNum){
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]

	switch (filaNum){
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d862      	bhi.n	80003fa <turnONFila+0xd6>
 8000334:	a201      	add	r2, pc, #4	; (adr r2, 800033c <turnONFila+0x18>)
 8000336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033a:	bf00      	nop
 800033c:	0800034d 	.word	0x0800034d
 8000340:	08000379 	.word	0x08000379
 8000344:	080003a5 	.word	0x080003a5
 8000348:	080003d1 	.word	0x080003d1
		case 0:
			//pongo en 0 la fila 0; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 800034c:	2201      	movs	r2, #1
 800034e:	2120      	movs	r1, #32
 8000350:	482c      	ldr	r0, [pc, #176]	; (8000404 <turnONFila+0xe0>)
 8000352:	f004 fb6e 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 8000356:	2201      	movs	r2, #1
 8000358:	2110      	movs	r1, #16
 800035a:	482a      	ldr	r0, [pc, #168]	; (8000404 <turnONFila+0xe0>)
 800035c:	f004 fb69 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	2108      	movs	r1, #8
 8000364:	4827      	ldr	r0, [pc, #156]	; (8000404 <turnONFila+0xe0>)
 8000366:	f004 fb64 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000370:	4825      	ldr	r0, [pc, #148]	; (8000408 <turnONFila+0xe4>)
 8000372:	f004 fb5e 	bl	8004a32 <HAL_GPIO_WritePin>
		break;
 8000376:	e041      	b.n	80003fc <turnONFila+0xd8>
		case 1:
			//pongo en 0 la fila 1; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 8000378:	2201      	movs	r2, #1
 800037a:	2120      	movs	r1, #32
 800037c:	4821      	ldr	r0, [pc, #132]	; (8000404 <turnONFila+0xe0>)
 800037e:	f004 fb58 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	2110      	movs	r1, #16
 8000386:	481f      	ldr	r0, [pc, #124]	; (8000404 <turnONFila+0xe0>)
 8000388:	f004 fb53 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2108      	movs	r1, #8
 8000390:	481c      	ldr	r0, [pc, #112]	; (8000404 <turnONFila+0xe0>)
 8000392:	f004 fb4e 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 8000396:	2201      	movs	r2, #1
 8000398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800039c:	481a      	ldr	r0, [pc, #104]	; (8000408 <turnONFila+0xe4>)
 800039e:	f004 fb48 	bl	8004a32 <HAL_GPIO_WritePin>
		break;
 80003a2:	e02b      	b.n	80003fc <turnONFila+0xd8>
		case 2:
			//pongo en 0 la fila 2; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2120      	movs	r1, #32
 80003a8:	4816      	ldr	r0, [pc, #88]	; (8000404 <turnONFila+0xe0>)
 80003aa:	f004 fb42 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	4814      	ldr	r0, [pc, #80]	; (8000404 <turnONFila+0xe0>)
 80003b4:	f004 fb3d 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2108      	movs	r1, #8
 80003bc:	4811      	ldr	r0, [pc, #68]	; (8000404 <turnONFila+0xe0>)
 80003be:	f004 fb38 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c8:	480f      	ldr	r0, [pc, #60]	; (8000408 <turnONFila+0xe4>)
 80003ca:	f004 fb32 	bl	8004a32 <HAL_GPIO_WritePin>
		break;
 80003ce:	e015      	b.n	80003fc <turnONFila+0xd8>
		case 3:
			//pongo en 0 la fila 3; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2120      	movs	r1, #32
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <turnONFila+0xe0>)
 80003d6:	f004 fb2c 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 80003da:	2201      	movs	r2, #1
 80003dc:	2110      	movs	r1, #16
 80003de:	4809      	ldr	r0, [pc, #36]	; (8000404 <turnONFila+0xe0>)
 80003e0:	f004 fb27 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2108      	movs	r1, #8
 80003e8:	4806      	ldr	r0, [pc, #24]	; (8000404 <turnONFila+0xe0>)
 80003ea:	f004 fb22 	bl	8004a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <turnONFila+0xe4>)
 80003f6:	f004 fb1c 	bl	8004a32 <HAL_GPIO_WritePin>
		default:
		break;
 80003fa:	bf00      	nop
	}//end witch
}//end turnONFila
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40010c00 	.word	0x40010c00
 8000408:	40010800 	.word	0x40010800

0800040c <lecturaTeclas>:


void lecturaTeclas (void){
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

//	last_input = read_input;

	//pulsadores:
	spi_74HC165_receiveBotones (&read_teclas, 1);
 8000412:	2101      	movs	r1, #1
 8000414:	481a      	ldr	r0, [pc, #104]	; (8000480 <lecturaTeclas+0x74>)
 8000416:	f7ff febf 	bl	8000198 <spi_74HC165_receiveBotones>

	//teclado matricial:

	for (uint8_t i = 0; i < 4; i++){
 800041a:	2300      	movs	r3, #0
 800041c:	71fb      	strb	r3, [r7, #7]
 800041e:	e00d      	b.n	800043c <lecturaTeclas+0x30>
		turnONFila(i);
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff7e 	bl	8000324 <turnONFila>
		spi_74HC165_receiveTeclado(&read_teclado[i], 1);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	4a16      	ldr	r2, [pc, #88]	; (8000484 <lecturaTeclas+0x78>)
 800042c:	4413      	add	r3, r2
 800042e:	2101      	movs	r1, #1
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff feed 	bl	8000210 <spi_74HC165_receiveTeclado>
	for (uint8_t i = 0; i < 4; i++){
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	3301      	adds	r3, #1
 800043a:	71fb      	strb	r3, [r7, #7]
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2b03      	cmp	r3, #3
 8000440:	d9ee      	bls.n	8000420 <lecturaTeclas+0x14>
//							(read_teclado[0] << 6) |
//							(read_teclado[1] << 10) |
//							(read_teclado[2] << 14) |
//							(read_teclado[3] << 18));

	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <lecturaTeclas+0x78>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	f003 020f 	and.w	r2, r3, #15
							( (read_teclado[1] & 0b1111) << 4) |
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <lecturaTeclas+0x78>)
 800044c:	785b      	ldrb	r3, [r3, #1]
 800044e:	011b      	lsls	r3, r3, #4
 8000450:	b2db      	uxtb	r3, r3
	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000452:	431a      	orrs	r2, r3
							( (read_teclado[2] & 0b1111) << 8) |
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <lecturaTeclas+0x78>)
 8000456:	789b      	ldrb	r3, [r3, #2]
 8000458:	021b      	lsls	r3, r3, #8
 800045a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
							( (read_teclado[1] & 0b1111) << 4) |
 800045e:	431a      	orrs	r2, r3
							( (read_teclado[3] & 0b1111) << 12) |
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <lecturaTeclas+0x78>)
 8000462:	78db      	ldrb	r3, [r3, #3]
 8000464:	031b      	lsls	r3, r3, #12
 8000466:	b29b      	uxth	r3, r3
							( (read_teclado[2] & 0b1111) << 8) |
 8000468:	431a      	orrs	r2, r3
							(read_teclas << 16) );
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <lecturaTeclas+0x74>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	041b      	lsls	r3, r3, #16
							( (read_teclado[3] & 0b1111) << 12) |
 8000470:	4313      	orrs	r3, r2
	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 8000472:	461a      	mov	r2, r3
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <lecturaTeclas+0x7c>)
 8000476:	601a      	str	r2, [r3, #0]


} //end lecturaTeclas()
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	200001b4 	.word	0x200001b4
 8000484:	20000188 	.word	0x20000188
 8000488:	2000018c 	.word	0x2000018c

0800048c <update_teclas>:


void update_teclas(void){ //ESTADO DE LAS TECLAS CON LOGICA NEGATIVA
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0


	fall_input = last_input & ~read_input;
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <update_teclas+0x34>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	43da      	mvns	r2, r3
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <update_teclas+0x38>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4013      	ands	r3, r2
 800049c:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <update_teclas+0x3c>)
 800049e:	6013      	str	r3, [r2, #0]
	rise_input = ~last_input & read_input;
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <update_teclas+0x38>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	43da      	mvns	r2, r3
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <update_teclas+0x34>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4013      	ands	r3, r2
 80004ac:	4a07      	ldr	r2, [pc, #28]	; (80004cc <update_teclas+0x40>)
 80004ae:	6013      	str	r3, [r2, #0]

	last_input = read_input;
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <update_teclas+0x34>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <update_teclas+0x38>)
 80004b6:	6013      	str	r3, [r2, #0]

} //end teclas
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	2000018c 	.word	0x2000018c
 80004c4:	200001b0 	.word	0x200001b0
 80004c8:	20000190 	.word	0x20000190
 80004cc:	20000194 	.word	0x20000194

080004d0 <getStatBoton>:


T_INPUT getStatBoton (T_POS_INPUT b){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]

	if ( (fall_input & (1 << b)) != 0)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2201      	movs	r2, #1
 80004de:	fa02 f303 	lsl.w	r3, r2, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <getStatBoton+0x60>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4013      	ands	r3, r2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <getStatBoton+0x22>
		return FALL;
 80004ee:	2302      	movs	r3, #2
 80004f0:	e018      	b.n	8000524 <getStatBoton+0x54>

	if ( (rise_input & (1 << b)) != 0)
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2201      	movs	r2, #1
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <getStatBoton+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4013      	ands	r3, r2
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <getStatBoton+0x3a>
		return RISE;
 8000506:	2303      	movs	r3, #3
 8000508:	e00c      	b.n	8000524 <getStatBoton+0x54>

	if ( (read_input & (1 << b)) != 0)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2201      	movs	r2, #1
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	461a      	mov	r2, r3
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <getStatBoton+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4013      	ands	r3, r2
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <getStatBoton+0x52>
		return HIGH_L;
 800051e:	2301      	movs	r3, #1
 8000520:	e000      	b.n	8000524 <getStatBoton+0x54>

	return LOW_L;
 8000522:	2300      	movs	r3, #0

} //end getStatBoton()
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000190 	.word	0x20000190
 8000534:	20000194 	.word	0x20000194
 8000538:	2000018c 	.word	0x2000018c

0800053c <getNumber>:


int8_t getNumber (void){
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

	if (fall_input & (1 << IN_0))
 8000540:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <getNumber+0xb0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <getNumber+0x14>
			return 0;
 800054c:	2300      	movs	r3, #0
 800054e:	e049      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_1))
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <getNumber+0xb0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <getNumber+0x24>
			return 1;
 800055c:	2301      	movs	r3, #1
 800055e:	e041      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_2))
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <getNumber+0xb0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f003 0302 	and.w	r3, r3, #2
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <getNumber+0x34>
			return 2;
 800056c:	2302      	movs	r3, #2
 800056e:	e039      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_3))
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <getNumber+0xb0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <getNumber+0x44>
			return 3;
 800057c:	2303      	movs	r3, #3
 800057e:	e031      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_4))
 8000580:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <getNumber+0xb0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f003 0310 	and.w	r3, r3, #16
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <getNumber+0x54>
			return 4;
 800058c:	2304      	movs	r3, #4
 800058e:	e029      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_5))
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <getNumber+0xb0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f003 0320 	and.w	r3, r3, #32
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <getNumber+0x64>
			return 5;
 800059c:	2305      	movs	r3, #5
 800059e:	e021      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_6))
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <getNumber+0xb0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <getNumber+0x74>
			return 6;
 80005ac:	2306      	movs	r3, #6
 80005ae:	e019      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_7))
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <getNumber+0xb0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <getNumber+0x84>
			return 7;
 80005bc:	2307      	movs	r3, #7
 80005be:	e011      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_8))
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <getNumber+0xb0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <getNumber+0x94>
			return 8;
 80005cc:	2308      	movs	r3, #8
 80005ce:	e009      	b.n	80005e4 <getNumber+0xa8>
	if (fall_input & (1 << IN_9))
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <getNumber+0xb0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <getNumber+0xa4>
			return 9;
 80005dc:	2309      	movs	r3, #9
 80005de:	e001      	b.n	80005e4 <getNumber+0xa8>

	return -1;
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
} //end getNumber()
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000190 	.word	0x20000190

080005f0 <setOutput>:


void setOutput (T_POS_OUTPUT s, uint8_t val){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	460a      	mov	r2, r1
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	71bb      	strb	r3, [r7, #6]

	if (val != 0){
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00b      	beq.n	800061e <setOutput+0x2e>
		write_output |= (uint16_t)(1 << s);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2201      	movs	r2, #1
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	b29a      	uxth	r2, r3
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <setOutput+0x54>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	4313      	orrs	r3, r2
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <setOutput+0x54>)
 800061a:	801a      	strh	r2, [r3, #0]
		return;
 800061c:	e00e      	b.n	800063c <setOutput+0x4c>
	}else{
		write_output &= ~( (uint16_t)(1 << s) );
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2201      	movs	r2, #1
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	b21b      	sxth	r3, r3
 8000628:	43db      	mvns	r3, r3
 800062a:	b21a      	sxth	r2, r3
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <setOutput+0x54>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	b21b      	sxth	r3, r3
 8000632:	4013      	ands	r3, r2
 8000634:	b21b      	sxth	r3, r3
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b02      	ldr	r3, [pc, #8]	; (8000644 <setOutput+0x54>)
 800063a:	801a      	strh	r2, [r3, #0]
	}

} //end setOutput()
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000184 	.word	0x20000184

08000648 <toggleOutput>:

void toggleOutput (T_POS_OUTPUT s){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

	write_output ^= (uint16_t)(1 << s);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2201      	movs	r2, #1
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	b29a      	uxth	r2, r3
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <toggleOutput+0x2c>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	4053      	eors	r3, r2
 8000662:	b29a      	uxth	r2, r3
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <toggleOutput+0x2c>)
 8000666:	801a      	strh	r2, [r3, #0]

} //end toggleOutput()
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000184 	.word	0x20000184

08000678 <update_outputs>:


void update_outputs (void){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

	spi_74HC595_Transmit( (uint8_t*)&write_output, 2); // 2 bytes.
 800067c:	2102      	movs	r1, #2
 800067e:	4802      	ldr	r0, [pc, #8]	; (8000688 <update_outputs+0x10>)
 8000680:	f7ff fe28 	bl	80002d4 <spi_74HC595_Transmit>

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000184 	.word	0x20000184

0800068c <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e01f      	b.n	80006dc <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d005      	beq.n	80006b8 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 80006ac:	2201      	movs	r2, #1
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	480e      	ldr	r0, [pc, #56]	; (80006ec <SendByteSPI+0x60>)
 80006b2:	f004 f9be 	bl	8004a32 <HAL_GPIO_WritePin>
 80006b6:	e004      	b.n	80006c2 <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 80006b8:	2200      	movs	r2, #0
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <SendByteSPI+0x60>)
 80006be:	f004 f9b8 	bl	8004a32 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <SendByteSPI+0x60>)
 80006c8:	f004 f9b3 	bl	8004a32 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 80006cc:	2201      	movs	r2, #1
 80006ce:	2120      	movs	r1, #32
 80006d0:	4806      	ldr	r0, [pc, #24]	; (80006ec <SendByteSPI+0x60>)
 80006d2:	f004 f9ae 	bl	8004a32 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b07      	cmp	r3, #7
 80006e0:	dddc      	ble.n	800069c <SendByteSPI+0x10>

	}
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40010800 	.word	0x40010800

080006f0 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80006fa:	2201      	movs	r2, #1
 80006fc:	2140      	movs	r1, #64	; 0x40
 80006fe:	480f      	ldr	r0, [pc, #60]	; (800073c <ST7920_SendCmd+0x4c>)
 8000700:	f004 f997 	bl	8004a32 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 8000704:	20f8      	movs	r0, #248	; 0xf8
 8000706:	f7ff ffc1 	bl	800068c <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f023 030f 	bic.w	r3, r3, #15
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ffba 	bl	800068c <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	011b      	lsls	r3, r3, #4
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffb4 	bl	800068c <SendByteSPI>
	delay_us(50);
 8000724:	2032      	movs	r0, #50	; 0x32
 8000726:	f000 fa05 	bl	8000b34 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800072a:	2200      	movs	r2, #0
 800072c:	2140      	movs	r1, #64	; 0x40
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <ST7920_SendCmd+0x4c>)
 8000730:	f004 f97f 	bl	8004a32 <HAL_GPIO_WritePin>

}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40010800 	.word	0x40010800

08000740 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800074a:	2201      	movs	r2, #1
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	480f      	ldr	r0, [pc, #60]	; (800078c <ST7920_SendData+0x4c>)
 8000750:	f004 f96f 	bl	8004a32 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8000754:	20fa      	movs	r0, #250	; 0xfa
 8000756:	f7ff ff99 	bl	800068c <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f023 030f 	bic.w	r3, r3, #15
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff92 	bl	800068c <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff8c 	bl	800068c <SendByteSPI>
	delay_us(50);
 8000774:	2032      	movs	r0, #50	; 0x32
 8000776:	f000 f9dd 	bl	8000b34 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800077a:	2200      	movs	r2, #0
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <ST7920_SendData+0x4c>)
 8000780:	f004 f957 	bl	8004a32 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40010800 	.word	0x40010800

08000790 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
    switch (row)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d81e      	bhi.n	80007e0 <ST7920_SendString+0x50>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <ST7920_SendString+0x18>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	080007b9 	.word	0x080007b9
 80007ac:	080007c3 	.word	0x080007c3
 80007b0:	080007cd 	.word	0x080007cd
 80007b4:	080007d7 	.word	0x080007d7
    {
        case 0:
            col |= 0x80;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007be:	60bb      	str	r3, [r7, #8]
            break;
 80007c0:	e013      	b.n	80007ea <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80007c8:	60bb      	str	r3, [r7, #8]
            break;
 80007ca:	e00e      	b.n	80007ea <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80007d2:	60bb      	str	r3, [r7, #8]
            break;
 80007d4:	e009      	b.n	80007ea <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 80007dc:	60bb      	str	r3, [r7, #8]
            break;
 80007de:	e004      	b.n	80007ea <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e6:	60bb      	str	r3, [r7, #8]
            break;
 80007e8:	bf00      	nop
    }

    ST7920_SendCmd(col);
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff7e 	bl	80006f0 <ST7920_SendCmd>

    while (*string)
 80007f4:	e006      	b.n	8000804 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff9e 	bl	8000740 <ST7920_SendData>
    while (*string)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1f4      	bne.n	80007f6 <ST7920_SendString+0x66>
    	}
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <ST7920_DrawBitmap>:
		Graphic_Check = 0;  // update the variable
	}
}

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 800081c:	2300      	movs	r3, #0
 800081e:	73bb      	strb	r3, [r7, #14]
 8000820:	e06a      	b.n	80008f8 <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	2b1f      	cmp	r3, #31
 8000826:	d830      	bhi.n	800088a <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	e029      	b.n	8000882 <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff5a 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff53 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 800084a:	7bfa      	ldrb	r2, [r7, #15]
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	4413      	add	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	461a      	mov	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff6f 	bl	8000740 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	4413      	add	r3, r2
 800086e:	461a      	mov	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff62 	bl	8000740 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	3301      	adds	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	2b07      	cmp	r3, #7
 8000886:	d9d2      	bls.n	800082e <ST7920_DrawBitmap+0x1a>
 8000888:	e033      	b.n	80008f2 <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]
 800088e:	e02d      	b.n	80008ec <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	3b20      	subs	r3, #32
 8000894:	b2db      	uxtb	r3, r3
 8000896:	b25b      	sxtb	r3, r3
 8000898:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800089c:	b25b      	sxtb	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff25 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	f063 0377 	orn	r3, r3, #119	; 0x77
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff1e 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 80008b4:	7bfa      	ldrb	r2, [r7, #15]
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	4413      	add	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	461a      	mov	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4413      	add	r3, r2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff3a 	bl	8000740 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	011b      	lsls	r3, r3, #4
 80008d6:	4413      	add	r3, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff2d 	bl	8000740 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	3301      	adds	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	d9ce      	bls.n	8000890 <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	3301      	adds	r3, #1
 80008f6:	73bb      	strb	r3, [r7, #14]
 80008f8:	7bbb      	ldrb	r3, [r7, #14]
 80008fa:	2b3f      	cmp	r3, #63	; 0x3f
 80008fc:	d991      	bls.n	8000822 <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <ST7920_Update+0x10>)
 800090e:	f7ff ff81 	bl	8000814 <ST7920_DrawBitmap>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200001bc 	.word	0x200001bc

0800091c <ST7920_Clear>:



void ST7920_Clear()
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <ST7920_Clear+0x8c>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d134      	bne.n	8000994 <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 800092a:	2300      	movs	r3, #0
 800092c:	71bb      	strb	r3, [r7, #6]
 800092e:	e02d      	b.n	800098c <ST7920_Clear+0x70>
		{
			if(y < 32)
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	2b1f      	cmp	r3, #31
 8000934:	d80a      	bhi.n	800094c <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fed6 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000944:	2080      	movs	r0, #128	; 0x80
 8000946:	f7ff fed3 	bl	80006f0 <ST7920_SendCmd>
 800094a:	e00d      	b.n	8000968 <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	3b20      	subs	r3, #32
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b25b      	sxtb	r3, r3
 8000954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000958:	b25b      	sxtb	r3, r3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec7 	bl	80006f0 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8000962:	2088      	movs	r0, #136	; 0x88
 8000964:	f7ff fec4 	bl	80006f0 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 8000968:	2300      	movs	r3, #0
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	e008      	b.n	8000980 <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fee6 	bl	8000740 <ST7920_SendData>
				ST7920_SendData(0);
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fee3 	bl	8000740 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	3301      	adds	r3, #1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b07      	cmp	r3, #7
 8000984:	d9f3      	bls.n	800096e <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 8000986:	79bb      	ldrb	r3, [r7, #6]
 8000988:	3301      	adds	r3, #1
 800098a:	71bb      	strb	r3, [r7, #6]
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	2b3f      	cmp	r3, #63	; 0x3f
 8000990:	d9ce      	bls.n	8000930 <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 8000992:	e005      	b.n	80009a0 <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);   // clear the display using command
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff feab 	bl	80006f0 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 800099a:	2002      	movs	r0, #2
 800099c:	f003 fb9e 	bl	80040dc <HAL_Delay>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000011c 	.word	0x2000011c

080009ac <ST7920_Init>:


void ST7920_Init (void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80009b0:	2200      	movs	r2, #0
 80009b2:	2101      	movs	r1, #1
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <ST7920_Init+0x7c>)
 80009b6:	f004 f83c 	bl	8004a32 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 80009ba:	200a      	movs	r0, #10
 80009bc:	f003 fb8e 	bl	80040dc <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <ST7920_Init+0x7c>)
 80009c6:	f004 f834 	bl	8004a32 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 80009ca:	2032      	movs	r0, #50	; 0x32
 80009cc:	f003 fb86 	bl	80040dc <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 80009d0:	2030      	movs	r0, #48	; 0x30
 80009d2:	f7ff fe8d 	bl	80006f0 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 80009d6:	206e      	movs	r0, #110	; 0x6e
 80009d8:	f000 f8ac 	bl	8000b34 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 80009dc:	2030      	movs	r0, #48	; 0x30
 80009de:	f7ff fe87 	bl	80006f0 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 80009e2:	2028      	movs	r0, #40	; 0x28
 80009e4:	f000 f8a6 	bl	8000b34 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 80009e8:	2008      	movs	r0, #8
 80009ea:	f7ff fe81 	bl	80006f0 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 80009ee:	206e      	movs	r0, #110	; 0x6e
 80009f0:	f000 f8a0 	bl	8000b34 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fe7b 	bl	80006f0 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 80009fa:	200c      	movs	r0, #12
 80009fc:	f003 fb6e 	bl	80040dc <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000a00:	2006      	movs	r0, #6
 8000a02:	f7ff fe75 	bl	80006f0 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000a06:	2001      	movs	r0, #1
 8000a08:	f003 fb68 	bl	80040dc <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000a0c:	200c      	movs	r0, #12
 8000a0e:	f7ff fe6f 	bl	80006f0 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000a12:	2001      	movs	r0, #1
 8000a14:	f003 fb62 	bl	80040dc <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f7ff fe69 	bl	80006f0 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f003 fb5c 	bl	80040dc <HAL_Delay>

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a3e:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <MX_ADC1_Init+0x78>)
 8000a40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a6a:	f003 fb59 	bl	8004120 <HAL_ADC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a74:	f002 f928 	bl	8002cc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_ADC1_Init+0x74>)
 8000a8a:	f003 fc21 	bl	80042d0 <HAL_ADC_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a94:	f002 f918 	bl	8002cc8 <Error_Handler>
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200005c0 	.word	0x200005c0
 8000aa4:	40012400 	.word	0x40012400

08000aa8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_ADC_MspInit+0x6c>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d121      	bne.n	8000b0c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_ADC_MspInit+0x70>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af8:	2301      	movs	r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	2303      	movs	r3, #3
 8000afe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_ADC_MspInit+0x74>)
 8000b08:	f003 fe22 	bl	8004750 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40012400 	.word	0x40012400
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <delay_init>:

extern TIM_HandleTypeDef htim3;


void delay_init ()
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim3);  // change this according to ur setup
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <delay_init+0x10>)
 8000b26:	f006 f950 	bl	8006dca <HAL_TIM_Base_Start>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200006d8 	.word	0x200006d8

08000b34 <delay_us>:

void delay_us (uint16_t delay)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);  // reset the counter
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <delay_us+0x2c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<delay);  // wait for the delay to complete
 8000b46:	bf00      	nop
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <delay_us+0x2c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d3f9      	bcc.n	8000b48 <delay_us+0x14>
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200006d8 	.word	0x200006d8

08000b64 <init_pantalla>:
#include "ST7920_SERIAL.h"
#include "delay.h"

uint8_t flag_pantalla = 0;

void init_pantalla (void){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	delay_init();
 8000b68:	f7ff ffda 	bl	8000b20 <delay_init>
	ST7920_Init();
 8000b6c:	f7ff ff1e 	bl	80009ac <ST7920_Init>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <set_pantalla>:
//	ST7920_Clear();
//	ST7920_SendString(0, 0, texto);
//	//flag_pantalla = 1;
//}

void set_pantalla (T_PANTALLA p){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	ST7920_Clear();
 8000b7e:	f7ff fecd 	bl	800091c <ST7920_Clear>
	switch (p){
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b15      	cmp	r3, #21
 8000b86:	f200 8135 	bhi.w	8000df4 <set_pantalla+0x280>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <set_pantalla+0x1c>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000be9 	.word	0x08000be9
 8000b94:	08000bff 	.word	0x08000bff
 8000b98:	08000c15 	.word	0x08000c15
 8000b9c:	08000c2b 	.word	0x08000c2b
 8000ba0:	08000c4b 	.word	0x08000c4b
 8000ba4:	08000c61 	.word	0x08000c61
 8000ba8:	08000c6d 	.word	0x08000c6d
 8000bac:	08000c8d 	.word	0x08000c8d
 8000bb0:	08000ca3 	.word	0x08000ca3
 8000bb4:	08000cb9 	.word	0x08000cb9
 8000bb8:	08000cd9 	.word	0x08000cd9
 8000bbc:	08000cef 	.word	0x08000cef
 8000bc0:	08000d05 	.word	0x08000d05
 8000bc4:	08000d11 	.word	0x08000d11
 8000bc8:	08000d1d 	.word	0x08000d1d
 8000bcc:	08000d3d 	.word	0x08000d3d
 8000bd0:	08000d5d 	.word	0x08000d5d
 8000bd4:	08000d7d 	.word	0x08000d7d
 8000bd8:	08000d93 	.word	0x08000d93
 8000bdc:	08000da9 	.word	0x08000da9
 8000be0:	08000dc9 	.word	0x08000dc9
 8000be4:	08000ddf 	.word	0x08000ddf
		case PANT_init_menuPrincipal:
			ST7920_SendString(0, 0, "Estoy en el menu");
 8000be8:	4a84      	ldr	r2, [pc, #528]	; (8000dfc <set_pantalla+0x288>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fdcf 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "principal.");
 8000bf2:	4a83      	ldr	r2, [pc, #524]	; (8000e00 <set_pantalla+0x28c>)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff fdca 	bl	8000790 <ST7920_SendString>
		break;
 8000bfc:	e0fa      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_sensor_conectado:
			ST7920_SendString(0, 0, "Sensor");
 8000bfe:	4a81      	ldr	r2, [pc, #516]	; (8000e04 <set_pantalla+0x290>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff fdc4 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "conectado?");
 8000c08:	4a7f      	ldr	r2, [pc, #508]	; (8000e08 <set_pantalla+0x294>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff fdbf 	bl	8000790 <ST7920_SendString>
		break;
 8000c12:	e0ef      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_llenando_terminar:
			ST7920_SendString(0, 0, "Llenando.");
 8000c14:	4a7d      	ldr	r2, [pc, #500]	; (8000e0c <set_pantalla+0x298>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fdb9 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "Terminar?");
 8000c1e:	4a7c      	ldr	r2, [pc, #496]	; (8000e10 <set_pantalla+0x29c>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff fdb4 	bl	8000790 <ST7920_SendString>
		break;
 8000c28:	e0e4      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_init_skimmer:
			ST7920_SendString(0, 0, "COMPRUEBE EL");
 8000c2a:	4a7a      	ldr	r2, [pc, #488]	; (8000e14 <set_pantalla+0x2a0>)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff fdae 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "ESTADO DE LA");
 8000c34:	4a78      	ldr	r2, [pc, #480]	; (8000e18 <set_pantalla+0x2a4>)
 8000c36:	2100      	movs	r1, #0
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff fda9 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "BOMBA");
 8000c3e:	4a77      	ldr	r2, [pc, #476]	; (8000e1c <set_pantalla+0x2a8>)
 8000c40:	2100      	movs	r1, #0
 8000c42:	2002      	movs	r0, #2
 8000c44:	f7ff fda4 	bl	8000790 <ST7920_SendString>
		break;
 8000c48:	e0d4      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_init_hidro:
			ST7920_SendString(0, 0, "defina el tiempo");
 8000c4a:	4a75      	ldr	r2, [pc, #468]	; (8000e20 <set_pantalla+0x2ac>)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fd9e 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "del hidromasaje:");
 8000c54:	4a73      	ldr	r2, [pc, #460]	; (8000e24 <set_pantalla+0x2b0>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fd99 	bl	8000790 <ST7920_SendString>
		break;
 8000c5e:	e0c9      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_init_lucesExt:
			ST7920_SendString(0, 0, "LIMITE DE TIEMPO");
 8000c60:	4a71      	ldr	r2, [pc, #452]	; (8000e28 <set_pantalla+0x2b4>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fd93 	bl	8000790 <ST7920_SendString>
		break;
 8000c6a:	e0c3      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_init_setLlenado:
			ST7920_SendString(0, 0, "Config. llenado");
 8000c6c:	4a6f      	ldr	r2, [pc, #444]	; (8000e2c <set_pantalla+0x2b8>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fd8d 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "1: duracion ON");
 8000c76:	4a6e      	ldr	r2, [pc, #440]	; (8000e30 <set_pantalla+0x2bc>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff fd88 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "2: duracion OFF");
 8000c80:	4a6c      	ldr	r2, [pc, #432]	; (8000e34 <set_pantalla+0x2c0>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff fd83 	bl	8000790 <ST7920_SendString>
		break;
 8000c8a:	e0b3      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PERIODO_ON_LLENADO:
			ST7920_SendString(0, 0, "defina el tiempo");
 8000c8c:	4a64      	ldr	r2, [pc, #400]	; (8000e20 <set_pantalla+0x2ac>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fd7d 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion ON:");
 8000c96:	4a68      	ldr	r2, [pc, #416]	; (8000e38 <set_pantalla+0x2c4>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fd78 	bl	8000790 <ST7920_SendString>
		break;
 8000ca0:	e0a8      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PERIODO_OFF_LLENADO:
			ST7920_SendString(0, 0, "defina el tiempo");
 8000ca2:	4a5f      	ldr	r2, [pc, #380]	; (8000e20 <set_pantalla+0x2ac>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fd72 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion OFF:");
 8000cac:	4a63      	ldr	r2, [pc, #396]	; (8000e3c <set_pantalla+0x2c8>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fd6d 	bl	8000790 <ST7920_SendString>
		break;
 8000cb6:	e09d      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_COMPRUEBE_SENSOR:
			ST7920_SendString(0, 0, "COMPRUEBE EL");
 8000cb8:	4a56      	ldr	r2, [pc, #344]	; (8000e14 <set_pantalla+0x2a0>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fd67 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "SENSOR Y PULSE");
 8000cc2:	4a5f      	ldr	r2, [pc, #380]	; (8000e40 <set_pantalla+0x2cc>)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff fd62 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "EL BOTON...");
 8000ccc:	4a5d      	ldr	r2, [pc, #372]	; (8000e44 <set_pantalla+0x2d0>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff fd5d 	bl	8000790 <ST7920_SendString>
		break;
 8000cd6:	e08d      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_CONECTE_SENSOR:
			ST7920_SendString(0, 0, "CONECTE EL");
 8000cd8:	4a5b      	ldr	r2, [pc, #364]	; (8000e48 <set_pantalla+0x2d4>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fd57 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "SENSOR");
 8000ce2:	4a5a      	ldr	r2, [pc, #360]	; (8000e4c <set_pantalla+0x2d8>)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fd52 	bl	8000790 <ST7920_SendString>
		break;
 8000cec:	e082      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PREGUNTA_SENSOR:
			ST7920_SendString(0, 0, "Sensor");
 8000cee:	4a45      	ldr	r2, [pc, #276]	; (8000e04 <set_pantalla+0x290>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fd4c 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "conectado?");
 8000cf8:	4a43      	ldr	r2, [pc, #268]	; (8000e08 <set_pantalla+0x294>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff fd47 	bl	8000790 <ST7920_SendString>
		break;
 8000d02:	e077      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_LLENANDO:
			ST7920_SendString(0, 0, "Llenando...");
 8000d04:	4a52      	ldr	r2, [pc, #328]	; (8000e50 <set_pantalla+0x2dc>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fd41 	bl	8000790 <ST7920_SendString>
		break;
 8000d0e:	e071      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PILETA_LLENA:
			ST7920_SendString(0, 0, "Pileta llena.");
 8000d10:	4a50      	ldr	r2, [pc, #320]	; (8000e54 <set_pantalla+0x2e0>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fd3b 	bl	8000790 <ST7920_SendString>
		break;
 8000d1a:	e06b      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_OPCIONES_SKIMMER:
			ST7920_SendString(0, 0, "Config. del skimmer:");
 8000d1c:	4a4e      	ldr	r2, [pc, #312]	; (8000e58 <set_pantalla+0x2e4>)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fd35 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "1) Frecuencia");
 8000d26:	4a4d      	ldr	r2, [pc, #308]	; (8000e5c <set_pantalla+0x2e8>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff fd30 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "2) Horario");
 8000d30:	4a4b      	ldr	r2, [pc, #300]	; (8000e60 <set_pantalla+0x2ec>)
 8000d32:	2100      	movs	r1, #0
 8000d34:	2002      	movs	r0, #2
 8000d36:	f7ff fd2b 	bl	8000790 <ST7920_SendString>
		break;
 8000d3a:	e05b      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_ELIJE_FRECUENCIA_SKIMMER:
			ST7920_SendString(0, 0, "Frec. de skimmer");
 8000d3c:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <set_pantalla+0x2f0>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff fd25 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "1) Tiempo en ON");
 8000d46:	4a48      	ldr	r2, [pc, #288]	; (8000e68 <set_pantalla+0x2f4>)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff fd20 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "2) Tiempo en OFF");
 8000d50:	4a46      	ldr	r2, [pc, #280]	; (8000e6c <set_pantalla+0x2f8>)
 8000d52:	2100      	movs	r1, #0
 8000d54:	2002      	movs	r0, #2
 8000d56:	f7ff fd1b 	bl	8000790 <ST7920_SendString>
		break;
 8000d5a:	e04b      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_ELIJE_PROGRAMA_SKIMMER:
			ST7920_SendString(0, 0, "Elija un programa");
 8000d5c:	4a44      	ldr	r2, [pc, #272]	; (8000e70 <set_pantalla+0x2fc>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff fd15 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "1) Programa 1");
 8000d66:	4a43      	ldr	r2, [pc, #268]	; (8000e74 <set_pantalla+0x300>)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff fd10 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "2) Programa 2");
 8000d70:	4a41      	ldr	r2, [pc, #260]	; (8000e78 <set_pantalla+0x304>)
 8000d72:	2100      	movs	r1, #0
 8000d74:	2002      	movs	r0, #2
 8000d76:	f7ff fd0b 	bl	8000790 <ST7920_SendString>
		break;
 8000d7a:	e03b      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PERIODO_ON_SKIMMER:
			ST7920_SendString(0, 0, "Defina el tiempo");
 8000d7c:	4a3f      	ldr	r2, [pc, #252]	; (8000e7c <set_pantalla+0x308>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fd05 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion ON:");
 8000d86:	4a2c      	ldr	r2, [pc, #176]	; (8000e38 <set_pantalla+0x2c4>)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fd00 	bl	8000790 <ST7920_SendString>
		break;
 8000d90:	e030      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_PERIODO_OFF_SKIMMER:
			ST7920_SendString(0, 0, "Defina el tiempo");
 8000d92:	4a3a      	ldr	r2, [pc, #232]	; (8000e7c <set_pantalla+0x308>)
 8000d94:	2100      	movs	r1, #0
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff fcfa 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "de duracion OFF:");
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <set_pantalla+0x2c8>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fcf5 	bl	8000790 <ST7920_SendString>
		break;
 8000da6:	e025      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_ELIJE_ON_OFF_HORARIO_SKIMMER:
			ST7920_SendString(0, 0, "Elije horario:");
 8000da8:	4a35      	ldr	r2, [pc, #212]	; (8000e80 <set_pantalla+0x30c>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fcef 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "1) Horario ON");
 8000db2:	4a34      	ldr	r2, [pc, #208]	; (8000e84 <set_pantalla+0x310>)
 8000db4:	2100      	movs	r1, #0
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff fcea 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(2, 0, "2) Horario OFF");
 8000dbc:	4a32      	ldr	r2, [pc, #200]	; (8000e88 <set_pantalla+0x314>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f7ff fce5 	bl	8000790 <ST7920_SendString>
		break;
 8000dc6:	e015      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_HORARIO_ON_SKIMMER:
			ST7920_SendString(0, 0, "Defina el");
 8000dc8:	4a30      	ldr	r2, [pc, #192]	; (8000e8c <set_pantalla+0x318>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fcdf 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "horario ON");
 8000dd2:	4a2f      	ldr	r2, [pc, #188]	; (8000e90 <set_pantalla+0x31c>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f7ff fcda 	bl	8000790 <ST7920_SendString>
		break;
 8000ddc:	e00a      	b.n	8000df4 <set_pantalla+0x280>
		case PANT_HORARIO_OFF_SKIMMER:
			ST7920_SendString(0, 0, "Defina el");
 8000dde:	4a2b      	ldr	r2, [pc, #172]	; (8000e8c <set_pantalla+0x318>)
 8000de0:	2100      	movs	r1, #0
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fcd4 	bl	8000790 <ST7920_SendString>
			ST7920_SendString(1, 0, "horario OFF");
 8000de8:	4a2a      	ldr	r2, [pc, #168]	; (8000e94 <set_pantalla+0x320>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff fccf 	bl	8000790 <ST7920_SendString>
		break;
 8000df2:	bf00      	nop

	} //end switch p
//	flag_pantalla = 1;
} //end set_pantalla()
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	08007fa8 	.word	0x08007fa8
 8000e00:	08007fbc 	.word	0x08007fbc
 8000e04:	08007fc8 	.word	0x08007fc8
 8000e08:	08007fd0 	.word	0x08007fd0
 8000e0c:	08007fdc 	.word	0x08007fdc
 8000e10:	08007fe8 	.word	0x08007fe8
 8000e14:	08007ff4 	.word	0x08007ff4
 8000e18:	08008004 	.word	0x08008004
 8000e1c:	08008014 	.word	0x08008014
 8000e20:	0800801c 	.word	0x0800801c
 8000e24:	08008030 	.word	0x08008030
 8000e28:	08008044 	.word	0x08008044
 8000e2c:	08008058 	.word	0x08008058
 8000e30:	08008068 	.word	0x08008068
 8000e34:	08008078 	.word	0x08008078
 8000e38:	08008088 	.word	0x08008088
 8000e3c:	08008098 	.word	0x08008098
 8000e40:	080080ac 	.word	0x080080ac
 8000e44:	080080bc 	.word	0x080080bc
 8000e48:	080080c8 	.word	0x080080c8
 8000e4c:	080080d4 	.word	0x080080d4
 8000e50:	080080dc 	.word	0x080080dc
 8000e54:	080080e8 	.word	0x080080e8
 8000e58:	080080f8 	.word	0x080080f8
 8000e5c:	08008110 	.word	0x08008110
 8000e60:	08008120 	.word	0x08008120
 8000e64:	0800812c 	.word	0x0800812c
 8000e68:	08008140 	.word	0x08008140
 8000e6c:	08008150 	.word	0x08008150
 8000e70:	08008164 	.word	0x08008164
 8000e74:	08008178 	.word	0x08008178
 8000e78:	08008188 	.word	0x08008188
 8000e7c:	08008198 	.word	0x08008198
 8000e80:	080081ac 	.word	0x080081ac
 8000e84:	080081bc 	.word	0x080081bc
 8000e88:	080081cc 	.word	0x080081cc
 8000e8c:	080081dc 	.word	0x080081dc
 8000e90:	080081e8 	.word	0x080081e8
 8000e94:	080081f4 	.word	0x080081f4

08000e98 <setTexto_pantalla>:

void setTexto_pantalla (char* texto){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	//ST7920_Clear();
	ST7920_SendString(2, 0, texto);
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f7ff fc73 	bl	8000790 <ST7920_SendString>
	//flag_pantalla = 1;
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <pantallaUpdate>:

void pantallaLista(void){
	flag_pantalla = 1;
}

void pantallaUpdate(void){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	if (flag_pantalla != 0){
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <pantallaUpdate+0x1c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d004      	beq.n	8000eca <pantallaUpdate+0x16>
		ST7920_Update();
 8000ec0:	f7ff fd22 	bl	8000908 <ST7920_Update>
		flag_pantalla = 0;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <pantallaUpdate+0x1c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	}
} //end pantallaUpdate()
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000011d 	.word	0x2000011d

08000ed4 <setProg_hidro>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

T_PROG_OUTPUT setProg_hidro (T_PROG_CMD cmd){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]

	int8_t newNumber = getNumber();
 8000ede:	f7ff fb2d 	bl	800053c <getNumber>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]

	switch (statusTiempoHidro) {
 8000ee6:	4b90      	ldr	r3, [pc, #576]	; (8001128 <setProg_hidro+0x254>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	f000 80a6 	beq.w	800103c <setProg_hidro+0x168>
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	dc04      	bgt.n	8000efe <setProg_hidro+0x2a>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d02e      	beq.n	8000f56 <setProg_hidro+0x82>
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d050      	beq.n	8000f9e <setProg_hidro+0xca>
 8000efc:	e105      	b.n	800110a <setProg_hidro+0x236>
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	f000 80f9 	beq.w	80010f6 <setProg_hidro+0x222>
 8000f04:	2b63      	cmp	r3, #99	; 0x63
 8000f06:	f040 8100 	bne.w	800110a <setProg_hidro+0x236>
		case 99: //imprime al entrar al sub-menu

			tiempoHidroAux = tiempoHidro;
 8000f0a:	4b88      	ldr	r3, [pc, #544]	; (800112c <setProg_hidro+0x258>)
 8000f0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f10:	4b87      	ldr	r3, [pc, #540]	; (8001130 <setProg_hidro+0x25c>)
 8000f12:	801a      	strh	r2, [r3, #0]
			sprintf(texto, "%d min.", tiempoHidroAux);
 8000f14:	4b86      	ldr	r3, [pc, #536]	; (8001130 <setProg_hidro+0x25c>)
 8000f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4985      	ldr	r1, [pc, #532]	; (8001134 <setProg_hidro+0x260>)
 8000f1e:	4886      	ldr	r0, [pc, #536]	; (8001138 <setProg_hidro+0x264>)
 8000f20:	f006 fc24 	bl	800776c <siprintf>
			setTexto_pantalla(texto);
 8000f24:	4884      	ldr	r0, [pc, #528]	; (8001138 <setProg_hidro+0x264>)
 8000f26:	f7ff ffb7 	bl	8000e98 <setTexto_pantalla>
			if (!tiempoHidroAux){
 8000f2a:	4b81      	ldr	r3, [pc, #516]	; (8001130 <setProg_hidro+0x25c>)
 8000f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d103      	bne.n	8000f3c <setProg_hidro+0x68>
				statusTiempoHidro = 0;
 8000f34:	4b7c      	ldr	r3, [pc, #496]	; (8001128 <setProg_hidro+0x254>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
				break;
 8000f3a:	e0ef      	b.n	800111c <setProg_hidro+0x248>
			}else if (tiempoHidroAux < 10){
 8000f3c:	4b7c      	ldr	r3, [pc, #496]	; (8001130 <setProg_hidro+0x25c>)
 8000f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f42:	2b09      	cmp	r3, #9
 8000f44:	dc03      	bgt.n	8000f4e <setProg_hidro+0x7a>
				statusTiempoHidro = 1;
 8000f46:	4b78      	ldr	r3, [pc, #480]	; (8001128 <setProg_hidro+0x254>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
				break;
 8000f4c:	e0e6      	b.n	800111c <setProg_hidro+0x248>
			}else{
				statusTiempoHidro = 2;
 8000f4e:	4b76      	ldr	r3, [pc, #472]	; (8001128 <setProg_hidro+0x254>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	701a      	strb	r2, [r3, #0]
				break;
 8000f54:	e0e2      	b.n	800111c <setProg_hidro+0x248>
			}
		break;
		case 0: //tiempo en 0.
			if (getStatBoton(IN_AST) == FALL) {
 8000f56:	200c      	movs	r0, #12
 8000f58:	f7ff faba 	bl	80004d0 <getStatBoton>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d104      	bne.n	8000f6c <setProg_hidro+0x98>
				statusTiempoHidro = 99;
 8000f62:	4b71      	ldr	r3, [pc, #452]	; (8001128 <setProg_hidro+0x254>)
 8000f64:	2263      	movs	r2, #99	; 0x63
 8000f66:	701a      	strb	r2, [r3, #0]
				return PROG_IDLE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0d8      	b.n	800111e <setProg_hidro+0x24a>
			}

			if (newNumber > 0) {
 8000f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f340 80cc 	ble.w	800110e <setProg_hidro+0x23a>
				tiempoHidroAux = newNumber;
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	4b6c      	ldr	r3, [pc, #432]	; (8001130 <setProg_hidro+0x25c>)
 8000f7e:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000f80:	4b6b      	ldr	r3, [pc, #428]	; (8001130 <setProg_hidro+0x25c>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	461a      	mov	r2, r3
 8000f88:	496a      	ldr	r1, [pc, #424]	; (8001134 <setProg_hidro+0x260>)
 8000f8a:	486b      	ldr	r0, [pc, #428]	; (8001138 <setProg_hidro+0x264>)
 8000f8c:	f006 fbee 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8000f90:	4869      	ldr	r0, [pc, #420]	; (8001138 <setProg_hidro+0x264>)
 8000f92:	f7ff ff81 	bl	8000e98 <setTexto_pantalla>
				statusTiempoHidro = 1;
 8000f96:	4b64      	ldr	r3, [pc, #400]	; (8001128 <setProg_hidro+0x254>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000f9c:	e0b7      	b.n	800110e <setProg_hidro+0x23a>
		case 1: //lote entre 1 y 9.
			if (getStatBoton(IN_AST) == FALL) {
 8000f9e:	200c      	movs	r0, #12
 8000fa0:	f7ff fa96 	bl	80004d0 <getStatBoton>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d111      	bne.n	8000fce <setProg_hidro+0xfa>
				tiempoHidroAux = 0;
 8000faa:	4b61      	ldr	r3, [pc, #388]	; (8001130 <setProg_hidro+0x25c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000fb0:	4b5f      	ldr	r3, [pc, #380]	; (8001130 <setProg_hidro+0x25c>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	495e      	ldr	r1, [pc, #376]	; (8001134 <setProg_hidro+0x260>)
 8000fba:	485f      	ldr	r0, [pc, #380]	; (8001138 <setProg_hidro+0x264>)
 8000fbc:	f006 fbd6 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8000fc0:	485d      	ldr	r0, [pc, #372]	; (8001138 <setProg_hidro+0x264>)
 8000fc2:	f7ff ff69 	bl	8000e98 <setTexto_pantalla>
				statusTiempoHidro = 0;
 8000fc6:	4b58      	ldr	r3, [pc, #352]	; (8001128 <setProg_hidro+0x254>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
				break;
 8000fcc:	e0a6      	b.n	800111c <setProg_hidro+0x248>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8000fce:	200e      	movs	r0, #14
 8000fd0:	f7ff fa7e 	bl	80004d0 <getStatBoton>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d103      	bne.n	8000fe2 <setProg_hidro+0x10e>
				statusTiempoHidro = 3;
 8000fda:	4b53      	ldr	r3, [pc, #332]	; (8001128 <setProg_hidro+0x254>)
 8000fdc:	2203      	movs	r2, #3
 8000fde:	701a      	strb	r2, [r3, #0]
				break;
 8000fe0:	e09c      	b.n	800111c <setProg_hidro+0x248>
			}

			if (newNumber != -1) {
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fea:	f000 8092 	beq.w	8001112 <setProg_hidro+0x23e>
				tiempoHidroAux *= 10;
 8000fee:	4b50      	ldr	r3, [pc, #320]	; (8001130 <setProg_hidro+0x25c>)
 8000ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <setProg_hidro+0x25c>)
 8001004:	801a      	strh	r2, [r3, #0]
				tiempoHidroAux += newNumber;
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b48      	ldr	r3, [pc, #288]	; (8001130 <setProg_hidro+0x25c>)
 800100e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001012:	b29b      	uxth	r3, r3
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	b21a      	sxth	r2, r3
 800101a:	4b45      	ldr	r3, [pc, #276]	; (8001130 <setProg_hidro+0x25c>)
 800101c:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 800101e:	4b44      	ldr	r3, [pc, #272]	; (8001130 <setProg_hidro+0x25c>)
 8001020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001024:	461a      	mov	r2, r3
 8001026:	4943      	ldr	r1, [pc, #268]	; (8001134 <setProg_hidro+0x260>)
 8001028:	4843      	ldr	r0, [pc, #268]	; (8001138 <setProg_hidro+0x264>)
 800102a:	f006 fb9f 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 800102e:	4842      	ldr	r0, [pc, #264]	; (8001138 <setProg_hidro+0x264>)
 8001030:	f7ff ff32 	bl	8000e98 <setTexto_pantalla>
				statusTiempoHidro = 2;
 8001034:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <setProg_hidro+0x254>)
 8001036:	2202      	movs	r2, #2
 8001038:	701a      	strb	r2, [r3, #0]
				break;
 800103a:	e06f      	b.n	800111c <setProg_hidro+0x248>
			}

		break;
		case 2: //lote en 10 o más...
			if (getStatBoton(IN_AST) == FALL) {
 800103c:	200c      	movs	r0, #12
 800103e:	f7ff fa47 	bl	80004d0 <getStatBoton>
 8001042:	4603      	mov	r3, r0
 8001044:	2b02      	cmp	r3, #2
 8001046:	d11e      	bne.n	8001086 <setProg_hidro+0x1b2>
				tiempoHidroAux /= 10;
 8001048:	4b39      	ldr	r3, [pc, #228]	; (8001130 <setProg_hidro+0x25c>)
 800104a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104e:	4a3b      	ldr	r2, [pc, #236]	; (800113c <setProg_hidro+0x268>)
 8001050:	fb82 1203 	smull	r1, r2, r2, r3
 8001054:	1092      	asrs	r2, r2, #2
 8001056:	17db      	asrs	r3, r3, #31
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <setProg_hidro+0x25c>)
 800105e:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8001060:	4b33      	ldr	r3, [pc, #204]	; (8001130 <setProg_hidro+0x25c>)
 8001062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001066:	461a      	mov	r2, r3
 8001068:	4932      	ldr	r1, [pc, #200]	; (8001134 <setProg_hidro+0x260>)
 800106a:	4833      	ldr	r0, [pc, #204]	; (8001138 <setProg_hidro+0x264>)
 800106c:	f006 fb7e 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8001070:	4831      	ldr	r0, [pc, #196]	; (8001138 <setProg_hidro+0x264>)
 8001072:	f7ff ff11 	bl	8000e98 <setTexto_pantalla>
				if (statusTiempoHidro < 10) {
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <setProg_hidro+0x254>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b09      	cmp	r3, #9
 800107c:	d84b      	bhi.n	8001116 <setProg_hidro+0x242>
					statusTiempoHidro = 1;
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <setProg_hidro+0x254>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001084:	e047      	b.n	8001116 <setProg_hidro+0x242>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001086:	200e      	movs	r0, #14
 8001088:	f7ff fa22 	bl	80004d0 <getStatBoton>
 800108c:	4603      	mov	r3, r0
 800108e:	2b02      	cmp	r3, #2
 8001090:	d103      	bne.n	800109a <setProg_hidro+0x1c6>
				statusTiempoHidro = 3;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <setProg_hidro+0x254>)
 8001094:	2203      	movs	r2, #3
 8001096:	701a      	strb	r2, [r3, #0]
				break;
 8001098:	e040      	b.n	800111c <setProg_hidro+0x248>
			}

			if (tiempoHidroAux < 120) {
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <setProg_hidro+0x25c>)
 800109c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a0:	2b77      	cmp	r3, #119	; 0x77
 80010a2:	dc3a      	bgt.n	800111a <setProg_hidro+0x246>
				if (newNumber != -1) {
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ac:	d035      	beq.n	800111a <setProg_hidro+0x246>
					tiempoHidroAux *= 10;
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <setProg_hidro+0x25c>)
 80010b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	b29b      	uxth	r3, r3
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <setProg_hidro+0x25c>)
 80010c4:	801a      	strh	r2, [r3, #0]
					tiempoHidroAux += newNumber;
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <setProg_hidro+0x25c>)
 80010ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <setProg_hidro+0x25c>)
 80010dc:	801a      	strh	r2, [r3, #0]
					sprintf(texto, "%d min.", tiempoHidroAux);
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <setProg_hidro+0x25c>)
 80010e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4913      	ldr	r1, [pc, #76]	; (8001134 <setProg_hidro+0x260>)
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <setProg_hidro+0x264>)
 80010ea:	f006 fb3f 	bl	800776c <siprintf>
					setTexto_pantalla(texto);
 80010ee:	4812      	ldr	r0, [pc, #72]	; (8001138 <setProg_hidro+0x264>)
 80010f0:	f7ff fed2 	bl	8000e98 <setTexto_pantalla>
					break;
 80010f4:	e012      	b.n	800111c <setProg_hidro+0x248>
			}

		break;
		case 3: //retorna y graba el valor

			tiempoHidro = tiempoHidroAux;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <setProg_hidro+0x25c>)
 80010f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <setProg_hidro+0x258>)
 80010fe:	801a      	strh	r2, [r3, #0]
			statusTiempoHidro = 99;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <setProg_hidro+0x254>)
 8001102:	2263      	movs	r2, #99	; 0x63
 8001104:	701a      	strb	r2, [r3, #0]

			return PROG_FINISHED;
 8001106:	2303      	movs	r3, #3
 8001108:	e009      	b.n	800111e <setProg_hidro+0x24a>
		break;

		default:
			return PROG_ERROR;
 800110a:	2300      	movs	r3, #0
 800110c:	e007      	b.n	800111e <setProg_hidro+0x24a>
		break;
 800110e:	bf00      	nop
 8001110:	e004      	b.n	800111c <setProg_hidro+0x248>
		break;
 8001112:	bf00      	nop
 8001114:	e002      	b.n	800111c <setProg_hidro+0x248>
				break;
 8001116:	bf00      	nop
 8001118:	e000      	b.n	800111c <setProg_hidro+0x248>
		break;
 800111a:	bf00      	nop
		break;
	} //end switch statusTiempoHidro.

	return PROG_BUSY;
 800111c:	2302      	movs	r3, #2

} //end setProg_hidro()
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000003 	.word	0x20000003
 800112c:	20000120 	.word	0x20000120
 8001130:	2000011e 	.word	0x2000011e
 8001134:	08008200 	.word	0x08008200
 8001138:	200005f4 	.word	0x200005f4
 800113c:	66666667 	.word	0x66666667

08001140 <setProg_llenado>:


T_PROG_OUTPUT setProg_llenado (T_PROG_CMD cmd){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]

	int8_t newNumber = getNumber();
 800114a:	f7ff f9f7 	bl	800053c <getNumber>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]

	switch (statusTiempoLlenado) {
 8001152:	4bad      	ldr	r3, [pc, #692]	; (8001408 <setProg_llenado+0x2c8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b02      	cmp	r3, #2
 8001158:	f000 80b3 	beq.w	80012c2 <setProg_llenado+0x182>
 800115c:	2b02      	cmp	r3, #2
 800115e:	dc04      	bgt.n	800116a <setProg_llenado+0x2a>
 8001160:	2b00      	cmp	r3, #0
 8001162:	d03b      	beq.n	80011dc <setProg_llenado+0x9c>
 8001164:	2b01      	cmp	r3, #1
 8001166:	d05d      	beq.n	8001224 <setProg_llenado+0xe4>
 8001168:	e167      	b.n	800143a <setProg_llenado+0x2fa>
 800116a:	2b03      	cmp	r3, #3
 800116c:	f000 8140 	beq.w	80013f0 <setProg_llenado+0x2b0>
 8001170:	2b63      	cmp	r3, #99	; 0x63
 8001172:	f040 8162 	bne.w	800143a <setProg_llenado+0x2fa>
		case 99: //imprime al entrar al sub-menu
			switch (cmd) {
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b04      	cmp	r3, #4
 800117a:	d002      	beq.n	8001182 <setProg_llenado+0x42>
 800117c:	2b05      	cmp	r3, #5
 800117e:	d006      	beq.n	800118e <setProg_llenado+0x4e>
					tiempoLlenadoAux = tiempoLlenado_ON;
				break;
				case PROG_SET2:
					tiempoLlenadoAux = tiempoLlenado_OFF;
				default:
				break;
 8001180:	e00a      	b.n	8001198 <setProg_llenado+0x58>
					tiempoLlenadoAux = tiempoLlenado_ON;
 8001182:	4ba2      	ldr	r3, [pc, #648]	; (800140c <setProg_llenado+0x2cc>)
 8001184:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001188:	4ba1      	ldr	r3, [pc, #644]	; (8001410 <setProg_llenado+0x2d0>)
 800118a:	801a      	strh	r2, [r3, #0]
				break;
 800118c:	e005      	b.n	800119a <setProg_llenado+0x5a>
					tiempoLlenadoAux = tiempoLlenado_OFF;
 800118e:	4ba1      	ldr	r3, [pc, #644]	; (8001414 <setProg_llenado+0x2d4>)
 8001190:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001194:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <setProg_llenado+0x2d0>)
 8001196:	801a      	strh	r2, [r3, #0]
				break;
 8001198:	bf00      	nop
			} //end switch cmd
			sprintf(texto, "%d min.", tiempoLlenadoAux);
 800119a:	4b9d      	ldr	r3, [pc, #628]	; (8001410 <setProg_llenado+0x2d0>)
 800119c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a0:	461a      	mov	r2, r3
 80011a2:	499d      	ldr	r1, [pc, #628]	; (8001418 <setProg_llenado+0x2d8>)
 80011a4:	489d      	ldr	r0, [pc, #628]	; (800141c <setProg_llenado+0x2dc>)
 80011a6:	f006 fae1 	bl	800776c <siprintf>
			setTexto_pantalla(texto);
 80011aa:	489c      	ldr	r0, [pc, #624]	; (800141c <setProg_llenado+0x2dc>)
 80011ac:	f7ff fe74 	bl	8000e98 <setTexto_pantalla>
			if (!tiempoLlenadoAux){
 80011b0:	4b97      	ldr	r3, [pc, #604]	; (8001410 <setProg_llenado+0x2d0>)
 80011b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <setProg_llenado+0x82>
				statusTiempoLlenado = 0;
 80011ba:	4b93      	ldr	r3, [pc, #588]	; (8001408 <setProg_llenado+0x2c8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
				break;
 80011c0:	e142      	b.n	8001448 <setProg_llenado+0x308>
			}else if (tiempoLlenadoAux < 10){
 80011c2:	4b93      	ldr	r3, [pc, #588]	; (8001410 <setProg_llenado+0x2d0>)
 80011c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c8:	2b09      	cmp	r3, #9
 80011ca:	dc03      	bgt.n	80011d4 <setProg_llenado+0x94>
				statusTiempoLlenado = 1;
 80011cc:	4b8e      	ldr	r3, [pc, #568]	; (8001408 <setProg_llenado+0x2c8>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
				break;
 80011d2:	e139      	b.n	8001448 <setProg_llenado+0x308>
			}else{
				statusTiempoLlenado = 2;
 80011d4:	4b8c      	ldr	r3, [pc, #560]	; (8001408 <setProg_llenado+0x2c8>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
				break;
 80011da:	e135      	b.n	8001448 <setProg_llenado+0x308>
			}
		break;
		case 0: //tiempo en 0.
			if (getStatBoton(IN_AST) == FALL) {
 80011dc:	200c      	movs	r0, #12
 80011de:	f7ff f977 	bl	80004d0 <getStatBoton>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d104      	bne.n	80011f2 <setProg_llenado+0xb2>
				statusTiempoLlenado = 99;
 80011e8:	4b87      	ldr	r3, [pc, #540]	; (8001408 <setProg_llenado+0x2c8>)
 80011ea:	2263      	movs	r2, #99	; 0x63
 80011ec:	701a      	strb	r2, [r3, #0]
				return PROG_IDLE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e12b      	b.n	800144a <setProg_llenado+0x30a>
			}

			if (newNumber > 0) {
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f340 8121 	ble.w	800143e <setProg_llenado+0x2fe>
				tiempoLlenadoAux = newNumber;
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b83      	ldr	r3, [pc, #524]	; (8001410 <setProg_llenado+0x2d0>)
 8001204:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoLlenadoAux);
 8001206:	4b82      	ldr	r3, [pc, #520]	; (8001410 <setProg_llenado+0x2d0>)
 8001208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120c:	461a      	mov	r2, r3
 800120e:	4982      	ldr	r1, [pc, #520]	; (8001418 <setProg_llenado+0x2d8>)
 8001210:	4882      	ldr	r0, [pc, #520]	; (800141c <setProg_llenado+0x2dc>)
 8001212:	f006 faab 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8001216:	4881      	ldr	r0, [pc, #516]	; (800141c <setProg_llenado+0x2dc>)
 8001218:	f7ff fe3e 	bl	8000e98 <setTexto_pantalla>
				statusTiempoLlenado = 1;
 800121c:	4b7a      	ldr	r3, [pc, #488]	; (8001408 <setProg_llenado+0x2c8>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001222:	e10c      	b.n	800143e <setProg_llenado+0x2fe>
		case 1: //lote entre 1 y 9.
			if (getStatBoton(IN_AST) == FALL) {
 8001224:	200c      	movs	r0, #12
 8001226:	f7ff f953 	bl	80004d0 <getStatBoton>
 800122a:	4603      	mov	r3, r0
 800122c:	2b02      	cmp	r3, #2
 800122e:	d111      	bne.n	8001254 <setProg_llenado+0x114>
				tiempoLlenadoAux = 0;
 8001230:	4b77      	ldr	r3, [pc, #476]	; (8001410 <setProg_llenado+0x2d0>)
 8001232:	2200      	movs	r2, #0
 8001234:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoLlenadoAux);
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <setProg_llenado+0x2d0>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	461a      	mov	r2, r3
 800123e:	4976      	ldr	r1, [pc, #472]	; (8001418 <setProg_llenado+0x2d8>)
 8001240:	4876      	ldr	r0, [pc, #472]	; (800141c <setProg_llenado+0x2dc>)
 8001242:	f006 fa93 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8001246:	4875      	ldr	r0, [pc, #468]	; (800141c <setProg_llenado+0x2dc>)
 8001248:	f7ff fe26 	bl	8000e98 <setTexto_pantalla>
				statusTiempoLlenado = 0;
 800124c:	4b6e      	ldr	r3, [pc, #440]	; (8001408 <setProg_llenado+0x2c8>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
				break;
 8001252:	e0f9      	b.n	8001448 <setProg_llenado+0x308>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001254:	200e      	movs	r0, #14
 8001256:	f7ff f93b 	bl	80004d0 <getStatBoton>
 800125a:	4603      	mov	r3, r0
 800125c:	2b02      	cmp	r3, #2
 800125e:	d103      	bne.n	8001268 <setProg_llenado+0x128>
				statusTiempoLlenado = 3;
 8001260:	4b69      	ldr	r3, [pc, #420]	; (8001408 <setProg_llenado+0x2c8>)
 8001262:	2203      	movs	r2, #3
 8001264:	701a      	strb	r2, [r3, #0]
				break;
 8001266:	e0ef      	b.n	8001448 <setProg_llenado+0x308>
			}

			if (newNumber != -1) {
 8001268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001270:	f000 80e7 	beq.w	8001442 <setProg_llenado+0x302>
				tiempoLlenadoAux *= 10;
 8001274:	4b66      	ldr	r3, [pc, #408]	; (8001410 <setProg_llenado+0x2d0>)
 8001276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127a:	b29b      	uxth	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4413      	add	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	b29b      	uxth	r3, r3
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b61      	ldr	r3, [pc, #388]	; (8001410 <setProg_llenado+0x2d0>)
 800128a:	801a      	strh	r2, [r3, #0]
				tiempoLlenadoAux += newNumber;
 800128c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b5f      	ldr	r3, [pc, #380]	; (8001410 <setProg_llenado+0x2d0>)
 8001294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4413      	add	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	b21a      	sxth	r2, r3
 80012a0:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <setProg_llenado+0x2d0>)
 80012a2:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoLlenadoAux);
 80012a4:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <setProg_llenado+0x2d0>)
 80012a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012aa:	461a      	mov	r2, r3
 80012ac:	495a      	ldr	r1, [pc, #360]	; (8001418 <setProg_llenado+0x2d8>)
 80012ae:	485b      	ldr	r0, [pc, #364]	; (800141c <setProg_llenado+0x2dc>)
 80012b0:	f006 fa5c 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 80012b4:	4859      	ldr	r0, [pc, #356]	; (800141c <setProg_llenado+0x2dc>)
 80012b6:	f7ff fdef 	bl	8000e98 <setTexto_pantalla>
				statusTiempoLlenado = 2;
 80012ba:	4b53      	ldr	r3, [pc, #332]	; (8001408 <setProg_llenado+0x2c8>)
 80012bc:	2202      	movs	r2, #2
 80012be:	701a      	strb	r2, [r3, #0]
				break;
 80012c0:	e0c2      	b.n	8001448 <setProg_llenado+0x308>
			}

		break;
		case 2: //lote en 10 o más...
			if (getStatBoton(IN_AST) == FALL) {
 80012c2:	200c      	movs	r0, #12
 80012c4:	f7ff f904 	bl	80004d0 <getStatBoton>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d120      	bne.n	8001310 <setProg_llenado+0x1d0>
				tiempoLlenadoAux /= 10;
 80012ce:	4b50      	ldr	r3, [pc, #320]	; (8001410 <setProg_llenado+0x2d0>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4a52      	ldr	r2, [pc, #328]	; (8001420 <setProg_llenado+0x2e0>)
 80012d6:	fb82 1203 	smull	r1, r2, r2, r3
 80012da:	1092      	asrs	r2, r2, #2
 80012dc:	17db      	asrs	r3, r3, #31
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b4b      	ldr	r3, [pc, #300]	; (8001410 <setProg_llenado+0x2d0>)
 80012e4:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoLlenadoAux);
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <setProg_llenado+0x2d0>)
 80012e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ec:	461a      	mov	r2, r3
 80012ee:	494a      	ldr	r1, [pc, #296]	; (8001418 <setProg_llenado+0x2d8>)
 80012f0:	484a      	ldr	r0, [pc, #296]	; (800141c <setProg_llenado+0x2dc>)
 80012f2:	f006 fa3b 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 80012f6:	4849      	ldr	r0, [pc, #292]	; (800141c <setProg_llenado+0x2dc>)
 80012f8:	f7ff fdce 	bl	8000e98 <setTexto_pantalla>
				if (tiempoLlenadoAux < 10) {
 80012fc:	4b44      	ldr	r3, [pc, #272]	; (8001410 <setProg_llenado+0x2d0>)
 80012fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001302:	2b09      	cmp	r3, #9
 8001304:	f300 809f 	bgt.w	8001446 <setProg_llenado+0x306>
					statusTiempoLlenado = 1;
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <setProg_llenado+0x2c8>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800130e:	e09a      	b.n	8001446 <setProg_llenado+0x306>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001310:	200e      	movs	r0, #14
 8001312:	f7ff f8dd 	bl	80004d0 <getStatBoton>
 8001316:	4603      	mov	r3, r0
 8001318:	2b02      	cmp	r3, #2
 800131a:	d103      	bne.n	8001324 <setProg_llenado+0x1e4>
				statusTiempoLlenado = 3;
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <setProg_llenado+0x2c8>)
 800131e:	2203      	movs	r2, #3
 8001320:	701a      	strb	r2, [r3, #0]
				break;
 8001322:	e091      	b.n	8001448 <setProg_llenado+0x308>
			}

			switch (cmd) {
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b04      	cmp	r3, #4
 8001328:	d002      	beq.n	8001330 <setProg_llenado+0x1f0>
 800132a:	2b05      	cmp	r3, #5
 800132c:	d02e      	beq.n	800138c <setProg_llenado+0x24c>
							break;
						} //end if newNumber...
					} //end iftiempoLlenadoAux...
				break;
				default:
				break;
 800132e:	e05e      	b.n	80013ee <setProg_llenado+0x2ae>
					if (tiempoLlenadoAux < 30) {
 8001330:	4b37      	ldr	r3, [pc, #220]	; (8001410 <setProg_llenado+0x2d0>)
 8001332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001336:	2b1d      	cmp	r3, #29
 8001338:	dc56      	bgt.n	80013e8 <setProg_llenado+0x2a8>
						if (newNumber != -1) {
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001342:	d051      	beq.n	80013e8 <setProg_llenado+0x2a8>
							tiempoLlenadoAux *= 10;
 8001344:	4b32      	ldr	r3, [pc, #200]	; (8001410 <setProg_llenado+0x2d0>)
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	b29b      	uxth	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4413      	add	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	b29b      	uxth	r3, r3
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <setProg_llenado+0x2d0>)
 800135a:	801a      	strh	r2, [r3, #0]
							tiempoLlenadoAux += newNumber;
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <setProg_llenado+0x2d0>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4413      	add	r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <setProg_llenado+0x2d0>)
 8001372:	801a      	strh	r2, [r3, #0]
							sprintf(texto, "%d min.", tiempoLlenadoAux);
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <setProg_llenado+0x2d0>)
 8001376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137a:	461a      	mov	r2, r3
 800137c:	4926      	ldr	r1, [pc, #152]	; (8001418 <setProg_llenado+0x2d8>)
 800137e:	4827      	ldr	r0, [pc, #156]	; (800141c <setProg_llenado+0x2dc>)
 8001380:	f006 f9f4 	bl	800776c <siprintf>
							setTexto_pantalla(texto);
 8001384:	4825      	ldr	r0, [pc, #148]	; (800141c <setProg_llenado+0x2dc>)
 8001386:	f7ff fd87 	bl	8000e98 <setTexto_pantalla>
							break;
 800138a:	e030      	b.n	80013ee <setProg_llenado+0x2ae>
					if (tiempoLlenadoAux < 15) {
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <setProg_llenado+0x2d0>)
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	2b0e      	cmp	r3, #14
 8001394:	dc2a      	bgt.n	80013ec <setProg_llenado+0x2ac>
						if (newNumber != -1) {
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800139e:	d025      	beq.n	80013ec <setProg_llenado+0x2ac>
							tiempoLlenadoAux *= 10;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <setProg_llenado+0x2d0>)
 80013a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <setProg_llenado+0x2d0>)
 80013b6:	801a      	strh	r2, [r3, #0]
							tiempoLlenadoAux += newNumber;
 80013b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <setProg_llenado+0x2d0>)
 80013c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <setProg_llenado+0x2d0>)
 80013ce:	801a      	strh	r2, [r3, #0]
							sprintf(texto, "%d min.", tiempoLlenadoAux);
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <setProg_llenado+0x2d0>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	461a      	mov	r2, r3
 80013d8:	490f      	ldr	r1, [pc, #60]	; (8001418 <setProg_llenado+0x2d8>)
 80013da:	4810      	ldr	r0, [pc, #64]	; (800141c <setProg_llenado+0x2dc>)
 80013dc:	f006 f9c6 	bl	800776c <siprintf>
							setTexto_pantalla(texto);
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <setProg_llenado+0x2dc>)
 80013e2:	f7ff fd59 	bl	8000e98 <setTexto_pantalla>
							break;
 80013e6:	e002      	b.n	80013ee <setProg_llenado+0x2ae>
				break;
 80013e8:	bf00      	nop
 80013ea:	e02d      	b.n	8001448 <setProg_llenado+0x308>
				break;
 80013ec:	bf00      	nop
			} //end switch cmd

		break;
 80013ee:	e02b      	b.n	8001448 <setProg_llenado+0x308>
		case 3: //retorna y graba el valor

			switch (cmd) {
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d002      	beq.n	80013fc <setProg_llenado+0x2bc>
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d014      	beq.n	8001424 <setProg_llenado+0x2e4>
					tiempoLlenado_ON = tiempoLlenadoAux;
				break;
				case PROG_SET2:
					tiempoLlenado_OFF = tiempoLlenadoAux;
				default:
				break;
 80013fa:	e018      	b.n	800142e <setProg_llenado+0x2ee>
					tiempoLlenado_ON = tiempoLlenadoAux;
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <setProg_llenado+0x2d0>)
 80013fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001402:	4b02      	ldr	r3, [pc, #8]	; (800140c <setProg_llenado+0x2cc>)
 8001404:	801a      	strh	r2, [r3, #0]
				break;
 8001406:	e013      	b.n	8001430 <setProg_llenado+0x2f0>
 8001408:	20000005 	.word	0x20000005
 800140c:	20000124 	.word	0x20000124
 8001410:	20000122 	.word	0x20000122
 8001414:	20000126 	.word	0x20000126
 8001418:	08008200 	.word	0x08008200
 800141c:	200005f4 	.word	0x200005f4
 8001420:	66666667 	.word	0x66666667
					tiempoLlenado_OFF = tiempoLlenadoAux;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <setProg_llenado+0x314>)
 8001426:	f9b3 2000 	ldrsh.w	r2, [r3]
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <setProg_llenado+0x318>)
 800142c:	801a      	strh	r2, [r3, #0]
				break;
 800142e:	bf00      	nop
			} //end switch cmd

			statusTiempoLlenado = 99;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <setProg_llenado+0x31c>)
 8001432:	2263      	movs	r2, #99	; 0x63
 8001434:	701a      	strb	r2, [r3, #0]
			return PROG_FINISHED;
 8001436:	2303      	movs	r3, #3
 8001438:	e007      	b.n	800144a <setProg_llenado+0x30a>

		break;
		default:
			return PROG_ERROR;
 800143a:	2300      	movs	r3, #0
 800143c:	e005      	b.n	800144a <setProg_llenado+0x30a>
		break;
 800143e:	bf00      	nop
 8001440:	e002      	b.n	8001448 <setProg_llenado+0x308>
		break;
 8001442:	bf00      	nop
 8001444:	e000      	b.n	8001448 <setProg_llenado+0x308>
				break;
 8001446:	bf00      	nop
		break;
	} //end switch statusTiempoLlenado.

	return PROG_BUSY;
 8001448:	2302      	movs	r3, #2

} //end setProg_llenado()
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000122 	.word	0x20000122
 8001458:	20000126 	.word	0x20000126
 800145c:	20000005 	.word	0x20000005

08001460 <setProg_skimmer>:


T_PROG_OUTPUT setProg_skimmer (T_PROG_CMD cmd){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]

	int8_t newNumber = getNumber();
 800146a:	f7ff f867 	bl	800053c <getNumber>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]

	switch (statusTiempoSkimmer) {
 8001472:	4bd2      	ldr	r3, [pc, #840]	; (80017bc <setProg_skimmer+0x35c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b63      	cmp	r3, #99	; 0x63
 8001478:	f200 85f2 	bhi.w	8002060 <setProg_skimmer+0xc00>
 800147c:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <setProg_skimmer+0x24>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	080018e5 	.word	0x080018e5
 8001488:	0800192d 	.word	0x0800192d
 800148c:	080019cb 	.word	0x080019cb
 8001490:	08001b21 	.word	0x08001b21
 8001494:	08002061 	.word	0x08002061
 8001498:	08002061 	.word	0x08002061
 800149c:	08002061 	.word	0x08002061
 80014a0:	08002061 	.word	0x08002061
 80014a4:	08002061 	.word	0x08002061
 80014a8:	08002061 	.word	0x08002061
 80014ac:	08001b4f 	.word	0x08001b4f
 80014b0:	08001bd9 	.word	0x08001bd9
 80014b4:	08001cf9 	.word	0x08001cf9
 80014b8:	08001e2f 	.word	0x08001e2f
 80014bc:	08001f5b 	.word	0x08001f5b
 80014c0:	08002061 	.word	0x08002061
 80014c4:	08002061 	.word	0x08002061
 80014c8:	08002061 	.word	0x08002061
 80014cc:	08002061 	.word	0x08002061
 80014d0:	08002061 	.word	0x08002061
 80014d4:	08002061 	.word	0x08002061
 80014d8:	08002061 	.word	0x08002061
 80014dc:	08002061 	.word	0x08002061
 80014e0:	08002061 	.word	0x08002061
 80014e4:	08002061 	.word	0x08002061
 80014e8:	08002061 	.word	0x08002061
 80014ec:	08002061 	.word	0x08002061
 80014f0:	08002061 	.word	0x08002061
 80014f4:	08002061 	.word	0x08002061
 80014f8:	08002061 	.word	0x08002061
 80014fc:	08002061 	.word	0x08002061
 8001500:	08002061 	.word	0x08002061
 8001504:	08002061 	.word	0x08002061
 8001508:	08002007 	.word	0x08002007
 800150c:	08002061 	.word	0x08002061
 8001510:	08002061 	.word	0x08002061
 8001514:	08002061 	.word	0x08002061
 8001518:	08002061 	.word	0x08002061
 800151c:	08002061 	.word	0x08002061
 8001520:	08002061 	.word	0x08002061
 8001524:	08002061 	.word	0x08002061
 8001528:	08002061 	.word	0x08002061
 800152c:	08002061 	.word	0x08002061
 8001530:	08002061 	.word	0x08002061
 8001534:	08002061 	.word	0x08002061
 8001538:	08002061 	.word	0x08002061
 800153c:	08002061 	.word	0x08002061
 8001540:	08002061 	.word	0x08002061
 8001544:	08002061 	.word	0x08002061
 8001548:	08002061 	.word	0x08002061
 800154c:	08002061 	.word	0x08002061
 8001550:	08002061 	.word	0x08002061
 8001554:	08002061 	.word	0x08002061
 8001558:	08002061 	.word	0x08002061
 800155c:	08002061 	.word	0x08002061
 8001560:	08002061 	.word	0x08002061
 8001564:	08002061 	.word	0x08002061
 8001568:	08002061 	.word	0x08002061
 800156c:	08002061 	.word	0x08002061
 8001570:	08002061 	.word	0x08002061
 8001574:	08002061 	.word	0x08002061
 8001578:	08002061 	.word	0x08002061
 800157c:	08002061 	.word	0x08002061
 8001580:	08002061 	.word	0x08002061
 8001584:	08002061 	.word	0x08002061
 8001588:	08002061 	.word	0x08002061
 800158c:	08002061 	.word	0x08002061
 8001590:	08002061 	.word	0x08002061
 8001594:	08002061 	.word	0x08002061
 8001598:	08002061 	.word	0x08002061
 800159c:	08002061 	.word	0x08002061
 80015a0:	08002061 	.word	0x08002061
 80015a4:	08002061 	.word	0x08002061
 80015a8:	08002061 	.word	0x08002061
 80015ac:	08002061 	.word	0x08002061
 80015b0:	08002061 	.word	0x08002061
 80015b4:	08002061 	.word	0x08002061
 80015b8:	08002061 	.word	0x08002061
 80015bc:	08002061 	.word	0x08002061
 80015c0:	08002061 	.word	0x08002061
 80015c4:	08002061 	.word	0x08002061
 80015c8:	08002061 	.word	0x08002061
 80015cc:	08002061 	.word	0x08002061
 80015d0:	08002061 	.word	0x08002061
 80015d4:	08002061 	.word	0x08002061
 80015d8:	08002061 	.word	0x08002061
 80015dc:	08002061 	.word	0x08002061
 80015e0:	08002061 	.word	0x08002061
 80015e4:	08002061 	.word	0x08002061
 80015e8:	08002061 	.word	0x08002061
 80015ec:	08002061 	.word	0x08002061
 80015f0:	08002061 	.word	0x08002061
 80015f4:	08002061 	.word	0x08002061
 80015f8:	08002061 	.word	0x08002061
 80015fc:	08002061 	.word	0x08002061
 8001600:	08002061 	.word	0x08002061
 8001604:	08002061 	.word	0x08002061
 8001608:	08002061 	.word	0x08002061
 800160c:	08002061 	.word	0x08002061
 8001610:	08001615 	.word	0x08001615
		case 99: //imprime al entrar al sub-menu
			switch (cmd) {
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	3b04      	subs	r3, #4
 8001618:	2b05      	cmp	r3, #5
 800161a:	f200 8161 	bhi.w	80018e0 <setProg_skimmer+0x480>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <setProg_skimmer+0x1c4>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	0800163d 	.word	0x0800163d
 8001628:	08001689 	.word	0x08001689
 800162c:	080016d5 	.word	0x080016d5
 8001630:	0800174d 	.word	0x0800174d
 8001634:	080017f1 	.word	0x080017f1
 8001638:	08001869 	.word	0x08001869
				case PROG_SET1:
					tiempoSkimmerAux = tiempoSkimmer_ON;
 800163c:	4b60      	ldr	r3, [pc, #384]	; (80017c0 <setProg_skimmer+0x360>)
 800163e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001642:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <setProg_skimmer+0x364>)
 8001644:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "%d min.", tiempoSkimmerAux);
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <setProg_skimmer+0x364>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	461a      	mov	r2, r3
 800164e:	495e      	ldr	r1, [pc, #376]	; (80017c8 <setProg_skimmer+0x368>)
 8001650:	485e      	ldr	r0, [pc, #376]	; (80017cc <setProg_skimmer+0x36c>)
 8001652:	f006 f88b 	bl	800776c <siprintf>
					setTexto_pantalla(texto);
 8001656:	485d      	ldr	r0, [pc, #372]	; (80017cc <setProg_skimmer+0x36c>)
 8001658:	f7ff fc1e 	bl	8000e98 <setTexto_pantalla>
					if (!tiempoSkimmerAux){
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <setProg_skimmer+0x364>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d103      	bne.n	800166e <setProg_skimmer+0x20e>
						statusTiempoSkimmer = 0;
 8001666:	4b55      	ldr	r3, [pc, #340]	; (80017bc <setProg_skimmer+0x35c>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
						break;
 800166c:	e139      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (tiempoSkimmerAux < 10){
 800166e:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <setProg_skimmer+0x364>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	2b09      	cmp	r3, #9
 8001676:	dc03      	bgt.n	8001680 <setProg_skimmer+0x220>
						statusTiempoSkimmer = 1;
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <setProg_skimmer+0x35c>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
						break;
 800167e:	e130      	b.n	80018e2 <setProg_skimmer+0x482>
					}else{
						statusTiempoSkimmer = 2;
 8001680:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <setProg_skimmer+0x35c>)
 8001682:	2202      	movs	r2, #2
 8001684:	701a      	strb	r2, [r3, #0]
						break;
 8001686:	e12c      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				break;
				case PROG_SET2:
					tiempoSkimmerAux = tiempoSkimmer_OFF;
 8001688:	4b51      	ldr	r3, [pc, #324]	; (80017d0 <setProg_skimmer+0x370>)
 800168a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800168e:	4b4d      	ldr	r3, [pc, #308]	; (80017c4 <setProg_skimmer+0x364>)
 8001690:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "%d min.", tiempoSkimmerAux);
 8001692:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <setProg_skimmer+0x364>)
 8001694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001698:	461a      	mov	r2, r3
 800169a:	494b      	ldr	r1, [pc, #300]	; (80017c8 <setProg_skimmer+0x368>)
 800169c:	484b      	ldr	r0, [pc, #300]	; (80017cc <setProg_skimmer+0x36c>)
 800169e:	f006 f865 	bl	800776c <siprintf>
					setTexto_pantalla(texto);
 80016a2:	484a      	ldr	r0, [pc, #296]	; (80017cc <setProg_skimmer+0x36c>)
 80016a4:	f7ff fbf8 	bl	8000e98 <setTexto_pantalla>
					if (!tiempoSkimmerAux){
 80016a8:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <setProg_skimmer+0x364>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <setProg_skimmer+0x25a>
						statusTiempoSkimmer = 0;
 80016b2:	4b42      	ldr	r3, [pc, #264]	; (80017bc <setProg_skimmer+0x35c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
						break;
 80016b8:	e113      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (tiempoSkimmerAux < 10){
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <setProg_skimmer+0x364>)
 80016bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c0:	2b09      	cmp	r3, #9
 80016c2:	dc03      	bgt.n	80016cc <setProg_skimmer+0x26c>
						statusTiempoSkimmer = 1;
 80016c4:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <setProg_skimmer+0x35c>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
						break;
 80016ca:	e10a      	b.n	80018e2 <setProg_skimmer+0x482>
					}else{
						statusTiempoSkimmer = 2;
 80016cc:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <setProg_skimmer+0x35c>)
 80016ce:	2202      	movs	r2, #2
 80016d0:	701a      	strb	r2, [r3, #0]
						break;
 80016d2:	e106      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				break;
				case PROG_SET3:
					progSkimmerAux = prog1_Skimmer_ON;
 80016d4:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <setProg_skimmer+0x374>)
 80016d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016da:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <setProg_skimmer+0x378>)
 80016dc:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 80016de:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <setProg_skimmer+0x378>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	4a3d      	ldr	r2, [pc, #244]	; (80017dc <setProg_skimmer+0x37c>)
 80016e6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ea:	1152      	asrs	r2, r2, #5
 80016ec:	17db      	asrs	r3, r3, #31
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <setProg_skimmer+0x378>)
 80016f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fa:	4a38      	ldr	r2, [pc, #224]	; (80017dc <setProg_skimmer+0x37c>)
 80016fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001700:	1151      	asrs	r1, r2, #5
 8001702:	17da      	asrs	r2, r3, #31
 8001704:	1a8a      	subs	r2, r1, r2
 8001706:	2164      	movs	r1, #100	; 0x64
 8001708:	fb01 f202 	mul.w	r2, r1, r2
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	b21b      	sxth	r3, r3
 8001710:	4602      	mov	r2, r0
 8001712:	4933      	ldr	r1, [pc, #204]	; (80017e0 <setProg_skimmer+0x380>)
 8001714:	482d      	ldr	r0, [pc, #180]	; (80017cc <setProg_skimmer+0x36c>)
 8001716:	f006 f829 	bl	800776c <siprintf>
					setTexto_pantalla(texto);
 800171a:	482c      	ldr	r0, [pc, #176]	; (80017cc <setProg_skimmer+0x36c>)
 800171c:	f7ff fbbc 	bl	8000e98 <setTexto_pantalla>
					if (!progSkimmerAux){
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <setProg_skimmer+0x378>)
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d103      	bne.n	8001732 <setProg_skimmer+0x2d2>
						statusTiempoSkimmer = 10;
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <setProg_skimmer+0x35c>)
 800172c:	220a      	movs	r2, #10
 800172e:	701a      	strb	r2, [r3, #0]
						break;
 8001730:	e0d7      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (progSkimmerAux < 10){
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <setProg_skimmer+0x378>)
 8001734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001738:	2b09      	cmp	r3, #9
 800173a:	dc03      	bgt.n	8001744 <setProg_skimmer+0x2e4>
						statusTiempoSkimmer = 11;
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <setProg_skimmer+0x35c>)
 800173e:	220b      	movs	r2, #11
 8001740:	701a      	strb	r2, [r3, #0]
						break;
 8001742:	e0ce      	b.n	80018e2 <setProg_skimmer+0x482>
					}else{
						statusTiempoSkimmer = 12;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <setProg_skimmer+0x35c>)
 8001746:	220c      	movs	r2, #12
 8001748:	701a      	strb	r2, [r3, #0]
						break;
 800174a:	e0ca      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				break;
				case PROG_SET4:
					progSkimmerAux = prog1_Skimmer_OFF;
 800174c:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <setProg_skimmer+0x384>)
 800174e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <setProg_skimmer+0x378>)
 8001754:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <setProg_skimmer+0x378>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <setProg_skimmer+0x37c>)
 800175e:	fb82 1203 	smull	r1, r2, r2, r3
 8001762:	1152      	asrs	r2, r2, #5
 8001764:	17db      	asrs	r3, r3, #31
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	b21b      	sxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <setProg_skimmer+0x378>)
 800176e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001772:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <setProg_skimmer+0x37c>)
 8001774:	fb82 1203 	smull	r1, r2, r2, r3
 8001778:	1151      	asrs	r1, r2, #5
 800177a:	17da      	asrs	r2, r3, #31
 800177c:	1a8a      	subs	r2, r1, r2
 800177e:	2164      	movs	r1, #100	; 0x64
 8001780:	fb01 f202 	mul.w	r2, r1, r2
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	b21b      	sxth	r3, r3
 8001788:	4602      	mov	r2, r0
 800178a:	4915      	ldr	r1, [pc, #84]	; (80017e0 <setProg_skimmer+0x380>)
 800178c:	480f      	ldr	r0, [pc, #60]	; (80017cc <setProg_skimmer+0x36c>)
 800178e:	f005 ffed 	bl	800776c <siprintf>
					setTexto_pantalla(texto);
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <setProg_skimmer+0x36c>)
 8001794:	f7ff fb80 	bl	8000e98 <setTexto_pantalla>
					if (!progSkimmerAux){
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <setProg_skimmer+0x378>)
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d103      	bne.n	80017aa <setProg_skimmer+0x34a>
						statusTiempoSkimmer = 10;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <setProg_skimmer+0x35c>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	701a      	strb	r2, [r3, #0]
						break;
 80017a8:	e09b      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (progSkimmerAux < 10){
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <setProg_skimmer+0x378>)
 80017ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	dc19      	bgt.n	80017e8 <setProg_skimmer+0x388>
						statusTiempoSkimmer = 11;
 80017b4:	4b01      	ldr	r3, [pc, #4]	; (80017bc <setProg_skimmer+0x35c>)
 80017b6:	220b      	movs	r2, #11
 80017b8:	701a      	strb	r2, [r3, #0]
						break;
 80017ba:	e092      	b.n	80018e2 <setProg_skimmer+0x482>
 80017bc:	20000007 	.word	0x20000007
 80017c0:	2000012c 	.word	0x2000012c
 80017c4:	2000012a 	.word	0x2000012a
 80017c8:	08008200 	.word	0x08008200
 80017cc:	200005f4 	.word	0x200005f4
 80017d0:	2000012e 	.word	0x2000012e
 80017d4:	20000134 	.word	0x20000134
 80017d8:	20000130 	.word	0x20000130
 80017dc:	51eb851f 	.word	0x51eb851f
 80017e0:	08008208 	.word	0x08008208
 80017e4:	20000136 	.word	0x20000136
					}else{
						statusTiempoSkimmer = 12;
 80017e8:	4baa      	ldr	r3, [pc, #680]	; (8001a94 <setProg_skimmer+0x634>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	701a      	strb	r2, [r3, #0]
						break;
 80017ee:	e078      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				break;
				case PROG_SET5:
					progSkimmerAux = prog2_Skimmer_ON;
 80017f0:	4ba9      	ldr	r3, [pc, #676]	; (8001a98 <setProg_skimmer+0x638>)
 80017f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017f6:	4ba9      	ldr	r3, [pc, #676]	; (8001a9c <setProg_skimmer+0x63c>)
 80017f8:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 80017fa:	4ba8      	ldr	r3, [pc, #672]	; (8001a9c <setProg_skimmer+0x63c>)
 80017fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001800:	4aa7      	ldr	r2, [pc, #668]	; (8001aa0 <setProg_skimmer+0x640>)
 8001802:	fb82 1203 	smull	r1, r2, r2, r3
 8001806:	1152      	asrs	r2, r2, #5
 8001808:	17db      	asrs	r3, r3, #31
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	b21b      	sxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	4ba2      	ldr	r3, [pc, #648]	; (8001a9c <setProg_skimmer+0x63c>)
 8001812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001816:	4aa2      	ldr	r2, [pc, #648]	; (8001aa0 <setProg_skimmer+0x640>)
 8001818:	fb82 1203 	smull	r1, r2, r2, r3
 800181c:	1151      	asrs	r1, r2, #5
 800181e:	17da      	asrs	r2, r3, #31
 8001820:	1a8a      	subs	r2, r1, r2
 8001822:	2164      	movs	r1, #100	; 0x64
 8001824:	fb01 f202 	mul.w	r2, r1, r2
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	b21b      	sxth	r3, r3
 800182c:	4602      	mov	r2, r0
 800182e:	499d      	ldr	r1, [pc, #628]	; (8001aa4 <setProg_skimmer+0x644>)
 8001830:	489d      	ldr	r0, [pc, #628]	; (8001aa8 <setProg_skimmer+0x648>)
 8001832:	f005 ff9b 	bl	800776c <siprintf>
					setTexto_pantalla(texto);
 8001836:	489c      	ldr	r0, [pc, #624]	; (8001aa8 <setProg_skimmer+0x648>)
 8001838:	f7ff fb2e 	bl	8000e98 <setTexto_pantalla>
					if (!progSkimmerAux){
 800183c:	4b97      	ldr	r3, [pc, #604]	; (8001a9c <setProg_skimmer+0x63c>)
 800183e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d103      	bne.n	800184e <setProg_skimmer+0x3ee>
						statusTiempoSkimmer = 10;
 8001846:	4b93      	ldr	r3, [pc, #588]	; (8001a94 <setProg_skimmer+0x634>)
 8001848:	220a      	movs	r2, #10
 800184a:	701a      	strb	r2, [r3, #0]
						break;
 800184c:	e049      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (progSkimmerAux < 10){
 800184e:	4b93      	ldr	r3, [pc, #588]	; (8001a9c <setProg_skimmer+0x63c>)
 8001850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001854:	2b09      	cmp	r3, #9
 8001856:	dc03      	bgt.n	8001860 <setProg_skimmer+0x400>
						statusTiempoSkimmer = 11;
 8001858:	4b8e      	ldr	r3, [pc, #568]	; (8001a94 <setProg_skimmer+0x634>)
 800185a:	220b      	movs	r2, #11
 800185c:	701a      	strb	r2, [r3, #0]
						break;
 800185e:	e040      	b.n	80018e2 <setProg_skimmer+0x482>
					}else{
						statusTiempoSkimmer = 12;
 8001860:	4b8c      	ldr	r3, [pc, #560]	; (8001a94 <setProg_skimmer+0x634>)
 8001862:	220c      	movs	r2, #12
 8001864:	701a      	strb	r2, [r3, #0]
						break;
 8001866:	e03c      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				break;
				case PROG_SET6:
					progSkimmerAux = prog2_Skimmer_OFF;
 8001868:	4b90      	ldr	r3, [pc, #576]	; (8001aac <setProg_skimmer+0x64c>)
 800186a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800186e:	4b8b      	ldr	r3, [pc, #556]	; (8001a9c <setProg_skimmer+0x63c>)
 8001870:	801a      	strh	r2, [r3, #0]

					sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001872:	4b8a      	ldr	r3, [pc, #552]	; (8001a9c <setProg_skimmer+0x63c>)
 8001874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001878:	4a89      	ldr	r2, [pc, #548]	; (8001aa0 <setProg_skimmer+0x640>)
 800187a:	fb82 1203 	smull	r1, r2, r2, r3
 800187e:	1152      	asrs	r2, r2, #5
 8001880:	17db      	asrs	r3, r3, #31
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b21b      	sxth	r3, r3
 8001886:	4618      	mov	r0, r3
 8001888:	4b84      	ldr	r3, [pc, #528]	; (8001a9c <setProg_skimmer+0x63c>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	4a84      	ldr	r2, [pc, #528]	; (8001aa0 <setProg_skimmer+0x640>)
 8001890:	fb82 1203 	smull	r1, r2, r2, r3
 8001894:	1151      	asrs	r1, r2, #5
 8001896:	17da      	asrs	r2, r3, #31
 8001898:	1a8a      	subs	r2, r1, r2
 800189a:	2164      	movs	r1, #100	; 0x64
 800189c:	fb01 f202 	mul.w	r2, r1, r2
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	4602      	mov	r2, r0
 80018a6:	497f      	ldr	r1, [pc, #508]	; (8001aa4 <setProg_skimmer+0x644>)
 80018a8:	487f      	ldr	r0, [pc, #508]	; (8001aa8 <setProg_skimmer+0x648>)
 80018aa:	f005 ff5f 	bl	800776c <siprintf>
					setTexto_pantalla(texto);
 80018ae:	487e      	ldr	r0, [pc, #504]	; (8001aa8 <setProg_skimmer+0x648>)
 80018b0:	f7ff faf2 	bl	8000e98 <setTexto_pantalla>
					if (!progSkimmerAux){
 80018b4:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <setProg_skimmer+0x63c>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d103      	bne.n	80018c6 <setProg_skimmer+0x466>
						statusTiempoSkimmer = 10;
 80018be:	4b75      	ldr	r3, [pc, #468]	; (8001a94 <setProg_skimmer+0x634>)
 80018c0:	220a      	movs	r2, #10
 80018c2:	701a      	strb	r2, [r3, #0]
						break;
 80018c4:	e00d      	b.n	80018e2 <setProg_skimmer+0x482>
					}else if (progSkimmerAux < 10){
 80018c6:	4b75      	ldr	r3, [pc, #468]	; (8001a9c <setProg_skimmer+0x63c>)
 80018c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018cc:	2b09      	cmp	r3, #9
 80018ce:	dc03      	bgt.n	80018d8 <setProg_skimmer+0x478>
						statusTiempoSkimmer = 11;
 80018d0:	4b70      	ldr	r3, [pc, #448]	; (8001a94 <setProg_skimmer+0x634>)
 80018d2:	220b      	movs	r2, #11
 80018d4:	701a      	strb	r2, [r3, #0]
						break;
 80018d6:	e004      	b.n	80018e2 <setProg_skimmer+0x482>
					}else{
						statusTiempoSkimmer = 12;
 80018d8:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <setProg_skimmer+0x634>)
 80018da:	220c      	movs	r2, #12
 80018dc:	701a      	strb	r2, [r3, #0]
						break;
 80018de:	e000      	b.n	80018e2 <setProg_skimmer+0x482>
					} //end if !tiempoSkimmerAux

				default:
				break;
 80018e0:	bf00      	nop
			} //end switch cmd

		break;
 80018e2:	e3ce      	b.n	8002082 <setProg_skimmer+0xc22>
		case 0: //tiempo en 0.
			if (getStatBoton(IN_AST) == FALL) {
 80018e4:	200c      	movs	r0, #12
 80018e6:	f7fe fdf3 	bl	80004d0 <getStatBoton>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d104      	bne.n	80018fa <setProg_skimmer+0x49a>
				statusTiempoSkimmer = 99;
 80018f0:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <setProg_skimmer+0x634>)
 80018f2:	2263      	movs	r2, #99	; 0x63
 80018f4:	701a      	strb	r2, [r3, #0]
				return PROG_IDLE;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e3c4      	b.n	8002084 <setProg_skimmer+0xc24>
			}

			if (newNumber > 0) {
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f340 83b0 	ble.w	8002064 <setProg_skimmer+0xc04>
				tiempoSkimmerAux = newNumber;
 8001904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001908:	b21a      	sxth	r2, r3
 800190a:	4b69      	ldr	r3, [pc, #420]	; (8001ab0 <setProg_skimmer+0x650>)
 800190c:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoSkimmerAux);
 800190e:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <setProg_skimmer+0x650>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	461a      	mov	r2, r3
 8001916:	4967      	ldr	r1, [pc, #412]	; (8001ab4 <setProg_skimmer+0x654>)
 8001918:	4863      	ldr	r0, [pc, #396]	; (8001aa8 <setProg_skimmer+0x648>)
 800191a:	f005 ff27 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 800191e:	4862      	ldr	r0, [pc, #392]	; (8001aa8 <setProg_skimmer+0x648>)
 8001920:	f7ff faba 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 1;
 8001924:	4b5b      	ldr	r3, [pc, #364]	; (8001a94 <setProg_skimmer+0x634>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
			}
		break;
 800192a:	e39b      	b.n	8002064 <setProg_skimmer+0xc04>
		case 1: //lote entre 1 y 9.
			if (getStatBoton(IN_AST) == FALL) {
 800192c:	200c      	movs	r0, #12
 800192e:	f7fe fdcf 	bl	80004d0 <getStatBoton>
 8001932:	4603      	mov	r3, r0
 8001934:	2b02      	cmp	r3, #2
 8001936:	d111      	bne.n	800195c <setProg_skimmer+0x4fc>
				tiempoSkimmerAux = 0;
 8001938:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <setProg_skimmer+0x650>)
 800193a:	2200      	movs	r2, #0
 800193c:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoSkimmerAux);
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <setProg_skimmer+0x650>)
 8001940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001944:	461a      	mov	r2, r3
 8001946:	495b      	ldr	r1, [pc, #364]	; (8001ab4 <setProg_skimmer+0x654>)
 8001948:	4857      	ldr	r0, [pc, #348]	; (8001aa8 <setProg_skimmer+0x648>)
 800194a:	f005 ff0f 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 800194e:	4856      	ldr	r0, [pc, #344]	; (8001aa8 <setProg_skimmer+0x648>)
 8001950:	f7ff faa2 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 0;
 8001954:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <setProg_skimmer+0x634>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
				break;
 800195a:	e392      	b.n	8002082 <setProg_skimmer+0xc22>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 800195c:	200e      	movs	r0, #14
 800195e:	f7fe fdb7 	bl	80004d0 <getStatBoton>
 8001962:	4603      	mov	r3, r0
 8001964:	2b02      	cmp	r3, #2
 8001966:	d103      	bne.n	8001970 <setProg_skimmer+0x510>
				statusTiempoSkimmer = 3;
 8001968:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <setProg_skimmer+0x634>)
 800196a:	2203      	movs	r2, #3
 800196c:	701a      	strb	r2, [r3, #0]
				break;
 800196e:	e388      	b.n	8002082 <setProg_skimmer+0xc22>
			}

			if (newNumber != -1) {
 8001970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001978:	f000 8376 	beq.w	8002068 <setProg_skimmer+0xc08>
				tiempoSkimmerAux *= 10;
 800197c:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <setProg_skimmer+0x650>)
 800197e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4413      	add	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	b29b      	uxth	r3, r3
 800198e:	b21a      	sxth	r2, r3
 8001990:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <setProg_skimmer+0x650>)
 8001992:	801a      	strh	r2, [r3, #0]
				tiempoSkimmerAux += newNumber;
 8001994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b45      	ldr	r3, [pc, #276]	; (8001ab0 <setProg_skimmer+0x650>)
 800199c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <setProg_skimmer+0x650>)
 80019aa:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoSkimmerAux);
 80019ac:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <setProg_skimmer+0x650>)
 80019ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b2:	461a      	mov	r2, r3
 80019b4:	493f      	ldr	r1, [pc, #252]	; (8001ab4 <setProg_skimmer+0x654>)
 80019b6:	483c      	ldr	r0, [pc, #240]	; (8001aa8 <setProg_skimmer+0x648>)
 80019b8:	f005 fed8 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 80019bc:	483a      	ldr	r0, [pc, #232]	; (8001aa8 <setProg_skimmer+0x648>)
 80019be:	f7ff fa6b 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 2;
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <setProg_skimmer+0x634>)
 80019c4:	2202      	movs	r2, #2
 80019c6:	701a      	strb	r2, [r3, #0]
				break;
 80019c8:	e35b      	b.n	8002082 <setProg_skimmer+0xc22>
			}

		break;
		case 2: //lote en 10 o más...
			if (getStatBoton(IN_AST) == FALL) {
 80019ca:	200c      	movs	r0, #12
 80019cc:	f7fe fd80 	bl	80004d0 <getStatBoton>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d120      	bne.n	8001a18 <setProg_skimmer+0x5b8>
				tiempoSkimmerAux /= 10;
 80019d6:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <setProg_skimmer+0x650>)
 80019d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019dc:	4a36      	ldr	r2, [pc, #216]	; (8001ab8 <setProg_skimmer+0x658>)
 80019de:	fb82 1203 	smull	r1, r2, r2, r3
 80019e2:	1092      	asrs	r2, r2, #2
 80019e4:	17db      	asrs	r3, r3, #31
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <setProg_skimmer+0x650>)
 80019ec:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoSkimmerAux);
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <setProg_skimmer+0x650>)
 80019f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f4:	461a      	mov	r2, r3
 80019f6:	492f      	ldr	r1, [pc, #188]	; (8001ab4 <setProg_skimmer+0x654>)
 80019f8:	482b      	ldr	r0, [pc, #172]	; (8001aa8 <setProg_skimmer+0x648>)
 80019fa:	f005 feb7 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 80019fe:	482a      	ldr	r0, [pc, #168]	; (8001aa8 <setProg_skimmer+0x648>)
 8001a00:	f7ff fa4a 	bl	8000e98 <setTexto_pantalla>
				if (tiempoSkimmerAux < 10) {
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	f300 832e 	bgt.w	800206c <setProg_skimmer+0xc0c>
					statusTiempoSkimmer = 1;
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <setProg_skimmer+0x634>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001a16:	e329      	b.n	800206c <setProg_skimmer+0xc0c>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001a18:	200e      	movs	r0, #14
 8001a1a:	f7fe fd59 	bl	80004d0 <getStatBoton>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d103      	bne.n	8001a2c <setProg_skimmer+0x5cc>
				statusTiempoSkimmer = 3;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <setProg_skimmer+0x634>)
 8001a26:	2203      	movs	r2, #3
 8001a28:	701a      	strb	r2, [r3, #0]
				break;
 8001a2a:	e32a      	b.n	8002082 <setProg_skimmer+0xc22>
			}

			switch (cmd) {
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d002      	beq.n	8001a38 <setProg_skimmer+0x5d8>
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d042      	beq.n	8001abc <setProg_skimmer+0x65c>
							break;
						} //end if newNumber...
					} //end iftiempoSkimmerAux...
				break;
				default:
				break;
 8001a36:	e072      	b.n	8001b1e <setProg_skimmer+0x6be>
					if (tiempoSkimmerAux < 30) {
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	2b1d      	cmp	r3, #29
 8001a40:	dc6a      	bgt.n	8001b18 <setProg_skimmer+0x6b8>
						if (newNumber != -1) {
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a4a:	d065      	beq.n	8001b18 <setProg_skimmer+0x6b8>
							tiempoSkimmerAux *= 10;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a62:	801a      	strh	r2, [r3, #0]
							tiempoSkimmerAux += newNumber;
 8001a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a7a:	801a      	strh	r2, [r3, #0]
							sprintf(texto, "%d min.", tiempoSkimmerAux);
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <setProg_skimmer+0x650>)
 8001a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a82:	461a      	mov	r2, r3
 8001a84:	490b      	ldr	r1, [pc, #44]	; (8001ab4 <setProg_skimmer+0x654>)
 8001a86:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <setProg_skimmer+0x648>)
 8001a88:	f005 fe70 	bl	800776c <siprintf>
							setTexto_pantalla(texto);
 8001a8c:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <setProg_skimmer+0x648>)
 8001a8e:	f7ff fa03 	bl	8000e98 <setTexto_pantalla>
							break;
 8001a92:	e044      	b.n	8001b1e <setProg_skimmer+0x6be>
 8001a94:	20000007 	.word	0x20000007
 8001a98:	20000138 	.word	0x20000138
 8001a9c:	20000130 	.word	0x20000130
 8001aa0:	51eb851f 	.word	0x51eb851f
 8001aa4:	08008208 	.word	0x08008208
 8001aa8:	200005f4 	.word	0x200005f4
 8001aac:	2000013a 	.word	0x2000013a
 8001ab0:	2000012a 	.word	0x2000012a
 8001ab4:	08008200 	.word	0x08008200
 8001ab8:	66666667 	.word	0x66666667
					if (tiempoSkimmerAux < 15) {
 8001abc:	4bb8      	ldr	r3, [pc, #736]	; (8001da0 <setProg_skimmer+0x940>)
 8001abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac2:	2b0e      	cmp	r3, #14
 8001ac4:	dc2a      	bgt.n	8001b1c <setProg_skimmer+0x6bc>
						if (newNumber != -1) {
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ace:	d025      	beq.n	8001b1c <setProg_skimmer+0x6bc>
							tiempoSkimmerAux *= 10;
 8001ad0:	4bb3      	ldr	r3, [pc, #716]	; (8001da0 <setProg_skimmer+0x940>)
 8001ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4bae      	ldr	r3, [pc, #696]	; (8001da0 <setProg_skimmer+0x940>)
 8001ae6:	801a      	strh	r2, [r3, #0]
							tiempoSkimmerAux += newNumber;
 8001ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4bac      	ldr	r3, [pc, #688]	; (8001da0 <setProg_skimmer+0x940>)
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	4ba8      	ldr	r3, [pc, #672]	; (8001da0 <setProg_skimmer+0x940>)
 8001afe:	801a      	strh	r2, [r3, #0]
							sprintf(texto, "%d min.", tiempoSkimmerAux);
 8001b00:	4ba7      	ldr	r3, [pc, #668]	; (8001da0 <setProg_skimmer+0x940>)
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	461a      	mov	r2, r3
 8001b08:	49a6      	ldr	r1, [pc, #664]	; (8001da4 <setProg_skimmer+0x944>)
 8001b0a:	48a7      	ldr	r0, [pc, #668]	; (8001da8 <setProg_skimmer+0x948>)
 8001b0c:	f005 fe2e 	bl	800776c <siprintf>
							setTexto_pantalla(texto);
 8001b10:	48a5      	ldr	r0, [pc, #660]	; (8001da8 <setProg_skimmer+0x948>)
 8001b12:	f7ff f9c1 	bl	8000e98 <setTexto_pantalla>
							break;
 8001b16:	e002      	b.n	8001b1e <setProg_skimmer+0x6be>
				break;
 8001b18:	bf00      	nop
 8001b1a:	e2b2      	b.n	8002082 <setProg_skimmer+0xc22>
				break;
 8001b1c:	bf00      	nop
			} //end switch cmd

		break;
 8001b1e:	e2b0      	b.n	8002082 <setProg_skimmer+0xc22>
		case 3: //retorna y graba el valor

			switch (cmd) {
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d002      	beq.n	8001b2c <setProg_skimmer+0x6cc>
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d006      	beq.n	8001b38 <setProg_skimmer+0x6d8>
					tiempoSkimmer_ON = tiempoSkimmerAux;
				break;
				case PROG_SET2:
					tiempoSkimmer_OFF = tiempoSkimmerAux;
				default:
				break;
 8001b2a:	e00a      	b.n	8001b42 <setProg_skimmer+0x6e2>
					tiempoSkimmer_ON = tiempoSkimmerAux;
 8001b2c:	4b9c      	ldr	r3, [pc, #624]	; (8001da0 <setProg_skimmer+0x940>)
 8001b2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b32:	4b9e      	ldr	r3, [pc, #632]	; (8001dac <setProg_skimmer+0x94c>)
 8001b34:	801a      	strh	r2, [r3, #0]
				break;
 8001b36:	e005      	b.n	8001b44 <setProg_skimmer+0x6e4>
					tiempoSkimmer_OFF = tiempoSkimmerAux;
 8001b38:	4b99      	ldr	r3, [pc, #612]	; (8001da0 <setProg_skimmer+0x940>)
 8001b3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b3e:	4b9c      	ldr	r3, [pc, #624]	; (8001db0 <setProg_skimmer+0x950>)
 8001b40:	801a      	strh	r2, [r3, #0]
				break;
 8001b42:	bf00      	nop
			} //end switch cmd

			statusTiempoSkimmer = 99;
 8001b44:	4b9b      	ldr	r3, [pc, #620]	; (8001db4 <setProg_skimmer+0x954>)
 8001b46:	2263      	movs	r2, #99	; 0x63
 8001b48:	701a      	strb	r2, [r3, #0]
			return PROG_FINISHED;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e29a      	b.n	8002084 <setProg_skimmer+0xc24>

		break;
		case 10: //hora en 0.
			if (getStatBoton(IN_AST) == FALL) {
 8001b4e:	200c      	movs	r0, #12
 8001b50:	f7fe fcbe 	bl	80004d0 <getStatBoton>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d104      	bne.n	8001b64 <setProg_skimmer+0x704>
				statusTiempoSkimmer = 99;
 8001b5a:	4b96      	ldr	r3, [pc, #600]	; (8001db4 <setProg_skimmer+0x954>)
 8001b5c:	2263      	movs	r2, #99	; 0x63
 8001b5e:	701a      	strb	r2, [r3, #0]
				return PROG_IDLE;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e28f      	b.n	8002084 <setProg_skimmer+0xc24>
			}

			if (newNumber > 0) {
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f340 8281 	ble.w	8002070 <setProg_skimmer+0xc10>
				progSkimmerAux = newNumber * 100;
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	0091      	lsls	r1, r2, #2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	b21a      	sxth	r2, r3
 8001b8a:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <setProg_skimmer+0x958>)
 8001b8c:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001b8e:	4b8a      	ldr	r3, [pc, #552]	; (8001db8 <setProg_skimmer+0x958>)
 8001b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b94:	4a89      	ldr	r2, [pc, #548]	; (8001dbc <setProg_skimmer+0x95c>)
 8001b96:	fb82 1203 	smull	r1, r2, r2, r3
 8001b9a:	1152      	asrs	r2, r2, #5
 8001b9c:	17db      	asrs	r3, r3, #31
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4b84      	ldr	r3, [pc, #528]	; (8001db8 <setProg_skimmer+0x958>)
 8001ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001baa:	4a84      	ldr	r2, [pc, #528]	; (8001dbc <setProg_skimmer+0x95c>)
 8001bac:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb0:	1151      	asrs	r1, r2, #5
 8001bb2:	17da      	asrs	r2, r3, #31
 8001bb4:	1a8a      	subs	r2, r1, r2
 8001bb6:	2164      	movs	r1, #100	; 0x64
 8001bb8:	fb01 f202 	mul.w	r2, r1, r2
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	497f      	ldr	r1, [pc, #508]	; (8001dc0 <setProg_skimmer+0x960>)
 8001bc4:	4878      	ldr	r0, [pc, #480]	; (8001da8 <setProg_skimmer+0x948>)
 8001bc6:	f005 fdd1 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8001bca:	4877      	ldr	r0, [pc, #476]	; (8001da8 <setProg_skimmer+0x948>)
 8001bcc:	f7ff f964 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 11;
 8001bd0:	4b78      	ldr	r3, [pc, #480]	; (8001db4 <setProg_skimmer+0x954>)
 8001bd2:	220b      	movs	r2, #11
 8001bd4:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001bd6:	e24b      	b.n	8002070 <setProg_skimmer+0xc10>
		case 11: //hora entre 1 y 9.
			if (getStatBoton(IN_AST) == FALL) {
 8001bd8:	200c      	movs	r0, #12
 8001bda:	f7fe fc79 	bl	80004d0 <getStatBoton>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d127      	bne.n	8001c34 <setProg_skimmer+0x7d4>
				progSkimmerAux = 10;
 8001be4:	4b74      	ldr	r3, [pc, #464]	; (8001db8 <setProg_skimmer+0x958>)
 8001be6:	220a      	movs	r2, #10
 8001be8:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001bea:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <setProg_skimmer+0x958>)
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf0:	4a72      	ldr	r2, [pc, #456]	; (8001dbc <setProg_skimmer+0x95c>)
 8001bf2:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf6:	1152      	asrs	r2, r2, #5
 8001bf8:	17db      	asrs	r3, r3, #31
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <setProg_skimmer+0x958>)
 8001c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c06:	4a6d      	ldr	r2, [pc, #436]	; (8001dbc <setProg_skimmer+0x95c>)
 8001c08:	fb82 1203 	smull	r1, r2, r2, r3
 8001c0c:	1151      	asrs	r1, r2, #5
 8001c0e:	17da      	asrs	r2, r3, #31
 8001c10:	1a8a      	subs	r2, r1, r2
 8001c12:	2164      	movs	r1, #100	; 0x64
 8001c14:	fb01 f202 	mul.w	r2, r1, r2
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4968      	ldr	r1, [pc, #416]	; (8001dc0 <setProg_skimmer+0x960>)
 8001c20:	4861      	ldr	r0, [pc, #388]	; (8001da8 <setProg_skimmer+0x948>)
 8001c22:	f005 fda3 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8001c26:	4860      	ldr	r0, [pc, #384]	; (8001da8 <setProg_skimmer+0x948>)
 8001c28:	f7ff f936 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 10;
 8001c2c:	4b61      	ldr	r3, [pc, #388]	; (8001db4 <setProg_skimmer+0x954>)
 8001c2e:	220a      	movs	r2, #10
 8001c30:	701a      	strb	r2, [r3, #0]
				break;
 8001c32:	e226      	b.n	8002082 <setProg_skimmer+0xc22>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001c34:	200e      	movs	r0, #14
 8001c36:	f7fe fc4b 	bl	80004d0 <getStatBoton>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d103      	bne.n	8001c48 <setProg_skimmer+0x7e8>
				statusTiempoSkimmer = 33;
 8001c40:	4b5c      	ldr	r3, [pc, #368]	; (8001db4 <setProg_skimmer+0x954>)
 8001c42:	2221      	movs	r2, #33	; 0x21
 8001c44:	701a      	strb	r2, [r3, #0]
				break;
 8001c46:	e21c      	b.n	8002082 <setProg_skimmer+0xc22>
			}

			if (newNumber != -1) {
 8001c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c50:	f000 8210 	beq.w	8002074 <setProg_skimmer+0xc14>
				progSkimmerAux *= 10;
 8001c54:	4b58      	ldr	r3, [pc, #352]	; (8001db8 <setProg_skimmer+0x958>)
 8001c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	b21a      	sxth	r2, r3
 8001c68:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <setProg_skimmer+0x958>)
 8001c6a:	801a      	strh	r2, [r3, #0]
				progSkimmerAux += (newNumber * 100);
 8001c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	0092      	lsls	r2, r2, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	0091      	lsls	r1, r2, #2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <setProg_skimmer+0x958>)
 8001c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <setProg_skimmer+0x958>)
 8001c96:	801a      	strh	r2, [r3, #0]
				if (progSkimmerAux > 2300)  progSkimmerAux = 2300;
 8001c98:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <setProg_skimmer+0x958>)
 8001c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	dd03      	ble.n	8001cae <setProg_skimmer+0x84e>
 8001ca6:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <setProg_skimmer+0x958>)
 8001ca8:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001cac:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001cae:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <setProg_skimmer+0x958>)
 8001cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb4:	4a41      	ldr	r2, [pc, #260]	; (8001dbc <setProg_skimmer+0x95c>)
 8001cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cba:	1152      	asrs	r2, r2, #5
 8001cbc:	17db      	asrs	r3, r3, #31
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	4b3c      	ldr	r3, [pc, #240]	; (8001db8 <setProg_skimmer+0x958>)
 8001cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cca:	4a3c      	ldr	r2, [pc, #240]	; (8001dbc <setProg_skimmer+0x95c>)
 8001ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd0:	1151      	asrs	r1, r2, #5
 8001cd2:	17da      	asrs	r2, r3, #31
 8001cd4:	1a8a      	subs	r2, r1, r2
 8001cd6:	2164      	movs	r1, #100	; 0x64
 8001cd8:	fb01 f202 	mul.w	r2, r1, r2
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4937      	ldr	r1, [pc, #220]	; (8001dc0 <setProg_skimmer+0x960>)
 8001ce4:	4830      	ldr	r0, [pc, #192]	; (8001da8 <setProg_skimmer+0x948>)
 8001ce6:	f005 fd41 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8001cea:	482f      	ldr	r0, [pc, #188]	; (8001da8 <setProg_skimmer+0x948>)
 8001cec:	f7ff f8d4 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 12;
 8001cf0:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <setProg_skimmer+0x954>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	701a      	strb	r2, [r3, #0]
				break;
 8001cf6:	e1c4      	b.n	8002082 <setProg_skimmer+0xc22>
			}

		break;
		case 12: //hora en 10 o más... lo sguiente son minutos
			if (getStatBoton(IN_AST) == FALL) {
 8001cf8:	200c      	movs	r0, #12
 8001cfa:	f7fe fbe9 	bl	80004d0 <getStatBoton>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d143      	bne.n	8001d8c <setProg_skimmer+0x92c>
				progSkimmerAux = (progSkimmerAux / 1000) * 100;
 8001d04:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <setProg_skimmer+0x958>)
 8001d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0a:	4a2e      	ldr	r2, [pc, #184]	; (8001dc4 <setProg_skimmer+0x964>)
 8001d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d10:	1192      	asrs	r2, r2, #6
 8001d12:	17db      	asrs	r3, r3, #31
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	0092      	lsls	r2, r2, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	0091      	lsls	r1, r2, #2
 8001d24:	461a      	mov	r2, r3
 8001d26:	460b      	mov	r3, r1
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <setProg_skimmer+0x958>)
 8001d32:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <setProg_skimmer+0x958>)
 8001d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3a:	4a20      	ldr	r2, [pc, #128]	; (8001dbc <setProg_skimmer+0x95c>)
 8001d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d40:	1152      	asrs	r2, r2, #5
 8001d42:	17db      	asrs	r3, r3, #31
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <setProg_skimmer+0x958>)
 8001d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d50:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <setProg_skimmer+0x95c>)
 8001d52:	fb82 1203 	smull	r1, r2, r2, r3
 8001d56:	1151      	asrs	r1, r2, #5
 8001d58:	17da      	asrs	r2, r3, #31
 8001d5a:	1a8a      	subs	r2, r1, r2
 8001d5c:	2164      	movs	r1, #100	; 0x64
 8001d5e:	fb01 f202 	mul.w	r2, r1, r2
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4602      	mov	r2, r0
 8001d68:	4915      	ldr	r1, [pc, #84]	; (8001dc0 <setProg_skimmer+0x960>)
 8001d6a:	480f      	ldr	r0, [pc, #60]	; (8001da8 <setProg_skimmer+0x948>)
 8001d6c:	f005 fcfe 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <setProg_skimmer+0x948>)
 8001d72:	f7ff f891 	bl	8000e98 <setTexto_pantalla>
				if (progSkimmerAux < 1000) {
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <setProg_skimmer+0x958>)
 8001d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d80:	f280 817a 	bge.w	8002078 <setProg_skimmer+0xc18>
					statusTiempoSkimmer = 11;
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <setProg_skimmer+0x954>)
 8001d86:	220b      	movs	r2, #11
 8001d88:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001d8a:	e175      	b.n	8002078 <setProg_skimmer+0xc18>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001d8c:	200e      	movs	r0, #14
 8001d8e:	f7fe fb9f 	bl	80004d0 <getStatBoton>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d117      	bne.n	8001dc8 <setProg_skimmer+0x968>
				statusTiempoSkimmer = 33;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <setProg_skimmer+0x954>)
 8001d9a:	2221      	movs	r2, #33	; 0x21
 8001d9c:	701a      	strb	r2, [r3, #0]
				break;
 8001d9e:	e170      	b.n	8002082 <setProg_skimmer+0xc22>
 8001da0:	2000012a 	.word	0x2000012a
 8001da4:	08008200 	.word	0x08008200
 8001da8:	200005f4 	.word	0x200005f4
 8001dac:	2000012c 	.word	0x2000012c
 8001db0:	2000012e 	.word	0x2000012e
 8001db4:	20000007 	.word	0x20000007
 8001db8:	20000130 	.word	0x20000130
 8001dbc:	51eb851f 	.word	0x51eb851f
 8001dc0:	08008208 	.word	0x08008208
 8001dc4:	10624dd3 	.word	0x10624dd3
			}

			if (newNumber != -1) {
 8001dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dd0:	d02d      	beq.n	8001e2e <setProg_skimmer+0x9ce>
				progSkimmerAux += 10;
 8001dd2:	4bae      	ldr	r3, [pc, #696]	; (800208c <setProg_skimmer+0xc2c>)
 8001dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	330a      	adds	r3, #10
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	4baa      	ldr	r3, [pc, #680]	; (800208c <setProg_skimmer+0xc2c>)
 8001de2:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001de4:	4ba9      	ldr	r3, [pc, #676]	; (800208c <setProg_skimmer+0xc2c>)
 8001de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dea:	4aa9      	ldr	r2, [pc, #676]	; (8002090 <setProg_skimmer+0xc30>)
 8001dec:	fb82 1203 	smull	r1, r2, r2, r3
 8001df0:	1152      	asrs	r2, r2, #5
 8001df2:	17db      	asrs	r3, r3, #31
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	4ba4      	ldr	r3, [pc, #656]	; (800208c <setProg_skimmer+0xc2c>)
 8001dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e00:	4aa3      	ldr	r2, [pc, #652]	; (8002090 <setProg_skimmer+0xc30>)
 8001e02:	fb82 1203 	smull	r1, r2, r2, r3
 8001e06:	1151      	asrs	r1, r2, #5
 8001e08:	17da      	asrs	r2, r3, #31
 8001e0a:	1a8a      	subs	r2, r1, r2
 8001e0c:	2164      	movs	r1, #100	; 0x64
 8001e0e:	fb01 f202 	mul.w	r2, r1, r2
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	4602      	mov	r2, r0
 8001e18:	499e      	ldr	r1, [pc, #632]	; (8002094 <setProg_skimmer+0xc34>)
 8001e1a:	489f      	ldr	r0, [pc, #636]	; (8002098 <setProg_skimmer+0xc38>)
 8001e1c:	f005 fca6 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8001e20:	489d      	ldr	r0, [pc, #628]	; (8002098 <setProg_skimmer+0xc38>)
 8001e22:	f7ff f839 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 13;
 8001e26:	4b9d      	ldr	r3, [pc, #628]	; (800209c <setProg_skimmer+0xc3c>)
 8001e28:	220d      	movs	r2, #13
 8001e2a:	701a      	strb	r2, [r3, #0]
				break;
 8001e2c:	e129      	b.n	8002082 <setProg_skimmer+0xc22>
			}

		case 13: //minutos entre 1 y 9
			if (getStatBoton(IN_AST) == FALL) {
 8001e2e:	200c      	movs	r0, #12
 8001e30:	f7fe fb4e 	bl	80004d0 <getStatBoton>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d143      	bne.n	8001ec2 <setProg_skimmer+0xa62>
				progSkimmerAux = (progSkimmerAux / 100) * 100;
 8001e3a:	4b94      	ldr	r3, [pc, #592]	; (800208c <setProg_skimmer+0xc2c>)
 8001e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e40:	4a93      	ldr	r2, [pc, #588]	; (8002090 <setProg_skimmer+0xc30>)
 8001e42:	fb82 1203 	smull	r1, r2, r2, r3
 8001e46:	1152      	asrs	r2, r2, #5
 8001e48:	17db      	asrs	r3, r3, #31
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	461a      	mov	r2, r3
 8001e58:	0091      	lsls	r1, r2, #2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	b21a      	sxth	r2, r3
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <setProg_skimmer+0xc2c>)
 8001e68:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001e6a:	4b88      	ldr	r3, [pc, #544]	; (800208c <setProg_skimmer+0xc2c>)
 8001e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e70:	4a87      	ldr	r2, [pc, #540]	; (8002090 <setProg_skimmer+0xc30>)
 8001e72:	fb82 1203 	smull	r1, r2, r2, r3
 8001e76:	1152      	asrs	r2, r2, #5
 8001e78:	17db      	asrs	r3, r3, #31
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	4b82      	ldr	r3, [pc, #520]	; (800208c <setProg_skimmer+0xc2c>)
 8001e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e86:	4a82      	ldr	r2, [pc, #520]	; (8002090 <setProg_skimmer+0xc30>)
 8001e88:	fb82 1203 	smull	r1, r2, r2, r3
 8001e8c:	1151      	asrs	r1, r2, #5
 8001e8e:	17da      	asrs	r2, r3, #31
 8001e90:	1a8a      	subs	r2, r1, r2
 8001e92:	2164      	movs	r1, #100	; 0x64
 8001e94:	fb01 f202 	mul.w	r2, r1, r2
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	497d      	ldr	r1, [pc, #500]	; (8002094 <setProg_skimmer+0xc34>)
 8001ea0:	487d      	ldr	r0, [pc, #500]	; (8002098 <setProg_skimmer+0xc38>)
 8001ea2:	f005 fc63 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8001ea6:	487c      	ldr	r0, [pc, #496]	; (8002098 <setProg_skimmer+0xc38>)
 8001ea8:	f7fe fff6 	bl	8000e98 <setTexto_pantalla>
				if (progSkimmerAux < 1000) {
 8001eac:	4b77      	ldr	r3, [pc, #476]	; (800208c <setProg_skimmer+0xc2c>)
 8001eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eb6:	f280 80e1 	bge.w	800207c <setProg_skimmer+0xc1c>
					statusTiempoSkimmer = 11;
 8001eba:	4b78      	ldr	r3, [pc, #480]	; (800209c <setProg_skimmer+0xc3c>)
 8001ebc:	220b      	movs	r2, #11
 8001ebe:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001ec0:	e0dc      	b.n	800207c <setProg_skimmer+0xc1c>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001ec2:	200e      	movs	r0, #14
 8001ec4:	f7fe fb04 	bl	80004d0 <getStatBoton>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d103      	bne.n	8001ed6 <setProg_skimmer+0xa76>
				statusTiempoSkimmer = 33;
 8001ece:	4b73      	ldr	r3, [pc, #460]	; (800209c <setProg_skimmer+0xc3c>)
 8001ed0:	2221      	movs	r2, #33	; 0x21
 8001ed2:	701a      	strb	r2, [r3, #0]
				break;
 8001ed4:	e0d5      	b.n	8002082 <setProg_skimmer+0xc22>
			}

			if (newNumber != -1) {
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ede:	d03c      	beq.n	8001f5a <setProg_skimmer+0xafa>
				progSkimmerAux2 = newNumber * 10;
 8001ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	4b6b      	ldr	r3, [pc, #428]	; (80020a0 <setProg_skimmer+0xc40>)
 8001ef4:	801a      	strh	r2, [r3, #0]
				progSkimmerAux += progSkimmerAux2;
 8001ef6:	4b65      	ldr	r3, [pc, #404]	; (800208c <setProg_skimmer+0xc2c>)
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <setProg_skimmer+0xc40>)
 8001f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	4b5f      	ldr	r3, [pc, #380]	; (800208c <setProg_skimmer+0xc2c>)
 8001f0e:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001f10:	4b5e      	ldr	r3, [pc, #376]	; (800208c <setProg_skimmer+0xc2c>)
 8001f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f16:	4a5e      	ldr	r2, [pc, #376]	; (8002090 <setProg_skimmer+0xc30>)
 8001f18:	fb82 1203 	smull	r1, r2, r2, r3
 8001f1c:	1152      	asrs	r2, r2, #5
 8001f1e:	17db      	asrs	r3, r3, #31
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	4b59      	ldr	r3, [pc, #356]	; (800208c <setProg_skimmer+0xc2c>)
 8001f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2c:	4a58      	ldr	r2, [pc, #352]	; (8002090 <setProg_skimmer+0xc30>)
 8001f2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f32:	1151      	asrs	r1, r2, #5
 8001f34:	17da      	asrs	r2, r3, #31
 8001f36:	1a8a      	subs	r2, r1, r2
 8001f38:	2164      	movs	r1, #100	; 0x64
 8001f3a:	fb01 f202 	mul.w	r2, r1, r2
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	4602      	mov	r2, r0
 8001f44:	4953      	ldr	r1, [pc, #332]	; (8002094 <setProg_skimmer+0xc34>)
 8001f46:	4854      	ldr	r0, [pc, #336]	; (8002098 <setProg_skimmer+0xc38>)
 8001f48:	f005 fc10 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8001f4c:	4852      	ldr	r0, [pc, #328]	; (8002098 <setProg_skimmer+0xc38>)
 8001f4e:	f7fe ffa3 	bl	8000e98 <setTexto_pantalla>
				statusTiempoSkimmer = 14;
 8001f52:	4b52      	ldr	r3, [pc, #328]	; (800209c <setProg_skimmer+0xc3c>)
 8001f54:	220e      	movs	r2, #14
 8001f56:	701a      	strb	r2, [r3, #0]
				break;
 8001f58:	e093      	b.n	8002082 <setProg_skimmer+0xc22>
			}

		case 14: //minutos completos
			if (getStatBoton(IN_AST) == FALL) {
 8001f5a:	200c      	movs	r0, #12
 8001f5c:	f7fe fab8 	bl	80004d0 <getStatBoton>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d145      	bne.n	8001ff2 <setProg_skimmer+0xb92>
				progSkimmerAux -= progSkimmerAux2;
 8001f66:	4b49      	ldr	r3, [pc, #292]	; (800208c <setProg_skimmer+0xc2c>)
 8001f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	4b4c      	ldr	r3, [pc, #304]	; (80020a0 <setProg_skimmer+0xc40>)
 8001f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	4b43      	ldr	r3, [pc, #268]	; (800208c <setProg_skimmer+0xc2c>)
 8001f7e:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "   %02d:%02d", progSkimmerAux / 100, progSkimmerAux % 100);
 8001f80:	4b42      	ldr	r3, [pc, #264]	; (800208c <setProg_skimmer+0xc2c>)
 8001f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f86:	4a42      	ldr	r2, [pc, #264]	; (8002090 <setProg_skimmer+0xc30>)
 8001f88:	fb82 1203 	smull	r1, r2, r2, r3
 8001f8c:	1152      	asrs	r2, r2, #5
 8001f8e:	17db      	asrs	r3, r3, #31
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <setProg_skimmer+0xc2c>)
 8001f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9c:	4a3c      	ldr	r2, [pc, #240]	; (8002090 <setProg_skimmer+0xc30>)
 8001f9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001fa2:	1151      	asrs	r1, r2, #5
 8001fa4:	17da      	asrs	r2, r3, #31
 8001fa6:	1a8a      	subs	r2, r1, r2
 8001fa8:	2164      	movs	r1, #100	; 0x64
 8001faa:	fb01 f202 	mul.w	r2, r1, r2
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	4937      	ldr	r1, [pc, #220]	; (8002094 <setProg_skimmer+0xc34>)
 8001fb6:	4838      	ldr	r0, [pc, #224]	; (8002098 <setProg_skimmer+0xc38>)
 8001fb8:	f005 fbd8 	bl	800776c <siprintf>
				setTexto_pantalla(texto);
 8001fbc:	4836      	ldr	r0, [pc, #216]	; (8002098 <setProg_skimmer+0xc38>)
 8001fbe:	f7fe ff6b 	bl	8000e98 <setTexto_pantalla>
				if (!(progSkimmerAux % 100)) {
 8001fc2:	4b32      	ldr	r3, [pc, #200]	; (800208c <setProg_skimmer+0xc2c>)
 8001fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc8:	4a31      	ldr	r2, [pc, #196]	; (8002090 <setProg_skimmer+0xc30>)
 8001fca:	fb82 1203 	smull	r1, r2, r2, r3
 8001fce:	1151      	asrs	r1, r2, #5
 8001fd0:	17da      	asrs	r2, r3, #31
 8001fd2:	1a8a      	subs	r2, r1, r2
 8001fd4:	2164      	movs	r1, #100	; 0x64
 8001fd6:	fb01 f202 	mul.w	r2, r1, r2
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <setProg_skimmer+0xb8a>
					statusTiempoSkimmer = 12;
 8001fe2:	4b2e      	ldr	r3, [pc, #184]	; (800209c <setProg_skimmer+0xc3c>)
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	701a      	strb	r2, [r3, #0]
				}else{
					statusTiempoSkimmer = 13;
				}
				break;
 8001fe8:	e04b      	b.n	8002082 <setProg_skimmer+0xc22>
					statusTiempoSkimmer = 13;
 8001fea:	4b2c      	ldr	r3, [pc, #176]	; (800209c <setProg_skimmer+0xc3c>)
 8001fec:	220d      	movs	r2, #13
 8001fee:	701a      	strb	r2, [r3, #0]
				break;
 8001ff0:	e047      	b.n	8002082 <setProg_skimmer+0xc22>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001ff2:	200e      	movs	r0, #14
 8001ff4:	f7fe fa6c 	bl	80004d0 <getStatBoton>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d140      	bne.n	8002080 <setProg_skimmer+0xc20>
				statusTiempoSkimmer = 33;
 8001ffe:	4b27      	ldr	r3, [pc, #156]	; (800209c <setProg_skimmer+0xc3c>)
 8002000:	2221      	movs	r2, #33	; 0x21
 8002002:	701a      	strb	r2, [r3, #0]
				break;
 8002004:	e03d      	b.n	8002082 <setProg_skimmer+0xc22>
			}
		break;
		case 33: //retorna y graba el valor

			switch (cmd) {
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	3b06      	subs	r3, #6
 800200a:	2b03      	cmp	r3, #3
 800200c:	d822      	bhi.n	8002054 <setProg_skimmer+0xbf4>
 800200e:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <setProg_skimmer+0xbb4>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	08002025 	.word	0x08002025
 8002018:	08002031 	.word	0x08002031
 800201c:	0800203d 	.word	0x0800203d
 8002020:	08002049 	.word	0x08002049
				case PROG_SET3:
					prog1_Skimmer_ON = progSkimmerAux;
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <setProg_skimmer+0xc2c>)
 8002026:	f9b3 2000 	ldrsh.w	r2, [r3]
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <setProg_skimmer+0xc44>)
 800202c:	801a      	strh	r2, [r3, #0]
				break;
 800202e:	e012      	b.n	8002056 <setProg_skimmer+0xbf6>
				case PROG_SET4:
					prog1_Skimmer_OFF = progSkimmerAux;
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <setProg_skimmer+0xc2c>)
 8002032:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <setProg_skimmer+0xc48>)
 8002038:	801a      	strh	r2, [r3, #0]
				break;
 800203a:	e00c      	b.n	8002056 <setProg_skimmer+0xbf6>
				case PROG_SET5:
					prog2_Skimmer_ON = progSkimmerAux;
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <setProg_skimmer+0xc2c>)
 800203e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <setProg_skimmer+0xc4c>)
 8002044:	801a      	strh	r2, [r3, #0]
				break;
 8002046:	e006      	b.n	8002056 <setProg_skimmer+0xbf6>
				case PROG_SET6:
					prog2_Skimmer_OFF = progSkimmerAux;
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <setProg_skimmer+0xc2c>)
 800204a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <setProg_skimmer+0xc50>)
 8002050:	801a      	strh	r2, [r3, #0]
				break;
 8002052:	e000      	b.n	8002056 <setProg_skimmer+0xbf6>
				default:
				break;
 8002054:	bf00      	nop
			} //end switch cmd

			statusTiempoSkimmer = 99;
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <setProg_skimmer+0xc3c>)
 8002058:	2263      	movs	r2, #99	; 0x63
 800205a:	701a      	strb	r2, [r3, #0]
			return PROG_FINISHED;
 800205c:	2303      	movs	r3, #3
 800205e:	e011      	b.n	8002084 <setProg_skimmer+0xc24>

		break;
		default:
			return PROG_ERROR;
 8002060:	2300      	movs	r3, #0
 8002062:	e00f      	b.n	8002084 <setProg_skimmer+0xc24>
		break;
 8002064:	bf00      	nop
 8002066:	e00c      	b.n	8002082 <setProg_skimmer+0xc22>
		break;
 8002068:	bf00      	nop
 800206a:	e00a      	b.n	8002082 <setProg_skimmer+0xc22>
				break;
 800206c:	bf00      	nop
 800206e:	e008      	b.n	8002082 <setProg_skimmer+0xc22>
		break;
 8002070:	bf00      	nop
 8002072:	e006      	b.n	8002082 <setProg_skimmer+0xc22>
		break;
 8002074:	bf00      	nop
 8002076:	e004      	b.n	8002082 <setProg_skimmer+0xc22>
				break;
 8002078:	bf00      	nop
 800207a:	e002      	b.n	8002082 <setProg_skimmer+0xc22>
				break;
 800207c:	bf00      	nop
 800207e:	e000      	b.n	8002082 <setProg_skimmer+0xc22>
		break;
 8002080:	bf00      	nop
		break;
	} //end switch statusTiempoLlenado.

	return PROG_BUSY;
 8002082:	2302      	movs	r3, #2

} //end setProg_skimmer()
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000130 	.word	0x20000130
 8002090:	51eb851f 	.word	0x51eb851f
 8002094:	08008208 	.word	0x08008208
 8002098:	200005f4 	.word	0x200005f4
 800209c:	20000007 	.word	0x20000007
 80020a0:	20000132 	.word	0x20000132
 80020a4:	20000134 	.word	0x20000134
 80020a8:	20000136 	.word	0x20000136
 80020ac:	20000138 	.word	0x20000138
 80020b0:	2000013a 	.word	0x2000013a

080020b4 <setProg_luz>:


T_PROG_OUTPUT setProg_luz (T_PROG_CMD cmd){
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
	__NOP();
 80020be:	bf00      	nop
} //end setProg_luz()
 80020c0:	bf00      	nop
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <runProg_hidro>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

T_PROG_OUTPUT runProg_hidro (T_PROG_CMD cmd){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]

	switch (cmd) {
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d005      	beq.n	80020e8 <runProg_hidro+0x1c>
 80020dc:	2b03      	cmp	r3, #3
 80020de:	f000 80c1 	beq.w	8002264 <runProg_hidro+0x198>
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d051      	beq.n	800218a <runProg_hidro+0xbe>
//			return PROG_FINISHED;
			status_progHidro = PROG_IDLE;
		break;

		default:
		break;
 80020e6:	e0cc      	b.n	8002282 <runProg_hidro+0x1b6>
			setOutput(OUT_rele_jet, 1); //logica positiva
 80020e8:	2101      	movs	r1, #1
 80020ea:	200c      	movs	r0, #12
 80020ec:	f7fe fa80 	bl	80005f0 <setOutput>
			set_led(OUT_led_jet, TITILA_LENTO);
 80020f0:	2102      	movs	r1, #2
 80020f2:	2002      	movs	r0, #2
 80020f4:	f000 fcd2 	bl	8002a9c <set_led>
			fecha_hidro = get_fecha();
 80020f8:	f000 fbf2 	bl	80028e0 <get_fecha>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b64      	ldr	r3, [pc, #400]	; (8002290 <runProg_hidro+0x1c4>)
 8002100:	4611      	mov	r1, r2
 8002102:	7019      	strb	r1, [r3, #0]
 8002104:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002108:	7059      	strb	r1, [r3, #1]
 800210a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800210e:	7099      	strb	r1, [r3, #2]
 8002110:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8002114:	70da      	strb	r2, [r3, #3]
			hora_hidro = get_hora();
 8002116:	f000 fbc9 	bl	80028ac <get_hora>
 800211a:	4602      	mov	r2, r0
 800211c:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <runProg_hidro+0x1c8>)
 800211e:	4611      	mov	r1, r2
 8002120:	7019      	strb	r1, [r3, #0]
 8002122:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002126:	7059      	strb	r1, [r3, #1]
 8002128:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800212c:	709a      	strb	r2, [r3, #2]
			hora_hidro.Minutes += tiempoHidro;
 800212e:	4b59      	ldr	r3, [pc, #356]	; (8002294 <runProg_hidro+0x1c8>)
 8002130:	785a      	ldrb	r2, [r3, #1]
 8002132:	4b59      	ldr	r3, [pc, #356]	; (8002298 <runProg_hidro+0x1cc>)
 8002134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4413      	add	r3, r2
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4b55      	ldr	r3, [pc, #340]	; (8002294 <runProg_hidro+0x1c8>)
 8002140:	705a      	strb	r2, [r3, #1]
			if (hora_hidro.Minutes > 59){
 8002142:	4b54      	ldr	r3, [pc, #336]	; (8002294 <runProg_hidro+0x1c8>)
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	2b3b      	cmp	r3, #59	; 0x3b
 8002148:	d91b      	bls.n	8002182 <runProg_hidro+0xb6>
				hora_hidro.Minutes -= 59;
 800214a:	4b52      	ldr	r3, [pc, #328]	; (8002294 <runProg_hidro+0x1c8>)
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	3b3b      	subs	r3, #59	; 0x3b
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b50      	ldr	r3, [pc, #320]	; (8002294 <runProg_hidro+0x1c8>)
 8002154:	705a      	strb	r2, [r3, #1]
				hora_hidro.Hours++;
 8002156:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <runProg_hidro+0x1c8>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <runProg_hidro+0x1c8>)
 8002160:	701a      	strb	r2, [r3, #0]
				if (hora_hidro.Hours > 23){
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <runProg_hidro+0x1c8>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b17      	cmp	r3, #23
 8002168:	d90b      	bls.n	8002182 <runProg_hidro+0xb6>
					hora_hidro.Hours -= 23;
 800216a:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <runProg_hidro+0x1c8>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	3b17      	subs	r3, #23
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b48      	ldr	r3, [pc, #288]	; (8002294 <runProg_hidro+0x1c8>)
 8002174:	701a      	strb	r2, [r3, #0]
					fecha_hidro.Date++;
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <runProg_hidro+0x1c4>)
 8002178:	789b      	ldrb	r3, [r3, #2]
 800217a:	3301      	adds	r3, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b44      	ldr	r3, [pc, #272]	; (8002290 <runProg_hidro+0x1c4>)
 8002180:	709a      	strb	r2, [r3, #2]
			status_progHidro = PROG_BUSY;
 8002182:	4b46      	ldr	r3, [pc, #280]	; (800229c <runProg_hidro+0x1d0>)
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
		break;
 8002188:	e07b      	b.n	8002282 <runProg_hidro+0x1b6>
			if (status_progHidro == PROG_IDLE){
 800218a:	4b44      	ldr	r3, [pc, #272]	; (800229c <runProg_hidro+0x1d0>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d074      	beq.n	800227c <runProg_hidro+0x1b0>
			auxFecha = get_fecha();
 8002192:	f000 fba5 	bl	80028e0 <get_fecha>
 8002196:	4602      	mov	r2, r0
 8002198:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <runProg_hidro+0x1d4>)
 800219a:	4611      	mov	r1, r2
 800219c:	7019      	strb	r1, [r3, #0]
 800219e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80021a2:	7059      	strb	r1, [r3, #1]
 80021a4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80021a8:	7099      	strb	r1, [r3, #2]
 80021aa:	f3c2 6207 	ubfx	r2, r2, #24, #8
 80021ae:	70da      	strb	r2, [r3, #3]
			auxHora = get_hora();
 80021b0:	f000 fb7c 	bl	80028ac <get_hora>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b3b      	ldr	r3, [pc, #236]	; (80022a4 <runProg_hidro+0x1d8>)
 80021b8:	4611      	mov	r1, r2
 80021ba:	7019      	strb	r1, [r3, #0]
 80021bc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80021c0:	7059      	strb	r1, [r3, #1]
 80021c2:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80021c6:	709a      	strb	r2, [r3, #2]
			if (fecha_hidro.Date < auxFecha.Date){
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <runProg_hidro+0x1c4>)
 80021ca:	789a      	ldrb	r2, [r3, #2]
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <runProg_hidro+0x1d4>)
 80021ce:	789b      	ldrb	r3, [r3, #2]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d20b      	bcs.n	80021ec <runProg_hidro+0x120>
				setOutput(OUT_rele_jet, 0); //logica positiva
 80021d4:	2100      	movs	r1, #0
 80021d6:	200c      	movs	r0, #12
 80021d8:	f7fe fa0a 	bl	80005f0 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 80021dc:	2100      	movs	r1, #0
 80021de:	2002      	movs	r0, #2
 80021e0:	f000 fc5c 	bl	8002a9c <set_led>
				status_progHidro = PROG_IDLE;
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <runProg_hidro+0x1d0>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
				break;
 80021ea:	e04a      	b.n	8002282 <runProg_hidro+0x1b6>
			if (hora_hidro.Hours < auxHora.Hours){
 80021ec:	4b29      	ldr	r3, [pc, #164]	; (8002294 <runProg_hidro+0x1c8>)
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <runProg_hidro+0x1d8>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d20b      	bcs.n	8002210 <runProg_hidro+0x144>
				setOutput(OUT_rele_jet, 0); //logica positiva
 80021f8:	2100      	movs	r1, #0
 80021fa:	200c      	movs	r0, #12
 80021fc:	f7fe f9f8 	bl	80005f0 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 8002200:	2100      	movs	r1, #0
 8002202:	2002      	movs	r0, #2
 8002204:	f000 fc4a 	bl	8002a9c <set_led>
				status_progHidro = PROG_IDLE;
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <runProg_hidro+0x1d0>)
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
				break;
 800220e:	e038      	b.n	8002282 <runProg_hidro+0x1b6>
			if (hora_hidro.Minutes < auxHora.Minutes){
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <runProg_hidro+0x1c8>)
 8002212:	785a      	ldrb	r2, [r3, #1]
 8002214:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <runProg_hidro+0x1d8>)
 8002216:	785b      	ldrb	r3, [r3, #1]
 8002218:	429a      	cmp	r2, r3
 800221a:	d20b      	bcs.n	8002234 <runProg_hidro+0x168>
				setOutput(OUT_rele_jet, 0); //logica positiva
 800221c:	2100      	movs	r1, #0
 800221e:	200c      	movs	r0, #12
 8002220:	f7fe f9e6 	bl	80005f0 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 8002224:	2100      	movs	r1, #0
 8002226:	2002      	movs	r0, #2
 8002228:	f000 fc38 	bl	8002a9c <set_led>
				status_progHidro = PROG_IDLE;
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <runProg_hidro+0x1d0>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
				break;
 8002232:	e026      	b.n	8002282 <runProg_hidro+0x1b6>
			if (hora_hidro.Minutes == auxHora.Minutes){
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <runProg_hidro+0x1c8>)
 8002236:	785a      	ldrb	r2, [r3, #1]
 8002238:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <runProg_hidro+0x1d8>)
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	429a      	cmp	r2, r3
 800223e:	d11f      	bne.n	8002280 <runProg_hidro+0x1b4>
				if (hora_hidro.Seconds < auxHora.Seconds){
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <runProg_hidro+0x1c8>)
 8002242:	789a      	ldrb	r2, [r3, #2]
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <runProg_hidro+0x1d8>)
 8002246:	789b      	ldrb	r3, [r3, #2]
 8002248:	429a      	cmp	r2, r3
 800224a:	d219      	bcs.n	8002280 <runProg_hidro+0x1b4>
					setOutput(OUT_rele_jet, 0); //logica positiva
 800224c:	2100      	movs	r1, #0
 800224e:	200c      	movs	r0, #12
 8002250:	f7fe f9ce 	bl	80005f0 <setOutput>
					set_led(OUT_led_jet, APAGADO);
 8002254:	2100      	movs	r1, #0
 8002256:	2002      	movs	r0, #2
 8002258:	f000 fc20 	bl	8002a9c <set_led>
					status_progHidro = PROG_IDLE;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <runProg_hidro+0x1d0>)
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
					break;
 8002262:	e00e      	b.n	8002282 <runProg_hidro+0x1b6>
			setOutput(OUT_rele_jet, 0); //logica positiva
 8002264:	2100      	movs	r1, #0
 8002266:	200c      	movs	r0, #12
 8002268:	f7fe f9c2 	bl	80005f0 <setOutput>
			set_led(OUT_led_jet, APAGADO);
 800226c:	2100      	movs	r1, #0
 800226e:	2002      	movs	r0, #2
 8002270:	f000 fc14 	bl	8002a9c <set_led>
			status_progHidro = PROG_IDLE;
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <runProg_hidro+0x1d0>)
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
		break;
 800227a:	e002      	b.n	8002282 <runProg_hidro+0x1b6>
				break;
 800227c:	bf00      	nop
 800227e:	e000      	b.n	8002282 <runProg_hidro+0x1b6>
		break;
 8002280:	bf00      	nop
	} //end switch progCmd_hidro

	return status_progHidro;
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <runProg_hidro+0x1d0>)
 8002284:	781b      	ldrb	r3, [r3, #0]
} //end runProg_hidro()
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200005f0 	.word	0x200005f0
 8002294:	20000640 	.word	0x20000640
 8002298:	20000120 	.word	0x20000120
 800229c:	20000002 	.word	0x20000002
 80022a0:	2000063c 	.word	0x2000063c
 80022a4:	20000650 	.word	0x20000650

080022a8 <runProg_llenado>:

T_PROG_OUTPUT runProg_llenado (T_PROG_CMD cmd){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]

	switch (cmd) {
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d005      	beq.n	80022c4 <runProg_llenado+0x1c>
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	f000 81c3 	beq.w	8002644 <runProg_llenado+0x39c>
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d054      	beq.n	800236c <runProg_llenado+0xc4>

			status_progLlenado = PROG_IDLE;
		break;

		default:
		break;
 80022c2:	e1cc      	b.n	800265e <runProg_llenado+0x3b6>
			setOutput(OUT_rele_napa, 1); //logica positiva
 80022c4:	2101      	movs	r1, #1
 80022c6:	200b      	movs	r0, #11
 80022c8:	f7fe f992 	bl	80005f0 <setOutput>
			set_led(OUT_led_napa, TITILA_LENTO);
 80022cc:	2102      	movs	r1, #2
 80022ce:	2001      	movs	r0, #1
 80022d0:	f000 fbe4 	bl	8002a9c <set_led>
			flag_bombaNapa = 1;
 80022d4:	4b85      	ldr	r3, [pc, #532]	; (80024ec <runProg_llenado+0x244>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
			fecha_llenadoOn = get_fecha();
 80022da:	f000 fb01 	bl	80028e0 <get_fecha>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b83      	ldr	r3, [pc, #524]	; (80024f0 <runProg_llenado+0x248>)
 80022e2:	4611      	mov	r1, r2
 80022e4:	7019      	strb	r1, [r3, #0]
 80022e6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80022ea:	7059      	strb	r1, [r3, #1]
 80022ec:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80022f0:	7099      	strb	r1, [r3, #2]
 80022f2:	f3c2 6207 	ubfx	r2, r2, #24, #8
 80022f6:	70da      	strb	r2, [r3, #3]
			hora_llenadoOn = get_hora();
 80022f8:	f000 fad8 	bl	80028ac <get_hora>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b7d      	ldr	r3, [pc, #500]	; (80024f4 <runProg_llenado+0x24c>)
 8002300:	4611      	mov	r1, r2
 8002302:	7019      	strb	r1, [r3, #0]
 8002304:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002308:	7059      	strb	r1, [r3, #1]
 800230a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800230e:	709a      	strb	r2, [r3, #2]
			hora_llenadoOn.Minutes += tiempoLlenado_ON;
 8002310:	4b78      	ldr	r3, [pc, #480]	; (80024f4 <runProg_llenado+0x24c>)
 8002312:	785a      	ldrb	r2, [r3, #1]
 8002314:	4b78      	ldr	r3, [pc, #480]	; (80024f8 <runProg_llenado+0x250>)
 8002316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4413      	add	r3, r2
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <runProg_llenado+0x24c>)
 8002322:	705a      	strb	r2, [r3, #1]
			if (hora_llenadoOn.Minutes > 59) {
 8002324:	4b73      	ldr	r3, [pc, #460]	; (80024f4 <runProg_llenado+0x24c>)
 8002326:	785b      	ldrb	r3, [r3, #1]
 8002328:	2b3b      	cmp	r3, #59	; 0x3b
 800232a:	d91b      	bls.n	8002364 <runProg_llenado+0xbc>
				hora_llenadoOn.Minutes -= 59;
 800232c:	4b71      	ldr	r3, [pc, #452]	; (80024f4 <runProg_llenado+0x24c>)
 800232e:	785b      	ldrb	r3, [r3, #1]
 8002330:	3b3b      	subs	r3, #59	; 0x3b
 8002332:	b2da      	uxtb	r2, r3
 8002334:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <runProg_llenado+0x24c>)
 8002336:	705a      	strb	r2, [r3, #1]
				hora_llenadoOn.Hours++;
 8002338:	4b6e      	ldr	r3, [pc, #440]	; (80024f4 <runProg_llenado+0x24c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b6c      	ldr	r3, [pc, #432]	; (80024f4 <runProg_llenado+0x24c>)
 8002342:	701a      	strb	r2, [r3, #0]
				if (hora_llenadoOn.Hours > 23) {
 8002344:	4b6b      	ldr	r3, [pc, #428]	; (80024f4 <runProg_llenado+0x24c>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b17      	cmp	r3, #23
 800234a:	d90b      	bls.n	8002364 <runProg_llenado+0xbc>
					hora_llenadoOn.Hours -= 23;
 800234c:	4b69      	ldr	r3, [pc, #420]	; (80024f4 <runProg_llenado+0x24c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	3b17      	subs	r3, #23
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <runProg_llenado+0x24c>)
 8002356:	701a      	strb	r2, [r3, #0]
					fecha_llenadoOn.Date++;
 8002358:	4b65      	ldr	r3, [pc, #404]	; (80024f0 <runProg_llenado+0x248>)
 800235a:	789b      	ldrb	r3, [r3, #2]
 800235c:	3301      	adds	r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <runProg_llenado+0x248>)
 8002362:	709a      	strb	r2, [r3, #2]
			status_progLlenado = PROG_BUSY;
 8002364:	4b65      	ldr	r3, [pc, #404]	; (80024fc <runProg_llenado+0x254>)
 8002366:	2202      	movs	r2, #2
 8002368:	701a      	strb	r2, [r3, #0]
		break;
 800236a:	e178      	b.n	800265e <runProg_llenado+0x3b6>
			if (status_progLlenado == PROG_IDLE) {
 800236c:	4b63      	ldr	r3, [pc, #396]	; (80024fc <runProg_llenado+0x254>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	f000 8173 	beq.w	800265c <runProg_llenado+0x3b4>
			auxFecha = get_fecha();
 8002376:	f000 fab3 	bl	80028e0 <get_fecha>
 800237a:	4602      	mov	r2, r0
 800237c:	4b60      	ldr	r3, [pc, #384]	; (8002500 <runProg_llenado+0x258>)
 800237e:	4611      	mov	r1, r2
 8002380:	7019      	strb	r1, [r3, #0]
 8002382:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002386:	7059      	strb	r1, [r3, #1]
 8002388:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800238c:	7099      	strb	r1, [r3, #2]
 800238e:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8002392:	70da      	strb	r2, [r3, #3]
			auxHora = get_hora();
 8002394:	f000 fa8a 	bl	80028ac <get_hora>
 8002398:	4602      	mov	r2, r0
 800239a:	4b5a      	ldr	r3, [pc, #360]	; (8002504 <runProg_llenado+0x25c>)
 800239c:	4611      	mov	r1, r2
 800239e:	7019      	strb	r1, [r3, #0]
 80023a0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80023a4:	7059      	strb	r1, [r3, #1]
 80023a6:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80023aa:	709a      	strb	r2, [r3, #2]
			switch (flag_bombaNapa) {
 80023ac:	4b4f      	ldr	r3, [pc, #316]	; (80024ec <runProg_llenado+0x244>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80af 	beq.w	8002514 <runProg_llenado+0x26c>
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d000      	beq.n	80023bc <runProg_llenado+0x114>
				break;
 80023ba:	e141      	b.n	8002640 <runProg_llenado+0x398>
					if (fecha_llenadoOn.Date < auxFecha.Date) {
 80023bc:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <runProg_llenado+0x248>)
 80023be:	789a      	ldrb	r2, [r3, #2]
 80023c0:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <runProg_llenado+0x258>)
 80023c2:	789b      	ldrb	r3, [r3, #2]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d20a      	bcs.n	80023de <runProg_llenado+0x136>
						setOutput(OUT_rele_napa, 0); //logica positiva
 80023c8:	2100      	movs	r1, #0
 80023ca:	200b      	movs	r0, #11
 80023cc:	f7fe f910 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 80023d0:	2101      	movs	r1, #1
 80023d2:	2001      	movs	r0, #1
 80023d4:	f000 fb62 	bl	8002a9c <set_led>
						flag_bombaNapa = 0;
 80023d8:	4b44      	ldr	r3, [pc, #272]	; (80024ec <runProg_llenado+0x244>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOn.Hours < auxHora.Hours) {
 80023de:	4b45      	ldr	r3, [pc, #276]	; (80024f4 <runProg_llenado+0x24c>)
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	4b48      	ldr	r3, [pc, #288]	; (8002504 <runProg_llenado+0x25c>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d20a      	bcs.n	8002400 <runProg_llenado+0x158>
						setOutput(OUT_rele_napa, 0); //logica positiva
 80023ea:	2100      	movs	r1, #0
 80023ec:	200b      	movs	r0, #11
 80023ee:	f7fe f8ff 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 80023f2:	2101      	movs	r1, #1
 80023f4:	2001      	movs	r0, #1
 80023f6:	f000 fb51 	bl	8002a9c <set_led>
						flag_bombaNapa = 0;
 80023fa:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <runProg_llenado+0x244>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOn.Minutes < auxHora.Minutes) {
 8002400:	4b3c      	ldr	r3, [pc, #240]	; (80024f4 <runProg_llenado+0x24c>)
 8002402:	785a      	ldrb	r2, [r3, #1]
 8002404:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <runProg_llenado+0x25c>)
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	429a      	cmp	r2, r3
 800240a:	d20a      	bcs.n	8002422 <runProg_llenado+0x17a>
						setOutput(OUT_rele_napa, 0); //logica positiva
 800240c:	2100      	movs	r1, #0
 800240e:	200b      	movs	r0, #11
 8002410:	f7fe f8ee 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 8002414:	2101      	movs	r1, #1
 8002416:	2001      	movs	r0, #1
 8002418:	f000 fb40 	bl	8002a9c <set_led>
						flag_bombaNapa = 0;
 800241c:	4b33      	ldr	r3, [pc, #204]	; (80024ec <runProg_llenado+0x244>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOn.Minutes == auxHora.Minutes) {
 8002422:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <runProg_llenado+0x24c>)
 8002424:	785a      	ldrb	r2, [r3, #1]
 8002426:	4b37      	ldr	r3, [pc, #220]	; (8002504 <runProg_llenado+0x25c>)
 8002428:	785b      	ldrb	r3, [r3, #1]
 800242a:	429a      	cmp	r2, r3
 800242c:	d110      	bne.n	8002450 <runProg_llenado+0x1a8>
						if (hora_llenadoOn.Seconds < auxHora.Seconds) {
 800242e:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <runProg_llenado+0x24c>)
 8002430:	789a      	ldrb	r2, [r3, #2]
 8002432:	4b34      	ldr	r3, [pc, #208]	; (8002504 <runProg_llenado+0x25c>)
 8002434:	789b      	ldrb	r3, [r3, #2]
 8002436:	429a      	cmp	r2, r3
 8002438:	d20a      	bcs.n	8002450 <runProg_llenado+0x1a8>
							setOutput(OUT_rele_napa, 0); //logica positiva
 800243a:	2100      	movs	r1, #0
 800243c:	200b      	movs	r0, #11
 800243e:	f7fe f8d7 	bl	80005f0 <setOutput>
							set_led(OUT_led_napa, PRENDIDO);
 8002442:	2101      	movs	r1, #1
 8002444:	2001      	movs	r0, #1
 8002446:	f000 fb29 	bl	8002a9c <set_led>
							flag_bombaNapa = 0;
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <runProg_llenado+0x244>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
					if (!flag_bombaNapa) {
 8002450:	4b26      	ldr	r3, [pc, #152]	; (80024ec <runProg_llenado+0x244>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 80f1 	bne.w	800263c <runProg_llenado+0x394>
						fecha_llenadoOff = get_fecha();
 800245a:	f000 fa41 	bl	80028e0 <get_fecha>
 800245e:	4602      	mov	r2, r0
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <runProg_llenado+0x260>)
 8002462:	4611      	mov	r1, r2
 8002464:	7019      	strb	r1, [r3, #0]
 8002466:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800246a:	7059      	strb	r1, [r3, #1]
 800246c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8002470:	7099      	strb	r1, [r3, #2]
 8002472:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8002476:	70da      	strb	r2, [r3, #3]
						hora_llenadoOff = get_hora();
 8002478:	f000 fa18 	bl	80028ac <get_hora>
 800247c:	4602      	mov	r2, r0
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <runProg_llenado+0x264>)
 8002480:	4611      	mov	r1, r2
 8002482:	7019      	strb	r1, [r3, #0]
 8002484:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002488:	7059      	strb	r1, [r3, #1]
 800248a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800248e:	709a      	strb	r2, [r3, #2]
						hora_llenadoOff.Minutes += tiempoLlenado_OFF;
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <runProg_llenado+0x264>)
 8002492:	785a      	ldrb	r2, [r3, #1]
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <runProg_llenado+0x268>)
 8002496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4413      	add	r3, r2
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <runProg_llenado+0x264>)
 80024a2:	705a      	strb	r2, [r3, #1]
						if (hora_llenadoOff.Minutes > 59) {
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <runProg_llenado+0x264>)
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	2b3b      	cmp	r3, #59	; 0x3b
 80024aa:	f240 80c7 	bls.w	800263c <runProg_llenado+0x394>
							hora_llenadoOff.Minutes -= 59;
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <runProg_llenado+0x264>)
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	3b3b      	subs	r3, #59	; 0x3b
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <runProg_llenado+0x264>)
 80024b8:	705a      	strb	r2, [r3, #1]
							hora_llenadoOff.Hours++;
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <runProg_llenado+0x264>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	3301      	adds	r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <runProg_llenado+0x264>)
 80024c4:	701a      	strb	r2, [r3, #0]
							if (hora_llenadoOff.Hours > 23) {
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <runProg_llenado+0x264>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b17      	cmp	r3, #23
 80024cc:	f240 80b6 	bls.w	800263c <runProg_llenado+0x394>
								hora_llenadoOff.Hours -= 23;
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <runProg_llenado+0x264>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	3b17      	subs	r3, #23
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <runProg_llenado+0x264>)
 80024da:	701a      	strb	r2, [r3, #0]
								fecha_llenadoOff.Date++;
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <runProg_llenado+0x260>)
 80024de:	789b      	ldrb	r3, [r3, #2]
 80024e0:	3301      	adds	r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <runProg_llenado+0x260>)
 80024e6:	709a      	strb	r2, [r3, #2]
				break;
 80024e8:	e0a8      	b.n	800263c <runProg_llenado+0x394>
 80024ea:	bf00      	nop
 80024ec:	20000128 	.word	0x20000128
 80024f0:	20000630 	.word	0x20000630
 80024f4:	2000060c 	.word	0x2000060c
 80024f8:	20000124 	.word	0x20000124
 80024fc:	20000004 	.word	0x20000004
 8002500:	2000063c 	.word	0x2000063c
 8002504:	20000650 	.word	0x20000650
 8002508:	20000620 	.word	0x20000620
 800250c:	20000614 	.word	0x20000614
 8002510:	20000126 	.word	0x20000126
					if (fecha_llenadoOff.Date < auxFecha.Date) {
 8002514:	4b5d      	ldr	r3, [pc, #372]	; (800268c <runProg_llenado+0x3e4>)
 8002516:	789a      	ldrb	r2, [r3, #2]
 8002518:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <runProg_llenado+0x3e8>)
 800251a:	789b      	ldrb	r3, [r3, #2]
 800251c:	429a      	cmp	r2, r3
 800251e:	d20a      	bcs.n	8002536 <runProg_llenado+0x28e>
						setOutput(OUT_rele_napa, 1); //logica positiva
 8002520:	2101      	movs	r1, #1
 8002522:	200b      	movs	r0, #11
 8002524:	f7fe f864 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 8002528:	2102      	movs	r1, #2
 800252a:	2001      	movs	r0, #1
 800252c:	f000 fab6 	bl	8002a9c <set_led>
						flag_bombaNapa = 1;
 8002530:	4b58      	ldr	r3, [pc, #352]	; (8002694 <runProg_llenado+0x3ec>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOff.Hours < auxHora.Hours) {
 8002536:	4b58      	ldr	r3, [pc, #352]	; (8002698 <runProg_llenado+0x3f0>)
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	4b58      	ldr	r3, [pc, #352]	; (800269c <runProg_llenado+0x3f4>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d20a      	bcs.n	8002558 <runProg_llenado+0x2b0>
						setOutput(OUT_rele_napa, 1); //logica positiva
 8002542:	2101      	movs	r1, #1
 8002544:	200b      	movs	r0, #11
 8002546:	f7fe f853 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 800254a:	2102      	movs	r1, #2
 800254c:	2001      	movs	r0, #1
 800254e:	f000 faa5 	bl	8002a9c <set_led>
						flag_bombaNapa = 1;
 8002552:	4b50      	ldr	r3, [pc, #320]	; (8002694 <runProg_llenado+0x3ec>)
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOff.Minutes < auxHora.Minutes) {
 8002558:	4b4f      	ldr	r3, [pc, #316]	; (8002698 <runProg_llenado+0x3f0>)
 800255a:	785a      	ldrb	r2, [r3, #1]
 800255c:	4b4f      	ldr	r3, [pc, #316]	; (800269c <runProg_llenado+0x3f4>)
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	429a      	cmp	r2, r3
 8002562:	d20a      	bcs.n	800257a <runProg_llenado+0x2d2>
						setOutput(OUT_rele_napa, 1); //logica positiva
 8002564:	2101      	movs	r1, #1
 8002566:	200b      	movs	r0, #11
 8002568:	f7fe f842 	bl	80005f0 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 800256c:	2102      	movs	r1, #2
 800256e:	2001      	movs	r0, #1
 8002570:	f000 fa94 	bl	8002a9c <set_led>
						flag_bombaNapa = 1;
 8002574:	4b47      	ldr	r3, [pc, #284]	; (8002694 <runProg_llenado+0x3ec>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOff.Minutes == auxHora.Minutes) {
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <runProg_llenado+0x3f0>)
 800257c:	785a      	ldrb	r2, [r3, #1]
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <runProg_llenado+0x3f4>)
 8002580:	785b      	ldrb	r3, [r3, #1]
 8002582:	429a      	cmp	r2, r3
 8002584:	d110      	bne.n	80025a8 <runProg_llenado+0x300>
						if (hora_llenadoOff.Seconds < auxHora.Seconds){
 8002586:	4b44      	ldr	r3, [pc, #272]	; (8002698 <runProg_llenado+0x3f0>)
 8002588:	789a      	ldrb	r2, [r3, #2]
 800258a:	4b44      	ldr	r3, [pc, #272]	; (800269c <runProg_llenado+0x3f4>)
 800258c:	789b      	ldrb	r3, [r3, #2]
 800258e:	429a      	cmp	r2, r3
 8002590:	d20a      	bcs.n	80025a8 <runProg_llenado+0x300>
							setOutput(OUT_rele_napa, 1); //logica positiva
 8002592:	2101      	movs	r1, #1
 8002594:	200b      	movs	r0, #11
 8002596:	f7fe f82b 	bl	80005f0 <setOutput>
							set_led(OUT_led_napa, TITILA_LENTO);
 800259a:	2102      	movs	r1, #2
 800259c:	2001      	movs	r0, #1
 800259e:	f000 fa7d 	bl	8002a9c <set_led>
							flag_bombaNapa = 1;
 80025a2:	4b3c      	ldr	r3, [pc, #240]	; (8002694 <runProg_llenado+0x3ec>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
					if (flag_bombaNapa != 0) {
 80025a8:	4b3a      	ldr	r3, [pc, #232]	; (8002694 <runProg_llenado+0x3ec>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d047      	beq.n	8002640 <runProg_llenado+0x398>
						fecha_llenadoOn = get_fecha();
 80025b0:	f000 f996 	bl	80028e0 <get_fecha>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b3a      	ldr	r3, [pc, #232]	; (80026a0 <runProg_llenado+0x3f8>)
 80025b8:	4611      	mov	r1, r2
 80025ba:	7019      	strb	r1, [r3, #0]
 80025bc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80025c0:	7059      	strb	r1, [r3, #1]
 80025c2:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80025c6:	7099      	strb	r1, [r3, #2]
 80025c8:	f3c2 6207 	ubfx	r2, r2, #24, #8
 80025cc:	70da      	strb	r2, [r3, #3]
						hora_llenadoOn = get_hora();
 80025ce:	f000 f96d 	bl	80028ac <get_hora>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <runProg_llenado+0x3fc>)
 80025d6:	4611      	mov	r1, r2
 80025d8:	7019      	strb	r1, [r3, #0]
 80025da:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80025de:	7059      	strb	r1, [r3, #1]
 80025e0:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80025e4:	709a      	strb	r2, [r3, #2]
						hora_llenadoOn.Minutes += tiempoLlenado_ON;
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <runProg_llenado+0x3fc>)
 80025e8:	785a      	ldrb	r2, [r3, #1]
 80025ea:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <runProg_llenado+0x400>)
 80025ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <runProg_llenado+0x3fc>)
 80025f8:	705a      	strb	r2, [r3, #1]
						if (hora_llenadoOn.Minutes > 59) {
 80025fa:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <runProg_llenado+0x3fc>)
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	2b3b      	cmp	r3, #59	; 0x3b
 8002600:	d91e      	bls.n	8002640 <runProg_llenado+0x398>
							hora_llenadoOn.Minutes -= 59;
 8002602:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <runProg_llenado+0x3fc>)
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	3b3b      	subs	r3, #59	; 0x3b
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <runProg_llenado+0x3fc>)
 800260c:	705a      	strb	r2, [r3, #1]
							hora_llenadoOn.Hours++;
 800260e:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <runProg_llenado+0x3fc>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <runProg_llenado+0x3fc>)
 8002618:	701a      	strb	r2, [r3, #0]
							if (hora_llenadoOn.Hours > 23) {
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <runProg_llenado+0x3fc>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b17      	cmp	r3, #23
 8002620:	d90e      	bls.n	8002640 <runProg_llenado+0x398>
								hora_llenadoOn.Hours -= 23;
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <runProg_llenado+0x3fc>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	3b17      	subs	r3, #23
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <runProg_llenado+0x3fc>)
 800262c:	701a      	strb	r2, [r3, #0]
								fecha_llenadoOn.Date++;
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <runProg_llenado+0x3f8>)
 8002630:	789b      	ldrb	r3, [r3, #2]
 8002632:	3301      	adds	r3, #1
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <runProg_llenado+0x3f8>)
 8002638:	709a      	strb	r2, [r3, #2]
				break;
 800263a:	e001      	b.n	8002640 <runProg_llenado+0x398>
				break;
 800263c:	bf00      	nop
 800263e:	e00e      	b.n	800265e <runProg_llenado+0x3b6>
				break;
 8002640:	bf00      	nop
		break;
 8002642:	e00c      	b.n	800265e <runProg_llenado+0x3b6>
			setOutput(OUT_rele_napa, 0); //logica positiva
 8002644:	2100      	movs	r1, #0
 8002646:	200b      	movs	r0, #11
 8002648:	f7fd ffd2 	bl	80005f0 <setOutput>
			set_led(OUT_led_napa, APAGADO);
 800264c:	2100      	movs	r1, #0
 800264e:	2001      	movs	r0, #1
 8002650:	f000 fa24 	bl	8002a9c <set_led>
			status_progLlenado = PROG_IDLE;
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <runProg_llenado+0x404>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
		break;
 800265a:	e000      	b.n	800265e <runProg_llenado+0x3b6>
				break;
 800265c:	bf00      	nop
	} //end switch cmd

	if (!HAL_GPIO_ReadPin(IN_nivelAgua_GPIO_Port, IN_nivelAgua_Pin)) { //LOGICA NEGATIVA
 800265e:	2104      	movs	r1, #4
 8002660:	4813      	ldr	r0, [pc, #76]	; (80026b0 <runProg_llenado+0x408>)
 8002662:	f002 f9cf 	bl	8004a04 <HAL_GPIO_ReadPin>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <runProg_llenado+0x3d8>
		setOutput(OUT_rele_napa, 0); //logica positiva
 800266c:	2100      	movs	r1, #0
 800266e:	200b      	movs	r0, #11
 8002670:	f7fd ffbe 	bl	80005f0 <setOutput>
		set_led(OUT_led_napa, APAGADO);
 8002674:	2100      	movs	r1, #0
 8002676:	2001      	movs	r0, #1
 8002678:	f000 fa10 	bl	8002a9c <set_led>
		return PROG_FINISHED;
 800267c:	2303      	movs	r3, #3
 800267e:	e000      	b.n	8002682 <runProg_llenado+0x3da>
	}
	return PROG_BUSY;
 8002680:	2302      	movs	r3, #2

} //end runProg_llenado()
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000620 	.word	0x20000620
 8002690:	2000063c 	.word	0x2000063c
 8002694:	20000128 	.word	0x20000128
 8002698:	20000614 	.word	0x20000614
 800269c:	20000650 	.word	0x20000650
 80026a0:	20000630 	.word	0x20000630
 80026a4:	2000060c 	.word	0x2000060c
 80026a8:	20000124 	.word	0x20000124
 80026ac:	20000004 	.word	0x20000004
 80026b0:	40010800 	.word	0x40010800

080026b4 <runProg_skimmer>:

T_PROG_OUTPUT runProg_skimmer (T_PROG_CMD cmd){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
	__NOP();
 80026be:	bf00      	nop

	switch (cmd) {
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d84a      	bhi.n	800275e <runProg_skimmer+0xaa>
 80026c8:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <runProg_skimmer+0x1c>)
 80026ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ce:	bf00      	nop
 80026d0:	0800272f 	.word	0x0800272f
 80026d4:	0800275f 	.word	0x0800275f
 80026d8:	08002711 	.word	0x08002711
 80026dc:	080026e5 	.word	0x080026e5
 80026e0:	080026fb 	.word	0x080026fb
		case PROG_SET1: //con programa
			status_modoPileta = 1;
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <runProg_skimmer+0xbc>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_BUSY;
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <runProg_skimmer+0xc0>)
 80026ec:	2202      	movs	r2, #2
 80026ee:	701a      	strb	r2, [r3, #0]
			set_led(OUT_led_pileta, TITILA_LENTO);
 80026f0:	2102      	movs	r1, #2
 80026f2:	2003      	movs	r0, #3
 80026f4:	f000 f9d2 	bl	8002a9c <set_led>
			break;
 80026f8:	e034      	b.n	8002764 <runProg_skimmer+0xb0>
		case PROG_SET2: //sin programa
			status_modoPileta = 2;
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <runProg_skimmer+0xbc>)
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_BUSY;
 8002700:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <runProg_skimmer+0xc0>)
 8002702:	2202      	movs	r2, #2
 8002704:	701a      	strb	r2, [r3, #0]
			set_led(OUT_led_pileta, TITILA_RAPIDO);
 8002706:	2103      	movs	r1, #3
 8002708:	2003      	movs	r0, #3
 800270a:	f000 f9c7 	bl	8002a9c <set_led>
			break;
 800270e:	e029      	b.n	8002764 <runProg_skimmer+0xb0>
		case PROG_STOP:
			setOutput(OUT_rele_pileta, 0); //LOGICA POSITIVA
 8002710:	2100      	movs	r1, #0
 8002712:	200d      	movs	r0, #13
 8002714:	f7fd ff6c 	bl	80005f0 <setOutput>
			set_led(OUT_led_pileta, APAGADO);
 8002718:	2100      	movs	r1, #0
 800271a:	2003      	movs	r0, #3
 800271c:	f000 f9be 	bl	8002a9c <set_led>
			status_modoPileta = 0;
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <runProg_skimmer+0xbc>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_IDLE;
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <runProg_skimmer+0xc0>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
			break;
 800272c:	e01a      	b.n	8002764 <runProg_skimmer+0xb0>
		case PROG_CHECK:
			if (status_progPileta == PROG_IDLE){
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <runProg_skimmer+0xc0>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d015      	beq.n	8002762 <runProg_skimmer+0xae>
				//return PROG_IDLE;
				break;
			}

			switch (status_modoPileta) {
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <runProg_skimmer+0xbc>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d004      	beq.n	8002748 <runProg_skimmer+0x94>
 800273e:	2b02      	cmp	r3, #2
 8002740:	d007      	beq.n	8002752 <runProg_skimmer+0x9e>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <runProg_skimmer+0xa8>
					break;
				case 2:
					setOutput(OUT_rele_pileta, 1); //logica positiva
					break;
				default:
					break;
 8002746:	e00a      	b.n	800275e <runProg_skimmer+0xaa>
					setOutput(OUT_rele_pileta, 1); //logica positiva
 8002748:	2101      	movs	r1, #1
 800274a:	200d      	movs	r0, #13
 800274c:	f7fd ff50 	bl	80005f0 <setOutput>
					break;
 8002750:	e005      	b.n	800275e <runProg_skimmer+0xaa>
					setOutput(OUT_rele_pileta, 1); //logica positiva
 8002752:	2101      	movs	r1, #1
 8002754:	200d      	movs	r0, #13
 8002756:	f7fd ff4b 	bl	80005f0 <setOutput>
					break;
 800275a:	e000      	b.n	800275e <runProg_skimmer+0xaa>
					break;
 800275c:	bf00      	nop
			}

		default:
			break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <runProg_skimmer+0xb0>
				break;
 8002762:	bf00      	nop
	} //end switch cmd

	return status_progPileta;
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <runProg_skimmer+0xc0>)
 8002766:	781b      	ldrb	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000129 	.word	0x20000129
 8002774:	20000006 	.word	0x20000006

08002778 <runProg_luz>:

T_PROG_OUTPUT runProg_luz (T_PROG_CMD cmd){
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
	__NOP();
 8002782:	bf00      	nop
}
 8002784:	bf00      	nop
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a4:	4b34      	ldr	r3, [pc, #208]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	4a33      	ldr	r2, [pc, #204]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027aa:	f043 0310 	orr.w	r3, r3, #16
 80027ae:	6193      	str	r3, [r2, #24]
 80027b0:	4b31      	ldr	r3, [pc, #196]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027c2:	f043 0320 	orr.w	r3, r3, #32
 80027c6:	6193      	str	r3, [r2, #24]
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a27      	ldr	r2, [pc, #156]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	4a21      	ldr	r2, [pc, #132]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027f2:	f043 0308 	orr.w	r3, r3, #8
 80027f6:	6193      	str	r3, [r2, #24]
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <MX_GPIO_Init+0xe8>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE_Pin
 8002804:	2200      	movs	r2, #0
 8002806:	f248 31e0 	movw	r1, #33760	; 0x83e0
 800280a:	481c      	ldr	r0, [pc, #112]	; (800287c <MX_GPIO_Init+0xec>)
 800280c:	f002 f911 	bl	8004a32 <HAL_GPIO_WritePin>
                          |OUT_PL_Pin|OUT_fila3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_GLCD_RST_Pin|OUT_ST_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 8002810:	2200      	movs	r2, #0
 8002812:	f241 0139 	movw	r1, #4153	; 0x1039
 8002816:	481a      	ldr	r0, [pc, #104]	; (8002880 <MX_GPIO_Init+0xf0>)
 8002818:	f002 f90b 	bl	8004a32 <HAL_GPIO_WritePin>
                          |OUT_fila0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_nivelAgua_Pin;
 800281c:	2304      	movs	r3, #4
 800281e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002824:	2301      	movs	r3, #1
 8002826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN_nivelAgua_GPIO_Port, &GPIO_InitStruct);
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	4619      	mov	r1, r3
 800282e:	4813      	ldr	r0, [pc, #76]	; (800287c <MX_GPIO_Init+0xec>)
 8002830:	f001 ff8e 	bl	8004750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE_Pin
 8002834:	f248 33e0 	movw	r3, #33760	; 0x83e0
 8002838:	613b      	str	r3, [r7, #16]
                          |OUT_PL_Pin|OUT_fila3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283a:	2301      	movs	r3, #1
 800283c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2302      	movs	r3, #2
 8002844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	4619      	mov	r1, r3
 800284c:	480b      	ldr	r0, [pc, #44]	; (800287c <MX_GPIO_Init+0xec>)
 800284e:	f001 ff7f 	bl	8004750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_GLCD_RST_Pin|OUT_ST_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 8002852:	f241 0339 	movw	r3, #4153	; 0x1039
 8002856:	613b      	str	r3, [r7, #16]
                          |OUT_fila0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002858:	2301      	movs	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2302      	movs	r3, #2
 8002862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	4619      	mov	r1, r3
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_GPIO_Init+0xf0>)
 800286c:	f001 ff70 	bl	8004750 <HAL_GPIO_Init>

}
 8002870:	bf00      	nop
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	40010800 	.word	0x40010800
 8002880:	40010c00 	.word	0x40010c00

08002884 <update_horaFecha>:
#include "hora_tablero.h"

RTC_TimeTypeDef hora;
RTC_DateTypeDef aux_fecha;

void update_horaFecha (void){
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	 //segun el proyecto "MAQUINA_MD":
	  HAL_RTC_GetTime(&hrtc, &hora, RTC_FORMAT_BIN);
 8002888:	2200      	movs	r2, #0
 800288a:	4905      	ldr	r1, [pc, #20]	; (80028a0 <update_horaFecha+0x1c>)
 800288c:	4805      	ldr	r0, [pc, #20]	; (80028a4 <update_horaFecha+0x20>)
 800288e:	f002 ffb1 	bl	80057f4 <HAL_RTC_GetTime>
	  //HAL_RTC_GetTime(&hrtc, &aux_tiempo, RTC_FORMAT_BIN);
	  HAL_RTC_GetDate(&hrtc, &aux_fecha, RTC_FORMAT_BIN);
 8002892:	2200      	movs	r2, #0
 8002894:	4904      	ldr	r1, [pc, #16]	; (80028a8 <update_horaFecha+0x24>)
 8002896:	4803      	ldr	r0, [pc, #12]	; (80028a4 <update_horaFecha+0x20>)
 8002898:	f003 f93a 	bl	8005b10 <HAL_RTC_GetDate>
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000654 	.word	0x20000654
 80028a4:	2000066c 	.word	0x2000066c
 80028a8:	2000014c 	.word	0x2000014c

080028ac <get_hora>:

void set_fecha (void){
	__NOP();
}

RTC_TimeTypeDef get_hora (void){
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
	return hora;
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <get_hora+0x30>)
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	8811      	ldrh	r1, [r2, #0]
 80028b8:	7892      	ldrb	r2, [r2, #2]
 80028ba:	8019      	strh	r1, [r3, #0]
 80028bc:	709a      	strb	r2, [r3, #2]
 80028be:	2300      	movs	r3, #0
 80028c0:	793a      	ldrb	r2, [r7, #4]
 80028c2:	f362 0307 	bfi	r3, r2, #0, #8
 80028c6:	797a      	ldrb	r2, [r7, #5]
 80028c8:	f362 230f 	bfi	r3, r2, #8, #8
 80028cc:	79ba      	ldrb	r2, [r7, #6]
 80028ce:	f362 4317 	bfi	r3, r2, #16, #8
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000654 	.word	0x20000654

080028e0 <get_fecha>:

RTC_DateTypeDef get_fecha (void){
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
	return aux_fecha;
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <get_fecha+0x34>)
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	6810      	ldr	r0, [r2, #0]
 80028ec:	6018      	str	r0, [r3, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	793a      	ldrb	r2, [r7, #4]
 80028f2:	f362 0307 	bfi	r3, r2, #0, #8
 80028f6:	797a      	ldrb	r2, [r7, #5]
 80028f8:	f362 230f 	bfi	r3, r2, #8, #8
 80028fc:	79ba      	ldrb	r2, [r7, #6]
 80028fe:	f362 4317 	bfi	r3, r2, #16, #8
 8002902:	79fa      	ldrb	r2, [r7, #7]
 8002904:	f362 631f 	bfi	r3, r2, #24, #8
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	2000014c 	.word	0x2000014c

08002918 <update_leds>:

uint8_t demora_rapida = 19; //equivale a 200 ms: (valor + 1)*10ms
uint8_t demora_lenta = 49; //equivale a 500 ms: (valor + 1)*10ms


void update_leds (void){ //LOGICA NEGATIVA
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0

	for (uint8_t i=0; i < 4; i++){
 800291e:	2300      	movs	r3, #0
 8002920:	71fb      	strb	r3, [r7, #7]
 8002922:	e035      	b.n	8002990 <update_leds+0x78>

		switch (status_led[i]) {
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	4a5a      	ldr	r2, [pc, #360]	; (8002a90 <update_leds+0x178>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d828      	bhi.n	8002980 <update_leds+0x68>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <update_leds+0x1c>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002945 	.word	0x08002945
 8002938:	08002951 	.word	0x08002951
 800293c:	0800295d 	.word	0x0800295d
 8002940:	0800296f 	.word	0x0800296f
			case APAGADO:
				setOutput(i, 0); //APAGA LED
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fe51 	bl	80005f0 <setOutput>
			break;
 800294e:	e01c      	b.n	800298a <update_leds+0x72>
			case PRENDIDO:
				setOutput(i, 1); //PRENDE LED
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	2101      	movs	r1, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fe4b 	bl	80005f0 <setOutput>
			break;
 800295a:	e016      	b.n	800298a <update_leds+0x72>
			case TITILA_LENTO:
				if (!demora_lenta){
 800295c:	4b4d      	ldr	r3, [pc, #308]	; (8002a94 <update_leds+0x17c>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10f      	bne.n	8002984 <update_leds+0x6c>
					toggleOutput (i);
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fe6e 	bl	8000648 <toggleOutput>
					break;
 800296c:	e00d      	b.n	800298a <update_leds+0x72>
				}
			break;
			case TITILA_RAPIDO:
				if (!demora_rapida){
 800296e:	4b4a      	ldr	r3, [pc, #296]	; (8002a98 <update_leds+0x180>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d108      	bne.n	8002988 <update_leds+0x70>
					toggleOutput (i);
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fe65 	bl	8000648 <toggleOutput>
					break;
 800297e:	e004      	b.n	800298a <update_leds+0x72>
				}
			break;
			default:
			break;
 8002980:	bf00      	nop
 8002982:	e002      	b.n	800298a <update_leds+0x72>
			break;
 8002984:	bf00      	nop
 8002986:	e000      	b.n	800298a <update_leds+0x72>
			break;
 8002988:	bf00      	nop
	for (uint8_t i=0; i < 4; i++){
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	3301      	adds	r3, #1
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d9c6      	bls.n	8002924 <update_leds+0xc>
		} //end switch status_led

	} //end for uint8_t i...

	switch (status_led[14]) {
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <update_leds+0x178>)
 8002998:	7b9b      	ldrb	r3, [r3, #14]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d824      	bhi.n	80029e8 <update_leds+0xd0>
 800299e:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <update_leds+0x8c>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029bf 	.word	0x080029bf
 80029ac:	080029c9 	.word	0x080029c9
 80029b0:	080029d9 	.word	0x080029d9
		case APAGADO:
			setOutput(OUT_led_luces, 0); //APAGA LED
 80029b4:	2100      	movs	r1, #0
 80029b6:	200e      	movs	r0, #14
 80029b8:	f7fd fe1a 	bl	80005f0 <setOutput>
		break;
 80029bc:	e019      	b.n	80029f2 <update_leds+0xda>
		case PRENDIDO:
			setOutput(OUT_led_luces, 1); //PRENDE LED
 80029be:	2101      	movs	r1, #1
 80029c0:	200e      	movs	r0, #14
 80029c2:	f7fd fe15 	bl	80005f0 <setOutput>
		break;
 80029c6:	e014      	b.n	80029f2 <update_leds+0xda>
		case TITILA_LENTO:
			if (!demora_lenta){
 80029c8:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <update_leds+0x17c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10d      	bne.n	80029ec <update_leds+0xd4>
				toggleOutput (OUT_led_luces);
 80029d0:	200e      	movs	r0, #14
 80029d2:	f7fd fe39 	bl	8000648 <toggleOutput>
				break;
 80029d6:	e00c      	b.n	80029f2 <update_leds+0xda>
			}
		break;
		case TITILA_RAPIDO:
			if (!demora_rapida){
 80029d8:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <update_leds+0x180>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <update_leds+0xd8>
				toggleOutput (OUT_led_luces);
 80029e0:	200e      	movs	r0, #14
 80029e2:	f7fd fe31 	bl	8000648 <toggleOutput>
				break;
 80029e6:	e004      	b.n	80029f2 <update_leds+0xda>
			}
		break;
		default:
		break;
 80029e8:	bf00      	nop
 80029ea:	e002      	b.n	80029f2 <update_leds+0xda>
		break;
 80029ec:	bf00      	nop
 80029ee:	e000      	b.n	80029f2 <update_leds+0xda>
		break;
 80029f0:	bf00      	nop
	} //end switch status_led

	switch (status_led[15]) {
 80029f2:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <update_leds+0x178>)
 80029f4:	7bdb      	ldrb	r3, [r3, #15]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d824      	bhi.n	8002a44 <update_leds+0x12c>
 80029fa:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <update_leds+0xe8>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a1b 	.word	0x08002a1b
 8002a08:	08002a25 	.word	0x08002a25
 8002a0c:	08002a35 	.word	0x08002a35
		case APAGADO:
			setOutput(OUT_led_tomas, 0); //APAGA LED
 8002a10:	2100      	movs	r1, #0
 8002a12:	200f      	movs	r0, #15
 8002a14:	f7fd fdec 	bl	80005f0 <setOutput>
		break;
 8002a18:	e019      	b.n	8002a4e <update_leds+0x136>
		case PRENDIDO:
			setOutput(OUT_led_tomas, 1); //PRENDE LED
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	200f      	movs	r0, #15
 8002a1e:	f7fd fde7 	bl	80005f0 <setOutput>
		break;
 8002a22:	e014      	b.n	8002a4e <update_leds+0x136>
		case TITILA_LENTO:
			if (!demora_lenta){
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <update_leds+0x17c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <update_leds+0x130>
				toggleOutput (OUT_led_tomas);
 8002a2c:	200f      	movs	r0, #15
 8002a2e:	f7fd fe0b 	bl	8000648 <toggleOutput>
				break;
 8002a32:	e00c      	b.n	8002a4e <update_leds+0x136>
			}
		break;
		case TITILA_RAPIDO:
			if (!demora_rapida){
 8002a34:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <update_leds+0x180>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <update_leds+0x134>
				toggleOutput (OUT_led_tomas);
 8002a3c:	200f      	movs	r0, #15
 8002a3e:	f7fd fe03 	bl	8000648 <toggleOutput>
				break;
 8002a42:	e004      	b.n	8002a4e <update_leds+0x136>
			}
		break;
		default:
		break;
 8002a44:	bf00      	nop
 8002a46:	e002      	b.n	8002a4e <update_leds+0x136>
		break;
 8002a48:	bf00      	nop
 8002a4a:	e000      	b.n	8002a4e <update_leds+0x136>
		break;
 8002a4c:	bf00      	nop
	} //end switch status_led

	if (demora_lenta != 0){
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <update_leds+0x17c>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <update_leds+0x14c>
		demora_lenta--;
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <update_leds+0x17c>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <update_leds+0x17c>)
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	e002      	b.n	8002a6a <update_leds+0x152>
	}else{
		demora_lenta = 4; // por 10 ms.
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <update_leds+0x17c>)
 8002a66:	2204      	movs	r2, #4
 8002a68:	701a      	strb	r2, [r3, #0]
	}

	if (demora_rapida != 0){
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <update_leds+0x180>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d006      	beq.n	8002a80 <update_leds+0x168>
		demora_rapida--;
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <update_leds+0x180>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <update_leds+0x180>)
 8002a7c:	701a      	strb	r2, [r3, #0]
	}else{
		demora_rapida = 0; // por 10 ms.
	}

} //end update_leds()
 8002a7e:	e002      	b.n	8002a86 <update_leds+0x16e>
		demora_rapida = 0; // por 10 ms.
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <update_leds+0x180>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
} //end update_leds()
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000013c 	.word	0x2000013c
 8002a94:	20000009 	.word	0x20000009
 8002a98:	20000008 	.word	0x20000008

08002a9c <set_led>:


void set_led (T_POS_OUTPUT l, T_STATUS_LED val){
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	460a      	mov	r2, r1
 8002aa6:	71fb      	strb	r3, [r7, #7]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	71bb      	strb	r3, [r7, #6]

	status_led [l] = val;
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	4904      	ldr	r1, [pc, #16]	; (8002ac0 <set_led+0x24>)
 8002ab0:	79ba      	ldrb	r2, [r7, #6]
 8002ab2:	54ca      	strb	r2, [r1, r3]

} //end set_led()
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	2000013c 	.word	0x2000013c

08002ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aca:	f001 faa5 	bl	8004018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ace:	f000 f87d 	bl	8002bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ad2:	f7ff fe5d 	bl	8002790 <MX_GPIO_Init>
  MX_RTC_Init();
 8002ad6:	f000 ff25 	bl	8003924 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002ada:	f001 f9f3 	bl	8003ec4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002ade:	f001 f91f 	bl	8003d20 <MX_TIM2_Init>
  MX_SPI2_Init();
 8002ae2:	f000 ffb7 	bl	8003a54 <MX_SPI2_Init>
  MX_ADC1_Init();
 8002ae6:	f7fd ffa1 	bl	8000a2c <MX_ADC1_Init>
  MX_TIM3_Init();
 8002aea:	f001 f965 	bl	8003db8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  spi_74HC165_init(&hspi2, OUT_PL_GPIO_Port, OUT_PL_Pin, OUT_CE_GPIO_Port, OUT_CE_Pin);
 8002aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <main+0xe8>)
 8002af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afa:	492c      	ldr	r1, [pc, #176]	; (8002bac <main+0xe8>)
 8002afc:	482c      	ldr	r0, [pc, #176]	; (8002bb0 <main+0xec>)
 8002afe:	f7fd fb25 	bl	800014c <spi_74HC165_init>
  spi_74HC595_init(&hspi2, OUT_ST_GPIO_Port, OUT_ST_Pin);
 8002b02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b06:	492b      	ldr	r1, [pc, #172]	; (8002bb4 <main+0xf0>)
 8002b08:	4829      	ldr	r0, [pc, #164]	; (8002bb0 <main+0xec>)
 8002b0a:	f7fd fbc1 	bl	8000290 <spi_74HC595_init>

  HAL_TIM_Base_Start_IT(&htim2); //ticks every 10 ms.
 8002b0e:	482a      	ldr	r0, [pc, #168]	; (8002bb8 <main+0xf4>)
 8002b10:	f004 f97e 	bl	8006e10 <HAL_TIM_Base_Start_IT>


  start_menu();
 8002b14:	f000 f8de 	bl	8002cd4 <start_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  update_teclas();
 8002b18:	f7fd fcb8 	bl	800048c <update_teclas>

//	  uint8_t pruebaNumero = getNumber();

	  if (flag_tick){ //ticks every 10 ms.
 8002b1c:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <main+0xf8>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d031      	beq.n	8002b88 <main+0xc4>

		  update_horaFecha();
 8002b24:	f7ff feae 	bl	8002884 <update_horaFecha>
		  check_duracionPulsadores();
 8002b28:	f000 f8ee 	bl	8002d08 <check_duracionPulsadores>

		  if (flag_lecturas != 0){ //para demorar las lecturas de teclas cada 30 ms.
 8002b2c:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <main+0xfc>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d006      	beq.n	8002b42 <main+0x7e>
			  flag_lecturas--;
 8002b34:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <main+0xfc>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <main+0xfc>)
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e004      	b.n	8002b4c <main+0x88>
		  }else{
			  lecturaTeclas();
 8002b42:	f7fd fc63 	bl	800040c <lecturaTeclas>

			  flag_lecturas = 2;
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <main+0xfc>)
 8002b48:	2202      	movs	r2, #2
 8002b4a:	701a      	strb	r2, [r3, #0]
		  }

		  if (flag_salidas != 0){ //para demorar la escritura de las salidas cada 100 ms.
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <main+0x100>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <main+0x9e>
			  flag_salidas--;
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <main+0x100>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <main+0x100>)
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	e006      	b.n	8002b70 <main+0xac>
		  }else{
			  update_leds();
 8002b62:	f7ff fed9 	bl	8002918 <update_leds>
			  update_outputs();
 8002b66:	f7fd fd87 	bl	8000678 <update_outputs>

//			  uint8_t datoPrueba[2] = {0xFF, 0xFF};
//			  spi_74HC595_Transmit(datoPrueba, 2);

			  flag_salidas = 9;
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <main+0x100>)
 8002b6c:	2209      	movs	r2, #9
 8002b6e:	701a      	strb	r2, [r3, #0]
		  }

		  if (refresh_pantalla != 0){ //refresca cada 300 ms
 8002b70:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <main+0x104>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <main+0xbe>
			  pantallaUpdate();
 8002b78:	f7fe f99c 	bl	8000eb4 <pantallaUpdate>
			  refresh_pantalla = 29;
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <main+0x104>)
 8002b7e:	221d      	movs	r2, #29
 8002b80:	701a      	strb	r2, [r3, #0]
		  }

		  flag_tick = 0;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <main+0xf8>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
	  }//end if flag_tick

	  check_pulsadores();
 8002b88:	f000 f8dc 	bl	8002d44 <check_pulsadores>
	  check_menu();
 8002b8c:	f000 f8b2 	bl	8002cf4 <check_menu>
	  runProg_hidro(PROG_CHECK);
 8002b90:	2001      	movs	r0, #1
 8002b92:	f7ff fa9b 	bl	80020cc <runProg_hidro>
	  runProg_llenado(PROG_CHECK);
 8002b96:	2001      	movs	r0, #1
 8002b98:	f7ff fb86 	bl	80022a8 <runProg_llenado>
	  runProg_luz(PROG_CHECK);
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f7ff fdeb 	bl	8002778 <runProg_luz>
	  runProg_skimmer(PROG_CHECK);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f7ff fd86 	bl	80026b4 <runProg_skimmer>
	  update_teclas();
 8002ba8:	e7b6      	b.n	8002b18 <main+0x54>
 8002baa:	bf00      	nop
 8002bac:	40010800 	.word	0x40010800
 8002bb0:	20000680 	.word	0x20000680
 8002bb4:	40010c00 	.word	0x40010c00
 8002bb8:	20000718 	.word	0x20000718
 8002bbc:	20000150 	.word	0x20000150
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	20000001 	.word	0x20000001
 8002bc8:	2000000a 	.word	0x2000000a

08002bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b094      	sub	sp, #80	; 0x50
 8002bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bd6:	2228      	movs	r2, #40	; 0x28
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f004 fdbe 	bl	800775c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002bfc:	2309      	movs	r3, #9
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c06:	2300      	movs	r3, #0
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c12:	2302      	movs	r3, #2
 8002c14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 ff28 	bl	8004a7c <HAL_RCC_OscConfig>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002c32:	f000 f849 	bl	8002cc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c36:	230f      	movs	r3, #15
 8002c38:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c46:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	2102      	movs	r1, #2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f002 f992 	bl	8004f7c <HAL_RCC_ClockConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002c5e:	f000 f833 	bl	8002cc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002c62:	2303      	movs	r3, #3
 8002c64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c70:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 fb1d 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002c80:	f000 f822 	bl	8002cc8 <Error_Handler>
  }
}
 8002c84:	bf00      	nop
 8002c86:	3750      	adds	r7, #80	; 0x50
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9c:	d102      	bne.n	8002ca4 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tick = 1;
 8002c9e:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
	}
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000150 	.word	0x20000150

08002cb4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	__NOP();
 8002cbc:	bf00      	nop
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <start_menu>:
T_STATUS_LUCESEXT status_menuLucesExt = LIMITE_TIEMPO_LUCESEXT;

/////////////////////////////////////////
//         FUNCIONES PUBLICAS          //
/////////////////////////////////////////
void start_menu (void){
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
	init_pantalla();
 8002cd8:	f7fd ff44 	bl	8000b64 <init_pantalla>
	init_menuPrincipal();
 8002cdc:	f000 f8d4 	bl	8002e88 <init_menuPrincipal>
	menuActual = &menu[MENU_PRINCIPAL];
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <start_menu+0x18>)
 8002ce2:	4a03      	ldr	r2, [pc, #12]	; (8002cf0 <start_menu+0x1c>)
 8002ce4:	601a      	str	r2, [r3, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000658 	.word	0x20000658
 8002cf0:	2000000c 	.word	0x2000000c

08002cf4 <check_menu>:

void check_menu (void){
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
	menuActual->accion();
 8002cf8:	4b02      	ldr	r3, [pc, #8]	; (8002d04 <check_menu+0x10>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	4798      	blx	r3
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000658 	.word	0x20000658

08002d08 <check_duracionPulsadores>:

void check_duracionPulsadores (void){
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0

	if (pulsoLargo_skimmer != 0){
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <check_duracionPulsadores+0x34>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <check_duracionPulsadores+0x18>
		pulsoLargo_skimmer--;
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <check_duracionPulsadores+0x34>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <check_duracionPulsadores+0x34>)
 8002d1e:	701a      	strb	r2, [r3, #0]
	}

	if (pulsoLargo_luz != 0){
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <check_duracionPulsadores+0x38>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <check_duracionPulsadores+0x2c>
		pulsoLargo_luz--;
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <check_duracionPulsadores+0x38>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <check_duracionPulsadores+0x38>)
 8002d32:	701a      	strb	r2, [r3, #0]
	}
} //end check_duracionPulsadores ()
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000152 	.word	0x20000152
 8002d40:	20000153 	.word	0x20000153

08002d44 <check_pulsadores>:

void check_pulsadores (void){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0

	if (getStatBoton(IN_jet) == FALL){
 8002d48:	2014      	movs	r0, #20
 8002d4a:	f7fd fbc1 	bl	80004d0 <getStatBoton>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d112      	bne.n	8002d7a <check_pulsadores+0x36>
		if (runProg_hidro(PROG_CHECK) == PROG_BUSY){
 8002d54:	2001      	movs	r0, #1
 8002d56:	f7ff f9b9 	bl	80020cc <runProg_hidro>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d103      	bne.n	8002d68 <check_pulsadores+0x24>
			runProg_hidro(PROG_STOP);
 8002d60:	2003      	movs	r0, #3
 8002d62:	f7ff f9b3 	bl	80020cc <runProg_hidro>
 8002d66:	e008      	b.n	8002d7a <check_pulsadores+0x36>
		}else if(runProg_hidro(PROG_CHECK) == PROG_IDLE){
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f7ff f9af 	bl	80020cc <runProg_hidro>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d102      	bne.n	8002d7a <check_pulsadores+0x36>
			runProg_hidro(PROG_RUN);
 8002d74:	2002      	movs	r0, #2
 8002d76:	f7ff f9a9 	bl	80020cc <runProg_hidro>
		}
	} //end if getStatBoton IN_jet

	if (getStatBoton(IN_napa) == FALL){
 8002d7a:	2013      	movs	r0, #19
 8002d7c:	f7fd fba8 	bl	80004d0 <getStatBoton>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d10e      	bne.n	8002da4 <check_pulsadores+0x60>

		menuAux = menuActual;
 8002d86:	4b39      	ldr	r3, [pc, #228]	; (8002e6c <check_pulsadores+0x128>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a39      	ldr	r2, [pc, #228]	; (8002e70 <check_pulsadores+0x12c>)
 8002d8c:	6013      	str	r3, [r2, #0]
		menuActual = &menu[MENU_LLENADO];
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <check_pulsadores+0x128>)
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <check_pulsadores+0x130>)
 8002d92:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8002d94:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <check_pulsadores+0x128>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a37      	ldr	r2, [pc, #220]	; (8002e78 <check_pulsadores+0x134>)
 8002d9a:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8002d9c:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <check_pulsadores+0x128>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	4798      	blx	r3
	} //end if getStatBoton(IN_napa)...

	if (getStatBoton(IN_tomas) == FALL){
 8002da4:	2010      	movs	r0, #16
 8002da6:	f7fd fb93 	bl	80004d0 <getStatBoton>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d11a      	bne.n	8002de6 <check_pulsadores+0xa2>
		if (!flag_tomas){
 8002db0:	4b32      	ldr	r3, [pc, #200]	; (8002e7c <check_pulsadores+0x138>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10b      	bne.n	8002dd0 <check_pulsadores+0x8c>
			setOutput(OUT_rele_tomas, 1); //logica positiva
 8002db8:	2101      	movs	r1, #1
 8002dba:	2008      	movs	r0, #8
 8002dbc:	f7fd fc18 	bl	80005f0 <setOutput>
			set_led(OUT_led_tomas, PRENDIDO);
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	200f      	movs	r0, #15
 8002dc4:	f7ff fe6a 	bl	8002a9c <set_led>
			flag_tomas = 1;
 8002dc8:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <check_pulsadores+0x138>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e00a      	b.n	8002de6 <check_pulsadores+0xa2>
		}else{
			setOutput(OUT_rele_tomas, 0); //logica positiva
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	2008      	movs	r0, #8
 8002dd4:	f7fd fc0c 	bl	80005f0 <setOutput>
			set_led(OUT_led_tomas, APAGADO);
 8002dd8:	2100      	movs	r1, #0
 8002dda:	200f      	movs	r0, #15
 8002ddc:	f7ff fe5e 	bl	8002a9c <set_led>
			flag_tomas = 0;
 8002de0:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <check_pulsadores+0x138>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
		}
	} //end if IN_tomas

	if (getStatBoton(IN_pileta) == FALL){
 8002de6:	2015      	movs	r0, #21
 8002de8:	f7fd fb72 	bl	80004d0 <getStatBoton>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d118      	bne.n	8002e24 <check_pulsadores+0xe0>
		aux_progOutput = runProg_skimmer(PROG_CHECK);
 8002df2:	2001      	movs	r0, #1
 8002df4:	f7ff fc5e 	bl	80026b4 <runProg_skimmer>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <check_pulsadores+0x13c>)
 8002dfe:	701a      	strb	r2, [r3, #0]

		if (aux_progOutput == PROG_IDLE){
 8002e00:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <check_pulsadores+0x13c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d103      	bne.n	8002e10 <check_pulsadores+0xcc>
			pulsoLargo_skimmer = 150; //en 10 * ms.
 8002e08:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <check_pulsadores+0x140>)
 8002e0a:	2296      	movs	r2, #150	; 0x96
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e009      	b.n	8002e24 <check_pulsadores+0xe0>
		}else if(aux_progOutput == PROG_BUSY){
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <check_pulsadores+0x13c>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d105      	bne.n	8002e24 <check_pulsadores+0xe0>
			pulsoLargo_skimmer = 0;
 8002e18:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <check_pulsadores+0x140>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
			runProg_skimmer(PROG_STOP);
 8002e1e:	2003      	movs	r0, #3
 8002e20:	f7ff fc48 	bl	80026b4 <runProg_skimmer>
		}


	} //end if getStatBoton(IN_pileta)

	if (pulsoLargo_skimmer != 0){
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <check_pulsadores+0x140>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d019      	beq.n	8002e60 <check_pulsadores+0x11c>

		if (getStatBoton(IN_pileta) == HIGH_L){ //pulso corto
 8002e2c:	2015      	movs	r0, #21
 8002e2e:	f7fd fb4f 	bl	80004d0 <getStatBoton>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <check_pulsadores+0x100>
			runProg_skimmer(PROG_SET1); //con programa
 8002e38:	2004      	movs	r0, #4
 8002e3a:	f7ff fc3b 	bl	80026b4 <runProg_skimmer>
			pulsoLargo_skimmer = 0;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <check_pulsadores+0x140>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
		}

		if (pulsoLargo_skimmer == 1){ //pulso largo, justo 10 ms antes de terminar
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <check_pulsadores+0x140>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10c      	bne.n	8002e66 <check_pulsadores+0x122>
			if (getStatBoton(IN_pileta) == LOW_L){ //doble check
 8002e4c:	2015      	movs	r0, #21
 8002e4e:	f7fd fb3f 	bl	80004d0 <getStatBoton>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <check_pulsadores+0x122>
				runProg_skimmer(PROG_SET2); //sin programa
 8002e58:	2005      	movs	r0, #5
 8002e5a:	f7ff fc2b 	bl	80026b4 <runProg_skimmer>

//	if (getStatBoton(IN_pileta) == LOW_L){
//		__NOP();
//	}

} //end check_pulsadores ()
 8002e5e:	e002      	b.n	8002e66 <check_pulsadores+0x122>
		if (getStatBoton(IN_pileta) == LOW_L){
 8002e60:	2015      	movs	r0, #21
 8002e62:	f7fd fb35 	bl	80004d0 <getStatBoton>
} //end check_pulsadores ()
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000658 	.word	0x20000658
 8002e70:	20000660 	.word	0x20000660
 8002e74:	2000001c 	.word	0x2000001c
 8002e78:	2000000c 	.word	0x2000000c
 8002e7c:	20000151 	.word	0x20000151
 8002e80:	20000668 	.word	0x20000668
 8002e84:	20000152 	.word	0x20000152

08002e88 <init_menuPrincipal>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

void init_menuPrincipal (void){
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af02      	add	r7, sp, #8

	auxFecha = get_fecha();
 8002e8e:	f7ff fd27 	bl	80028e0 <get_fecha>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <init_menuPrincipal+0x88>)
 8002e96:	4611      	mov	r1, r2
 8002e98:	7019      	strb	r1, [r3, #0]
 8002e9a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002e9e:	7059      	strb	r1, [r3, #1]
 8002ea0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8002ea4:	7099      	strb	r1, [r3, #2]
 8002ea6:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8002eaa:	70da      	strb	r2, [r3, #3]
	auxHora = get_hora();
 8002eac:	f7ff fcfe 	bl	80028ac <get_hora>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <init_menuPrincipal+0x8c>)
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	7019      	strb	r1, [r3, #0]
 8002eb8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002ebc:	7059      	strb	r1, [r3, #1]
 8002ebe:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8002ec2:	709a      	strb	r2, [r3, #2]

	lastFecha = auxFecha;
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <init_menuPrincipal+0x90>)
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <init_menuPrincipal+0x88>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6013      	str	r3, [r2, #0]
	lastHora = auxHora;
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <init_menuPrincipal+0x94>)
 8002ece:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <init_menuPrincipal+0x8c>)
 8002ed0:	8811      	ldrh	r1, [r2, #0]
 8002ed2:	7892      	ldrb	r2, [r2, #2]
 8002ed4:	8019      	strh	r1, [r3, #0]
 8002ed6:	709a      	strb	r2, [r3, #2]

	sprintf(texto, "%02i  %02i:%02i:%02i", auxFecha.Date, auxHora.Hours, auxHora.Minutes, auxHora.Seconds );
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <init_menuPrincipal+0x88>)
 8002eda:	789b      	ldrb	r3, [r3, #2]
 8002edc:	4619      	mov	r1, r3
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <init_menuPrincipal+0x8c>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <init_menuPrincipal+0x8c>)
 8002ee6:	785b      	ldrb	r3, [r3, #1]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <init_menuPrincipal+0x8c>)
 8002eec:	789b      	ldrb	r3, [r3, #2]
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	9200      	str	r2, [sp, #0]
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	460a      	mov	r2, r1
 8002ef6:	490a      	ldr	r1, [pc, #40]	; (8002f20 <init_menuPrincipal+0x98>)
 8002ef8:	480a      	ldr	r0, [pc, #40]	; (8002f24 <init_menuPrincipal+0x9c>)
 8002efa:	f004 fc37 	bl	800776c <siprintf>

	set_pantalla(PANT_init_menuPrincipal);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fe38 	bl	8000b74 <set_pantalla>
//	menuActual = &menu[MENU_PRINCIPAL];

	setTexto_pantalla(texto);
 8002f04:	4807      	ldr	r0, [pc, #28]	; (8002f24 <init_menuPrincipal+0x9c>)
 8002f06:	f7fd ffc7 	bl	8000e98 <setTexto_pantalla>
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	2000063c 	.word	0x2000063c
 8002f14:	20000650 	.word	0x20000650
 8002f18:	20000664 	.word	0x20000664
 8002f1c:	2000065c 	.word	0x2000065c
 8002f20:	08008218 	.word	0x08008218
 8002f24:	200005f4 	.word	0x200005f4

08002f28 <init_setLlenado>:


void init_setLlenado (void){
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0

	set_pantalla(PANT_init_setLlenado);
 8002f2c:	2006      	movs	r0, #6
 8002f2e:	f7fd fe21 	bl	8000b74 <set_pantalla>
	status_menuSetLlenado = ELIJE_ON_OFF_LLENADO;
 8002f32:	4b02      	ldr	r3, [pc, #8]	; (8002f3c <init_setLlenado+0x14>)
 8002f34:	2206      	movs	r2, #6
 8002f36:	701a      	strb	r2, [r3, #0]

} //end init_llenado()
 8002f38:	bf00      	nop
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	2000008c 	.word	0x2000008c

08002f40 <init_llenado>:


void init_llenado (void){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <init_llenado+0x44>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d010      	beq.n	8002f6e <init_llenado+0x2e>
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d00a      	beq.n	8002f66 <init_llenado+0x26>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d000      	beq.n	8002f56 <init_llenado+0x16>
		break;
		case CONECTE_SENSOR:
			set_pantalla(PANT_CONECTE_SENSOR);
			set_led(OUT_led_napa, PRENDIDO);
		default:
		break;
 8002f54:	e012      	b.n	8002f7c <init_llenado+0x3c>
			set_led(OUT_led_napa, PRENDIDO);
 8002f56:	2101      	movs	r1, #1
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f7ff fd9f 	bl	8002a9c <set_led>
			set_pantalla(PANT_sensor_conectado);
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7fd fe08 	bl	8000b74 <set_pantalla>
		break;
 8002f64:	e00b      	b.n	8002f7e <init_llenado+0x3e>
			set_pantalla(PANT_llenando_terminar);
 8002f66:	2002      	movs	r0, #2
 8002f68:	f7fd fe04 	bl	8000b74 <set_pantalla>
		break;
 8002f6c:	e007      	b.n	8002f7e <init_llenado+0x3e>
			set_pantalla(PANT_CONECTE_SENSOR);
 8002f6e:	200a      	movs	r0, #10
 8002f70:	f7fd fe00 	bl	8000b74 <set_pantalla>
			set_led(OUT_led_napa, PRENDIDO);
 8002f74:	2101      	movs	r1, #1
 8002f76:	2001      	movs	r0, #1
 8002f78:	f7ff fd90 	bl	8002a9c <set_led>
		break;
 8002f7c:	bf00      	nop
	} //end switch status_menuTablero

} //end init_llenado()
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000155 	.word	0x20000155

08002f88 <init_skimmer>:


void init_skimmer (void){
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_skimmer);
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	f7fd fdf1 	bl	8000b74 <set_pantalla>
	status_menuSkimmer = COMPRUEBE_BOMBA;
 8002f92:	4b02      	ldr	r3, [pc, #8]	; (8002f9c <init_skimmer+0x14>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000156 	.word	0x20000156

08002fa0 <init_hidro>:


void init_hidro (void){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_hidro);
 8002fa4:	2004      	movs	r0, #4
 8002fa6:	f7fd fde5 	bl	8000b74 <set_pantalla>
	status_menuHidro = ELIJE_TIEMPO_HIDRO;
 8002faa:	4b02      	ldr	r3, [pc, #8]	; (8002fb4 <init_hidro+0x14>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000157 	.word	0x20000157

08002fb8 <init_lucesExt>:


void init_lucesExt (void){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
	set_pantalla(PANT_init_lucesExt);
 8002fbc:	2005      	movs	r0, #5
 8002fbe:	f7fd fdd9 	bl	8000b74 <set_pantalla>
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <init_lucesLed>:


void init_lucesLed (void){
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0

}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <init_config>:


void init_config (void){
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0

}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
	...

08002fe0 <acc_menuPrincipal>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

void acc_menuPrincipal (void){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af02      	add	r7, sp, #8
//		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
//		menuActual->inicia_menu();
//		return;
//	}

	if (getStatBoton(IN_jet)==FALL){
 8002fe6:	2014      	movs	r0, #20
 8002fe8:	f7fd fa72 	bl	80004d0 <getStatBoton>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d100      	bne.n	8002ff4 <acc_menuPrincipal+0x14>
		__NOP();
 8002ff2:	bf00      	nop
	}

	if (getStatBoton(IN_A)==FALL){
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	f7fd fa6b 	bl	80004d0 <getStatBoton>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d10e      	bne.n	800301e <acc_menuPrincipal+0x3e>
		menuAux = menuActual;
 8003000:	4b85      	ldr	r3, [pc, #532]	; (8003218 <acc_menuPrincipal+0x238>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a85      	ldr	r2, [pc, #532]	; (800321c <acc_menuPrincipal+0x23c>)
 8003006:	6013      	str	r3, [r2, #0]
		menuActual = &menu[MENU_SET_LLENADO];
 8003008:	4b83      	ldr	r3, [pc, #524]	; (8003218 <acc_menuPrincipal+0x238>)
 800300a:	4a85      	ldr	r2, [pc, #532]	; (8003220 <acc_menuPrincipal+0x240>)
 800300c:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 800300e:	4b82      	ldr	r3, [pc, #520]	; (8003218 <acc_menuPrincipal+0x238>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a84      	ldr	r2, [pc, #528]	; (8003224 <acc_menuPrincipal+0x244>)
 8003014:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8003016:	4b80      	ldr	r3, [pc, #512]	; (8003218 <acc_menuPrincipal+0x238>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4798      	blx	r3
	} //end if getStatBoton(IN_A)

	if (getStatBoton(IN_B)==FALL){
 800301e:	2007      	movs	r0, #7
 8003020:	f7fd fa56 	bl	80004d0 <getStatBoton>
 8003024:	4603      	mov	r3, r0
 8003026:	2b02      	cmp	r3, #2
 8003028:	d10b      	bne.n	8003042 <acc_menuPrincipal+0x62>
		menuActual = &menu[MENU_HIDRO];
 800302a:	4b7b      	ldr	r3, [pc, #492]	; (8003218 <acc_menuPrincipal+0x238>)
 800302c:	4a7e      	ldr	r2, [pc, #504]	; (8003228 <acc_menuPrincipal+0x248>)
 800302e:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8003030:	4b79      	ldr	r3, [pc, #484]	; (8003218 <acc_menuPrincipal+0x238>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a7b      	ldr	r2, [pc, #492]	; (8003224 <acc_menuPrincipal+0x244>)
 8003036:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8003038:	4b77      	ldr	r3, [pc, #476]	; (8003218 <acc_menuPrincipal+0x238>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	4798      	blx	r3
		return;
 8003040:	e0e7      	b.n	8003212 <acc_menuPrincipal+0x232>
	} //end if getStatBoton(IN_B)

	if (getStatBoton(IN_C)==FALL){
 8003042:	200b      	movs	r0, #11
 8003044:	f7fd fa44 	bl	80004d0 <getStatBoton>
 8003048:	4603      	mov	r3, r0
 800304a:	2b02      	cmp	r3, #2
 800304c:	d10b      	bne.n	8003066 <acc_menuPrincipal+0x86>
		menuActual = &menu[MENU_SKIMMER];
 800304e:	4b72      	ldr	r3, [pc, #456]	; (8003218 <acc_menuPrincipal+0x238>)
 8003050:	4a76      	ldr	r2, [pc, #472]	; (800322c <acc_menuPrincipal+0x24c>)
 8003052:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8003054:	4b70      	ldr	r3, [pc, #448]	; (8003218 <acc_menuPrincipal+0x238>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a72      	ldr	r2, [pc, #456]	; (8003224 <acc_menuPrincipal+0x244>)
 800305a:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 800305c:	4b6e      	ldr	r3, [pc, #440]	; (8003218 <acc_menuPrincipal+0x238>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	4798      	blx	r3
		return;
 8003064:	e0d5      	b.n	8003212 <acc_menuPrincipal+0x232>
	}

	if (getStatBoton(IN_D)==FALL){
 8003066:	200f      	movs	r0, #15
 8003068:	f7fd fa32 	bl	80004d0 <getStatBoton>
 800306c:	4603      	mov	r3, r0
 800306e:	2b02      	cmp	r3, #2
 8003070:	d10b      	bne.n	800308a <acc_menuPrincipal+0xaa>
		menuActual = &menu[MENU_LUCES_EXT];
 8003072:	4b69      	ldr	r3, [pc, #420]	; (8003218 <acc_menuPrincipal+0x238>)
 8003074:	4a6e      	ldr	r2, [pc, #440]	; (8003230 <acc_menuPrincipal+0x250>)
 8003076:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8003078:	4b67      	ldr	r3, [pc, #412]	; (8003218 <acc_menuPrincipal+0x238>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a69      	ldr	r2, [pc, #420]	; (8003224 <acc_menuPrincipal+0x244>)
 800307e:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8003080:	4b65      	ldr	r3, [pc, #404]	; (8003218 <acc_menuPrincipal+0x238>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4798      	blx	r3
		return;
 8003088:	e0c3      	b.n	8003212 <acc_menuPrincipal+0x232>
	}

	if (runProg_llenado(PROG_CHECK) == PROG_FINISHED){
 800308a:	2001      	movs	r0, #1
 800308c:	f7ff f90c 	bl	80022a8 <runProg_llenado>
 8003090:	4603      	mov	r3, r0
 8003092:	2b03      	cmp	r3, #3
 8003094:	d10a      	bne.n	80030ac <acc_menuPrincipal+0xcc>
		menuActual = &menu[MENU_LLENADO];
 8003096:	4b60      	ldr	r3, [pc, #384]	; (8003218 <acc_menuPrincipal+0x238>)
 8003098:	4a66      	ldr	r2, [pc, #408]	; (8003234 <acc_menuPrincipal+0x254>)
 800309a:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 800309c:	4b5e      	ldr	r3, [pc, #376]	; (8003218 <acc_menuPrincipal+0x238>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a60      	ldr	r2, [pc, #384]	; (8003224 <acc_menuPrincipal+0x244>)
 80030a2:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 80030a4:	4b5c      	ldr	r3, [pc, #368]	; (8003218 <acc_menuPrincipal+0x238>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	4798      	blx	r3
	}


	//prueba hora

	auxFecha = get_fecha();
 80030ac:	f7ff fc18 	bl	80028e0 <get_fecha>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b61      	ldr	r3, [pc, #388]	; (8003238 <acc_menuPrincipal+0x258>)
 80030b4:	4611      	mov	r1, r2
 80030b6:	7019      	strb	r1, [r3, #0]
 80030b8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80030bc:	7059      	strb	r1, [r3, #1]
 80030be:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80030c2:	7099      	strb	r1, [r3, #2]
 80030c4:	f3c2 6207 	ubfx	r2, r2, #24, #8
 80030c8:	70da      	strb	r2, [r3, #3]
	auxHora = get_hora();
 80030ca:	f7ff fbef 	bl	80028ac <get_hora>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4b5a      	ldr	r3, [pc, #360]	; (800323c <acc_menuPrincipal+0x25c>)
 80030d2:	4611      	mov	r1, r2
 80030d4:	7019      	strb	r1, [r3, #0]
 80030d6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80030da:	7059      	strb	r1, [r3, #1]
 80030dc:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80030e0:	709a      	strb	r2, [r3, #2]

	if (lastFecha.Date < auxFecha.Date) {
 80030e2:	4b57      	ldr	r3, [pc, #348]	; (8003240 <acc_menuPrincipal+0x260>)
 80030e4:	789a      	ldrb	r2, [r3, #2]
 80030e6:	4b54      	ldr	r3, [pc, #336]	; (8003238 <acc_menuPrincipal+0x258>)
 80030e8:	789b      	ldrb	r3, [r3, #2]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d21f      	bcs.n	800312e <acc_menuPrincipal+0x14e>
		lastFecha = auxFecha;
 80030ee:	4a54      	ldr	r2, [pc, #336]	; (8003240 <acc_menuPrincipal+0x260>)
 80030f0:	4b51      	ldr	r3, [pc, #324]	; (8003238 <acc_menuPrincipal+0x258>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6013      	str	r3, [r2, #0]
		lastHora = auxHora;
 80030f6:	4b53      	ldr	r3, [pc, #332]	; (8003244 <acc_menuPrincipal+0x264>)
 80030f8:	4a50      	ldr	r2, [pc, #320]	; (800323c <acc_menuPrincipal+0x25c>)
 80030fa:	8811      	ldrh	r1, [r2, #0]
 80030fc:	7892      	ldrb	r2, [r2, #2]
 80030fe:	8019      	strh	r1, [r3, #0]
 8003100:	709a      	strb	r2, [r3, #2]
		sprintf(texto, "%02i  %02i:%02i:%02i", auxFecha.Date, auxHora.Hours, auxHora.Minutes, auxHora.Seconds );
 8003102:	4b4d      	ldr	r3, [pc, #308]	; (8003238 <acc_menuPrincipal+0x258>)
 8003104:	789b      	ldrb	r3, [r3, #2]
 8003106:	4619      	mov	r1, r3
 8003108:	4b4c      	ldr	r3, [pc, #304]	; (800323c <acc_menuPrincipal+0x25c>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	4b4b      	ldr	r3, [pc, #300]	; (800323c <acc_menuPrincipal+0x25c>)
 8003110:	785b      	ldrb	r3, [r3, #1]
 8003112:	461a      	mov	r2, r3
 8003114:	4b49      	ldr	r3, [pc, #292]	; (800323c <acc_menuPrincipal+0x25c>)
 8003116:	789b      	ldrb	r3, [r3, #2]
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	9200      	str	r2, [sp, #0]
 800311c:	4603      	mov	r3, r0
 800311e:	460a      	mov	r2, r1
 8003120:	4949      	ldr	r1, [pc, #292]	; (8003248 <acc_menuPrincipal+0x268>)
 8003122:	484a      	ldr	r0, [pc, #296]	; (800324c <acc_menuPrincipal+0x26c>)
 8003124:	f004 fb22 	bl	800776c <siprintf>
		setTexto_pantalla(texto);
 8003128:	4848      	ldr	r0, [pc, #288]	; (800324c <acc_menuPrincipal+0x26c>)
 800312a:	f7fd feb5 	bl	8000e98 <setTexto_pantalla>
	}

	if (lastHora.Hours < auxHora.Hours) {
 800312e:	4b45      	ldr	r3, [pc, #276]	; (8003244 <acc_menuPrincipal+0x264>)
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	4b42      	ldr	r3, [pc, #264]	; (800323c <acc_menuPrincipal+0x25c>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d21f      	bcs.n	800317a <acc_menuPrincipal+0x19a>
		lastFecha = auxFecha;
 800313a:	4a41      	ldr	r2, [pc, #260]	; (8003240 <acc_menuPrincipal+0x260>)
 800313c:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <acc_menuPrincipal+0x258>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6013      	str	r3, [r2, #0]
		lastHora = auxHora;
 8003142:	4b40      	ldr	r3, [pc, #256]	; (8003244 <acc_menuPrincipal+0x264>)
 8003144:	4a3d      	ldr	r2, [pc, #244]	; (800323c <acc_menuPrincipal+0x25c>)
 8003146:	8811      	ldrh	r1, [r2, #0]
 8003148:	7892      	ldrb	r2, [r2, #2]
 800314a:	8019      	strh	r1, [r3, #0]
 800314c:	709a      	strb	r2, [r3, #2]
		sprintf(texto, "%02i  %02i:%02i:%02i", auxFecha.Date, auxHora.Hours, auxHora.Minutes, auxHora.Seconds );
 800314e:	4b3a      	ldr	r3, [pc, #232]	; (8003238 <acc_menuPrincipal+0x258>)
 8003150:	789b      	ldrb	r3, [r3, #2]
 8003152:	4619      	mov	r1, r3
 8003154:	4b39      	ldr	r3, [pc, #228]	; (800323c <acc_menuPrincipal+0x25c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	4b38      	ldr	r3, [pc, #224]	; (800323c <acc_menuPrincipal+0x25c>)
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	461a      	mov	r2, r3
 8003160:	4b36      	ldr	r3, [pc, #216]	; (800323c <acc_menuPrincipal+0x25c>)
 8003162:	789b      	ldrb	r3, [r3, #2]
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	9200      	str	r2, [sp, #0]
 8003168:	4603      	mov	r3, r0
 800316a:	460a      	mov	r2, r1
 800316c:	4936      	ldr	r1, [pc, #216]	; (8003248 <acc_menuPrincipal+0x268>)
 800316e:	4837      	ldr	r0, [pc, #220]	; (800324c <acc_menuPrincipal+0x26c>)
 8003170:	f004 fafc 	bl	800776c <siprintf>
		setTexto_pantalla(texto);
 8003174:	4835      	ldr	r0, [pc, #212]	; (800324c <acc_menuPrincipal+0x26c>)
 8003176:	f7fd fe8f 	bl	8000e98 <setTexto_pantalla>
	}

	if (lastHora.Minutes < auxHora.Minutes) {
 800317a:	4b32      	ldr	r3, [pc, #200]	; (8003244 <acc_menuPrincipal+0x264>)
 800317c:	785a      	ldrb	r2, [r3, #1]
 800317e:	4b2f      	ldr	r3, [pc, #188]	; (800323c <acc_menuPrincipal+0x25c>)
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	429a      	cmp	r2, r3
 8003184:	d21f      	bcs.n	80031c6 <acc_menuPrincipal+0x1e6>
		lastFecha = auxFecha;
 8003186:	4a2e      	ldr	r2, [pc, #184]	; (8003240 <acc_menuPrincipal+0x260>)
 8003188:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <acc_menuPrincipal+0x258>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6013      	str	r3, [r2, #0]
		lastHora = auxHora;
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <acc_menuPrincipal+0x264>)
 8003190:	4a2a      	ldr	r2, [pc, #168]	; (800323c <acc_menuPrincipal+0x25c>)
 8003192:	8811      	ldrh	r1, [r2, #0]
 8003194:	7892      	ldrb	r2, [r2, #2]
 8003196:	8019      	strh	r1, [r3, #0]
 8003198:	709a      	strb	r2, [r3, #2]
		sprintf(texto, "%02i  %02i:%02i:%02i", auxFecha.Date, auxHora.Hours, auxHora.Minutes, auxHora.Seconds);
 800319a:	4b27      	ldr	r3, [pc, #156]	; (8003238 <acc_menuPrincipal+0x258>)
 800319c:	789b      	ldrb	r3, [r3, #2]
 800319e:	4619      	mov	r1, r3
 80031a0:	4b26      	ldr	r3, [pc, #152]	; (800323c <acc_menuPrincipal+0x25c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	4b25      	ldr	r3, [pc, #148]	; (800323c <acc_menuPrincipal+0x25c>)
 80031a8:	785b      	ldrb	r3, [r3, #1]
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b23      	ldr	r3, [pc, #140]	; (800323c <acc_menuPrincipal+0x25c>)
 80031ae:	789b      	ldrb	r3, [r3, #2]
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	9200      	str	r2, [sp, #0]
 80031b4:	4603      	mov	r3, r0
 80031b6:	460a      	mov	r2, r1
 80031b8:	4923      	ldr	r1, [pc, #140]	; (8003248 <acc_menuPrincipal+0x268>)
 80031ba:	4824      	ldr	r0, [pc, #144]	; (800324c <acc_menuPrincipal+0x26c>)
 80031bc:	f004 fad6 	bl	800776c <siprintf>
		setTexto_pantalla(texto);
 80031c0:	4822      	ldr	r0, [pc, #136]	; (800324c <acc_menuPrincipal+0x26c>)
 80031c2:	f7fd fe69 	bl	8000e98 <setTexto_pantalla>
	}

	if (lastHora.Seconds < auxHora.Seconds) {
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <acc_menuPrincipal+0x264>)
 80031c8:	789a      	ldrb	r2, [r3, #2]
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <acc_menuPrincipal+0x25c>)
 80031cc:	789b      	ldrb	r3, [r3, #2]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d21f      	bcs.n	8003212 <acc_menuPrincipal+0x232>
		lastFecha = auxFecha;
 80031d2:	4a1b      	ldr	r2, [pc, #108]	; (8003240 <acc_menuPrincipal+0x260>)
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <acc_menuPrincipal+0x258>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6013      	str	r3, [r2, #0]
		lastHora = auxHora;
 80031da:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <acc_menuPrincipal+0x264>)
 80031dc:	4a17      	ldr	r2, [pc, #92]	; (800323c <acc_menuPrincipal+0x25c>)
 80031de:	8811      	ldrh	r1, [r2, #0]
 80031e0:	7892      	ldrb	r2, [r2, #2]
 80031e2:	8019      	strh	r1, [r3, #0]
 80031e4:	709a      	strb	r2, [r3, #2]
		sprintf(texto, "%02i  %02i:%02i:%02i", auxFecha.Date, auxHora.Hours, auxHora.Minutes, auxHora.Seconds);
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <acc_menuPrincipal+0x258>)
 80031e8:	789b      	ldrb	r3, [r3, #2]
 80031ea:	4619      	mov	r1, r3
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <acc_menuPrincipal+0x25c>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <acc_menuPrincipal+0x25c>)
 80031f4:	785b      	ldrb	r3, [r3, #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b10      	ldr	r3, [pc, #64]	; (800323c <acc_menuPrincipal+0x25c>)
 80031fa:	789b      	ldrb	r3, [r3, #2]
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	9200      	str	r2, [sp, #0]
 8003200:	4603      	mov	r3, r0
 8003202:	460a      	mov	r2, r1
 8003204:	4910      	ldr	r1, [pc, #64]	; (8003248 <acc_menuPrincipal+0x268>)
 8003206:	4811      	ldr	r0, [pc, #68]	; (800324c <acc_menuPrincipal+0x26c>)
 8003208:	f004 fab0 	bl	800776c <siprintf>
		setTexto_pantalla(texto);
 800320c:	480f      	ldr	r0, [pc, #60]	; (800324c <acc_menuPrincipal+0x26c>)
 800320e:	f7fd fe43 	bl	8000e98 <setTexto_pantalla>
	}


} //end acc_menuPrincipal()
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000658 	.word	0x20000658
 800321c:	20000660 	.word	0x20000660
 8003220:	2000002c 	.word	0x2000002c
 8003224:	2000000c 	.word	0x2000000c
 8003228:	2000004c 	.word	0x2000004c
 800322c:	2000003c 	.word	0x2000003c
 8003230:	2000005c 	.word	0x2000005c
 8003234:	2000001c 	.word	0x2000001c
 8003238:	2000063c 	.word	0x2000063c
 800323c:	20000650 	.word	0x20000650
 8003240:	20000664 	.word	0x20000664
 8003244:	2000065c 	.word	0x2000065c
 8003248:	08008218 	.word	0x08008218
 800324c:	200005f4 	.word	0x200005f4

08003250 <acc_setLlenado>:


void acc_setLlenado (void){
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0

	switch (status_menuSetLlenado) {
 8003254:	4b38      	ldr	r3, [pc, #224]	; (8003338 <acc_setLlenado+0xe8>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b07      	cmp	r3, #7
 800325a:	d02f      	beq.n	80032bc <acc_setLlenado+0x6c>
 800325c:	2b08      	cmp	r3, #8
 800325e:	d04a      	beq.n	80032f6 <acc_setLlenado+0xa6>
 8003260:	2b06      	cmp	r3, #6
 8003262:	d000      	beq.n	8003266 <acc_setLlenado+0x16>
					set_pantalla(PANT_init_setLlenado);
				default:
				break;
			} //end switch aux_progOutput
		default:
		break;
 8003264:	e065      	b.n	8003332 <acc_setLlenado+0xe2>
			if (getStatBoton(IN_1) == FALL) {
 8003266:	2000      	movs	r0, #0
 8003268:	f7fd f932 	bl	80004d0 <getStatBoton>
 800326c:	4603      	mov	r3, r0
 800326e:	2b02      	cmp	r3, #2
 8003270:	d106      	bne.n	8003280 <acc_setLlenado+0x30>
				set_pantalla(PANT_PERIODO_ON_LLENADO);
 8003272:	2007      	movs	r0, #7
 8003274:	f7fd fc7e 	bl	8000b74 <set_pantalla>
				status_menuSetLlenado = PERIODO_ON_LLENADO;
 8003278:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <acc_setLlenado+0xe8>)
 800327a:	2207      	movs	r2, #7
 800327c:	701a      	strb	r2, [r3, #0]
				break;
 800327e:	e058      	b.n	8003332 <acc_setLlenado+0xe2>
			if (getStatBoton(IN_2) == FALL) {
 8003280:	2001      	movs	r0, #1
 8003282:	f7fd f925 	bl	80004d0 <getStatBoton>
 8003286:	4603      	mov	r3, r0
 8003288:	2b02      	cmp	r3, #2
 800328a:	d106      	bne.n	800329a <acc_setLlenado+0x4a>
				set_pantalla(PANT_PERIODO_OFF_LLENADO);
 800328c:	2008      	movs	r0, #8
 800328e:	f7fd fc71 	bl	8000b74 <set_pantalla>
				status_menuSetLlenado = PERIODO_OFF_LLENADO;
 8003292:	4b29      	ldr	r3, [pc, #164]	; (8003338 <acc_setLlenado+0xe8>)
 8003294:	2208      	movs	r2, #8
 8003296:	701a      	strb	r2, [r3, #0]
				break;
 8003298:	e04b      	b.n	8003332 <acc_setLlenado+0xe2>
			if (getStatBoton(IN_AST) == FALL) {
 800329a:	200c      	movs	r0, #12
 800329c:	f7fd f918 	bl	80004d0 <getStatBoton>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d144      	bne.n	8003330 <acc_setLlenado+0xe0>
				menuActual = &menu[MENU_PRINCIPAL];
 80032a6:	4b25      	ldr	r3, [pc, #148]	; (800333c <acc_setLlenado+0xec>)
 80032a8:	4a25      	ldr	r2, [pc, #148]	; (8003340 <acc_setLlenado+0xf0>)
 80032aa:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80032ac:	4b23      	ldr	r3, [pc, #140]	; (800333c <acc_setLlenado+0xec>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4798      	blx	r3
				status_menuSetLlenado = PREGUNTA_SENSOR;
 80032b4:	4b20      	ldr	r3, [pc, #128]	; (8003338 <acc_setLlenado+0xe8>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
		break;
 80032ba:	e039      	b.n	8003330 <acc_setLlenado+0xe0>
			aux_progOutput = setProg_llenado(PROG_SET1);
 80032bc:	2004      	movs	r0, #4
 80032be:	f7fd ff3f 	bl	8001140 <setProg_llenado>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b1f      	ldr	r3, [pc, #124]	; (8003344 <acc_setLlenado+0xf4>)
 80032c8:	701a      	strb	r2, [r3, #0]
			switch (aux_progOutput) {
 80032ca:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <acc_setLlenado+0xf4>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d002      	beq.n	80032d8 <acc_setLlenado+0x88>
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d007      	beq.n	80032e6 <acc_setLlenado+0x96>
				break;
 80032d6:	e00c      	b.n	80032f2 <acc_setLlenado+0xa2>
					status_menuSetLlenado = ELIJE_ON_OFF_LLENADO;
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <acc_setLlenado+0xe8>)
 80032da:	2206      	movs	r2, #6
 80032dc:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_init_setLlenado);
 80032de:	2006      	movs	r0, #6
 80032e0:	f7fd fc48 	bl	8000b74 <set_pantalla>
				break;
 80032e4:	e006      	b.n	80032f4 <acc_setLlenado+0xa4>
					status_menuSetLlenado = ELIJE_ON_OFF_LLENADO;
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <acc_setLlenado+0xe8>)
 80032e8:	2206      	movs	r2, #6
 80032ea:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_init_setLlenado);
 80032ec:	2006      	movs	r0, #6
 80032ee:	f7fd fc41 	bl	8000b74 <set_pantalla>
				break;
 80032f2:	bf00      	nop
		break;
 80032f4:	e01d      	b.n	8003332 <acc_setLlenado+0xe2>
			aux_progOutput = setProg_llenado(PROG_SET2);
 80032f6:	2005      	movs	r0, #5
 80032f8:	f7fd ff22 	bl	8001140 <setProg_llenado>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	4b10      	ldr	r3, [pc, #64]	; (8003344 <acc_setLlenado+0xf4>)
 8003302:	701a      	strb	r2, [r3, #0]
			switch (aux_progOutput) {
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <acc_setLlenado+0xf4>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d002      	beq.n	8003312 <acc_setLlenado+0xc2>
 800330c:	2b03      	cmp	r3, #3
 800330e:	d007      	beq.n	8003320 <acc_setLlenado+0xd0>
				break;
 8003310:	e00c      	b.n	800332c <acc_setLlenado+0xdc>
					status_menuSetLlenado = ELIJE_ON_OFF_LLENADO;
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <acc_setLlenado+0xe8>)
 8003314:	2206      	movs	r2, #6
 8003316:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_init_setLlenado);
 8003318:	2006      	movs	r0, #6
 800331a:	f7fd fc2b 	bl	8000b74 <set_pantalla>
				break;
 800331e:	e006      	b.n	800332e <acc_setLlenado+0xde>
					status_menuSetLlenado = ELIJE_ON_OFF_LLENADO;
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <acc_setLlenado+0xe8>)
 8003322:	2206      	movs	r2, #6
 8003324:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_init_setLlenado);
 8003326:	2006      	movs	r0, #6
 8003328:	f7fd fc24 	bl	8000b74 <set_pantalla>
				break;
 800332c:	bf00      	nop
		break;
 800332e:	e000      	b.n	8003332 <acc_setLlenado+0xe2>
		break;
 8003330:	bf00      	nop
	} //end switch status_menuLlenado

} //end acc_setLlenado ()
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	2000008c 	.word	0x2000008c
 800333c:	20000658 	.word	0x20000658
 8003340:	2000000c 	.word	0x2000000c
 8003344:	20000668 	.word	0x20000668

08003348 <acc_llenado>:


void acc_llenado (void){
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <acc_llenado+0x200>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b05      	cmp	r3, #5
 8003352:	f200 80ec 	bhi.w	800352e <acc_llenado+0x1e6>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <acc_llenado+0x14>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003375 	.word	0x08003375
 8003360:	080033ab 	.word	0x080033ab
 8003364:	080033eb 	.word	0x080033eb
 8003368:	08003427 	.word	0x08003427
 800336c:	0800348d 	.word	0x0800348d
 8003370:	080034eb 	.word	0x080034eb
		case PREGUNTA_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8003374:	200e      	movs	r0, #14
 8003376:	f7fd f8ab 	bl	80004d0 <getStatBoton>
 800337a:	4603      	mov	r3, r0
 800337c:	2b02      	cmp	r3, #2
 800337e:	d106      	bne.n	800338e <acc_llenado+0x46>
				set_pantalla(PANT_COMPRUEBE_SENSOR);
 8003380:	2009      	movs	r0, #9
 8003382:	f7fd fbf7 	bl	8000b74 <set_pantalla>
				status_menuLlenado = COMPRUEBE_SENSOR;
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <acc_llenado+0x200>)
 8003388:	2202      	movs	r2, #2
 800338a:	701a      	strb	r2, [r3, #0]
				break;
 800338c:	e0da      	b.n	8003544 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_AST) == FALL) { //niego
 800338e:	200c      	movs	r0, #12
 8003390:	f7fd f89e 	bl	80004d0 <getStatBoton>
 8003394:	4603      	mov	r3, r0
 8003396:	2b02      	cmp	r3, #2
 8003398:	f040 80cb 	bne.w	8003532 <acc_llenado+0x1ea>
				set_pantalla(PANT_CONECTE_SENSOR);
 800339c:	200a      	movs	r0, #10
 800339e:	f7fd fbe9 	bl	8000b74 <set_pantalla>
				status_menuLlenado = CONECTE_SENSOR;
 80033a2:	4b69      	ldr	r3, [pc, #420]	; (8003548 <acc_llenado+0x200>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
				break;
 80033a8:	e0cc      	b.n	8003544 <acc_llenado+0x1fc>
			}

		break;
		case CONECTE_SENSOR:

			if (getStatBoton(IN_AST) == FALL) { //volver
 80033aa:	200c      	movs	r0, #12
 80033ac:	f7fd f890 	bl	80004d0 <getStatBoton>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d10b      	bne.n	80033ce <acc_llenado+0x86>
				//vuelve al menu principal
				set_led(OUT_led_napa, APAGADO);
 80033b6:	2100      	movs	r1, #0
 80033b8:	2001      	movs	r0, #1
 80033ba:	f7ff fb6f 	bl	8002a9c <set_led>
				menuActual = &menu[MENU_PRINCIPAL];
 80033be:	4b63      	ldr	r3, [pc, #396]	; (800354c <acc_llenado+0x204>)
 80033c0:	4a63      	ldr	r2, [pc, #396]	; (8003550 <acc_llenado+0x208>)
 80033c2:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80033c4:	4b61      	ldr	r3, [pc, #388]	; (800354c <acc_llenado+0x204>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	4798      	blx	r3
				break;
 80033cc:	e0ba      	b.n	8003544 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 80033ce:	200e      	movs	r0, #14
 80033d0:	f7fd f87e 	bl	80004d0 <getStatBoton>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	f040 80ad 	bne.w	8003536 <acc_llenado+0x1ee>
				set_pantalla(PANT_PREGUNTA_SENSOR);
 80033dc:	200b      	movs	r0, #11
 80033de:	f7fd fbc9 	bl	8000b74 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 80033e2:	4b59      	ldr	r3, [pc, #356]	; (8003548 <acc_llenado+0x200>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
				break;
 80033e8:	e0ac      	b.n	8003544 <acc_llenado+0x1fc>
			}
		break;
		case COMPRUEBE_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 80033ea:	200e      	movs	r0, #14
 80033ec:	f7fd f870 	bl	80004d0 <getStatBoton>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d109      	bne.n	800340a <acc_llenado+0xc2>
				set_pantalla(PANT_LLENANDO);
 80033f6:	200c      	movs	r0, #12
 80033f8:	f7fd fbbc 	bl	8000b74 <set_pantalla>
				runProg_llenado(PROG_RUN);
 80033fc:	2002      	movs	r0, #2
 80033fe:	f7fe ff53 	bl	80022a8 <runProg_llenado>
				status_menuLlenado = LLENANDO;
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <acc_llenado+0x200>)
 8003404:	2203      	movs	r2, #3
 8003406:	701a      	strb	r2, [r3, #0]
				break;
 8003408:	e09c      	b.n	8003544 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 800340a:	200c      	movs	r0, #12
 800340c:	f7fd f860 	bl	80004d0 <getStatBoton>
 8003410:	4603      	mov	r3, r0
 8003412:	2b02      	cmp	r3, #2
 8003414:	f040 8091 	bne.w	800353a <acc_llenado+0x1f2>
				set_pantalla(PANT_PREGUNTA_SENSOR);
 8003418:	200b      	movs	r0, #11
 800341a:	f7fd fbab 	bl	8000b74 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <acc_llenado+0x200>)
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
				break;
 8003424:	e08e      	b.n	8003544 <acc_llenado+0x1fc>
			}

		break;
		case LLENANDO:
			if (runProg_llenado(PROG_CHECK) == PROG_FINISHED ) { //LOGICA NEGATIVA
 8003426:	2001      	movs	r0, #1
 8003428:	f7fe ff3e 	bl	80022a8 <runProg_llenado>
 800342c:	4603      	mov	r3, r0
 800342e:	2b03      	cmp	r3, #3
 8003430:	d10a      	bne.n	8003448 <acc_llenado+0x100>
				set_pantalla(PANT_PILETA_LLENA);
 8003432:	200d      	movs	r0, #13
 8003434:	f7fd fb9e 	bl	8000b74 <set_pantalla>
				set_led(OUT_led_napa, APAGADO);
 8003438:	2100      	movs	r1, #0
 800343a:	2001      	movs	r0, #1
 800343c:	f7ff fb2e 	bl	8002a9c <set_led>
				status_menuLlenado = PILETA_LLENA;
 8003440:	4b41      	ldr	r3, [pc, #260]	; (8003548 <acc_llenado+0x200>)
 8003442:	2205      	movs	r2, #5
 8003444:	701a      	strb	r2, [r3, #0]
				break;
 8003446:	e07d      	b.n	8003544 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8003448:	200e      	movs	r0, #14
 800344a:	f7fd f841 	bl	80004d0 <getStatBoton>
 800344e:	4603      	mov	r3, r0
 8003450:	2b02      	cmp	r3, #2
 8003452:	d10a      	bne.n	800346a <acc_llenado+0x122>
				//vuelve al menu principal
				status_menuLlenado = LLENANDO_CHECK;
 8003454:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <acc_llenado+0x200>)
 8003456:	2204      	movs	r2, #4
 8003458:	701a      	strb	r2, [r3, #0]
				menuActual = &menu[MENU_PRINCIPAL];
 800345a:	4b3c      	ldr	r3, [pc, #240]	; (800354c <acc_llenado+0x204>)
 800345c:	4a3c      	ldr	r2, [pc, #240]	; (8003550 <acc_llenado+0x208>)
 800345e:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003460:	4b3a      	ldr	r3, [pc, #232]	; (800354c <acc_llenado+0x204>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	4798      	blx	r3
				break;
 8003468:	e06c      	b.n	8003544 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 800346a:	200c      	movs	r0, #12
 800346c:	f7fd f830 	bl	80004d0 <getStatBoton>
 8003470:	4603      	mov	r3, r0
 8003472:	2b02      	cmp	r3, #2
 8003474:	d163      	bne.n	800353e <acc_llenado+0x1f6>
				//vuelve al menu principal
				status_menuLlenado = LLENANDO_CHECK;
 8003476:	4b34      	ldr	r3, [pc, #208]	; (8003548 <acc_llenado+0x200>)
 8003478:	2204      	movs	r2, #4
 800347a:	701a      	strb	r2, [r3, #0]
				menuActual = &menu[MENU_PRINCIPAL];
 800347c:	4b33      	ldr	r3, [pc, #204]	; (800354c <acc_llenado+0x204>)
 800347e:	4a34      	ldr	r2, [pc, #208]	; (8003550 <acc_llenado+0x208>)
 8003480:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003482:	4b32      	ldr	r3, [pc, #200]	; (800354c <acc_llenado+0x204>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4798      	blx	r3
				break;
 800348a:	e05b      	b.n	8003544 <acc_llenado+0x1fc>
			}
		break;
		case LLENANDO_CHECK:
			if (runProg_llenado(PROG_CHECK) == PROG_FINISHED ) { //LOGICA NEGATIVA
 800348c:	2001      	movs	r0, #1
 800348e:	f7fe ff0b 	bl	80022a8 <runProg_llenado>
 8003492:	4603      	mov	r3, r0
 8003494:	2b03      	cmp	r3, #3
 8003496:	d106      	bne.n	80034a6 <acc_llenado+0x15e>
				set_pantalla(PANT_PILETA_LLENA);
 8003498:	200d      	movs	r0, #13
 800349a:	f7fd fb6b 	bl	8000b74 <set_pantalla>
				status_menuLlenado = PILETA_LLENA;
 800349e:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <acc_llenado+0x200>)
 80034a0:	2205      	movs	r2, #5
 80034a2:	701a      	strb	r2, [r3, #0]
				break;
 80034a4:	e04e      	b.n	8003544 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 80034a6:	200e      	movs	r0, #14
 80034a8:	f7fd f812 	bl	80004d0 <getStatBoton>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d10d      	bne.n	80034ce <acc_llenado+0x186>
				status_menuLlenado = PREGUNTA_SENSOR;
 80034b2:	4b25      	ldr	r3, [pc, #148]	; (8003548 <acc_llenado+0x200>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]
				runProg_llenado(PROG_STOP);
 80034b8:	2003      	movs	r0, #3
 80034ba:	f7fe fef5 	bl	80022a8 <runProg_llenado>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 80034be:	4b23      	ldr	r3, [pc, #140]	; (800354c <acc_llenado+0x204>)
 80034c0:	4a23      	ldr	r2, [pc, #140]	; (8003550 <acc_llenado+0x208>)
 80034c2:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80034c4:	4b21      	ldr	r3, [pc, #132]	; (800354c <acc_llenado+0x204>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	4798      	blx	r3
				break;
 80034cc:	e03a      	b.n	8003544 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 80034ce:	200c      	movs	r0, #12
 80034d0:	f7fc fffe 	bl	80004d0 <getStatBoton>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d133      	bne.n	8003542 <acc_llenado+0x1fa>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 80034da:	4b1c      	ldr	r3, [pc, #112]	; (800354c <acc_llenado+0x204>)
 80034dc:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <acc_llenado+0x208>)
 80034de:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <acc_llenado+0x204>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	4798      	blx	r3
				break;
 80034e8:	e02c      	b.n	8003544 <acc_llenado+0x1fc>
			}
		break;
		case PILETA_LLENA:
			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 80034ea:	200e      	movs	r0, #14
 80034ec:	f7fc fff0 	bl	80004d0 <getStatBoton>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d10a      	bne.n	800350c <acc_llenado+0x1c4>
				status_menuLlenado = PREGUNTA_SENSOR;
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <acc_llenado+0x200>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <acc_llenado+0x204>)
 80034fe:	4a14      	ldr	r2, [pc, #80]	; (8003550 <acc_llenado+0x208>)
 8003500:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <acc_llenado+0x204>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4798      	blx	r3
				break;
 800350a:	e01b      	b.n	8003544 <acc_llenado+0x1fc>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 800350c:	200c      	movs	r0, #12
 800350e:	f7fc ffdf 	bl	80004d0 <getStatBoton>
 8003512:	4603      	mov	r3, r0
 8003514:	2b02      	cmp	r3, #2
 8003516:	d10a      	bne.n	800352e <acc_llenado+0x1e6>
				status_menuLlenado = PREGUNTA_SENSOR;
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <acc_llenado+0x200>)
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 800351e:	4b0b      	ldr	r3, [pc, #44]	; (800354c <acc_llenado+0x204>)
 8003520:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <acc_llenado+0x208>)
 8003522:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <acc_llenado+0x204>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4798      	blx	r3
				break;
 800352c:	e00a      	b.n	8003544 <acc_llenado+0x1fc>
			}

		default:
		break;
 800352e:	bf00      	nop
 8003530:	e008      	b.n	8003544 <acc_llenado+0x1fc>
		break;
 8003532:	bf00      	nop
 8003534:	e006      	b.n	8003544 <acc_llenado+0x1fc>
		break;
 8003536:	bf00      	nop
 8003538:	e004      	b.n	8003544 <acc_llenado+0x1fc>
		break;
 800353a:	bf00      	nop
 800353c:	e002      	b.n	8003544 <acc_llenado+0x1fc>
		break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <acc_llenado+0x1fc>
		break;
 8003542:	bf00      	nop
	} //end switch status_menuLlenado

} //end acc_llenado ()
 8003544:	bf00      	nop
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000155 	.word	0x20000155
 800354c:	20000658 	.word	0x20000658
 8003550:	2000000c 	.word	0x2000000c

08003554 <acc_skimmer>:


void acc_skimmer (void){
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
	switch (status_menuSkimmer) {
 8003558:	4bae      	ldr	r3, [pc, #696]	; (8003814 <acc_skimmer+0x2c0>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b08      	cmp	r3, #8
 800355e:	f200 8157 	bhi.w	8003810 <acc_skimmer+0x2bc>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <acc_skimmer+0x14>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	0800358d 	.word	0x0800358d
 800356c:	080035c5 	.word	0x080035c5
 8003570:	08003617 	.word	0x08003617
 8003574:	08003667 	.word	0x08003667
 8003578:	08003693 	.word	0x08003693
 800357c:	080036bf 	.word	0x080036bf
 8003580:	08003719 	.word	0x08003719
 8003584:	08003767 	.word	0x08003767
 8003588:	080037b3 	.word	0x080037b3
		case COMPRUEBE_BOMBA:
			if (getStatBoton(IN_AST) == FALL) {
 800358c:	200c      	movs	r0, #12
 800358e:	f7fc ff9f 	bl	80004d0 <getStatBoton>
 8003592:	4603      	mov	r3, r0
 8003594:	2b02      	cmp	r3, #2
 8003596:	d107      	bne.n	80035a8 <acc_skimmer+0x54>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8003598:	4b9f      	ldr	r3, [pc, #636]	; (8003818 <acc_skimmer+0x2c4>)
 800359a:	4aa0      	ldr	r2, [pc, #640]	; (800381c <acc_skimmer+0x2c8>)
 800359c:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 800359e:	4b9e      	ldr	r3, [pc, #632]	; (8003818 <acc_skimmer+0x2c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4798      	blx	r3
				break;
 80035a6:	e133      	b.n	8003810 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 80035a8:	200e      	movs	r0, #14
 80035aa:	f7fc ff91 	bl	80004d0 <getStatBoton>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	f040 8124 	bne.w	80037fe <acc_skimmer+0x2aa>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 80035b6:	200e      	movs	r0, #14
 80035b8:	f7fd fadc 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 80035bc:	4b95      	ldr	r3, [pc, #596]	; (8003814 <acc_skimmer+0x2c0>)
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
				break;
 80035c2:	e125      	b.n	8003810 <acc_skimmer+0x2bc>
			}
		break;
		case OPCIONES_SKIMMER:
			if (getStatBoton(IN_AST) == FALL) {
 80035c4:	200c      	movs	r0, #12
 80035c6:	f7fc ff83 	bl	80004d0 <getStatBoton>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d107      	bne.n	80035e0 <acc_skimmer+0x8c>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 80035d0:	4b91      	ldr	r3, [pc, #580]	; (8003818 <acc_skimmer+0x2c4>)
 80035d2:	4a92      	ldr	r2, [pc, #584]	; (800381c <acc_skimmer+0x2c8>)
 80035d4:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80035d6:	4b90      	ldr	r3, [pc, #576]	; (8003818 <acc_skimmer+0x2c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4798      	blx	r3
				break;
 80035de:	e117      	b.n	8003810 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_1) == FALL) {
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7fc ff75 	bl	80004d0 <getStatBoton>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d106      	bne.n	80035fa <acc_skimmer+0xa6>
				set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
 80035ec:	200f      	movs	r0, #15
 80035ee:	f7fd fac1 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
 80035f2:	4b88      	ldr	r3, [pc, #544]	; (8003814 <acc_skimmer+0x2c0>)
 80035f4:	2202      	movs	r2, #2
 80035f6:	701a      	strb	r2, [r3, #0]
				break;
 80035f8:	e10a      	b.n	8003810 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_2) == FALL) {
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7fc ff68 	bl	80004d0 <getStatBoton>
 8003600:	4603      	mov	r3, r0
 8003602:	2b02      	cmp	r3, #2
 8003604:	f040 80fd 	bne.w	8003802 <acc_skimmer+0x2ae>
				set_pantalla(PANT_ELIJE_PROGRAMA_SKIMMER);
 8003608:	2010      	movs	r0, #16
 800360a:	f7fd fab3 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 800360e:	4b81      	ldr	r3, [pc, #516]	; (8003814 <acc_skimmer+0x2c0>)
 8003610:	2205      	movs	r2, #5
 8003612:	701a      	strb	r2, [r3, #0]
				break;
 8003614:	e0fc      	b.n	8003810 <acc_skimmer+0x2bc>
			}
		break;
		case ELIJE_FRECUENCIA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8003616:	2000      	movs	r0, #0
 8003618:	f7fc ff5a 	bl	80004d0 <getStatBoton>
 800361c:	4603      	mov	r3, r0
 800361e:	2b02      	cmp	r3, #2
 8003620:	d106      	bne.n	8003630 <acc_skimmer+0xdc>
				set_pantalla(PANT_PERIODO_ON_SKIMMER);
 8003622:	2011      	movs	r0, #17
 8003624:	f7fd faa6 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = PERIODO_ON_SKIMMER;
 8003628:	4b7a      	ldr	r3, [pc, #488]	; (8003814 <acc_skimmer+0x2c0>)
 800362a:	2203      	movs	r2, #3
 800362c:	701a      	strb	r2, [r3, #0]
				break;
 800362e:	e0ef      	b.n	8003810 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_2) == FALL) {
 8003630:	2001      	movs	r0, #1
 8003632:	f7fc ff4d 	bl	80004d0 <getStatBoton>
 8003636:	4603      	mov	r3, r0
 8003638:	2b02      	cmp	r3, #2
 800363a:	d106      	bne.n	800364a <acc_skimmer+0xf6>
				set_pantalla(PANT_PERIODO_OFF_SKIMMER);
 800363c:	2012      	movs	r0, #18
 800363e:	f7fd fa99 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = PERIODO_OFF_SKIMMER;
 8003642:	4b74      	ldr	r3, [pc, #464]	; (8003814 <acc_skimmer+0x2c0>)
 8003644:	2204      	movs	r2, #4
 8003646:	701a      	strb	r2, [r3, #0]
				break;
 8003648:	e0e2      	b.n	8003810 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_AST) == FALL) {
 800364a:	200c      	movs	r0, #12
 800364c:	f7fc ff40 	bl	80004d0 <getStatBoton>
 8003650:	4603      	mov	r3, r0
 8003652:	2b02      	cmp	r3, #2
 8003654:	f040 80d7 	bne.w	8003806 <acc_skimmer+0x2b2>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 8003658:	200e      	movs	r0, #14
 800365a:	f7fd fa8b 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 800365e:	4b6d      	ldr	r3, [pc, #436]	; (8003814 <acc_skimmer+0x2c0>)
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
				break;
 8003664:	e0d4      	b.n	8003810 <acc_skimmer+0x2bc>
			}
		break;
		case PERIODO_ON_SKIMMER:
			//funcion de seteo de periodo on
			aux_progOutput = setProg_skimmer(PROG_SET1);
 8003666:	2004      	movs	r0, #4
 8003668:	f7fd fefa 	bl	8001460 <setProg_skimmer>
 800366c:	4603      	mov	r3, r0
 800366e:	461a      	mov	r2, r3
 8003670:	4b6b      	ldr	r3, [pc, #428]	; (8003820 <acc_skimmer+0x2cc>)
 8003672:	701a      	strb	r2, [r3, #0]

			switch (aux_progOutput) {
 8003674:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <acc_skimmer+0x2cc>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d002      	beq.n	8003682 <acc_skimmer+0x12e>
 800367c:	2b03      	cmp	r3, #3
 800367e:	d000      	beq.n	8003682 <acc_skimmer+0x12e>
				case PROG_IDLE:
				case PROG_FINISHED:
					status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
					set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
				default:
				break;
 8003680:	e005      	b.n	800368e <acc_skimmer+0x13a>
					status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
 8003682:	4b64      	ldr	r3, [pc, #400]	; (8003814 <acc_skimmer+0x2c0>)
 8003684:	2202      	movs	r2, #2
 8003686:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
 8003688:	200f      	movs	r0, #15
 800368a:	f7fd fa73 	bl	8000b74 <set_pantalla>
				break;
 800368e:	bf00      	nop
			} //end switch aux_progOutput
		break;
 8003690:	e0be      	b.n	8003810 <acc_skimmer+0x2bc>
		case PERIODO_OFF_SKIMMER:
			//funcion de seteo de periodo off
			aux_progOutput = setProg_skimmer(PROG_SET2);
 8003692:	2005      	movs	r0, #5
 8003694:	f7fd fee4 	bl	8001460 <setProg_skimmer>
 8003698:	4603      	mov	r3, r0
 800369a:	461a      	mov	r2, r3
 800369c:	4b60      	ldr	r3, [pc, #384]	; (8003820 <acc_skimmer+0x2cc>)
 800369e:	701a      	strb	r2, [r3, #0]

			switch (aux_progOutput) {
 80036a0:	4b5f      	ldr	r3, [pc, #380]	; (8003820 <acc_skimmer+0x2cc>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d002      	beq.n	80036ae <acc_skimmer+0x15a>
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d000      	beq.n	80036ae <acc_skimmer+0x15a>
				case PROG_IDLE:
				case PROG_FINISHED:
					status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
					set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
				default:
				break;
 80036ac:	e005      	b.n	80036ba <acc_skimmer+0x166>
					status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
 80036ae:	4b59      	ldr	r3, [pc, #356]	; (8003814 <acc_skimmer+0x2c0>)
 80036b0:	2202      	movs	r2, #2
 80036b2:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_ELIJE_FRECUENCIA_SKIMMER);
 80036b4:	200f      	movs	r0, #15
 80036b6:	f7fd fa5d 	bl	8000b74 <set_pantalla>
				break;
 80036ba:	bf00      	nop
			} //end switch aux_progOutput
		break;
 80036bc:	e0a8      	b.n	8003810 <acc_skimmer+0x2bc>
		case ELIJE_PROGRAMA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 80036be:	2000      	movs	r0, #0
 80036c0:	f7fc ff06 	bl	80004d0 <getStatBoton>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d109      	bne.n	80036de <acc_skimmer+0x18a>
				seleccion_progSkimmer = 1; //modifica el programa 1
 80036ca:	4b56      	ldr	r3, [pc, #344]	; (8003824 <acc_skimmer+0x2d0>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
				set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 80036d0:	2013      	movs	r0, #19
 80036d2:	f7fd fa4f 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 80036d6:	4b4f      	ldr	r3, [pc, #316]	; (8003814 <acc_skimmer+0x2c0>)
 80036d8:	2206      	movs	r2, #6
 80036da:	701a      	strb	r2, [r3, #0]
				break;
 80036dc:	e098      	b.n	8003810 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_2) == FALL) {
 80036de:	2001      	movs	r0, #1
 80036e0:	f7fc fef6 	bl	80004d0 <getStatBoton>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d109      	bne.n	80036fe <acc_skimmer+0x1aa>
				seleccion_progSkimmer = 2; //modifica el programa 2
 80036ea:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <acc_skimmer+0x2d0>)
 80036ec:	2202      	movs	r2, #2
 80036ee:	701a      	strb	r2, [r3, #0]
				set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 80036f0:	2013      	movs	r0, #19
 80036f2:	f7fd fa3f 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 80036f6:	4b47      	ldr	r3, [pc, #284]	; (8003814 <acc_skimmer+0x2c0>)
 80036f8:	2206      	movs	r2, #6
 80036fa:	701a      	strb	r2, [r3, #0]
				break;
 80036fc:	e088      	b.n	8003810 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_AST) == FALL) {
 80036fe:	200c      	movs	r0, #12
 8003700:	f7fc fee6 	bl	80004d0 <getStatBoton>
 8003704:	4603      	mov	r3, r0
 8003706:	2b02      	cmp	r3, #2
 8003708:	d17f      	bne.n	800380a <acc_skimmer+0x2b6>
				set_pantalla(PANT_OPCIONES_SKIMMER);
 800370a:	200e      	movs	r0, #14
 800370c:	f7fd fa32 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 8003710:	4b40      	ldr	r3, [pc, #256]	; (8003814 <acc_skimmer+0x2c0>)
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
				break;
 8003716:	e07b      	b.n	8003810 <acc_skimmer+0x2bc>
			}
		break;
		case ELIJE_ON_OFF_HORARIO_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8003718:	2000      	movs	r0, #0
 800371a:	f7fc fed9 	bl	80004d0 <getStatBoton>
 800371e:	4603      	mov	r3, r0
 8003720:	2b02      	cmp	r3, #2
 8003722:	d106      	bne.n	8003732 <acc_skimmer+0x1de>
				set_pantalla(PANT_HORARIO_ON_SKIMMER);
 8003724:	2014      	movs	r0, #20
 8003726:	f7fd fa25 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = HORARIO_ON_SKIMMER;
 800372a:	4b3a      	ldr	r3, [pc, #232]	; (8003814 <acc_skimmer+0x2c0>)
 800372c:	2207      	movs	r2, #7
 800372e:	701a      	strb	r2, [r3, #0]
				break;
 8003730:	e06e      	b.n	8003810 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_2) == FALL) {
 8003732:	2001      	movs	r0, #1
 8003734:	f7fc fecc 	bl	80004d0 <getStatBoton>
 8003738:	4603      	mov	r3, r0
 800373a:	2b02      	cmp	r3, #2
 800373c:	d106      	bne.n	800374c <acc_skimmer+0x1f8>
				set_pantalla(PANT_HORARIO_OFF_SKIMMER);
 800373e:	2015      	movs	r0, #21
 8003740:	f7fd fa18 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = HORARIO_OFF_SKIMMER;
 8003744:	4b33      	ldr	r3, [pc, #204]	; (8003814 <acc_skimmer+0x2c0>)
 8003746:	2208      	movs	r2, #8
 8003748:	701a      	strb	r2, [r3, #0]
				break;
 800374a:	e061      	b.n	8003810 <acc_skimmer+0x2bc>
			}

			if (getStatBoton(IN_AST) == FALL) {
 800374c:	200c      	movs	r0, #12
 800374e:	f7fc febf 	bl	80004d0 <getStatBoton>
 8003752:	4603      	mov	r3, r0
 8003754:	2b02      	cmp	r3, #2
 8003756:	d15a      	bne.n	800380e <acc_skimmer+0x2ba>
				set_pantalla(PANT_ELIJE_PROGRAMA_SKIMMER);
 8003758:	2010      	movs	r0, #16
 800375a:	f7fd fa0b 	bl	8000b74 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <acc_skimmer+0x2c0>)
 8003760:	2205      	movs	r2, #5
 8003762:	701a      	strb	r2, [r3, #0]
				break;
 8003764:	e054      	b.n	8003810 <acc_skimmer+0x2bc>
			}
		break;
		case HORARIO_ON_SKIMMER:
			//funcion de seteo de horario on
			switch (seleccion_progSkimmer) {
 8003766:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <acc_skimmer+0x2d0>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d002      	beq.n	8003774 <acc_skimmer+0x220>
 800376e:	2b02      	cmp	r3, #2
 8003770:	d008      	beq.n	8003784 <acc_skimmer+0x230>
					aux_progOutput = setProg_skimmer(PROG_SET3);
				break;
				case 2:
					aux_progOutput = setProg_skimmer(PROG_SET5);
				default:
				break;
 8003772:	e00e      	b.n	8003792 <acc_skimmer+0x23e>
					aux_progOutput = setProg_skimmer(PROG_SET3);
 8003774:	2006      	movs	r0, #6
 8003776:	f7fd fe73 	bl	8001460 <setProg_skimmer>
 800377a:	4603      	mov	r3, r0
 800377c:	461a      	mov	r2, r3
 800377e:	4b28      	ldr	r3, [pc, #160]	; (8003820 <acc_skimmer+0x2cc>)
 8003780:	701a      	strb	r2, [r3, #0]
				break;
 8003782:	e007      	b.n	8003794 <acc_skimmer+0x240>
					aux_progOutput = setProg_skimmer(PROG_SET5);
 8003784:	2008      	movs	r0, #8
 8003786:	f7fd fe6b 	bl	8001460 <setProg_skimmer>
 800378a:	4603      	mov	r3, r0
 800378c:	461a      	mov	r2, r3
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <acc_skimmer+0x2cc>)
 8003790:	701a      	strb	r2, [r3, #0]
				break;
 8003792:	bf00      	nop
			} //end switch seleccion_progSkimmer

			switch (aux_progOutput) {
 8003794:	4b22      	ldr	r3, [pc, #136]	; (8003820 <acc_skimmer+0x2cc>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d002      	beq.n	80037a2 <acc_skimmer+0x24e>
 800379c:	2b03      	cmp	r3, #3
 800379e:	d000      	beq.n	80037a2 <acc_skimmer+0x24e>
				case PROG_IDLE:
				case PROG_FINISHED:
					status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
					set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
				default:
				break;
 80037a0:	e005      	b.n	80037ae <acc_skimmer+0x25a>
					status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <acc_skimmer+0x2c0>)
 80037a4:	2206      	movs	r2, #6
 80037a6:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 80037a8:	2013      	movs	r0, #19
 80037aa:	f7fd f9e3 	bl	8000b74 <set_pantalla>
				break;
 80037ae:	bf00      	nop
			} //end switch aux_progOutput

		break;
 80037b0:	e02e      	b.n	8003810 <acc_skimmer+0x2bc>
		case HORARIO_OFF_SKIMMER:
			//funcion de seteo de horario off
			switch (seleccion_progSkimmer) {
 80037b2:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <acc_skimmer+0x2d0>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d002      	beq.n	80037c0 <acc_skimmer+0x26c>
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d008      	beq.n	80037d0 <acc_skimmer+0x27c>
					aux_progOutput = setProg_skimmer(PROG_SET4);
				break;
				case 2:
					aux_progOutput = setProg_skimmer(PROG_SET6);
				default:
				break;
 80037be:	e00e      	b.n	80037de <acc_skimmer+0x28a>
					aux_progOutput = setProg_skimmer(PROG_SET4);
 80037c0:	2007      	movs	r0, #7
 80037c2:	f7fd fe4d 	bl	8001460 <setProg_skimmer>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <acc_skimmer+0x2cc>)
 80037cc:	701a      	strb	r2, [r3, #0]
				break;
 80037ce:	e007      	b.n	80037e0 <acc_skimmer+0x28c>
					aux_progOutput = setProg_skimmer(PROG_SET6);
 80037d0:	2009      	movs	r0, #9
 80037d2:	f7fd fe45 	bl	8001460 <setProg_skimmer>
 80037d6:	4603      	mov	r3, r0
 80037d8:	461a      	mov	r2, r3
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <acc_skimmer+0x2cc>)
 80037dc:	701a      	strb	r2, [r3, #0]
				break;
 80037de:	bf00      	nop
			} //end switch seleccion_progSkimmer

			switch (aux_progOutput) {
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <acc_skimmer+0x2cc>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d002      	beq.n	80037ee <acc_skimmer+0x29a>
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d000      	beq.n	80037ee <acc_skimmer+0x29a>
				case PROG_IDLE:
				case PROG_FINISHED:
					status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
					set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
				default:
				break;
 80037ec:	e005      	b.n	80037fa <acc_skimmer+0x2a6>
					status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <acc_skimmer+0x2c0>)
 80037f0:	2206      	movs	r2, #6
 80037f2:	701a      	strb	r2, [r3, #0]
					set_pantalla(PANT_ELIJE_ON_OFF_HORARIO_SKIMMER);
 80037f4:	2013      	movs	r0, #19
 80037f6:	f7fd f9bd 	bl	8000b74 <set_pantalla>
				break;
 80037fa:	bf00      	nop
			} //end switch aux_progOutput
		break;
 80037fc:	e008      	b.n	8003810 <acc_skimmer+0x2bc>
		break;
 80037fe:	bf00      	nop
 8003800:	e006      	b.n	8003810 <acc_skimmer+0x2bc>
		break;
 8003802:	bf00      	nop
 8003804:	e004      	b.n	8003810 <acc_skimmer+0x2bc>
		break;
 8003806:	bf00      	nop
 8003808:	e002      	b.n	8003810 <acc_skimmer+0x2bc>
		break;
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <acc_skimmer+0x2bc>
		break;
 800380e:	bf00      	nop
	} //end switch status_menuSkimmer
} //end acc_skimmer()
 8003810:	bf00      	nop
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000156 	.word	0x20000156
 8003818:	20000658 	.word	0x20000658
 800381c:	2000000c 	.word	0x2000000c
 8003820:	20000668 	.word	0x20000668
 8003824:	20000154 	.word	0x20000154

08003828 <acc_hidro>:


void acc_hidro (void){
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0

	switch (status_menuHidro) {
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <acc_hidro+0x78>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <acc_hidro+0x12>
 8003834:	2b01      	cmp	r3, #1
 8003836:	d018      	beq.n	800386a <acc_hidro+0x42>
			} //end switch status_menuHidro

		break;
	} //end switch status_menuHidro

} //end acc_hidro()
 8003838:	e02f      	b.n	800389a <acc_hidro+0x72>
			if (getStatBoton(IN_AST) == FALL) {
 800383a:	200c      	movs	r0, #12
 800383c:	f7fc fe48 	bl	80004d0 <getStatBoton>
 8003840:	4603      	mov	r3, r0
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <acc_hidro+0x2e>
				menuActual = &menu[MENU_PRINCIPAL];
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <acc_hidro+0x7c>)
 8003848:	4a17      	ldr	r2, [pc, #92]	; (80038a8 <acc_hidro+0x80>)
 800384a:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 800384c:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <acc_hidro+0x7c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4798      	blx	r3
				break;
 8003854:	e021      	b.n	800389a <acc_hidro+0x72>
			if (getStatBoton(IN_HASH) == FALL) {
 8003856:	200e      	movs	r0, #14
 8003858:	f7fc fe3a 	bl	80004d0 <getStatBoton>
 800385c:	4603      	mov	r3, r0
 800385e:	2b02      	cmp	r3, #2
 8003860:	d11a      	bne.n	8003898 <acc_hidro+0x70>
				status_menuHidro = ELIJE_TIEMPO_HIDRO;
 8003862:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <acc_hidro+0x78>)
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
				break;
 8003868:	e017      	b.n	800389a <acc_hidro+0x72>
			aux_progOutput = setProg_hidro(PROG_RUN);
 800386a:	2002      	movs	r0, #2
 800386c:	f7fd fb32 	bl	8000ed4 <setProg_hidro>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <acc_hidro+0x84>)
 8003876:	701a      	strb	r2, [r3, #0]
			switch (aux_progOutput) {
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <acc_hidro+0x84>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d002      	beq.n	8003886 <acc_hidro+0x5e>
 8003880:	2b03      	cmp	r3, #3
 8003882:	d000      	beq.n	8003886 <acc_hidro+0x5e>
				break;
 8003884:	e006      	b.n	8003894 <acc_hidro+0x6c>
					menuActual = &menu[MENU_PRINCIPAL];
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <acc_hidro+0x7c>)
 8003888:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <acc_hidro+0x80>)
 800388a:	601a      	str	r2, [r3, #0]
					menuActual->inicia_menu();
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <acc_hidro+0x7c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	4798      	blx	r3
				break;
 8003894:	bf00      	nop
		break;
 8003896:	e000      	b.n	800389a <acc_hidro+0x72>
		break;
 8003898:	bf00      	nop
} //end acc_hidro()
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000157 	.word	0x20000157
 80038a4:	20000658 	.word	0x20000658
 80038a8:	2000000c 	.word	0x2000000c
 80038ac:	20000668 	.word	0x20000668

080038b0 <acc_lucesExt>:


void acc_lucesExt (void){ //luces Amarillas
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	switch (status_menuLucesExt) {
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <acc_lucesExt+0x50>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <acc_lucesExt+0x12>
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d017      	beq.n	80038f0 <acc_lucesExt+0x40>
			case ELIJE_TIEMPO_LUCESEXT:
				//funcion de seteo de timepo de hidro
				setProg_luz(PROG_RUN);
			break;
		} //end switch status_menuLucesExt
} //end acc_lucesExt()
 80038c0:	e01b      	b.n	80038fa <acc_lucesExt+0x4a>
				if (getStatBoton(IN_AST) == FALL) {
 80038c2:	200c      	movs	r0, #12
 80038c4:	f7fc fe04 	bl	80004d0 <getStatBoton>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d106      	bne.n	80038dc <acc_lucesExt+0x2c>
					menuActual = &menu[MENU_PRINCIPAL];
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <acc_lucesExt+0x54>)
 80038d0:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <acc_lucesExt+0x58>)
 80038d2:	601a      	str	r2, [r3, #0]
					menuActual->inicia_menu();
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <acc_lucesExt+0x54>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	4798      	blx	r3
				if (getStatBoton(IN_HASH) == FALL) {
 80038dc:	200e      	movs	r0, #14
 80038de:	f7fc fdf7 	bl	80004d0 <getStatBoton>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d107      	bne.n	80038f8 <acc_lucesExt+0x48>
					status_menuLucesExt = ELIJE_TIEMPO_LUCESEXT;
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <acc_lucesExt+0x50>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
					break;
 80038ee:	e004      	b.n	80038fa <acc_lucesExt+0x4a>
				setProg_luz(PROG_RUN);
 80038f0:	2002      	movs	r0, #2
 80038f2:	f7fe fbdf 	bl	80020b4 <setProg_luz>
			break;
 80038f6:	e000      	b.n	80038fa <acc_lucesExt+0x4a>
			break;
 80038f8:	bf00      	nop
} //end acc_lucesExt()
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000158 	.word	0x20000158
 8003904:	20000658 	.word	0x20000658
 8003908:	2000000c 	.word	0x2000000c

0800390c <acc_lucesLed>:


void acc_lucesLed (void){
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0

}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <acc_config>:


void acc_config (void){
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0

}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800392a:	f107 030c 	add.w	r3, r7, #12
 800392e:	2100      	movs	r1, #0
 8003930:	460a      	mov	r2, r1
 8003932:	801a      	strh	r2, [r3, #0]
 8003934:	460a      	mov	r2, r1
 8003936:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003938:	2300      	movs	r3, #0
 800393a:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 800393c:	463b      	mov	r3, r7
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <MX_RTC_Init+0xc0>)
 8003946:	4a28      	ldr	r2, [pc, #160]	; (80039e8 <MX_RTC_Init+0xc4>)
 8003948:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <MX_RTC_Init+0xc0>)
 800394c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003950:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8003952:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <MX_RTC_Init+0xc0>)
 8003954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003958:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800395a:	4822      	ldr	r0, [pc, #136]	; (80039e4 <MX_RTC_Init+0xc0>)
 800395c:	f001 fe1c 	bl	8005598 <HAL_RTC_Init>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003966:	f7ff f9af 	bl	8002cc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800396a:	2312      	movs	r3, #18
 800396c:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x59;
 800396e:	2359      	movs	r3, #89	; 0x59
 8003970:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x30;
 8003972:	2330      	movs	r3, #48	; 0x30
 8003974:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003976:	f107 030c 	add.w	r3, r7, #12
 800397a:	2201      	movs	r2, #1
 800397c:	4619      	mov	r1, r3
 800397e:	4819      	ldr	r0, [pc, #100]	; (80039e4 <MX_RTC_Init+0xc0>)
 8003980:	f001 fea0 	bl	80056c4 <HAL_RTC_SetTime>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800398a:	f7ff f99d 	bl	8002cc8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800398e:	2301      	movs	r3, #1
 8003990:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8003992:	2305      	movs	r3, #5
 8003994:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8003996:	2301      	movs	r3, #1
 8003998:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 800399a:	2300      	movs	r3, #0
 800399c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800399e:	f107 0308 	add.w	r3, r7, #8
 80039a2:	2201      	movs	r2, #1
 80039a4:	4619      	mov	r1, r3
 80039a6:	480f      	ldr	r0, [pc, #60]	; (80039e4 <MX_RTC_Init+0xc0>)
 80039a8:	f001 fffc 	bl	80059a4 <HAL_RTC_SetDate>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80039b2:	f7ff f989 	bl	8002cc8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 80039b6:	2313      	movs	r3, #19
 80039b8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80039be:	2300      	movs	r3, #0
 80039c0:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80039c6:	463b      	mov	r3, r7
 80039c8:	2201      	movs	r2, #1
 80039ca:	4619      	mov	r1, r3
 80039cc:	4805      	ldr	r0, [pc, #20]	; (80039e4 <MX_RTC_Init+0xc0>)
 80039ce:	f002 f8f3 	bl	8005bb8 <HAL_RTC_SetAlarm_IT>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80039d8:	f7ff f976 	bl	8002cc8 <Error_Handler>
  }

}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	2000066c 	.word	0x2000066c
 80039e8:	40002800 	.word	0x40002800

080039ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <HAL_RTC_MspInit+0x5c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d120      	bne.n	8003a40 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80039fe:	f001 f831 	bl	8004a64 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_RTC_MspInit+0x60>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <HAL_RTC_MspInit+0x60>)
 8003a08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a0c:	61d3      	str	r3, [r2, #28]
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <HAL_RTC_MspInit+0x60>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_RTC_MspInit+0x64>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003a20:	2200      	movs	r2, #0
 8003a22:	2100      	movs	r1, #0
 8003a24:	2003      	movs	r0, #3
 8003a26:	f000 fe5c 	bl	80046e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003a2a:	2003      	movs	r0, #3
 8003a2c:	f000 fe75 	bl	800471a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003a30:	2200      	movs	r2, #0
 8003a32:	2100      	movs	r1, #0
 8003a34:	2029      	movs	r0, #41	; 0x29
 8003a36:	f000 fe54 	bl	80046e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003a3a:	2029      	movs	r0, #41	; 0x29
 8003a3c:	f000 fe6d 	bl	800471a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40002800 	.word	0x40002800
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	4242043c 	.word	0x4242043c

08003a54 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003a58:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003a5a:	4a18      	ldr	r2, [pc, #96]	; (8003abc <MX_SPI2_Init+0x68>)
 8003a5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a66:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003a88:	2238      	movs	r2, #56	; 0x38
 8003a8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003aa0:	220a      	movs	r2, #10
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003aa4:	4804      	ldr	r0, [pc, #16]	; (8003ab8 <MX_SPI2_Init+0x64>)
 8003aa6:	f002 fc4b 	bl	8006340 <HAL_SPI_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ab0:	f7ff f90a 	bl	8002cc8 <Error_Handler>
  }

}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000680 	.word	0x20000680
 8003abc:	40003800 	.word	0x40003800

08003ac0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <HAL_SPI_MspInit+0x8c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d131      	bne.n	8003b44 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_SPI_MspInit+0x90>)
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	4a1a      	ldr	r2, [pc, #104]	; (8003b50 <HAL_SPI_MspInit+0x90>)
 8003ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aea:	61d3      	str	r3, [r2, #28]
 8003aec:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <HAL_SPI_MspInit+0x90>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af8:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_SPI_MspInit+0x90>)
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <HAL_SPI_MspInit+0x90>)
 8003afe:	f043 0308 	orr.w	r3, r3, #8
 8003b02:	6193      	str	r3, [r2, #24]
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_SPI_MspInit+0x90>)
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003b10:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003b14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b16:	2302      	movs	r3, #2
 8003b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1e:	f107 0310 	add.w	r3, r7, #16
 8003b22:	4619      	mov	r1, r3
 8003b24:	480b      	ldr	r0, [pc, #44]	; (8003b54 <HAL_SPI_MspInit+0x94>)
 8003b26:	f000 fe13 	bl	8004750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b38:	f107 0310 	add.w	r3, r7, #16
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4805      	ldr	r0, [pc, #20]	; (8003b54 <HAL_SPI_MspInit+0x94>)
 8003b40:	f000 fe06 	bl	8004750 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003b44:	bf00      	nop
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40003800 	.word	0x40003800
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40010c00 	.word	0x40010c00

08003b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6193      	str	r3, [r2, #24]
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4a0e      	ldr	r2, [pc, #56]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	61d3      	str	r3, [r2, #28]
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_MspInit+0x60>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_MspInit+0x60>)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40010000 	.word	0x40010000

08003bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bcc:	e7fe      	b.n	8003bcc <HardFault_Handler+0x4>

08003bce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd2:	e7fe      	b.n	8003bd2 <MemManage_Handler+0x4>

08003bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bd8:	e7fe      	b.n	8003bd8 <BusFault_Handler+0x4>

08003bda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bde:	e7fe      	b.n	8003bde <UsageFault_Handler+0x4>

08003be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c08:	f000 fa4c 	bl	80040a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c0c:	bf00      	nop
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <RTC_IRQHandler+0x10>)
 8003c16:	f002 fb4d 	bl	80062b4 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	2000066c 	.word	0x2000066c

08003c24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c28:	4802      	ldr	r0, [pc, #8]	; (8003c34 <TIM2_IRQHandler+0x10>)
 8003c2a:	f003 f914 	bl	8006e56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000718 	.word	0x20000718

08003c38 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003c3c:	4802      	ldr	r0, [pc, #8]	; (8003c48 <RTC_Alarm_IRQHandler+0x10>)
 8003c3e:	f002 f86f 	bl	8005d20 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	2000066c 	.word	0x2000066c

08003c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c54:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <_sbrk+0x5c>)
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <_sbrk+0x60>)
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <_sbrk+0x64>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <_sbrk+0x64>)
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <_sbrk+0x68>)
 8003c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <_sbrk+0x64>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d207      	bcs.n	8003c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c7c:	f003 fd44 	bl	8007708 <__errno>
 8003c80:	4602      	mov	r2, r0
 8003c82:	230c      	movs	r3, #12
 8003c84:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c8a:	e009      	b.n	8003ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <_sbrk+0x64>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <_sbrk+0x64>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <_sbrk+0x64>)
 8003c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20005000 	.word	0x20005000
 8003cac:	00000400 	.word	0x00000400
 8003cb0:	2000015c 	.word	0x2000015c
 8003cb4:	200007a0 	.word	0x200007a0

08003cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003cbc:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <SystemInit+0x5c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a14      	ldr	r2, [pc, #80]	; (8003d14 <SystemInit+0x5c>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003cc8:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <SystemInit+0x5c>)
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	4911      	ldr	r1, [pc, #68]	; (8003d14 <SystemInit+0x5c>)
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <SystemInit+0x60>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <SystemInit+0x5c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <SystemInit+0x5c>)
 8003cda:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <SystemInit+0x5c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <SystemInit+0x5c>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <SystemInit+0x5c>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4a07      	ldr	r2, [pc, #28]	; (8003d14 <SystemInit+0x5c>)
 8003cf6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003cfa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <SystemInit+0x5c>)
 8003cfe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003d02:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <SystemInit+0x64>)
 8003d06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d0a:	609a      	str	r2, [r3, #8]
#endif 
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	40021000 	.word	0x40021000
 8003d18:	f8ff0000 	.word	0xf8ff0000
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d26:	f107 0308 	add.w	r3, r7, #8
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d34:	463b      	mov	r3, r7
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <MX_TIM2_Init+0x94>)
 8003d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <MX_TIM2_Init+0x94>)
 8003d46:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <MX_TIM2_Init+0x94>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003d52:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <MX_TIM2_Init+0x94>)
 8003d54:	2263      	movs	r2, #99	; 0x63
 8003d56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d58:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <MX_TIM2_Init+0x94>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <MX_TIM2_Init+0x94>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d64:	4813      	ldr	r0, [pc, #76]	; (8003db4 <MX_TIM2_Init+0x94>)
 8003d66:	f003 f805 	bl	8006d74 <HAL_TIM_Base_Init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003d70:	f7fe ffaa 	bl	8002cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d7a:	f107 0308 	add.w	r3, r7, #8
 8003d7e:	4619      	mov	r1, r3
 8003d80:	480c      	ldr	r0, [pc, #48]	; (8003db4 <MX_TIM2_Init+0x94>)
 8003d82:	f003 f970 	bl	8007066 <HAL_TIM_ConfigClockSource>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003d8c:	f7fe ff9c 	bl	8002cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d90:	2300      	movs	r3, #0
 8003d92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d98:	463b      	mov	r3, r7
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4805      	ldr	r0, [pc, #20]	; (8003db4 <MX_TIM2_Init+0x94>)
 8003d9e:	f003 fb35 	bl	800740c <HAL_TIMEx_MasterConfigSynchronization>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003da8:	f7fe ff8e 	bl	8002cc8 <Error_Handler>
  }

}
 8003dac:	bf00      	nop
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000718 	.word	0x20000718

08003db8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dbe:	f107 0308 	add.w	r3, r7, #8
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dcc:	463b      	mov	r3, r7
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <MX_TIM3_Init+0x94>)
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <MX_TIM3_Init+0x98>)
 8003dd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8003dda:	4b1c      	ldr	r3, [pc, #112]	; (8003e4c <MX_TIM3_Init+0x94>)
 8003ddc:	2248      	movs	r2, #72	; 0x48
 8003dde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de0:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <MX_TIM3_Init+0x94>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003de6:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <MX_TIM3_Init+0x94>)
 8003de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dee:	4b17      	ldr	r3, [pc, #92]	; (8003e4c <MX_TIM3_Init+0x94>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003df4:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <MX_TIM3_Init+0x94>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003dfa:	4814      	ldr	r0, [pc, #80]	; (8003e4c <MX_TIM3_Init+0x94>)
 8003dfc:	f002 ffba 	bl	8006d74 <HAL_TIM_Base_Init>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003e06:	f7fe ff5f 	bl	8002cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e10:	f107 0308 	add.w	r3, r7, #8
 8003e14:	4619      	mov	r1, r3
 8003e16:	480d      	ldr	r0, [pc, #52]	; (8003e4c <MX_TIM3_Init+0x94>)
 8003e18:	f003 f925 	bl	8007066 <HAL_TIM_ConfigClockSource>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003e22:	f7fe ff51 	bl	8002cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e2e:	463b      	mov	r3, r7
 8003e30:	4619      	mov	r1, r3
 8003e32:	4806      	ldr	r0, [pc, #24]	; (8003e4c <MX_TIM3_Init+0x94>)
 8003e34:	f003 faea 	bl	800740c <HAL_TIMEx_MasterConfigSynchronization>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003e3e:	f7fe ff43 	bl	8002cc8 <Error_Handler>
  }

}
 8003e42:	bf00      	nop
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200006d8 	.word	0x200006d8
 8003e50:	40000400 	.word	0x40000400

08003e54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d114      	bne.n	8003e90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4a14      	ldr	r2, [pc, #80]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	61d3      	str	r3, [r2, #28]
 8003e72:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	201c      	movs	r0, #28
 8003e84:	f000 fc2d 	bl	80046e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e88:	201c      	movs	r0, #28
 8003e8a:	f000 fc46 	bl	800471a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003e8e:	e010      	b.n	8003eb2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <HAL_TIM_Base_MspInit+0x6c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d10b      	bne.n	8003eb2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003ea0:	f043 0302 	orr.w	r3, r3, #2
 8003ea4:	61d3      	str	r3, [r2, #28]
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40000400 	.word	0x40000400

08003ec4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <MX_USART1_UART_Init+0x4c>)
 8003eca:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <MX_USART1_UART_Init+0x50>)
 8003ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <MX_USART1_UART_Init+0x4c>)
 8003ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ed4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <MX_USART1_UART_Init+0x4c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <MX_USART1_UART_Init+0x4c>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <MX_USART1_UART_Init+0x4c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <MX_USART1_UART_Init+0x4c>)
 8003eea:	220c      	movs	r2, #12
 8003eec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <MX_USART1_UART_Init+0x4c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <MX_USART1_UART_Init+0x4c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003efa:	4805      	ldr	r0, [pc, #20]	; (8003f10 <MX_USART1_UART_Init+0x4c>)
 8003efc:	f003 fadc 	bl	80074b8 <HAL_UART_Init>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f06:	f7fe fedf 	bl	8002cc8 <Error_Handler>
  }

}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000758 	.word	0x20000758
 8003f14:	40013800 	.word	0x40013800

08003f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f20:	f107 0314 	add.w	r3, r7, #20
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <HAL_UART_MspInit+0xa4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d13d      	bne.n	8003fb4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f38:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <HAL_UART_MspInit+0xa8>)
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <HAL_UART_MspInit+0xa8>)
 8003f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f42:	6193      	str	r3, [r2, #24]
 8003f44:	4b1e      	ldr	r3, [pc, #120]	; (8003fc0 <HAL_UART_MspInit+0xa8>)
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <HAL_UART_MspInit+0xa8>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	4a1a      	ldr	r2, [pc, #104]	; (8003fc0 <HAL_UART_MspInit+0xa8>)
 8003f56:	f043 0308 	orr.w	r3, r3, #8
 8003f5a:	6193      	str	r3, [r2, #24]
 8003f5c:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <HAL_UART_MspInit+0xa8>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f68:	2340      	movs	r3, #64	; 0x40
 8003f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f70:	2303      	movs	r3, #3
 8003f72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4812      	ldr	r0, [pc, #72]	; (8003fc4 <HAL_UART_MspInit+0xac>)
 8003f7c:	f000 fbe8 	bl	8004750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	4619      	mov	r1, r3
 8003f92:	480c      	ldr	r0, [pc, #48]	; (8003fc4 <HAL_UART_MspInit+0xac>)
 8003f94:	f000 fbdc 	bl	8004750 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_UART_MspInit+0xb0>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	f043 0304 	orr.w	r3, r3, #4
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	4a06      	ldr	r2, [pc, #24]	; (8003fc8 <HAL_UART_MspInit+0xb0>)
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3728      	adds	r7, #40	; 0x28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40013800 	.word	0x40013800
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40010c00 	.word	0x40010c00
 8003fc8:	40010000 	.word	0x40010000

08003fcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003fcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003fce:	e003      	b.n	8003fd8 <LoopCopyDataInit>

08003fd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003fd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003fd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003fd6:	3104      	adds	r1, #4

08003fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003fd8:	480a      	ldr	r0, [pc, #40]	; (8004004 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003fda:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003fdc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003fde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003fe0:	d3f6      	bcc.n	8003fd0 <CopyDataInit>
  ldr r2, =_sbss
 8003fe2:	4a0a      	ldr	r2, [pc, #40]	; (800400c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003fe4:	e002      	b.n	8003fec <LoopFillZerobss>

08003fe6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003fe8:	f842 3b04 	str.w	r3, [r2], #4

08003fec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003fee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003ff0:	d3f9      	bcc.n	8003fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ff2:	f7ff fe61 	bl	8003cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ff6:	f003 fb8d 	bl	8007714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ffa:	f7fe fd63 	bl	8002ac4 <main>
  bx lr
 8003ffe:	4770      	bx	lr
  ldr r3, =_sidata
 8004000:	080082ac 	.word	0x080082ac
  ldr r0, =_sdata
 8004004:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004008:	20000100 	.word	0x20000100
  ldr r2, =_sbss
 800400c:	20000100 	.word	0x20000100
  ldr r3, = _ebss
 8004010:	200007a0 	.word	0x200007a0

08004014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004014:	e7fe      	b.n	8004014 <ADC1_2_IRQHandler>
	...

08004018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800401c:	4b08      	ldr	r3, [pc, #32]	; (8004040 <HAL_Init+0x28>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a07      	ldr	r2, [pc, #28]	; (8004040 <HAL_Init+0x28>)
 8004022:	f043 0310 	orr.w	r3, r3, #16
 8004026:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004028:	2003      	movs	r0, #3
 800402a:	f000 fb4f 	bl	80046cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800402e:	2000      	movs	r0, #0
 8004030:	f000 f808 	bl	8004044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004034:	f7ff fd90 	bl	8003b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40022000 	.word	0x40022000

08004044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_InitTick+0x54>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <HAL_InitTick+0x58>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4619      	mov	r1, r3
 8004056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800405a:	fbb3 f3f1 	udiv	r3, r3, r1
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fb67 	bl	8004736 <HAL_SYSTICK_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e00e      	b.n	8004090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b0f      	cmp	r3, #15
 8004076:	d80a      	bhi.n	800408e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004078:	2200      	movs	r2, #0
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004080:	f000 fb2f 	bl	80046e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004084:	4a06      	ldr	r2, [pc, #24]	; (80040a0 <HAL_InitTick+0x5c>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000090 	.word	0x20000090
 800409c:	20000098 	.word	0x20000098
 80040a0:	20000094 	.word	0x20000094

080040a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_IncTick+0x1c>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_IncTick+0x20>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4413      	add	r3, r2
 80040b4:	4a03      	ldr	r2, [pc, #12]	; (80040c4 <HAL_IncTick+0x20>)
 80040b6:	6013      	str	r3, [r2, #0]
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	20000098 	.word	0x20000098
 80040c4:	20000798 	.word	0x20000798

080040c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return uwTick;
 80040cc:	4b02      	ldr	r3, [pc, #8]	; (80040d8 <HAL_GetTick+0x10>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	20000798 	.word	0x20000798

080040dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040e4:	f7ff fff0 	bl	80040c8 <HAL_GetTick>
 80040e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f4:	d005      	beq.n	8004102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040f6:	4b09      	ldr	r3, [pc, #36]	; (800411c <HAL_Delay+0x40>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004102:	bf00      	nop
 8004104:	f7ff ffe0 	bl	80040c8 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	429a      	cmp	r2, r3
 8004112:	d8f7      	bhi.n	8004104 <HAL_Delay+0x28>
  {
  }
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000098 	.word	0x20000098

08004120 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0be      	b.n	80042c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc fca2 	bl	8000aa8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f9ab 	bl	80044c0 <ADC_ConversionStop_Disable>
 800416a:	4603      	mov	r3, r0
 800416c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b00      	cmp	r3, #0
 8004178:	f040 8099 	bne.w	80042ae <HAL_ADC_Init+0x18e>
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 8095 	bne.w	80042ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800418c:	f023 0302 	bic.w	r3, r3, #2
 8004190:	f043 0202 	orr.w	r2, r3, #2
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80041a0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	7b1b      	ldrb	r3, [r3, #12]
 80041a6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80041a8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b8:	d003      	beq.n	80041c2 <HAL_ADC_Init+0xa2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d102      	bne.n	80041c8 <HAL_ADC_Init+0xa8>
 80041c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041c6:	e000      	b.n	80041ca <HAL_ADC_Init+0xaa>
 80041c8:	2300      	movs	r3, #0
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	7d1b      	ldrb	r3, [r3, #20]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d119      	bne.n	800420c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	7b1b      	ldrb	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	035a      	lsls	r2, r3, #13
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	e00b      	b.n	800420c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	f043 0220 	orr.w	r2, r3, #32
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	4b28      	ldr	r3, [pc, #160]	; (80042c8 <HAL_ADC_Init+0x1a8>)
 8004228:	4013      	ands	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	430b      	orrs	r3, r1
 8004232:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423c:	d003      	beq.n	8004246 <HAL_ADC_Init+0x126>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d104      	bne.n	8004250 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	3b01      	subs	r3, #1
 800424c:	051b      	lsls	r3, r3, #20
 800424e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	430a      	orrs	r2, r1
 8004262:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	4b18      	ldr	r3, [pc, #96]	; (80042cc <HAL_ADC_Init+0x1ac>)
 800426c:	4013      	ands	r3, r2
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	429a      	cmp	r2, r3
 8004272:	d10b      	bne.n	800428c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	f023 0303 	bic.w	r3, r3, #3
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800428a:	e018      	b.n	80042be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	f023 0312 	bic.w	r3, r3, #18
 8004294:	f043 0210 	orr.w	r2, r3, #16
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80042ac:	e007      	b.n	80042be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	f043 0210 	orr.w	r2, r3, #16
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80042be:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	ffe1f7fd 	.word	0xffe1f7fd
 80042cc:	ff1f0efe 	.word	0xff1f0efe

080042d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x20>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e0dc      	b.n	80044aa <HAL_ADC_ConfigChannel+0x1da>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b06      	cmp	r3, #6
 80042fe:	d81c      	bhi.n	800433a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	3b05      	subs	r3, #5
 8004312:	221f      	movs	r2, #31
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	4019      	ands	r1, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	3b05      	subs	r3, #5
 800432c:	fa00 f203 	lsl.w	r2, r0, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	635a      	str	r2, [r3, #52]	; 0x34
 8004338:	e03c      	b.n	80043b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b0c      	cmp	r3, #12
 8004340:	d81c      	bhi.n	800437c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	3b23      	subs	r3, #35	; 0x23
 8004354:	221f      	movs	r2, #31
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	4019      	ands	r1, r3
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	3b23      	subs	r3, #35	; 0x23
 800436e:	fa00 f203 	lsl.w	r2, r0, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
 800437a:	e01b      	b.n	80043b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	3b41      	subs	r3, #65	; 0x41
 800438e:	221f      	movs	r2, #31
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	4019      	ands	r1, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	3b41      	subs	r3, #65	; 0x41
 80043a8:	fa00 f203 	lsl.w	r2, r0, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b09      	cmp	r3, #9
 80043ba:	d91c      	bls.n	80043f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68d9      	ldr	r1, [r3, #12]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	3b1e      	subs	r3, #30
 80043ce:	2207      	movs	r2, #7
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	4019      	ands	r1, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6898      	ldr	r0, [r3, #8]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	3b1e      	subs	r3, #30
 80043e8:	fa00 f203 	lsl.w	r2, r0, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	60da      	str	r2, [r3, #12]
 80043f4:	e019      	b.n	800442a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6919      	ldr	r1, [r3, #16]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	4413      	add	r3, r2
 8004406:	2207      	movs	r2, #7
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	4019      	ands	r1, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6898      	ldr	r0, [r3, #8]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4413      	add	r3, r2
 800441e:	fa00 f203 	lsl.w	r2, r0, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b10      	cmp	r3, #16
 8004430:	d003      	beq.n	800443a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004436:	2b11      	cmp	r3, #17
 8004438:	d132      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d125      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d126      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004460:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b10      	cmp	r3, #16
 8004468:	d11a      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a13      	ldr	r2, [pc, #76]	; (80044bc <HAL_ADC_ConfigChannel+0x1ec>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	0c9a      	lsrs	r2, r3, #18
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004480:	e002      	b.n	8004488 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	3b01      	subs	r3, #1
 8004486:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f9      	bne.n	8004482 <HAL_ADC_ConfigChannel+0x1b2>
 800448e:	e007      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40012400 	.word	0x40012400
 80044b8:	20000090 	.word	0x20000090
 80044bc:	431bde83 	.word	0x431bde83

080044c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d127      	bne.n	800452a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044ea:	f7ff fded 	bl	80040c8 <HAL_GetTick>
 80044ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80044f0:	e014      	b.n	800451c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044f2:	f7ff fde9 	bl	80040c8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d90d      	bls.n	800451c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	f043 0210 	orr.w	r2, r3, #16
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	f043 0201 	orr.w	r2, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e007      	b.n	800452c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b01      	cmp	r3, #1
 8004528:	d0e3      	beq.n	80044f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <__NVIC_SetPriorityGrouping+0x44>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004550:	4013      	ands	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800455c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004566:	4a04      	ldr	r2, [pc, #16]	; (8004578 <__NVIC_SetPriorityGrouping+0x44>)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	60d3      	str	r3, [r2, #12]
}
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <__NVIC_GetPriorityGrouping+0x18>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	f003 0307 	and.w	r3, r3, #7
}
 800458a:	4618      	mov	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	db0b      	blt.n	80045c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	4906      	ldr	r1, [pc, #24]	; (80045cc <__NVIC_EnableIRQ+0x34>)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2001      	movs	r0, #1
 80045ba:	fa00 f202 	lsl.w	r2, r0, r2
 80045be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	e000e100 	.word	0xe000e100

080045d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	6039      	str	r1, [r7, #0]
 80045da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	db0a      	blt.n	80045fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	490c      	ldr	r1, [pc, #48]	; (800461c <__NVIC_SetPriority+0x4c>)
 80045ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ee:	0112      	lsls	r2, r2, #4
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	440b      	add	r3, r1
 80045f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045f8:	e00a      	b.n	8004610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4908      	ldr	r1, [pc, #32]	; (8004620 <__NVIC_SetPriority+0x50>)
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	3b04      	subs	r3, #4
 8004608:	0112      	lsls	r2, r2, #4
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	440b      	add	r3, r1
 800460e:	761a      	strb	r2, [r3, #24]
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	e000e100 	.word	0xe000e100
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f1c3 0307 	rsb	r3, r3, #7
 800463e:	2b04      	cmp	r3, #4
 8004640:	bf28      	it	cs
 8004642:	2304      	movcs	r3, #4
 8004644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3304      	adds	r3, #4
 800464a:	2b06      	cmp	r3, #6
 800464c:	d902      	bls.n	8004654 <NVIC_EncodePriority+0x30>
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3b03      	subs	r3, #3
 8004652:	e000      	b.n	8004656 <NVIC_EncodePriority+0x32>
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43da      	mvns	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	401a      	ands	r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800466c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	fa01 f303 	lsl.w	r3, r1, r3
 8004676:	43d9      	mvns	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800467c:	4313      	orrs	r3, r2
         );
}
 800467e:	4618      	mov	r0, r3
 8004680:	3724      	adds	r7, #36	; 0x24
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3b01      	subs	r3, #1
 8004694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004698:	d301      	bcc.n	800469e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800469a:	2301      	movs	r3, #1
 800469c:	e00f      	b.n	80046be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800469e:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <SysTick_Config+0x40>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046a6:	210f      	movs	r1, #15
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046ac:	f7ff ff90 	bl	80045d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <SysTick_Config+0x40>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046b6:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <SysTick_Config+0x40>)
 80046b8:	2207      	movs	r2, #7
 80046ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	e000e010 	.word	0xe000e010

080046cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff ff2d 	bl	8004534 <__NVIC_SetPriorityGrouping>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b086      	sub	sp, #24
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	4603      	mov	r3, r0
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046f4:	f7ff ff42 	bl	800457c <__NVIC_GetPriorityGrouping>
 80046f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	6978      	ldr	r0, [r7, #20]
 8004700:	f7ff ff90 	bl	8004624 <NVIC_EncodePriority>
 8004704:	4602      	mov	r2, r0
 8004706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800470a:	4611      	mov	r1, r2
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff ff5f 	bl	80045d0 <__NVIC_SetPriority>
}
 8004712:	bf00      	nop
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	4603      	mov	r3, r0
 8004722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff ff35 	bl	8004598 <__NVIC_EnableIRQ>
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ffa2 	bl	8004688 <SysTick_Config>
 8004744:	4603      	mov	r3, r0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004750:	b480      	push	{r7}
 8004752:	b08b      	sub	sp, #44	; 0x2c
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800475a:	2300      	movs	r3, #0
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800475e:	2300      	movs	r3, #0
 8004760:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004762:	e127      	b.n	80049b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004764:	2201      	movs	r2, #1
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	429a      	cmp	r2, r3
 800477e:	f040 8116 	bne.w	80049ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b12      	cmp	r3, #18
 8004788:	d034      	beq.n	80047f4 <HAL_GPIO_Init+0xa4>
 800478a:	2b12      	cmp	r3, #18
 800478c:	d80d      	bhi.n	80047aa <HAL_GPIO_Init+0x5a>
 800478e:	2b02      	cmp	r3, #2
 8004790:	d02b      	beq.n	80047ea <HAL_GPIO_Init+0x9a>
 8004792:	2b02      	cmp	r3, #2
 8004794:	d804      	bhi.n	80047a0 <HAL_GPIO_Init+0x50>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d031      	beq.n	80047fe <HAL_GPIO_Init+0xae>
 800479a:	2b01      	cmp	r3, #1
 800479c:	d01c      	beq.n	80047d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800479e:	e048      	b.n	8004832 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d043      	beq.n	800482c <HAL_GPIO_Init+0xdc>
 80047a4:	2b11      	cmp	r3, #17
 80047a6:	d01b      	beq.n	80047e0 <HAL_GPIO_Init+0x90>
          break;
 80047a8:	e043      	b.n	8004832 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80047aa:	4a89      	ldr	r2, [pc, #548]	; (80049d0 <HAL_GPIO_Init+0x280>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d026      	beq.n	80047fe <HAL_GPIO_Init+0xae>
 80047b0:	4a87      	ldr	r2, [pc, #540]	; (80049d0 <HAL_GPIO_Init+0x280>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d806      	bhi.n	80047c4 <HAL_GPIO_Init+0x74>
 80047b6:	4a87      	ldr	r2, [pc, #540]	; (80049d4 <HAL_GPIO_Init+0x284>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d020      	beq.n	80047fe <HAL_GPIO_Init+0xae>
 80047bc:	4a86      	ldr	r2, [pc, #536]	; (80049d8 <HAL_GPIO_Init+0x288>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d01d      	beq.n	80047fe <HAL_GPIO_Init+0xae>
          break;
 80047c2:	e036      	b.n	8004832 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80047c4:	4a85      	ldr	r2, [pc, #532]	; (80049dc <HAL_GPIO_Init+0x28c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d019      	beq.n	80047fe <HAL_GPIO_Init+0xae>
 80047ca:	4a85      	ldr	r2, [pc, #532]	; (80049e0 <HAL_GPIO_Init+0x290>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d016      	beq.n	80047fe <HAL_GPIO_Init+0xae>
 80047d0:	4a84      	ldr	r2, [pc, #528]	; (80049e4 <HAL_GPIO_Init+0x294>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_GPIO_Init+0xae>
          break;
 80047d6:	e02c      	b.n	8004832 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	623b      	str	r3, [r7, #32]
          break;
 80047de:	e028      	b.n	8004832 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	3304      	adds	r3, #4
 80047e6:	623b      	str	r3, [r7, #32]
          break;
 80047e8:	e023      	b.n	8004832 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	3308      	adds	r3, #8
 80047f0:	623b      	str	r3, [r7, #32]
          break;
 80047f2:	e01e      	b.n	8004832 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	330c      	adds	r3, #12
 80047fa:	623b      	str	r3, [r7, #32]
          break;
 80047fc:	e019      	b.n	8004832 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004806:	2304      	movs	r3, #4
 8004808:	623b      	str	r3, [r7, #32]
          break;
 800480a:	e012      	b.n	8004832 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d105      	bne.n	8004820 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004814:	2308      	movs	r3, #8
 8004816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	611a      	str	r2, [r3, #16]
          break;
 800481e:	e008      	b.n	8004832 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004820:	2308      	movs	r3, #8
 8004822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	615a      	str	r2, [r3, #20]
          break;
 800482a:	e002      	b.n	8004832 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800482c:	2300      	movs	r3, #0
 800482e:	623b      	str	r3, [r7, #32]
          break;
 8004830:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2bff      	cmp	r3, #255	; 0xff
 8004836:	d801      	bhi.n	800483c <HAL_GPIO_Init+0xec>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	e001      	b.n	8004840 <HAL_GPIO_Init+0xf0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2bff      	cmp	r3, #255	; 0xff
 8004846:	d802      	bhi.n	800484e <HAL_GPIO_Init+0xfe>
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	e002      	b.n	8004854 <HAL_GPIO_Init+0x104>
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	3b08      	subs	r3, #8
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	210f      	movs	r1, #15
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	401a      	ands	r2, r3
 8004866:	6a39      	ldr	r1, [r7, #32]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	431a      	orrs	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8096 	beq.w	80049ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004882:	4b59      	ldr	r3, [pc, #356]	; (80049e8 <HAL_GPIO_Init+0x298>)
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	4a58      	ldr	r2, [pc, #352]	; (80049e8 <HAL_GPIO_Init+0x298>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6193      	str	r3, [r2, #24]
 800488e:	4b56      	ldr	r3, [pc, #344]	; (80049e8 <HAL_GPIO_Init+0x298>)
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800489a:	4a54      	ldr	r2, [pc, #336]	; (80049ec <HAL_GPIO_Init+0x29c>)
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	3302      	adds	r3, #2
 80048a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	220f      	movs	r2, #15
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a4b      	ldr	r2, [pc, #300]	; (80049f0 <HAL_GPIO_Init+0x2a0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_GPIO_Init+0x19e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a4a      	ldr	r2, [pc, #296]	; (80049f4 <HAL_GPIO_Init+0x2a4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00d      	beq.n	80048ea <HAL_GPIO_Init+0x19a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a49      	ldr	r2, [pc, #292]	; (80049f8 <HAL_GPIO_Init+0x2a8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <HAL_GPIO_Init+0x196>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a48      	ldr	r2, [pc, #288]	; (80049fc <HAL_GPIO_Init+0x2ac>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <HAL_GPIO_Init+0x192>
 80048de:	2303      	movs	r3, #3
 80048e0:	e006      	b.n	80048f0 <HAL_GPIO_Init+0x1a0>
 80048e2:	2304      	movs	r3, #4
 80048e4:	e004      	b.n	80048f0 <HAL_GPIO_Init+0x1a0>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e002      	b.n	80048f0 <HAL_GPIO_Init+0x1a0>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <HAL_GPIO_Init+0x1a0>
 80048ee:	2300      	movs	r3, #0
 80048f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f2:	f002 0203 	and.w	r2, r2, #3
 80048f6:	0092      	lsls	r2, r2, #2
 80048f8:	4093      	lsls	r3, r2
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004900:	493a      	ldr	r1, [pc, #232]	; (80049ec <HAL_GPIO_Init+0x29c>)
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	089b      	lsrs	r3, r3, #2
 8004906:	3302      	adds	r3, #2
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d006      	beq.n	8004928 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800491a:	4b39      	ldr	r3, [pc, #228]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4938      	ldr	r1, [pc, #224]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]
 8004926:	e006      	b.n	8004936 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004928:	4b35      	ldr	r3, [pc, #212]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	43db      	mvns	r3, r3
 8004930:	4933      	ldr	r1, [pc, #204]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 8004932:	4013      	ands	r3, r2
 8004934:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d006      	beq.n	8004950 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004942:	4b2f      	ldr	r3, [pc, #188]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	492e      	ldr	r1, [pc, #184]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]
 800494e:	e006      	b.n	800495e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	43db      	mvns	r3, r3
 8004958:	4929      	ldr	r1, [pc, #164]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 800495a:	4013      	ands	r3, r2
 800495c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d006      	beq.n	8004978 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800496a:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	4924      	ldr	r1, [pc, #144]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
 8004976:	e006      	b.n	8004986 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004978:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	43db      	mvns	r3, r3
 8004980:	491f      	ldr	r1, [pc, #124]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 8004982:	4013      	ands	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d006      	beq.n	80049a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004992:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	491a      	ldr	r1, [pc, #104]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	60cb      	str	r3, [r1, #12]
 800499e:	e006      	b.n	80049ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80049a0:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	4915      	ldr	r1, [pc, #84]	; (8004a00 <HAL_GPIO_Init+0x2b0>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	3301      	adds	r3, #1
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	fa22 f303 	lsr.w	r3, r2, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f47f aed0 	bne.w	8004764 <HAL_GPIO_Init+0x14>
  }
}
 80049c4:	bf00      	nop
 80049c6:	372c      	adds	r7, #44	; 0x2c
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	10210000 	.word	0x10210000
 80049d4:	10110000 	.word	0x10110000
 80049d8:	10120000 	.word	0x10120000
 80049dc:	10310000 	.word	0x10310000
 80049e0:	10320000 	.word	0x10320000
 80049e4:	10220000 	.word	0x10220000
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40010800 	.word	0x40010800
 80049f4:	40010c00 	.word	0x40010c00
 80049f8:	40011000 	.word	0x40011000
 80049fc:	40011400 	.word	0x40011400
 8004a00:	40010400 	.word	0x40010400

08004a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	887b      	ldrh	r3, [r7, #2]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
 8004a20:	e001      	b.n	8004a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr

08004a32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	807b      	strh	r3, [r7, #2]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a42:	787b      	ldrb	r3, [r7, #1]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a48:	887a      	ldrh	r2, [r7, #2]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a4e:	e003      	b.n	8004a58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a50:	887b      	ldrh	r3, [r7, #2]
 8004a52:	041a      	lsls	r2, r3, #16
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	611a      	str	r2, [r3, #16]
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
	...

08004a64 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	420e0020 	.word	0x420e0020

08004a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e26c      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8087 	beq.w	8004baa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a9c:	4b92      	ldr	r3, [pc, #584]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004aa8:	4b8f      	ldr	r3, [pc, #572]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 030c 	and.w	r3, r3, #12
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d112      	bne.n	8004ada <HAL_RCC_OscConfig+0x5e>
 8004ab4:	4b8c      	ldr	r3, [pc, #560]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac0:	d10b      	bne.n	8004ada <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac2:	4b89      	ldr	r3, [pc, #548]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d06c      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x12c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d168      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e246      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x76>
 8004ae4:	4b80      	ldr	r3, [pc, #512]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a7f      	ldr	r2, [pc, #508]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e02e      	b.n	8004b50 <HAL_RCC_OscConfig+0xd4>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x98>
 8004afa:	4b7b      	ldr	r3, [pc, #492]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a7a      	ldr	r2, [pc, #488]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4b78      	ldr	r3, [pc, #480]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a77      	ldr	r2, [pc, #476]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e01d      	b.n	8004b50 <HAL_RCC_OscConfig+0xd4>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0xbc>
 8004b1e:	4b72      	ldr	r3, [pc, #456]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a71      	ldr	r2, [pc, #452]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b6f      	ldr	r3, [pc, #444]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a6e      	ldr	r2, [pc, #440]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e00b      	b.n	8004b50 <HAL_RCC_OscConfig+0xd4>
 8004b38:	4b6b      	ldr	r3, [pc, #428]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a6a      	ldr	r2, [pc, #424]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	4b68      	ldr	r3, [pc, #416]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a67      	ldr	r2, [pc, #412]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d013      	beq.n	8004b80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7ff fab6 	bl	80040c8 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7ff fab2 	bl	80040c8 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	; 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e1fa      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b72:	4b5d      	ldr	r3, [pc, #372]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0xe4>
 8004b7e:	e014      	b.n	8004baa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7ff faa2 	bl	80040c8 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7ff fa9e 	bl	80040c8 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e1e6      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9a:	4b53      	ldr	r3, [pc, #332]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x10c>
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d063      	beq.n	8004c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bb6:	4b4c      	ldr	r3, [pc, #304]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bc2:	4b49      	ldr	r3, [pc, #292]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d11c      	bne.n	8004c08 <HAL_RCC_OscConfig+0x18c>
 8004bce:	4b46      	ldr	r3, [pc, #280]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d116      	bne.n	8004c08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bda:	4b43      	ldr	r3, [pc, #268]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x176>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d001      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e1ba      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf2:	4b3d      	ldr	r3, [pc, #244]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4939      	ldr	r1, [pc, #228]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c06:	e03a      	b.n	8004c7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d020      	beq.n	8004c52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c10:	4b36      	ldr	r3, [pc, #216]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c16:	f7ff fa57 	bl	80040c8 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c1e:	f7ff fa53 	bl	80040c8 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e19b      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c30:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	4927      	ldr	r1, [pc, #156]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]
 8004c50:	e015      	b.n	8004c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c52:	4b26      	ldr	r3, [pc, #152]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7ff fa36 	bl	80040c8 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c60:	f7ff fa32 	bl	80040c8 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e17a      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c72:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d03a      	beq.n	8004d00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d019      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c92:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c98:	f7ff fa16 	bl	80040c8 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca0:	f7ff fa12 	bl	80040c8 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e15a      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	f000 fada 	bl	8005278 <RCC_Delay>
 8004cc4:	e01c      	b.n	8004d00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ccc:	f7ff f9fc 	bl	80040c8 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd2:	e00f      	b.n	8004cf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd4:	f7ff f9f8 	bl	80040c8 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d908      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e140      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	42420000 	.word	0x42420000
 8004cf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf4:	4b9e      	ldr	r3, [pc, #632]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e9      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80a6 	beq.w	8004e5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d12:	4b97      	ldr	r3, [pc, #604]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10d      	bne.n	8004d3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d1e:	4b94      	ldr	r3, [pc, #592]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	4a93      	ldr	r2, [pc, #588]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d28:	61d3      	str	r3, [r2, #28]
 8004d2a:	4b91      	ldr	r3, [pc, #580]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d36:	2301      	movs	r3, #1
 8004d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3a:	4b8e      	ldr	r3, [pc, #568]	; (8004f74 <HAL_RCC_OscConfig+0x4f8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d118      	bne.n	8004d78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d46:	4b8b      	ldr	r3, [pc, #556]	; (8004f74 <HAL_RCC_OscConfig+0x4f8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a8a      	ldr	r2, [pc, #552]	; (8004f74 <HAL_RCC_OscConfig+0x4f8>)
 8004d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d52:	f7ff f9b9 	bl	80040c8 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5a:	f7ff f9b5 	bl	80040c8 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b64      	cmp	r3, #100	; 0x64
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e0fd      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6c:	4b81      	ldr	r3, [pc, #516]	; (8004f74 <HAL_RCC_OscConfig+0x4f8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d106      	bne.n	8004d8e <HAL_RCC_OscConfig+0x312>
 8004d80:	4b7b      	ldr	r3, [pc, #492]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	4a7a      	ldr	r2, [pc, #488]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	6213      	str	r3, [r2, #32]
 8004d8c:	e02d      	b.n	8004dea <HAL_RCC_OscConfig+0x36e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10c      	bne.n	8004db0 <HAL_RCC_OscConfig+0x334>
 8004d96:	4b76      	ldr	r3, [pc, #472]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	4a75      	ldr	r2, [pc, #468]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	6213      	str	r3, [r2, #32]
 8004da2:	4b73      	ldr	r3, [pc, #460]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	4a72      	ldr	r2, [pc, #456]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004da8:	f023 0304 	bic.w	r3, r3, #4
 8004dac:	6213      	str	r3, [r2, #32]
 8004dae:	e01c      	b.n	8004dea <HAL_RCC_OscConfig+0x36e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	2b05      	cmp	r3, #5
 8004db6:	d10c      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x356>
 8004db8:	4b6d      	ldr	r3, [pc, #436]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	4a6c      	ldr	r2, [pc, #432]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004dbe:	f043 0304 	orr.w	r3, r3, #4
 8004dc2:	6213      	str	r3, [r2, #32]
 8004dc4:	4b6a      	ldr	r3, [pc, #424]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4a69      	ldr	r2, [pc, #420]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	6213      	str	r3, [r2, #32]
 8004dd0:	e00b      	b.n	8004dea <HAL_RCC_OscConfig+0x36e>
 8004dd2:	4b67      	ldr	r3, [pc, #412]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4a66      	ldr	r2, [pc, #408]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	6213      	str	r3, [r2, #32]
 8004dde:	4b64      	ldr	r3, [pc, #400]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	4a63      	ldr	r2, [pc, #396]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004de4:	f023 0304 	bic.w	r3, r3, #4
 8004de8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d015      	beq.n	8004e1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df2:	f7ff f969 	bl	80040c8 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df8:	e00a      	b.n	8004e10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfa:	f7ff f965 	bl	80040c8 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e0ab      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e10:	4b57      	ldr	r3, [pc, #348]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ee      	beq.n	8004dfa <HAL_RCC_OscConfig+0x37e>
 8004e1c:	e014      	b.n	8004e48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1e:	f7ff f953 	bl	80040c8 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7ff f94f 	bl	80040c8 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e095      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3c:	4b4c      	ldr	r3, [pc, #304]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1ee      	bne.n	8004e26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4e:	4b48      	ldr	r3, [pc, #288]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	4a47      	ldr	r2, [pc, #284]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8081 	beq.w	8004f66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e64:	4b42      	ldr	r3, [pc, #264]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d061      	beq.n	8004f34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d146      	bne.n	8004f06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e78:	4b3f      	ldr	r3, [pc, #252]	; (8004f78 <HAL_RCC_OscConfig+0x4fc>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7e:	f7ff f923 	bl	80040c8 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e86:	f7ff f91f 	bl	80040c8 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e067      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e98:	4b35      	ldr	r3, [pc, #212]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f0      	bne.n	8004e86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eac:	d108      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004eae:	4b30      	ldr	r3, [pc, #192]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	492d      	ldr	r1, [pc, #180]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ec0:	4b2b      	ldr	r3, [pc, #172]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a19      	ldr	r1, [r3, #32]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	4927      	ldr	r1, [pc, #156]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed8:	4b27      	ldr	r3, [pc, #156]	; (8004f78 <HAL_RCC_OscConfig+0x4fc>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ede:	f7ff f8f3 	bl	80040c8 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7ff f8ef 	bl	80040c8 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e037      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x46a>
 8004f04:	e02f      	b.n	8004f66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f06:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <HAL_RCC_OscConfig+0x4fc>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7ff f8dc 	bl	80040c8 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f14:	f7ff f8d8 	bl	80040c8 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e020      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f26:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x498>
 8004f32:	e018      	b.n	8004f66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e013      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <HAL_RCC_OscConfig+0x4f4>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d106      	bne.n	8004f62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d001      	beq.n	8004f66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40007000 	.word	0x40007000
 8004f78:	42420060 	.word	0x42420060

08004f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0d0      	b.n	8005132 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f90:	4b6a      	ldr	r3, [pc, #424]	; (800513c <HAL_RCC_ClockConfig+0x1c0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d910      	bls.n	8004fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9e:	4b67      	ldr	r3, [pc, #412]	; (800513c <HAL_RCC_ClockConfig+0x1c0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f023 0207 	bic.w	r2, r3, #7
 8004fa6:	4965      	ldr	r1, [pc, #404]	; (800513c <HAL_RCC_ClockConfig+0x1c0>)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fae:	4b63      	ldr	r3, [pc, #396]	; (800513c <HAL_RCC_ClockConfig+0x1c0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0b8      	b.n	8005132 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d020      	beq.n	800500e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fd8:	4b59      	ldr	r3, [pc, #356]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a58      	ldr	r2, [pc, #352]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fe2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff0:	4b53      	ldr	r3, [pc, #332]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	4a52      	ldr	r2, [pc, #328]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ffa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffc:	4b50      	ldr	r3, [pc, #320]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	494d      	ldr	r1, [pc, #308]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 800500a:	4313      	orrs	r3, r2
 800500c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d040      	beq.n	800509c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d107      	bne.n	8005032 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005022:	4b47      	ldr	r3, [pc, #284]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d115      	bne.n	800505a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e07f      	b.n	8005132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d107      	bne.n	800504a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503a:	4b41      	ldr	r3, [pc, #260]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e073      	b.n	8005132 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504a:	4b3d      	ldr	r3, [pc, #244]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e06b      	b.n	8005132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800505a:	4b39      	ldr	r3, [pc, #228]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f023 0203 	bic.w	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4936      	ldr	r1, [pc, #216]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 8005068:	4313      	orrs	r3, r2
 800506a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800506c:	f7ff f82c 	bl	80040c8 <HAL_GetTick>
 8005070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005072:	e00a      	b.n	800508a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005074:	f7ff f828 	bl	80040c8 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e053      	b.n	8005132 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508a:	4b2d      	ldr	r3, [pc, #180]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 020c 	and.w	r2, r3, #12
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	429a      	cmp	r2, r3
 800509a:	d1eb      	bne.n	8005074 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800509c:	4b27      	ldr	r3, [pc, #156]	; (800513c <HAL_RCC_ClockConfig+0x1c0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d210      	bcs.n	80050cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <HAL_RCC_ClockConfig+0x1c0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 0207 	bic.w	r2, r3, #7
 80050b2:	4922      	ldr	r1, [pc, #136]	; (800513c <HAL_RCC_ClockConfig+0x1c0>)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b20      	ldr	r3, [pc, #128]	; (800513c <HAL_RCC_ClockConfig+0x1c0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e032      	b.n	8005132 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d8:	4b19      	ldr	r3, [pc, #100]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4916      	ldr	r1, [pc, #88]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050f6:	4b12      	ldr	r3, [pc, #72]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	490e      	ldr	r1, [pc, #56]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800510a:	f000 f821 	bl	8005150 <HAL_RCC_GetSysClockFreq>
 800510e:	4601      	mov	r1, r0
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	091b      	lsrs	r3, r3, #4
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <HAL_RCC_ClockConfig+0x1c8>)
 800511c:	5cd3      	ldrb	r3, [r2, r3]
 800511e:	fa21 f303 	lsr.w	r3, r1, r3
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <HAL_RCC_ClockConfig+0x1cc>)
 8005124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <HAL_RCC_ClockConfig+0x1d0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe ff8a 	bl	8004044 <HAL_InitTick>

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40022000 	.word	0x40022000
 8005140:	40021000 	.word	0x40021000
 8005144:	08008258 	.word	0x08008258
 8005148:	20000090 	.word	0x20000090
 800514c:	20000094 	.word	0x20000094

08005150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005150:	b490      	push	{r4, r7}
 8005152:	b08a      	sub	sp, #40	; 0x28
 8005154:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005156:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005158:	1d3c      	adds	r4, r7, #4
 800515a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800515c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005160:	4b28      	ldr	r3, [pc, #160]	; (8005204 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	2300      	movs	r3, #0
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <HAL_RCC_GetSysClockFreq+0xb8>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b04      	cmp	r3, #4
 8005188:	d002      	beq.n	8005190 <HAL_RCC_GetSysClockFreq+0x40>
 800518a:	2b08      	cmp	r3, #8
 800518c:	d003      	beq.n	8005196 <HAL_RCC_GetSysClockFreq+0x46>
 800518e:	e02d      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005190:	4b1e      	ldr	r3, [pc, #120]	; (800520c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005192:	623b      	str	r3, [r7, #32]
      break;
 8005194:	e02d      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	0c9b      	lsrs	r3, r3, #18
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051a2:	4413      	add	r3, r2
 80051a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80051a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d013      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051b4:	4b14      	ldr	r3, [pc, #80]	; (8005208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	0c5b      	lsrs	r3, r3, #17
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051c2:	4413      	add	r3, r2
 80051c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	4a0f      	ldr	r2, [pc, #60]	; (800520c <HAL_RCC_GetSysClockFreq+0xbc>)
 80051ce:	fb02 f203 	mul.w	r2, r2, r3
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
 80051da:	e004      	b.n	80051e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4a0c      	ldr	r2, [pc, #48]	; (8005210 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	623b      	str	r3, [r7, #32]
      break;
 80051ea:	e002      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051ec:	4b07      	ldr	r3, [pc, #28]	; (800520c <HAL_RCC_GetSysClockFreq+0xbc>)
 80051ee:	623b      	str	r3, [r7, #32]
      break;
 80051f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f2:	6a3b      	ldr	r3, [r7, #32]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3728      	adds	r7, #40	; 0x28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc90      	pop	{r4, r7}
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	08008230 	.word	0x08008230
 8005204:	08008240 	.word	0x08008240
 8005208:	40021000 	.word	0x40021000
 800520c:	007a1200 	.word	0x007a1200
 8005210:	003d0900 	.word	0x003d0900

08005214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005218:	4b02      	ldr	r3, [pc, #8]	; (8005224 <HAL_RCC_GetHCLKFreq+0x10>)
 800521a:	681b      	ldr	r3, [r3, #0]
}
 800521c:	4618      	mov	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr
 8005224:	20000090 	.word	0x20000090

08005228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800522c:	f7ff fff2 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 8005230:	4601      	mov	r1, r0
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	4a03      	ldr	r2, [pc, #12]	; (800524c <HAL_RCC_GetPCLK1Freq+0x24>)
 800523e:	5cd3      	ldrb	r3, [r2, r3]
 8005240:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40021000 	.word	0x40021000
 800524c:	08008268 	.word	0x08008268

08005250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005254:	f7ff ffde 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 8005258:	4601      	mov	r1, r0
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	0adb      	lsrs	r3, r3, #11
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	4a03      	ldr	r2, [pc, #12]	; (8005274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005266:	5cd3      	ldrb	r3, [r2, r3]
 8005268:	fa21 f303 	lsr.w	r3, r1, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40021000 	.word	0x40021000
 8005274:	08008268 	.word	0x08008268

08005278 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <RCC_Delay+0x34>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <RCC_Delay+0x38>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	0a5b      	lsrs	r3, r3, #9
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005294:	bf00      	nop
  }
  while (Delay --);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1e5a      	subs	r2, r3, #1
 800529a:	60fa      	str	r2, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f9      	bne.n	8005294 <RCC_Delay+0x1c>
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000090 	.word	0x20000090
 80052b0:	10624dd3 	.word	0x10624dd3

080052b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d07d      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80052d0:	2300      	movs	r3, #0
 80052d2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d4:	4b4f      	ldr	r3, [pc, #316]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10d      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e0:	4b4c      	ldr	r3, [pc, #304]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	4a4b      	ldr	r2, [pc, #300]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ea:	61d3      	str	r3, [r2, #28]
 80052ec:	4b49      	ldr	r3, [pc, #292]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fc:	4b46      	ldr	r3, [pc, #280]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d118      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005308:	4b43      	ldr	r3, [pc, #268]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a42      	ldr	r2, [pc, #264]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800530e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005312:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005314:	f7fe fed8 	bl	80040c8 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531a:	e008      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531c:	f7fe fed4 	bl	80040c8 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b64      	cmp	r3, #100	; 0x64
 8005328:	d901      	bls.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e06d      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532e:	4b3a      	ldr	r3, [pc, #232]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800533a:	4b36      	ldr	r3, [pc, #216]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005342:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d02e      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	429a      	cmp	r2, r3
 8005356:	d027      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005358:	4b2e      	ldr	r3, [pc, #184]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005360:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005362:	4b2e      	ldr	r3, [pc, #184]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005368:	4b2c      	ldr	r3, [pc, #176]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800536e:	4a29      	ldr	r2, [pc, #164]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d014      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537e:	f7fe fea3 	bl	80040c8 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005384:	e00a      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005386:	f7fe fe9f 	bl	80040c8 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	f241 3288 	movw	r2, #5000	; 0x1388
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e036      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539c:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0ee      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053a8:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4917      	ldr	r1, [pc, #92]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d105      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c0:	4b14      	ldr	r3, [pc, #80]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	4a13      	ldr	r2, [pc, #76]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	490b      	ldr	r1, [pc, #44]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d008      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053f6:	4b07      	ldr	r3, [pc, #28]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	4904      	ldr	r1, [pc, #16]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005404:	4313      	orrs	r3, r2
 8005406:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	40007000 	.word	0x40007000
 800541c:	42420440 	.word	0x42420440

08005420 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b08d      	sub	sp, #52	; 0x34
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005428:	4b55      	ldr	r3, [pc, #340]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800542a:	f107 040c 	add.w	r4, r7, #12
 800542e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005434:	4b53      	ldr	r3, [pc, #332]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
 800543e:	2300      	movs	r3, #0
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005442:	2300      	movs	r3, #0
 8005444:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	2300      	movs	r3, #0
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d07f      	beq.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005454:	2b10      	cmp	r3, #16
 8005456:	d002      	beq.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005458:	2b01      	cmp	r3, #1
 800545a:	d048      	beq.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800545c:	e08b      	b.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800545e:	4b4a      	ldr	r3, [pc, #296]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005464:	4b48      	ldr	r3, [pc, #288]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d07f      	beq.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	0c9b      	lsrs	r3, r3, #18
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800547c:	4413      	add	r3, r2
 800547e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005482:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d018      	beq.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800548e:	4b3e      	ldr	r3, [pc, #248]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	0c5b      	lsrs	r3, r3, #17
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800549c:	4413      	add	r3, r2
 800549e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00d      	beq.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80054ae:	4a37      	ldr	r2, [pc, #220]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	fb02 f303 	mul.w	r3, r2, r3
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054be:	e004      	b.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	4a33      	ldr	r2, [pc, #204]	; (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80054c4:	fb02 f303 	mul.w	r3, r2, r3
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80054ca:	4b2f      	ldr	r3, [pc, #188]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d6:	d102      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80054dc:	e048      	b.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4a2c      	ldr	r2, [pc, #176]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	085b      	lsrs	r3, r3, #1
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80054ec:	e040      	b.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80054ee:	4b26      	ldr	r3, [pc, #152]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054fe:	d108      	bne.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800550a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005510:	e01f      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800551c:	d109      	bne.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800551e:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800552a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005530:	e00f      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800553c:	d11a      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800553e:	4b12      	ldr	r3, [pc, #72]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d014      	beq.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800554a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005550:	e010      	b.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005552:	e00f      	b.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005554:	f7ff fe7c 	bl	8005250 <HAL_RCC_GetPCLK2Freq>
 8005558:	4602      	mov	r2, r0
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	0b9b      	lsrs	r3, r3, #14
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	3301      	adds	r3, #1
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800556e:	e002      	b.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005574:	bf00      	nop
    }
  }
  return (frequency);
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005578:	4618      	mov	r0, r3
 800557a:	3734      	adds	r7, #52	; 0x34
 800557c:	46bd      	mov	sp, r7
 800557e:	bd90      	pop	{r4, r7, pc}
 8005580:	08008244 	.word	0x08008244
 8005584:	08008254 	.word	0x08008254
 8005588:	40021000 	.word	0x40021000
 800558c:	007a1200 	.word	0x007a1200
 8005590:	003d0900 	.word	0x003d0900
 8005594:	aaaaaaab 	.word	0xaaaaaaab

08005598 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e084      	b.n	80056b8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	7c5b      	ldrb	r3, [r3, #17]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d105      	bne.n	80055c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fe fa14 	bl	80039ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fbd0 	bl	8005d70 <HAL_RTC_WaitForSynchro>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d004      	beq.n	80055e0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2204      	movs	r2, #4
 80055da:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e06b      	b.n	80056b8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fc89 	bl	8005ef8 <RTC_EnterInitMode>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2204      	movs	r2, #4
 80055f0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e060      	b.n	80056b8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0207 	bic.w	r2, r2, #7
 8005604:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800560e:	4b2c      	ldr	r3, [pc, #176]	; (80056c0 <HAL_RTC_Init+0x128>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	4a2b      	ldr	r2, [pc, #172]	; (80056c0 <HAL_RTC_Init+0x128>)
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800561a:	4b29      	ldr	r3, [pc, #164]	; (80056c0 <HAL_RTC_Init+0x128>)
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	4926      	ldr	r1, [pc, #152]	; (80056c0 <HAL_RTC_Init+0x128>)
 8005628:	4313      	orrs	r3, r2
 800562a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005634:	d003      	beq.n	800563e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e00e      	b.n	800565c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800563e:	2001      	movs	r0, #1
 8005640:	f7ff feee 	bl	8005420 <HAL_RCCEx_GetPeriphCLKFreq>
 8005644:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2204      	movs	r2, #4
 8005650:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e030      	b.n	80056b8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3b01      	subs	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f023 010f 	bic.w	r1, r3, #15
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	0c1a      	lsrs	r2, r3, #16
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	041b      	lsls	r3, r3, #16
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	b291      	uxth	r1, r2
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	430b      	orrs	r3, r1
 8005686:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fc5d 	bl	8005f48 <RTC_ExitInitMode>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2204      	movs	r2, #4
 8005698:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e00c      	b.n	80056b8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80056b6:	2300      	movs	r3, #0
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40006c00 	.word	0x40006c00

080056c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056c4:	b590      	push	{r4, r7, lr}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_RTC_SetTime+0x20>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e080      	b.n	80057ea <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	7c1b      	ldrb	r3, [r3, #16]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_RTC_SetTime+0x30>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e07a      	b.n	80057ea <HAL_RTC_SetTime+0x126>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2202      	movs	r2, #2
 80056fe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d113      	bne.n	800572e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005710:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	785b      	ldrb	r3, [r3, #1]
 8005718:	4619      	mov	r1, r3
 800571a:	460b      	mov	r3, r1
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	1a5b      	subs	r3, r3, r1
 8005720:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005722:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005728:	4413      	add	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e01e      	b.n	800576c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fc4d 	bl	8005fd2 <RTC_Bcd2ToByte>
 8005738:	4603      	mov	r3, r0
 800573a:	461a      	mov	r2, r3
 800573c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005740:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	785b      	ldrb	r3, [r3, #1]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fc42 	bl	8005fd2 <RTC_Bcd2ToByte>
 800574e:	4603      	mov	r3, r0
 8005750:	461a      	mov	r2, r3
 8005752:	4613      	mov	r3, r2
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800575a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	789b      	ldrb	r3, [r3, #2]
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fc36 	bl	8005fd2 <RTC_Bcd2ToByte>
 8005766:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005768:	4423      	add	r3, r4
 800576a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800576c:	6979      	ldr	r1, [r7, #20]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 fb5b 	bl	8005e2a <RTC_WriteTimeCounter>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2204      	movs	r2, #4
 800577e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e02f      	b.n	80057ea <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0205 	bic.w	r2, r2, #5
 8005798:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fb6c 	bl	8005e78 <RTC_ReadAlarmCounter>
 80057a0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a8:	d018      	beq.n	80057dc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d214      	bcs.n	80057dc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80057b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80057bc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80057be:	6939      	ldr	r1, [r7, #16]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 fb72 	bl	8005eaa <RTC_WriteAlarmCounter>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2204      	movs	r2, #4
 80057d0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e006      	b.n	80057ea <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80057e8:	2300      	movs	r3, #0
  }
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}
	...

080057f4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	2300      	movs	r3, #0
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	2300      	movs	r3, #0
 800580e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <HAL_RTC_GetTime+0x28>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0b5      	b.n	800598c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e0ac      	b.n	800598c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fac9 	bl	8005dca <RTC_ReadTimeCounter>
 8005838:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	4a55      	ldr	r2, [pc, #340]	; (8005994 <HAL_RTC_GetTime+0x1a0>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	0adb      	lsrs	r3, r3, #11
 8005844:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4b52      	ldr	r3, [pc, #328]	; (8005994 <HAL_RTC_GetTime+0x1a0>)
 800584a:	fba3 1302 	umull	r1, r3, r3, r2
 800584e:	0adb      	lsrs	r3, r3, #11
 8005850:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	4a4f      	ldr	r2, [pc, #316]	; (8005998 <HAL_RTC_GetTime+0x1a4>)
 800585c:	fba2 2303 	umull	r2, r3, r2, r3
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	b2da      	uxtb	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	4a4a      	ldr	r2, [pc, #296]	; (8005994 <HAL_RTC_GetTime+0x1a0>)
 800586c:	fba2 1203 	umull	r1, r2, r2, r3
 8005870:	0ad2      	lsrs	r2, r2, #11
 8005872:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005876:	fb01 f202 	mul.w	r2, r1, r2
 800587a:	1a9a      	subs	r2, r3, r2
 800587c:	4b46      	ldr	r3, [pc, #280]	; (8005998 <HAL_RTC_GetTime+0x1a4>)
 800587e:	fba3 1302 	umull	r1, r3, r3, r2
 8005882:	0959      	lsrs	r1, r3, #5
 8005884:	460b      	mov	r3, r1
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	1a5b      	subs	r3, r3, r1
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	1ad1      	subs	r1, r2, r3
 800588e:	b2ca      	uxtb	r2, r1
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b17      	cmp	r3, #23
 8005898:	d955      	bls.n	8005946 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4a3f      	ldr	r2, [pc, #252]	; (800599c <HAL_RTC_GetTime+0x1a8>)
 800589e:	fba2 2303 	umull	r2, r3, r2, r3
 80058a2:	091b      	lsrs	r3, r3, #4
 80058a4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80058a6:	6939      	ldr	r1, [r7, #16]
 80058a8:	4b3c      	ldr	r3, [pc, #240]	; (800599c <HAL_RTC_GetTime+0x1a8>)
 80058aa:	fba3 2301 	umull	r2, r3, r3, r1
 80058ae:	091a      	lsrs	r2, r3, #4
 80058b0:	4613      	mov	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	4413      	add	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	1aca      	subs	r2, r1, r3
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fad9 	bl	8005e78 <RTC_ReadAlarmCounter>
 80058c6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058ce:	d008      	beq.n	80058e2 <HAL_RTC_GetTime+0xee>
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d904      	bls.n	80058e2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	e002      	b.n	80058e8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80058e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058e6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	4a2d      	ldr	r2, [pc, #180]	; (80059a0 <HAL_RTC_GetTime+0x1ac>)
 80058ec:	fb02 f303 	mul.w	r3, r2, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80058f6:	69b9      	ldr	r1, [r7, #24]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 fa96 	bl	8005e2a <RTC_WriteTimeCounter>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e041      	b.n	800598c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800590e:	d00c      	beq.n	800592a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	4413      	add	r3, r2
 8005916:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005918:	69f9      	ldr	r1, [r7, #28]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fac5 	bl	8005eaa <RTC_WriteAlarmCounter>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e030      	b.n	800598c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800592a:	69f9      	ldr	r1, [r7, #28]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fabc 	bl	8005eaa <RTC_WriteAlarmCounter>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e027      	b.n	800598c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800593c:	6979      	ldr	r1, [r7, #20]
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 fb64 	bl	800600c <RTC_DateUpdate>
 8005944:	e003      	b.n	800594e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	b2da      	uxtb	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01a      	beq.n	800598a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fb1d 	bl	8005f98 <RTC_ByteToBcd2>
 800595e:	4603      	mov	r3, r0
 8005960:	461a      	mov	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fb14 	bl	8005f98 <RTC_ByteToBcd2>
 8005970:	4603      	mov	r3, r0
 8005972:	461a      	mov	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	789b      	ldrb	r3, [r3, #2]
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fb0b 	bl	8005f98 <RTC_ByteToBcd2>
 8005982:	4603      	mov	r3, r0
 8005984:	461a      	mov	r2, r3
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	91a2b3c5 	.word	0x91a2b3c5
 8005998:	88888889 	.word	0x88888889
 800599c:	aaaaaaab 	.word	0xaaaaaaab
 80059a0:	00015180 	.word	0x00015180

080059a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61fb      	str	r3, [r7, #28]
 80059b4:	2300      	movs	r3, #0
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_RTC_SetDate+0x24>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e097      	b.n	8005afc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	7c1b      	ldrb	r3, [r3, #16]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_RTC_SetDate+0x34>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e091      	b.n	8005afc <HAL_RTC_SetDate+0x158>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2202      	movs	r2, #2
 80059e2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10c      	bne.n	8005a04 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	78da      	ldrb	r2, [r3, #3]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	785a      	ldrb	r2, [r3, #1]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	789a      	ldrb	r2, [r3, #2]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	739a      	strb	r2, [r3, #14]
 8005a02:	e01a      	b.n	8005a3a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	78db      	ldrb	r3, [r3, #3]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fae2 	bl	8005fd2 <RTC_Bcd2ToByte>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	461a      	mov	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fad9 	bl	8005fd2 <RTC_Bcd2ToByte>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	789b      	ldrb	r3, [r3, #2]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fad0 	bl	8005fd2 <RTC_Bcd2ToByte>
 8005a32:	4603      	mov	r3, r0
 8005a34:	461a      	mov	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	7bdb      	ldrb	r3, [r3, #15]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	7b59      	ldrb	r1, [r3, #13]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	7b9b      	ldrb	r3, [r3, #14]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f000 fbbb 	bl	80061c4 <RTC_WeekDayNum>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	461a      	mov	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	7b1a      	ldrb	r2, [r3, #12]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f9b3 	bl	8005dca <RTC_ReadTimeCounter>
 8005a64:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4a26      	ldr	r2, [pc, #152]	; (8005b04 <HAL_RTC_SetDate+0x160>)
 8005a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6e:	0adb      	lsrs	r3, r3, #11
 8005a70:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b18      	cmp	r3, #24
 8005a76:	d93a      	bls.n	8005aee <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	4a23      	ldr	r2, [pc, #140]	; (8005b08 <HAL_RTC_SetDate+0x164>)
 8005a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a80:	091b      	lsrs	r3, r3, #4
 8005a82:	4a22      	ldr	r2, [pc, #136]	; (8005b0c <HAL_RTC_SetDate+0x168>)
 8005a84:	fb02 f303 	mul.w	r3, r2, r3
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005a8e:	69f9      	ldr	r1, [r7, #28]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f9ca 	bl	8005e2a <RTC_WriteTimeCounter>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2204      	movs	r2, #4
 8005aa0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e027      	b.n	8005afc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f9e3 	bl	8005e78 <RTC_ReadAlarmCounter>
 8005ab2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aba:	d018      	beq.n	8005aee <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d214      	bcs.n	8005aee <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005aca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005ace:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005ad0:	69b9      	ldr	r1, [r7, #24]
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f9e9 	bl	8005eaa <RTC_WriteAlarmCounter>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e006      	b.n	8005afc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3720      	adds	r7, #32
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	91a2b3c5 	.word	0x91a2b3c5
 8005b08:	aaaaaaab 	.word	0xaaaaaaab
 8005b0c:	00015180 	.word	0x00015180

08005b10 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005b1c:	f107 0314 	add.w	r3, r7, #20
 8005b20:	2100      	movs	r1, #0
 8005b22:	460a      	mov	r2, r1
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	460a      	mov	r2, r1
 8005b28:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_RTC_GetDate+0x26>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e03a      	b.n	8005bb0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005b3a:	f107 0314 	add.w	r3, r7, #20
 8005b3e:	2200      	movs	r2, #0
 8005b40:	4619      	mov	r1, r3
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fe56 	bl	80057f4 <HAL_RTC_GetTime>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e02e      	b.n	8005bb0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	7b1a      	ldrb	r2, [r3, #12]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	7bda      	ldrb	r2, [r3, #15]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	7b5a      	ldrb	r2, [r3, #13]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	7b9a      	ldrb	r2, [r3, #14]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01a      	beq.n	8005bae <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	78db      	ldrb	r3, [r3, #3]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fa0b 	bl	8005f98 <RTC_ByteToBcd2>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fa02 	bl	8005f98 <RTC_ByteToBcd2>
 8005b94:	4603      	mov	r3, r0
 8005b96:	461a      	mov	r2, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	789b      	ldrb	r3, [r3, #2]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 f9f9 	bl	8005f98 <RTC_ByteToBcd2>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b089      	sub	sp, #36	; 0x24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8005bc8:	f107 0314 	add.w	r3, r7, #20
 8005bcc:	2100      	movs	r1, #0
 8005bce:	460a      	mov	r2, r1
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	460a      	mov	r2, r1
 8005bd4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_RTC_SetAlarm_IT+0x2a>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e096      	b.n	8005d14 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	7c1b      	ldrb	r3, [r3, #16]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_RTC_SetAlarm_IT+0x3a>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e090      	b.n	8005d14 <HAL_RTC_SetAlarm_IT+0x15c>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005bfe:	f107 0314 	add.w	r3, r7, #20
 8005c02:	2200      	movs	r2, #0
 8005c04:	4619      	mov	r1, r3
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff fdf4 	bl	80057f4 <HAL_RTC_GetTime>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e07e      	b.n	8005d14 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005c16:	7d3b      	ldrb	r3, [r7, #20]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c1e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8005c22:	7d7b      	ldrb	r3, [r7, #21]
 8005c24:	4619      	mov	r1, r3
 8005c26:	460b      	mov	r3, r1
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	1a5b      	subs	r3, r3, r1
 8005c2c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005c2e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8005c30:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005c32:	4413      	add	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d113      	bne.n	8005c64 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c46:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	460b      	mov	r3, r1
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	1a5b      	subs	r3, r3, r1
 8005c56:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005c58:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005c5e:	4413      	add	r3, r2
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	e01e      	b.n	8005ca2 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 f9b2 	bl	8005fd2 <RTC_Bcd2ToByte>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	461a      	mov	r2, r3
 8005c72:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c76:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	785b      	ldrb	r3, [r3, #1]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 f9a7 	bl	8005fd2 <RTC_Bcd2ToByte>
 8005c84:	4603      	mov	r3, r0
 8005c86:	461a      	mov	r2, r3
 8005c88:	4613      	mov	r3, r2
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005c90:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	789b      	ldrb	r3, [r3, #2]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 f99b 	bl	8005fd2 <RTC_Bcd2ToByte>
 8005c9c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005c9e:	4423      	add	r3, r4
 8005ca0:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d205      	bcs.n	8005cb6 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005cb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005cb4:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005cb6:	69f9      	ldr	r1, [r7, #28]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f8f6 	bl	8005eaa <RTC_WriteAlarmCounter>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e01f      	b.n	8005d14 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0202 	mvn.w	r2, #2
 8005cdc:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0202 	orr.w	r2, r2, #2
 8005cec:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <HAL_RTC_SetAlarm_IT+0x164>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <HAL_RTC_SetAlarm_IT+0x164>)
 8005cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf8:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005cfa:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <HAL_RTC_SetAlarm_IT+0x164>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	4a07      	ldr	r2, [pc, #28]	; (8005d1c <HAL_RTC_SetAlarm_IT+0x164>)
 8005d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d04:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005d12:	2300      	movs	r3, #0
  }
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3724      	adds	r7, #36	; 0x24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd90      	pop	{r4, r7, pc}
 8005d1c:	40010400 	.word	0x40010400

08005d20 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00e      	beq.n	8005d54 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fc ffb5 	bl	8002cb4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f06f 0202 	mvn.w	r2, #2
 8005d52:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <HAL_RTC_AlarmIRQHandler+0x4c>)
 8005d56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d5a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	745a      	strb	r2, [r3, #17]
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40010400 	.word	0x40010400

08005d70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e01d      	b.n	8005dc2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0208 	bic.w	r2, r2, #8
 8005d94:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005d96:	f7fe f997 	bl	80040c8 <HAL_GetTick>
 8005d9a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005d9c:	e009      	b.n	8005db2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005d9e:	f7fe f993 	bl	80040c8 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dac:	d901      	bls.n	8005db2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e007      	b.n	8005dc2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0ee      	beq.n	8005d9e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b087      	sub	sp, #28
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	827b      	strh	r3, [r7, #18]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	823b      	strh	r3, [r7, #16]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005dfa:	8a7a      	ldrh	r2, [r7, #18]
 8005dfc:	8a3b      	ldrh	r3, [r7, #16]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d008      	beq.n	8005e14 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005e02:	8a3b      	ldrh	r3, [r7, #16]
 8005e04:	041a      	lsls	r2, r3, #16
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	e004      	b.n	8005e1e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005e14:	8a7b      	ldrh	r3, [r7, #18]
 8005e16:	041a      	lsls	r2, r3, #16
 8005e18:	89fb      	ldrh	r3, [r7, #14]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005e1e:	697b      	ldr	r3, [r7, #20]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f85d 	bl	8005ef8 <RTC_EnterInitMode>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	73fb      	strb	r3, [r7, #15]
 8005e48:	e011      	b.n	8005e6e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	0c12      	lsrs	r2, r2, #16
 8005e52:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	b292      	uxth	r2, r2
 8005e5c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f872 	bl	8005f48 <RTC_ExitInitMode>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	81fb      	strh	r3, [r7, #14]
 8005e84:	2300      	movs	r3, #0
 8005e86:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005e98:	89fb      	ldrh	r3, [r7, #14]
 8005e9a:	041a      	lsls	r2, r3, #16
 8005e9c:	89bb      	ldrh	r3, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr

08005eaa <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f81d 	bl	8005ef8 <RTC_EnterInitMode>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
 8005ec8:	e011      	b.n	8005eee <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	0c12      	lsrs	r2, r2, #16
 8005ed2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	b292      	uxth	r2, r2
 8005edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f832 	bl	8005f48 <RTC_ExitInitMode>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005f04:	f7fe f8e0 	bl	80040c8 <HAL_GetTick>
 8005f08:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005f0a:	e009      	b.n	8005f20 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005f0c:	f7fe f8dc 	bl	80040c8 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f1a:	d901      	bls.n	8005f20 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e00f      	b.n	8005f40 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0ee      	beq.n	8005f0c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0210 	orr.w	r2, r2, #16
 8005f3c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0210 	bic.w	r2, r2, #16
 8005f62:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005f64:	f7fe f8b0 	bl	80040c8 <HAL_GetTick>
 8005f68:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005f6a:	e009      	b.n	8005f80 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005f6c:	f7fe f8ac 	bl	80040c8 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f7a:	d901      	bls.n	8005f80 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e007      	b.n	8005f90 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0ee      	beq.n	8005f6c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005fa6:	e005      	b.n	8005fb4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005fae:	79fb      	ldrb	r3, [r7, #7]
 8005fb0:	3b0a      	subs	r3, #10
 8005fb2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	2b09      	cmp	r3, #9
 8005fb8:	d8f6      	bhi.n	8005fa8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	b2db      	uxtb	r3, r3
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr

08005fd2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	4603      	mov	r3, r0
 8005fda:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	091b      	lsrs	r3, r3, #4
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	b2db      	uxtb	r3, r3
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr

0800600c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7bdb      	ldrb	r3, [r3, #15]
 800602a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	7b5b      	ldrb	r3, [r3, #13]
 8006030:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	7b9b      	ldrb	r3, [r3, #14]
 8006036:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006038:	2300      	movs	r3, #0
 800603a:	60bb      	str	r3, [r7, #8]
 800603c:	e06f      	b.n	800611e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d011      	beq.n	8006068 <RTC_DateUpdate+0x5c>
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b03      	cmp	r3, #3
 8006048:	d00e      	beq.n	8006068 <RTC_DateUpdate+0x5c>
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b05      	cmp	r3, #5
 800604e:	d00b      	beq.n	8006068 <RTC_DateUpdate+0x5c>
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b07      	cmp	r3, #7
 8006054:	d008      	beq.n	8006068 <RTC_DateUpdate+0x5c>
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b08      	cmp	r3, #8
 800605a:	d005      	beq.n	8006068 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	2b0a      	cmp	r3, #10
 8006060:	d002      	beq.n	8006068 <RTC_DateUpdate+0x5c>
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b0c      	cmp	r3, #12
 8006066:	d117      	bne.n	8006098 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b1e      	cmp	r3, #30
 800606c:	d803      	bhi.n	8006076 <RTC_DateUpdate+0x6a>
      {
        day++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006074:	e050      	b.n	8006118 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d005      	beq.n	8006088 <RTC_DateUpdate+0x7c>
        {
          month++;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	3301      	adds	r3, #1
 8006080:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006082:	2301      	movs	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006086:	e047      	b.n	8006118 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006088:	2301      	movs	r3, #1
 800608a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800608c:	2301      	movs	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]
          year++;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	3301      	adds	r3, #1
 8006094:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006096:	e03f      	b.n	8006118 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b04      	cmp	r3, #4
 800609c:	d008      	beq.n	80060b0 <RTC_DateUpdate+0xa4>
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	d005      	beq.n	80060b0 <RTC_DateUpdate+0xa4>
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	2b09      	cmp	r3, #9
 80060a8:	d002      	beq.n	80060b0 <RTC_DateUpdate+0xa4>
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b0b      	cmp	r3, #11
 80060ae:	d10c      	bne.n	80060ca <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b1d      	cmp	r3, #29
 80060b4:	d803      	bhi.n	80060be <RTC_DateUpdate+0xb2>
      {
        day++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80060bc:	e02c      	b.n	8006118 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	3301      	adds	r3, #1
 80060c2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80060c4:	2301      	movs	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80060c8:	e026      	b.n	8006118 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d123      	bne.n	8006118 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b1b      	cmp	r3, #27
 80060d4:	d803      	bhi.n	80060de <RTC_DateUpdate+0xd2>
      {
        day++;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3301      	adds	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	e01c      	b.n	8006118 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b1c      	cmp	r3, #28
 80060e2:	d111      	bne.n	8006108 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 f839 	bl	8006160 <RTC_IsLeapYear>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <RTC_DateUpdate+0xf0>
        {
          day++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3301      	adds	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	e00d      	b.n	8006118 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	3301      	adds	r3, #1
 8006100:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006102:	2301      	movs	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	e007      	b.n	8006118 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b1d      	cmp	r3, #29
 800610c:	d104      	bne.n	8006118 <RTC_DateUpdate+0x10c>
      {
        month++;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	3301      	adds	r3, #1
 8006112:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006114:	2301      	movs	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	3301      	adds	r3, #1
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d38b      	bcc.n	800603e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	b2da      	uxtb	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	4619      	mov	r1, r3
 8006148:	6978      	ldr	r0, [r7, #20]
 800614a:	f000 f83b 	bl	80061c4 <RTC_WeekDayNum>
 800614e:	4603      	mov	r3, r0
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	731a      	strb	r2, [r3, #12]
}
 8006156:	bf00      	nop
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	e01d      	b.n	80061b6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	4a10      	ldr	r2, [pc, #64]	; (80061c0 <RTC_IsLeapYear+0x60>)
 800617e:	fba2 1203 	umull	r1, r2, r2, r3
 8006182:	0952      	lsrs	r2, r2, #5
 8006184:	2164      	movs	r1, #100	; 0x64
 8006186:	fb01 f202 	mul.w	r2, r1, r2
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006192:	2301      	movs	r3, #1
 8006194:	e00f      	b.n	80061b6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <RTC_IsLeapYear+0x60>)
 800619a:	fba2 1203 	umull	r1, r2, r2, r3
 800619e:	09d2      	lsrs	r2, r2, #7
 80061a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80061a4:	fb01 f202 	mul.w	r2, r1, r2
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80061b4:	2300      	movs	r3, #0
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr
 80061c0:	51eb851f 	.word	0x51eb851f

080061c4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
 80061d0:	4613      	mov	r3, r2
 80061d2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60bb      	str	r3, [r7, #8]
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80061e2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d82d      	bhi.n	8006246 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	4613      	mov	r3, r2
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	4413      	add	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	1a9b      	subs	r3, r3, r2
 80061f6:	4a2c      	ldr	r2, [pc, #176]	; (80062a8 <RTC_WeekDayNum+0xe4>)
 80061f8:	fba2 2303 	umull	r2, r3, r2, r3
 80061fc:	085a      	lsrs	r2, r3, #1
 80061fe:	78bb      	ldrb	r3, [r7, #2]
 8006200:	441a      	add	r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	441a      	add	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	3b01      	subs	r3, #1
 800620a:	089b      	lsrs	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	3b01      	subs	r3, #1
 8006212:	4926      	ldr	r1, [pc, #152]	; (80062ac <RTC_WeekDayNum+0xe8>)
 8006214:	fba1 1303 	umull	r1, r3, r1, r3
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	1ad2      	subs	r2, r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	3b01      	subs	r3, #1
 8006220:	4922      	ldr	r1, [pc, #136]	; (80062ac <RTC_WeekDayNum+0xe8>)
 8006222:	fba1 1303 	umull	r1, r3, r1, r3
 8006226:	09db      	lsrs	r3, r3, #7
 8006228:	4413      	add	r3, r2
 800622a:	1d1a      	adds	r2, r3, #4
 800622c:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <RTC_WeekDayNum+0xec>)
 800622e:	fba3 1302 	umull	r1, r3, r3, r2
 8006232:	1ad1      	subs	r1, r2, r3
 8006234:	0849      	lsrs	r1, r1, #1
 8006236:	440b      	add	r3, r1
 8006238:	0899      	lsrs	r1, r3, #2
 800623a:	460b      	mov	r3, r1
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	1a5b      	subs	r3, r3, r1
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	e029      	b.n	800629a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006246:	78fa      	ldrb	r2, [r7, #3]
 8006248:	4613      	mov	r3, r2
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	4413      	add	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	4a15      	ldr	r2, [pc, #84]	; (80062a8 <RTC_WeekDayNum+0xe4>)
 8006254:	fba2 2303 	umull	r2, r3, r2, r3
 8006258:	085a      	lsrs	r2, r3, #1
 800625a:	78bb      	ldrb	r3, [r7, #2]
 800625c:	441a      	add	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	441a      	add	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	089b      	lsrs	r3, r3, #2
 8006266:	441a      	add	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4910      	ldr	r1, [pc, #64]	; (80062ac <RTC_WeekDayNum+0xe8>)
 800626c:	fba1 1303 	umull	r1, r3, r1, r3
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	1ad2      	subs	r2, r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	490d      	ldr	r1, [pc, #52]	; (80062ac <RTC_WeekDayNum+0xe8>)
 8006278:	fba1 1303 	umull	r1, r3, r1, r3
 800627c:	09db      	lsrs	r3, r3, #7
 800627e:	4413      	add	r3, r2
 8006280:	1c9a      	adds	r2, r3, #2
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <RTC_WeekDayNum+0xec>)
 8006284:	fba3 1302 	umull	r1, r3, r3, r2
 8006288:	1ad1      	subs	r1, r2, r3
 800628a:	0849      	lsrs	r1, r1, #1
 800628c:	440b      	add	r3, r1
 800628e:	0899      	lsrs	r1, r3, #2
 8006290:	460b      	mov	r3, r1
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	1a5b      	subs	r3, r3, r1
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	b2db      	uxtb	r3, r3
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr
 80062a8:	38e38e39 	.word	0x38e38e39
 80062ac:	51eb851f 	.word	0x51eb851f
 80062b0:	24924925 	.word	0x24924925

080062b4 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d024      	beq.n	8006314 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01d      	beq.n	8006314 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00b      	beq.n	80062fe <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f821 	bl	800632e <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0204 	mvn.w	r2, #4
 80062f4:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2204      	movs	r2, #4
 80062fa:	745a      	strb	r2, [r3, #17]
 80062fc:	e005      	b.n	800630a <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f80c 	bl	800631c <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f06f 0201 	mvn.w	r2, #1
 8006312:	605a      	str	r2, [r3, #4]
    }
  }
}
 8006314:	bf00      	nop
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	bc80      	pop	{r7}
 800632c:	4770      	bx	lr

0800632e <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr

08006340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e053      	b.n	80063fa <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fd fba7 	bl	8003ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006388:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	ea42 0103 	orr.w	r1, r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	0c1a      	lsrs	r2, r3, #16
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f002 0204 	and.w	r2, r2, #4
 80063d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b088      	sub	sp, #32
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	603b      	str	r3, [r7, #0]
 800640e:	4613      	mov	r3, r2
 8006410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_SPI_Transmit+0x22>
 8006420:	2302      	movs	r3, #2
 8006422:	e11e      	b.n	8006662 <HAL_SPI_Transmit+0x260>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800642c:	f7fd fe4c 	bl	80040c8 <HAL_GetTick>
 8006430:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b01      	cmp	r3, #1
 8006440:	d002      	beq.n	8006448 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006442:	2302      	movs	r3, #2
 8006444:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006446:	e103      	b.n	8006650 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_SPI_Transmit+0x52>
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006458:	e0fa      	b.n	8006650 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2203      	movs	r2, #3
 800645e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	88fa      	ldrh	r2, [r7, #6]
 8006472:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a0:	d107      	bne.n	80064b2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	d007      	beq.n	80064d0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d8:	d14b      	bne.n	8006572 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <HAL_SPI_Transmit+0xe6>
 80064e2:	8afb      	ldrh	r3, [r7, #22]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d13e      	bne.n	8006566 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	881a      	ldrh	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	1c9a      	adds	r2, r3, #2
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800650c:	e02b      	b.n	8006566 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b02      	cmp	r3, #2
 800651a:	d112      	bne.n	8006542 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	881a      	ldrh	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	1c9a      	adds	r2, r3, #2
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006540:	e011      	b.n	8006566 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006542:	f7fd fdc1 	bl	80040c8 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d803      	bhi.n	800655a <HAL_SPI_Transmit+0x158>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006558:	d102      	bne.n	8006560 <HAL_SPI_Transmit+0x15e>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006564:	e074      	b.n	8006650 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1ce      	bne.n	800650e <HAL_SPI_Transmit+0x10c>
 8006570:	e04c      	b.n	800660c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <HAL_SPI_Transmit+0x17e>
 800657a:	8afb      	ldrh	r3, [r7, #22]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d140      	bne.n	8006602 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	330c      	adds	r3, #12
 800658a:	7812      	ldrb	r2, [r2, #0]
 800658c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065a6:	e02c      	b.n	8006602 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d113      	bne.n	80065de <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	7812      	ldrb	r2, [r2, #0]
 80065c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	86da      	strh	r2, [r3, #54]	; 0x36
 80065dc:	e011      	b.n	8006602 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065de:	f7fd fd73 	bl	80040c8 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d803      	bhi.n	80065f6 <HAL_SPI_Transmit+0x1f4>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065f4:	d102      	bne.n	80065fc <HAL_SPI_Transmit+0x1fa>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d102      	bne.n	8006602 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006600:	e026      	b.n	8006650 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1cd      	bne.n	80065a8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fb91 	bl	8006d38 <SPI_EndRxTxTransaction>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2220      	movs	r2, #32
 8006620:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e000      	b.n	8006650 <HAL_SPI_Transmit+0x24e>
  }

error:
 800664e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006660:	7ffb      	ldrb	r3, [r7, #31]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b088      	sub	sp, #32
 800666e:	af02      	add	r7, sp, #8
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	603b      	str	r3, [r7, #0]
 8006676:	4613      	mov	r3, r2
 8006678:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006686:	d112      	bne.n	80066ae <HAL_SPI_Receive+0x44>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10e      	bne.n	80066ae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2204      	movs	r2, #4
 8006694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006698:	88fa      	ldrh	r2, [r7, #6]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	4613      	mov	r3, r2
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f8e9 	bl	800687c <HAL_SPI_TransmitReceive>
 80066aa:	4603      	mov	r3, r0
 80066ac:	e0e2      	b.n	8006874 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_SPI_Receive+0x52>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e0db      	b.n	8006874 <HAL_SPI_Receive+0x20a>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066c4:	f7fd fd00 	bl	80040c8 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d002      	beq.n	80066dc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80066d6:	2302      	movs	r3, #2
 80066d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066da:	e0c2      	b.n	8006862 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_SPI_Receive+0x7e>
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066ec:	e0b9      	b.n	8006862 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2204      	movs	r2, #4
 80066f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	88fa      	ldrh	r2, [r7, #6]
 8006706:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	88fa      	ldrh	r2, [r7, #6]
 800670c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006734:	d107      	bne.n	8006746 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006744:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d007      	beq.n	8006764 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006762:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d162      	bne.n	8006832 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800676c:	e02e      	b.n	80067cc <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b01      	cmp	r3, #1
 800677a:	d115      	bne.n	80067a8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f103 020c 	add.w	r2, r3, #12
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	7812      	ldrb	r2, [r2, #0]
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067a6:	e011      	b.n	80067cc <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067a8:	f7fd fc8e 	bl	80040c8 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d803      	bhi.n	80067c0 <HAL_SPI_Receive+0x156>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067be:	d102      	bne.n	80067c6 <HAL_SPI_Receive+0x15c>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d102      	bne.n	80067cc <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067ca:	e04a      	b.n	8006862 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1cb      	bne.n	800676e <HAL_SPI_Receive+0x104>
 80067d6:	e031      	b.n	800683c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d113      	bne.n	800680e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	b292      	uxth	r2, r2
 80067f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	1c9a      	adds	r2, r3, #2
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800680c:	e011      	b.n	8006832 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800680e:	f7fd fc5b 	bl	80040c8 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d803      	bhi.n	8006826 <HAL_SPI_Receive+0x1bc>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006824:	d102      	bne.n	800682c <HAL_SPI_Receive+0x1c2>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006830:	e017      	b.n	8006862 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1cd      	bne.n	80067d8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fa27 	bl	8006c94 <SPI_EndRxTransaction>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	75fb      	strb	r3, [r7, #23]
 800685e:	e000      	b.n	8006862 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006860:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08c      	sub	sp, #48	; 0x30
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800688a:	2301      	movs	r3, #1
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x26>
 800689e:	2302      	movs	r3, #2
 80068a0:	e18a      	b.n	8006bb8 <HAL_SPI_TransmitReceive+0x33c>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068aa:	f7fd fc0d 	bl	80040c8 <HAL_GetTick>
 80068ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80068c0:	887b      	ldrh	r3, [r7, #2]
 80068c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d00f      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x70>
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068d2:	d107      	bne.n	80068e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d103      	bne.n	80068e4 <HAL_SPI_TransmitReceive+0x68>
 80068dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d003      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80068e4:	2302      	movs	r3, #2
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068ea:	e15b      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <HAL_SPI_TransmitReceive+0x82>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_SPI_TransmitReceive+0x82>
 80068f8:	887b      	ldrh	r3, [r7, #2]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d103      	bne.n	8006906 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006904:	e14e      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b04      	cmp	r3, #4
 8006910:	d003      	beq.n	800691a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2205      	movs	r2, #5
 8006916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	887a      	ldrh	r2, [r7, #2]
 800692a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	887a      	ldrh	r2, [r7, #2]
 8006930:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	887a      	ldrh	r2, [r7, #2]
 800693c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	887a      	ldrh	r2, [r7, #2]
 8006942:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d007      	beq.n	800696e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800696c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006976:	d178      	bne.n	8006a6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <HAL_SPI_TransmitReceive+0x10a>
 8006980:	8b7b      	ldrh	r3, [r7, #26]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d166      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698a:	881a      	ldrh	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	1c9a      	adds	r2, r3, #2
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069aa:	e053      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d11b      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x176>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d016      	beq.n	80069f2 <HAL_SPI_TransmitReceive+0x176>
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d113      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ce:	881a      	ldrh	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	1c9a      	adds	r2, r3, #2
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d119      	bne.n	8006a34 <HAL_SPI_TransmitReceive+0x1b8>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d014      	beq.n	8006a34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	b292      	uxth	r2, r2
 8006a16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	1c9a      	adds	r2, r3, #2
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a30:	2301      	movs	r3, #1
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a34:	f7fd fb48 	bl	80040c8 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d807      	bhi.n	8006a54 <HAL_SPI_TransmitReceive+0x1d8>
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a4a:	d003      	beq.n	8006a54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a52:	e0a7      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1a6      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x130>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1a1      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x130>
 8006a68:	e07c      	b.n	8006b64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_SPI_TransmitReceive+0x1fc>
 8006a72:	8b7b      	ldrh	r3, [r7, #26]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d16b      	bne.n	8006b50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	330c      	adds	r3, #12
 8006a82:	7812      	ldrb	r2, [r2, #0]
 8006a84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a9e:	e057      	b.n	8006b50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d11c      	bne.n	8006ae8 <HAL_SPI_TransmitReceive+0x26c>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d017      	beq.n	8006ae8 <HAL_SPI_TransmitReceive+0x26c>
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d114      	bne.n	8006ae8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	330c      	adds	r3, #12
 8006ac8:	7812      	ldrb	r2, [r2, #0]
 8006aca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d119      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x2ae>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d014      	beq.n	8006b2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b26:	2301      	movs	r3, #1
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b2a:	f7fd facd 	bl	80040c8 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d803      	bhi.n	8006b42 <HAL_SPI_TransmitReceive+0x2c6>
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b40:	d102      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x2cc>
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d103      	bne.n	8006b50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b4e:	e029      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1a2      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x224>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d19d      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 f8e5 	bl	8006d38 <SPI_EndRxTxTransaction>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d006      	beq.n	8006b82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b80:	e010      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10b      	bne.n	8006ba2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	e000      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006ba2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3730      	adds	r7, #48	; 0x30
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bd0:	e04c      	b.n	8006c6c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd8:	d048      	beq.n	8006c6c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006bda:	f7fd fa75 	bl	80040c8 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d902      	bls.n	8006bf0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d13d      	bne.n	8006c6c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c08:	d111      	bne.n	8006c2e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c12:	d004      	beq.n	8006c1e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c1c:	d107      	bne.n	8006c2e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c36:	d10f      	bne.n	8006c58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e00f      	b.n	8006c8c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	4013      	ands	r3, r2
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	bf0c      	ite	eq
 8006c7c:	2301      	moveq	r3, #1
 8006c7e:	2300      	movne	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d1a3      	bne.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ca8:	d111      	bne.n	8006cce <SPI_EndRxTransaction+0x3a>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb2:	d004      	beq.n	8006cbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cbc:	d107      	bne.n	8006cce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ccc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cd6:	d117      	bne.n	8006d08 <SPI_EndRxTransaction+0x74>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce0:	d112      	bne.n	8006d08 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2101      	movs	r1, #1
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff ff67 	bl	8006bc0 <SPI_WaitFlagStateUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01a      	beq.n	8006d2e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfc:	f043 0220 	orr.w	r2, r3, #32
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e013      	b.n	8006d30 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2180      	movs	r1, #128	; 0x80
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7ff ff54 	bl	8006bc0 <SPI_WaitFlagStateUntilTimeout>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d007      	beq.n	8006d2e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d22:	f043 0220 	orr.w	r2, r3, #32
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e000      	b.n	8006d30 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2180      	movs	r1, #128	; 0x80
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff ff36 	bl	8006bc0 <SPI_WaitFlagStateUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5e:	f043 0220 	orr.w	r2, r3, #32
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e000      	b.n	8006d6c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e01d      	b.n	8006dc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fd f85a 	bl	8003e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f000 fa32 	bl	800721c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b06      	cmp	r3, #6
 8006dea:	d007      	beq.n	8006dfc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0307 	and.w	r3, r3, #7
 8006e32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b06      	cmp	r3, #6
 8006e38:	d007      	beq.n	8006e4a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0201 	orr.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d122      	bne.n	8006eb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d11b      	bne.n	8006eb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f06f 0202 	mvn.w	r2, #2
 8006e82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f9a4 	bl	80071e6 <HAL_TIM_IC_CaptureCallback>
 8006e9e:	e005      	b.n	8006eac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f997 	bl	80071d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f9a6 	bl	80071f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d122      	bne.n	8006f06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d11b      	bne.n	8006f06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f06f 0204 	mvn.w	r2, #4
 8006ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f97a 	bl	80071e6 <HAL_TIM_IC_CaptureCallback>
 8006ef2:	e005      	b.n	8006f00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f96d 	bl	80071d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f97c 	bl	80071f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f003 0308 	and.w	r3, r3, #8
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d122      	bne.n	8006f5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d11b      	bne.n	8006f5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f06f 0208 	mvn.w	r2, #8
 8006f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2204      	movs	r2, #4
 8006f30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	f003 0303 	and.w	r3, r3, #3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f950 	bl	80071e6 <HAL_TIM_IC_CaptureCallback>
 8006f46:	e005      	b.n	8006f54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f943 	bl	80071d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f952 	bl	80071f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 0310 	and.w	r3, r3, #16
 8006f64:	2b10      	cmp	r3, #16
 8006f66:	d122      	bne.n	8006fae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f003 0310 	and.w	r3, r3, #16
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	d11b      	bne.n	8006fae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f06f 0210 	mvn.w	r2, #16
 8006f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2208      	movs	r2, #8
 8006f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f926 	bl	80071e6 <HAL_TIM_IC_CaptureCallback>
 8006f9a:	e005      	b.n	8006fa8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f919 	bl	80071d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f928 	bl	80071f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d10e      	bne.n	8006fda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d107      	bne.n	8006fda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f06f 0201 	mvn.w	r2, #1
 8006fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7fb fe59 	bl	8002c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe4:	2b80      	cmp	r3, #128	; 0x80
 8006fe6:	d10e      	bne.n	8007006 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff2:	2b80      	cmp	r3, #128	; 0x80
 8006ff4:	d107      	bne.n	8007006 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fa50 	bl	80074a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007010:	2b40      	cmp	r3, #64	; 0x40
 8007012:	d10e      	bne.n	8007032 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d107      	bne.n	8007032 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800702a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f8ec 	bl	800720a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b20      	cmp	r3, #32
 800703e:	d10e      	bne.n	800705e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b20      	cmp	r3, #32
 800704c:	d107      	bne.n	800705e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f06f 0220 	mvn.w	r2, #32
 8007056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fa1b 	bl	8007494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800705e:	bf00      	nop
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007076:	2b01      	cmp	r3, #1
 8007078:	d101      	bne.n	800707e <HAL_TIM_ConfigClockSource+0x18>
 800707a:	2302      	movs	r3, #2
 800707c:	e0a6      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x166>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2202      	movs	r2, #2
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800709c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070a4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d067      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x120>
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	d80b      	bhi.n	80070d2 <HAL_TIM_ConfigClockSource+0x6c>
 80070ba:	2b10      	cmp	r3, #16
 80070bc:	d073      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x140>
 80070be:	2b10      	cmp	r3, #16
 80070c0:	d802      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x62>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d06f      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80070c6:	e078      	b.n	80071ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d06c      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x140>
 80070cc:	2b30      	cmp	r3, #48	; 0x30
 80070ce:	d06a      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80070d0:	e073      	b.n	80071ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80070d2:	2b70      	cmp	r3, #112	; 0x70
 80070d4:	d00d      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x8c>
 80070d6:	2b70      	cmp	r3, #112	; 0x70
 80070d8:	d804      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x7e>
 80070da:	2b50      	cmp	r3, #80	; 0x50
 80070dc:	d033      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0xe0>
 80070de:	2b60      	cmp	r3, #96	; 0x60
 80070e0:	d041      	beq.n	8007166 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80070e2:	e06a      	b.n	80071ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80070e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e8:	d066      	beq.n	80071b8 <HAL_TIM_ConfigClockSource+0x152>
 80070ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ee:	d017      	beq.n	8007120 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80070f0:	e063      	b.n	80071ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	6899      	ldr	r1, [r3, #8]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f000 f964 	bl	80073ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007114:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	609a      	str	r2, [r3, #8]
      break;
 800711e:	e04c      	b.n	80071ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	6899      	ldr	r1, [r3, #8]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f000 f94d 	bl	80073ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007142:	609a      	str	r2, [r3, #8]
      break;
 8007144:	e039      	b.n	80071ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	6859      	ldr	r1, [r3, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	461a      	mov	r2, r3
 8007154:	f000 f8c4 	bl	80072e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2150      	movs	r1, #80	; 0x50
 800715e:	4618      	mov	r0, r3
 8007160:	f000 f91b 	bl	800739a <TIM_ITRx_SetConfig>
      break;
 8007164:	e029      	b.n	80071ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6859      	ldr	r1, [r3, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	461a      	mov	r2, r3
 8007174:	f000 f8e2 	bl	800733c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2160      	movs	r1, #96	; 0x60
 800717e:	4618      	mov	r0, r3
 8007180:	f000 f90b 	bl	800739a <TIM_ITRx_SetConfig>
      break;
 8007184:	e019      	b.n	80071ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	6859      	ldr	r1, [r3, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	461a      	mov	r2, r3
 8007194:	f000 f8a4 	bl	80072e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2140      	movs	r1, #64	; 0x40
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f8fb 	bl	800739a <TIM_ITRx_SetConfig>
      break;
 80071a4:	e009      	b.n	80071ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4619      	mov	r1, r3
 80071b0:	4610      	mov	r0, r2
 80071b2:	f000 f8f2 	bl	800739a <TIM_ITRx_SetConfig>
      break;
 80071b6:	e000      	b.n	80071ba <HAL_TIM_ConfigClockSource+0x154>
      break;
 80071b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bc80      	pop	{r7}
 80071e4:	4770      	bx	lr

080071e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr

080071f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	bc80      	pop	{r7}
 8007208:	4770      	bx	lr

0800720a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr

0800721c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a29      	ldr	r2, [pc, #164]	; (80072d4 <TIM_Base_SetConfig+0xb8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00b      	beq.n	800724c <TIM_Base_SetConfig+0x30>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723a:	d007      	beq.n	800724c <TIM_Base_SetConfig+0x30>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a26      	ldr	r2, [pc, #152]	; (80072d8 <TIM_Base_SetConfig+0xbc>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d003      	beq.n	800724c <TIM_Base_SetConfig+0x30>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a25      	ldr	r2, [pc, #148]	; (80072dc <TIM_Base_SetConfig+0xc0>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d108      	bne.n	800725e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a1c      	ldr	r2, [pc, #112]	; (80072d4 <TIM_Base_SetConfig+0xb8>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00b      	beq.n	800727e <TIM_Base_SetConfig+0x62>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726c:	d007      	beq.n	800727e <TIM_Base_SetConfig+0x62>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <TIM_Base_SetConfig+0xbc>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d003      	beq.n	800727e <TIM_Base_SetConfig+0x62>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a18      	ldr	r2, [pc, #96]	; (80072dc <TIM_Base_SetConfig+0xc0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d108      	bne.n	8007290 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4313      	orrs	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a07      	ldr	r2, [pc, #28]	; (80072d4 <TIM_Base_SetConfig+0xb8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d103      	bne.n	80072c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	691a      	ldr	r2, [r3, #16]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	615a      	str	r2, [r3, #20]
}
 80072ca:	bf00      	nop
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr
 80072d4:	40012c00 	.word	0x40012c00
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800

080072e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	f023 0201 	bic.w	r2, r3, #1
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800730a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f023 030a 	bic.w	r3, r3, #10
 800731c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	4313      	orrs	r3, r2
 8007324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	621a      	str	r2, [r3, #32]
}
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr

0800733c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	f023 0210 	bic.w	r2, r3, #16
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007366:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	031b      	lsls	r3, r3, #12
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007378:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	011b      	lsls	r3, r3, #4
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	621a      	str	r2, [r3, #32]
}
 8007390:	bf00      	nop
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr

0800739a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800739a:	b480      	push	{r7}
 800739c:	b085      	sub	sp, #20
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	f043 0307 	orr.w	r3, r3, #7
 80073bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	609a      	str	r2, [r3, #8]
}
 80073c4:	bf00      	nop
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc80      	pop	{r7}
 80073cc:	4770      	bx	lr

080073ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b087      	sub	sp, #28
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
 80073da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	021a      	lsls	r2, r3, #8
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	431a      	orrs	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	609a      	str	r2, [r3, #8]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr

0800740c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007420:	2302      	movs	r3, #2
 8007422:	e032      	b.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	4313      	orrs	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr

08007494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr

080074a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr

080074b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e03f      	b.n	800754a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fc fd1a 	bl	8003f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2224      	movs	r2, #36	; 0x24
 80074e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f829 	bl	8007554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	691a      	ldr	r2, [r3, #16]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	695a      	ldr	r2, [r3, #20]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800758e:	f023 030c 	bic.w	r3, r3, #12
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6812      	ldr	r2, [r2, #0]
 8007596:	68f9      	ldr	r1, [r7, #12]
 8007598:	430b      	orrs	r3, r1
 800759a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a52      	ldr	r2, [pc, #328]	; (8007700 <UART_SetConfig+0x1ac>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d14e      	bne.n	800765a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80075bc:	f7fd fe48 	bl	8005250 <HAL_RCC_GetPCLK2Freq>
 80075c0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009a      	lsls	r2, r3, #2
 80075cc:	441a      	add	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d8:	4a4a      	ldr	r2, [pc, #296]	; (8007704 <UART_SetConfig+0x1b0>)
 80075da:	fba2 2303 	umull	r2, r3, r2, r3
 80075de:	095b      	lsrs	r3, r3, #5
 80075e0:	0119      	lsls	r1, r3, #4
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009a      	lsls	r2, r3, #2
 80075ec:	441a      	add	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80075f8:	4b42      	ldr	r3, [pc, #264]	; (8007704 <UART_SetConfig+0x1b0>)
 80075fa:	fba3 0302 	umull	r0, r3, r3, r2
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	2064      	movs	r0, #100	; 0x64
 8007602:	fb00 f303 	mul.w	r3, r0, r3
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	3332      	adds	r3, #50	; 0x32
 800760c:	4a3d      	ldr	r2, [pc, #244]	; (8007704 <UART_SetConfig+0x1b0>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007618:	4419      	add	r1, r3
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009a      	lsls	r2, r3, #2
 8007624:	441a      	add	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007630:	4b34      	ldr	r3, [pc, #208]	; (8007704 <UART_SetConfig+0x1b0>)
 8007632:	fba3 0302 	umull	r0, r3, r3, r2
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	2064      	movs	r0, #100	; 0x64
 800763a:	fb00 f303 	mul.w	r3, r0, r3
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	3332      	adds	r3, #50	; 0x32
 8007644:	4a2f      	ldr	r2, [pc, #188]	; (8007704 <UART_SetConfig+0x1b0>)
 8007646:	fba2 2303 	umull	r2, r3, r2, r3
 800764a:	095b      	lsrs	r3, r3, #5
 800764c:	f003 020f 	and.w	r2, r3, #15
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	440a      	add	r2, r1
 8007656:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007658:	e04d      	b.n	80076f6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800765a:	f7fd fde5 	bl	8005228 <HAL_RCC_GetPCLK1Freq>
 800765e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	009a      	lsls	r2, r3, #2
 800766a:	441a      	add	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	fbb2 f3f3 	udiv	r3, r2, r3
 8007676:	4a23      	ldr	r2, [pc, #140]	; (8007704 <UART_SetConfig+0x1b0>)
 8007678:	fba2 2303 	umull	r2, r3, r2, r3
 800767c:	095b      	lsrs	r3, r3, #5
 800767e:	0119      	lsls	r1, r3, #4
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009a      	lsls	r2, r3, #2
 800768a:	441a      	add	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	fbb2 f2f3 	udiv	r2, r2, r3
 8007696:	4b1b      	ldr	r3, [pc, #108]	; (8007704 <UART_SetConfig+0x1b0>)
 8007698:	fba3 0302 	umull	r0, r3, r3, r2
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	2064      	movs	r0, #100	; 0x64
 80076a0:	fb00 f303 	mul.w	r3, r0, r3
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	3332      	adds	r3, #50	; 0x32
 80076aa:	4a16      	ldr	r2, [pc, #88]	; (8007704 <UART_SetConfig+0x1b0>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076b6:	4419      	add	r1, r3
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009a      	lsls	r2, r3, #2
 80076c2:	441a      	add	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80076ce:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <UART_SetConfig+0x1b0>)
 80076d0:	fba3 0302 	umull	r0, r3, r3, r2
 80076d4:	095b      	lsrs	r3, r3, #5
 80076d6:	2064      	movs	r0, #100	; 0x64
 80076d8:	fb00 f303 	mul.w	r3, r0, r3
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	011b      	lsls	r3, r3, #4
 80076e0:	3332      	adds	r3, #50	; 0x32
 80076e2:	4a08      	ldr	r2, [pc, #32]	; (8007704 <UART_SetConfig+0x1b0>)
 80076e4:	fba2 2303 	umull	r2, r3, r2, r3
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	f003 020f 	and.w	r2, r3, #15
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	440a      	add	r2, r1
 80076f4:	609a      	str	r2, [r3, #8]
}
 80076f6:	bf00      	nop
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	40013800 	.word	0x40013800
 8007704:	51eb851f 	.word	0x51eb851f

08007708 <__errno>:
 8007708:	4b01      	ldr	r3, [pc, #4]	; (8007710 <__errno+0x8>)
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	2000009c 	.word	0x2000009c

08007714 <__libc_init_array>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	2500      	movs	r5, #0
 8007718:	4e0c      	ldr	r6, [pc, #48]	; (800774c <__libc_init_array+0x38>)
 800771a:	4c0d      	ldr	r4, [pc, #52]	; (8007750 <__libc_init_array+0x3c>)
 800771c:	1ba4      	subs	r4, r4, r6
 800771e:	10a4      	asrs	r4, r4, #2
 8007720:	42a5      	cmp	r5, r4
 8007722:	d109      	bne.n	8007738 <__libc_init_array+0x24>
 8007724:	f000 fc34 	bl	8007f90 <_init>
 8007728:	2500      	movs	r5, #0
 800772a:	4e0a      	ldr	r6, [pc, #40]	; (8007754 <__libc_init_array+0x40>)
 800772c:	4c0a      	ldr	r4, [pc, #40]	; (8007758 <__libc_init_array+0x44>)
 800772e:	1ba4      	subs	r4, r4, r6
 8007730:	10a4      	asrs	r4, r4, #2
 8007732:	42a5      	cmp	r5, r4
 8007734:	d105      	bne.n	8007742 <__libc_init_array+0x2e>
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800773c:	4798      	blx	r3
 800773e:	3501      	adds	r5, #1
 8007740:	e7ee      	b.n	8007720 <__libc_init_array+0xc>
 8007742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007746:	4798      	blx	r3
 8007748:	3501      	adds	r5, #1
 800774a:	e7f2      	b.n	8007732 <__libc_init_array+0x1e>
 800774c:	080082a4 	.word	0x080082a4
 8007750:	080082a4 	.word	0x080082a4
 8007754:	080082a4 	.word	0x080082a4
 8007758:	080082a8 	.word	0x080082a8

0800775c <memset>:
 800775c:	4603      	mov	r3, r0
 800775e:	4402      	add	r2, r0
 8007760:	4293      	cmp	r3, r2
 8007762:	d100      	bne.n	8007766 <memset+0xa>
 8007764:	4770      	bx	lr
 8007766:	f803 1b01 	strb.w	r1, [r3], #1
 800776a:	e7f9      	b.n	8007760 <memset+0x4>

0800776c <siprintf>:
 800776c:	b40e      	push	{r1, r2, r3}
 800776e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007772:	b500      	push	{lr}
 8007774:	b09c      	sub	sp, #112	; 0x70
 8007776:	ab1d      	add	r3, sp, #116	; 0x74
 8007778:	9002      	str	r0, [sp, #8]
 800777a:	9006      	str	r0, [sp, #24]
 800777c:	9107      	str	r1, [sp, #28]
 800777e:	9104      	str	r1, [sp, #16]
 8007780:	4808      	ldr	r0, [pc, #32]	; (80077a4 <siprintf+0x38>)
 8007782:	4909      	ldr	r1, [pc, #36]	; (80077a8 <siprintf+0x3c>)
 8007784:	f853 2b04 	ldr.w	r2, [r3], #4
 8007788:	9105      	str	r1, [sp, #20]
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	a902      	add	r1, sp, #8
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	f000 f866 	bl	8007860 <_svfiprintf_r>
 8007794:	2200      	movs	r2, #0
 8007796:	9b02      	ldr	r3, [sp, #8]
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	b01c      	add	sp, #112	; 0x70
 800779c:	f85d eb04 	ldr.w	lr, [sp], #4
 80077a0:	b003      	add	sp, #12
 80077a2:	4770      	bx	lr
 80077a4:	2000009c 	.word	0x2000009c
 80077a8:	ffff0208 	.word	0xffff0208

080077ac <__ssputs_r>:
 80077ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	688e      	ldr	r6, [r1, #8]
 80077b2:	4682      	mov	sl, r0
 80077b4:	429e      	cmp	r6, r3
 80077b6:	460c      	mov	r4, r1
 80077b8:	4690      	mov	r8, r2
 80077ba:	4699      	mov	r9, r3
 80077bc:	d837      	bhi.n	800782e <__ssputs_r+0x82>
 80077be:	898a      	ldrh	r2, [r1, #12]
 80077c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077c4:	d031      	beq.n	800782a <__ssputs_r+0x7e>
 80077c6:	2302      	movs	r3, #2
 80077c8:	6825      	ldr	r5, [r4, #0]
 80077ca:	6909      	ldr	r1, [r1, #16]
 80077cc:	1a6f      	subs	r7, r5, r1
 80077ce:	6965      	ldr	r5, [r4, #20]
 80077d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80077d8:	f109 0301 	add.w	r3, r9, #1
 80077dc:	443b      	add	r3, r7
 80077de:	429d      	cmp	r5, r3
 80077e0:	bf38      	it	cc
 80077e2:	461d      	movcc	r5, r3
 80077e4:	0553      	lsls	r3, r2, #21
 80077e6:	d530      	bpl.n	800784a <__ssputs_r+0x9e>
 80077e8:	4629      	mov	r1, r5
 80077ea:	f000 fb37 	bl	8007e5c <_malloc_r>
 80077ee:	4606      	mov	r6, r0
 80077f0:	b950      	cbnz	r0, 8007808 <__ssputs_r+0x5c>
 80077f2:	230c      	movs	r3, #12
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077f8:	f8ca 3000 	str.w	r3, [sl]
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007802:	81a3      	strh	r3, [r4, #12]
 8007804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007808:	463a      	mov	r2, r7
 800780a:	6921      	ldr	r1, [r4, #16]
 800780c:	f000 fab6 	bl	8007d7c <memcpy>
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	6126      	str	r6, [r4, #16]
 800781e:	443e      	add	r6, r7
 8007820:	6026      	str	r6, [r4, #0]
 8007822:	464e      	mov	r6, r9
 8007824:	6165      	str	r5, [r4, #20]
 8007826:	1bed      	subs	r5, r5, r7
 8007828:	60a5      	str	r5, [r4, #8]
 800782a:	454e      	cmp	r6, r9
 800782c:	d900      	bls.n	8007830 <__ssputs_r+0x84>
 800782e:	464e      	mov	r6, r9
 8007830:	4632      	mov	r2, r6
 8007832:	4641      	mov	r1, r8
 8007834:	6820      	ldr	r0, [r4, #0]
 8007836:	f000 faac 	bl	8007d92 <memmove>
 800783a:	68a3      	ldr	r3, [r4, #8]
 800783c:	2000      	movs	r0, #0
 800783e:	1b9b      	subs	r3, r3, r6
 8007840:	60a3      	str	r3, [r4, #8]
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	441e      	add	r6, r3
 8007846:	6026      	str	r6, [r4, #0]
 8007848:	e7dc      	b.n	8007804 <__ssputs_r+0x58>
 800784a:	462a      	mov	r2, r5
 800784c:	f000 fb60 	bl	8007f10 <_realloc_r>
 8007850:	4606      	mov	r6, r0
 8007852:	2800      	cmp	r0, #0
 8007854:	d1e2      	bne.n	800781c <__ssputs_r+0x70>
 8007856:	6921      	ldr	r1, [r4, #16]
 8007858:	4650      	mov	r0, sl
 800785a:	f000 fab3 	bl	8007dc4 <_free_r>
 800785e:	e7c8      	b.n	80077f2 <__ssputs_r+0x46>

08007860 <_svfiprintf_r>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	461d      	mov	r5, r3
 8007866:	898b      	ldrh	r3, [r1, #12]
 8007868:	b09d      	sub	sp, #116	; 0x74
 800786a:	061f      	lsls	r7, r3, #24
 800786c:	4680      	mov	r8, r0
 800786e:	460c      	mov	r4, r1
 8007870:	4616      	mov	r6, r2
 8007872:	d50f      	bpl.n	8007894 <_svfiprintf_r+0x34>
 8007874:	690b      	ldr	r3, [r1, #16]
 8007876:	b96b      	cbnz	r3, 8007894 <_svfiprintf_r+0x34>
 8007878:	2140      	movs	r1, #64	; 0x40
 800787a:	f000 faef 	bl	8007e5c <_malloc_r>
 800787e:	6020      	str	r0, [r4, #0]
 8007880:	6120      	str	r0, [r4, #16]
 8007882:	b928      	cbnz	r0, 8007890 <_svfiprintf_r+0x30>
 8007884:	230c      	movs	r3, #12
 8007886:	f8c8 3000 	str.w	r3, [r8]
 800788a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800788e:	e0c8      	b.n	8007a22 <_svfiprintf_r+0x1c2>
 8007890:	2340      	movs	r3, #64	; 0x40
 8007892:	6163      	str	r3, [r4, #20]
 8007894:	2300      	movs	r3, #0
 8007896:	9309      	str	r3, [sp, #36]	; 0x24
 8007898:	2320      	movs	r3, #32
 800789a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800789e:	2330      	movs	r3, #48	; 0x30
 80078a0:	f04f 0b01 	mov.w	fp, #1
 80078a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078a8:	9503      	str	r5, [sp, #12]
 80078aa:	4637      	mov	r7, r6
 80078ac:	463d      	mov	r5, r7
 80078ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078b2:	b10b      	cbz	r3, 80078b8 <_svfiprintf_r+0x58>
 80078b4:	2b25      	cmp	r3, #37	; 0x25
 80078b6:	d13e      	bne.n	8007936 <_svfiprintf_r+0xd6>
 80078b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80078bc:	d00b      	beq.n	80078d6 <_svfiprintf_r+0x76>
 80078be:	4653      	mov	r3, sl
 80078c0:	4632      	mov	r2, r6
 80078c2:	4621      	mov	r1, r4
 80078c4:	4640      	mov	r0, r8
 80078c6:	f7ff ff71 	bl	80077ac <__ssputs_r>
 80078ca:	3001      	adds	r0, #1
 80078cc:	f000 80a4 	beq.w	8007a18 <_svfiprintf_r+0x1b8>
 80078d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d2:	4453      	add	r3, sl
 80078d4:	9309      	str	r3, [sp, #36]	; 0x24
 80078d6:	783b      	ldrb	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 809d 	beq.w	8007a18 <_svfiprintf_r+0x1b8>
 80078de:	2300      	movs	r3, #0
 80078e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078e8:	9304      	str	r3, [sp, #16]
 80078ea:	9307      	str	r3, [sp, #28]
 80078ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078f0:	931a      	str	r3, [sp, #104]	; 0x68
 80078f2:	462f      	mov	r7, r5
 80078f4:	2205      	movs	r2, #5
 80078f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80078fa:	4850      	ldr	r0, [pc, #320]	; (8007a3c <_svfiprintf_r+0x1dc>)
 80078fc:	f000 fa30 	bl	8007d60 <memchr>
 8007900:	9b04      	ldr	r3, [sp, #16]
 8007902:	b9d0      	cbnz	r0, 800793a <_svfiprintf_r+0xda>
 8007904:	06d9      	lsls	r1, r3, #27
 8007906:	bf44      	itt	mi
 8007908:	2220      	movmi	r2, #32
 800790a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800790e:	071a      	lsls	r2, r3, #28
 8007910:	bf44      	itt	mi
 8007912:	222b      	movmi	r2, #43	; 0x2b
 8007914:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007918:	782a      	ldrb	r2, [r5, #0]
 800791a:	2a2a      	cmp	r2, #42	; 0x2a
 800791c:	d015      	beq.n	800794a <_svfiprintf_r+0xea>
 800791e:	462f      	mov	r7, r5
 8007920:	2000      	movs	r0, #0
 8007922:	250a      	movs	r5, #10
 8007924:	9a07      	ldr	r2, [sp, #28]
 8007926:	4639      	mov	r1, r7
 8007928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800792c:	3b30      	subs	r3, #48	; 0x30
 800792e:	2b09      	cmp	r3, #9
 8007930:	d94d      	bls.n	80079ce <_svfiprintf_r+0x16e>
 8007932:	b1b8      	cbz	r0, 8007964 <_svfiprintf_r+0x104>
 8007934:	e00f      	b.n	8007956 <_svfiprintf_r+0xf6>
 8007936:	462f      	mov	r7, r5
 8007938:	e7b8      	b.n	80078ac <_svfiprintf_r+0x4c>
 800793a:	4a40      	ldr	r2, [pc, #256]	; (8007a3c <_svfiprintf_r+0x1dc>)
 800793c:	463d      	mov	r5, r7
 800793e:	1a80      	subs	r0, r0, r2
 8007940:	fa0b f000 	lsl.w	r0, fp, r0
 8007944:	4318      	orrs	r0, r3
 8007946:	9004      	str	r0, [sp, #16]
 8007948:	e7d3      	b.n	80078f2 <_svfiprintf_r+0x92>
 800794a:	9a03      	ldr	r2, [sp, #12]
 800794c:	1d11      	adds	r1, r2, #4
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	9103      	str	r1, [sp, #12]
 8007952:	2a00      	cmp	r2, #0
 8007954:	db01      	blt.n	800795a <_svfiprintf_r+0xfa>
 8007956:	9207      	str	r2, [sp, #28]
 8007958:	e004      	b.n	8007964 <_svfiprintf_r+0x104>
 800795a:	4252      	negs	r2, r2
 800795c:	f043 0302 	orr.w	r3, r3, #2
 8007960:	9207      	str	r2, [sp, #28]
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	783b      	ldrb	r3, [r7, #0]
 8007966:	2b2e      	cmp	r3, #46	; 0x2e
 8007968:	d10c      	bne.n	8007984 <_svfiprintf_r+0x124>
 800796a:	787b      	ldrb	r3, [r7, #1]
 800796c:	2b2a      	cmp	r3, #42	; 0x2a
 800796e:	d133      	bne.n	80079d8 <_svfiprintf_r+0x178>
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	3702      	adds	r7, #2
 8007974:	1d1a      	adds	r2, r3, #4
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	9203      	str	r2, [sp, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	bfb8      	it	lt
 800797e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007982:	9305      	str	r3, [sp, #20]
 8007984:	4d2e      	ldr	r5, [pc, #184]	; (8007a40 <_svfiprintf_r+0x1e0>)
 8007986:	2203      	movs	r2, #3
 8007988:	7839      	ldrb	r1, [r7, #0]
 800798a:	4628      	mov	r0, r5
 800798c:	f000 f9e8 	bl	8007d60 <memchr>
 8007990:	b138      	cbz	r0, 80079a2 <_svfiprintf_r+0x142>
 8007992:	2340      	movs	r3, #64	; 0x40
 8007994:	1b40      	subs	r0, r0, r5
 8007996:	fa03 f000 	lsl.w	r0, r3, r0
 800799a:	9b04      	ldr	r3, [sp, #16]
 800799c:	3701      	adds	r7, #1
 800799e:	4303      	orrs	r3, r0
 80079a0:	9304      	str	r3, [sp, #16]
 80079a2:	7839      	ldrb	r1, [r7, #0]
 80079a4:	2206      	movs	r2, #6
 80079a6:	4827      	ldr	r0, [pc, #156]	; (8007a44 <_svfiprintf_r+0x1e4>)
 80079a8:	1c7e      	adds	r6, r7, #1
 80079aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ae:	f000 f9d7 	bl	8007d60 <memchr>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d038      	beq.n	8007a28 <_svfiprintf_r+0x1c8>
 80079b6:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <_svfiprintf_r+0x1e8>)
 80079b8:	bb13      	cbnz	r3, 8007a00 <_svfiprintf_r+0x1a0>
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	3307      	adds	r3, #7
 80079be:	f023 0307 	bic.w	r3, r3, #7
 80079c2:	3308      	adds	r3, #8
 80079c4:	9303      	str	r3, [sp, #12]
 80079c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c8:	444b      	add	r3, r9
 80079ca:	9309      	str	r3, [sp, #36]	; 0x24
 80079cc:	e76d      	b.n	80078aa <_svfiprintf_r+0x4a>
 80079ce:	fb05 3202 	mla	r2, r5, r2, r3
 80079d2:	2001      	movs	r0, #1
 80079d4:	460f      	mov	r7, r1
 80079d6:	e7a6      	b.n	8007926 <_svfiprintf_r+0xc6>
 80079d8:	2300      	movs	r3, #0
 80079da:	250a      	movs	r5, #10
 80079dc:	4619      	mov	r1, r3
 80079de:	3701      	adds	r7, #1
 80079e0:	9305      	str	r3, [sp, #20]
 80079e2:	4638      	mov	r0, r7
 80079e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079e8:	3a30      	subs	r2, #48	; 0x30
 80079ea:	2a09      	cmp	r2, #9
 80079ec:	d903      	bls.n	80079f6 <_svfiprintf_r+0x196>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0c8      	beq.n	8007984 <_svfiprintf_r+0x124>
 80079f2:	9105      	str	r1, [sp, #20]
 80079f4:	e7c6      	b.n	8007984 <_svfiprintf_r+0x124>
 80079f6:	fb05 2101 	mla	r1, r5, r1, r2
 80079fa:	2301      	movs	r3, #1
 80079fc:	4607      	mov	r7, r0
 80079fe:	e7f0      	b.n	80079e2 <_svfiprintf_r+0x182>
 8007a00:	ab03      	add	r3, sp, #12
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	4622      	mov	r2, r4
 8007a06:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <_svfiprintf_r+0x1ec>)
 8007a08:	a904      	add	r1, sp, #16
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	f3af 8000 	nop.w
 8007a10:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007a14:	4681      	mov	r9, r0
 8007a16:	d1d6      	bne.n	80079c6 <_svfiprintf_r+0x166>
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	065b      	lsls	r3, r3, #25
 8007a1c:	f53f af35 	bmi.w	800788a <_svfiprintf_r+0x2a>
 8007a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a22:	b01d      	add	sp, #116	; 0x74
 8007a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a28:	ab03      	add	r3, sp, #12
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <_svfiprintf_r+0x1ec>)
 8007a30:	a904      	add	r1, sp, #16
 8007a32:	4640      	mov	r0, r8
 8007a34:	f000 f882 	bl	8007b3c <_printf_i>
 8007a38:	e7ea      	b.n	8007a10 <_svfiprintf_r+0x1b0>
 8007a3a:	bf00      	nop
 8007a3c:	08008270 	.word	0x08008270
 8007a40:	08008276 	.word	0x08008276
 8007a44:	0800827a 	.word	0x0800827a
 8007a48:	00000000 	.word	0x00000000
 8007a4c:	080077ad 	.word	0x080077ad

08007a50 <_printf_common>:
 8007a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a54:	4691      	mov	r9, r2
 8007a56:	461f      	mov	r7, r3
 8007a58:	688a      	ldr	r2, [r1, #8]
 8007a5a:	690b      	ldr	r3, [r1, #16]
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	bfb8      	it	lt
 8007a62:	4613      	movlt	r3, r2
 8007a64:	f8c9 3000 	str.w	r3, [r9]
 8007a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a72:	b112      	cbz	r2, 8007a7a <_printf_common+0x2a>
 8007a74:	3301      	adds	r3, #1
 8007a76:	f8c9 3000 	str.w	r3, [r9]
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	0699      	lsls	r1, r3, #26
 8007a7e:	bf42      	ittt	mi
 8007a80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a84:	3302      	addmi	r3, #2
 8007a86:	f8c9 3000 	strmi.w	r3, [r9]
 8007a8a:	6825      	ldr	r5, [r4, #0]
 8007a8c:	f015 0506 	ands.w	r5, r5, #6
 8007a90:	d107      	bne.n	8007aa2 <_printf_common+0x52>
 8007a92:	f104 0a19 	add.w	sl, r4, #25
 8007a96:	68e3      	ldr	r3, [r4, #12]
 8007a98:	f8d9 2000 	ldr.w	r2, [r9]
 8007a9c:	1a9b      	subs	r3, r3, r2
 8007a9e:	42ab      	cmp	r3, r5
 8007aa0:	dc29      	bgt.n	8007af6 <_printf_common+0xa6>
 8007aa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007aa6:	6822      	ldr	r2, [r4, #0]
 8007aa8:	3300      	adds	r3, #0
 8007aaa:	bf18      	it	ne
 8007aac:	2301      	movne	r3, #1
 8007aae:	0692      	lsls	r2, r2, #26
 8007ab0:	d42e      	bmi.n	8007b10 <_printf_common+0xc0>
 8007ab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	4630      	mov	r0, r6
 8007aba:	47c0      	blx	r8
 8007abc:	3001      	adds	r0, #1
 8007abe:	d021      	beq.n	8007b04 <_printf_common+0xb4>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	68e5      	ldr	r5, [r4, #12]
 8007ac4:	f003 0306 	and.w	r3, r3, #6
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	bf18      	it	ne
 8007acc:	2500      	movne	r5, #0
 8007ace:	f8d9 2000 	ldr.w	r2, [r9]
 8007ad2:	f04f 0900 	mov.w	r9, #0
 8007ad6:	bf08      	it	eq
 8007ad8:	1aad      	subeq	r5, r5, r2
 8007ada:	68a3      	ldr	r3, [r4, #8]
 8007adc:	6922      	ldr	r2, [r4, #16]
 8007ade:	bf08      	it	eq
 8007ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	bfc4      	itt	gt
 8007ae8:	1a9b      	subgt	r3, r3, r2
 8007aea:	18ed      	addgt	r5, r5, r3
 8007aec:	341a      	adds	r4, #26
 8007aee:	454d      	cmp	r5, r9
 8007af0:	d11a      	bne.n	8007b28 <_printf_common+0xd8>
 8007af2:	2000      	movs	r0, #0
 8007af4:	e008      	b.n	8007b08 <_printf_common+0xb8>
 8007af6:	2301      	movs	r3, #1
 8007af8:	4652      	mov	r2, sl
 8007afa:	4639      	mov	r1, r7
 8007afc:	4630      	mov	r0, r6
 8007afe:	47c0      	blx	r8
 8007b00:	3001      	adds	r0, #1
 8007b02:	d103      	bne.n	8007b0c <_printf_common+0xbc>
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	e7c2      	b.n	8007a96 <_printf_common+0x46>
 8007b10:	2030      	movs	r0, #48	; 0x30
 8007b12:	18e1      	adds	r1, r4, r3
 8007b14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b1e:	4422      	add	r2, r4
 8007b20:	3302      	adds	r3, #2
 8007b22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b26:	e7c4      	b.n	8007ab2 <_printf_common+0x62>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	4630      	mov	r0, r6
 8007b30:	47c0      	blx	r8
 8007b32:	3001      	adds	r0, #1
 8007b34:	d0e6      	beq.n	8007b04 <_printf_common+0xb4>
 8007b36:	f109 0901 	add.w	r9, r9, #1
 8007b3a:	e7d8      	b.n	8007aee <_printf_common+0x9e>

08007b3c <_printf_i>:
 8007b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b44:	460c      	mov	r4, r1
 8007b46:	7e09      	ldrb	r1, [r1, #24]
 8007b48:	b085      	sub	sp, #20
 8007b4a:	296e      	cmp	r1, #110	; 0x6e
 8007b4c:	4617      	mov	r7, r2
 8007b4e:	4606      	mov	r6, r0
 8007b50:	4698      	mov	r8, r3
 8007b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b54:	f000 80b3 	beq.w	8007cbe <_printf_i+0x182>
 8007b58:	d822      	bhi.n	8007ba0 <_printf_i+0x64>
 8007b5a:	2963      	cmp	r1, #99	; 0x63
 8007b5c:	d036      	beq.n	8007bcc <_printf_i+0x90>
 8007b5e:	d80a      	bhi.n	8007b76 <_printf_i+0x3a>
 8007b60:	2900      	cmp	r1, #0
 8007b62:	f000 80b9 	beq.w	8007cd8 <_printf_i+0x19c>
 8007b66:	2958      	cmp	r1, #88	; 0x58
 8007b68:	f000 8083 	beq.w	8007c72 <_printf_i+0x136>
 8007b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007b74:	e032      	b.n	8007bdc <_printf_i+0xa0>
 8007b76:	2964      	cmp	r1, #100	; 0x64
 8007b78:	d001      	beq.n	8007b7e <_printf_i+0x42>
 8007b7a:	2969      	cmp	r1, #105	; 0x69
 8007b7c:	d1f6      	bne.n	8007b6c <_printf_i+0x30>
 8007b7e:	6820      	ldr	r0, [r4, #0]
 8007b80:	6813      	ldr	r3, [r2, #0]
 8007b82:	0605      	lsls	r5, r0, #24
 8007b84:	f103 0104 	add.w	r1, r3, #4
 8007b88:	d52a      	bpl.n	8007be0 <_printf_i+0xa4>
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6011      	str	r1, [r2, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	da03      	bge.n	8007b9a <_printf_i+0x5e>
 8007b92:	222d      	movs	r2, #45	; 0x2d
 8007b94:	425b      	negs	r3, r3
 8007b96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b9a:	486f      	ldr	r0, [pc, #444]	; (8007d58 <_printf_i+0x21c>)
 8007b9c:	220a      	movs	r2, #10
 8007b9e:	e039      	b.n	8007c14 <_printf_i+0xd8>
 8007ba0:	2973      	cmp	r1, #115	; 0x73
 8007ba2:	f000 809d 	beq.w	8007ce0 <_printf_i+0x1a4>
 8007ba6:	d808      	bhi.n	8007bba <_printf_i+0x7e>
 8007ba8:	296f      	cmp	r1, #111	; 0x6f
 8007baa:	d020      	beq.n	8007bee <_printf_i+0xb2>
 8007bac:	2970      	cmp	r1, #112	; 0x70
 8007bae:	d1dd      	bne.n	8007b6c <_printf_i+0x30>
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	f043 0320 	orr.w	r3, r3, #32
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	e003      	b.n	8007bc2 <_printf_i+0x86>
 8007bba:	2975      	cmp	r1, #117	; 0x75
 8007bbc:	d017      	beq.n	8007bee <_printf_i+0xb2>
 8007bbe:	2978      	cmp	r1, #120	; 0x78
 8007bc0:	d1d4      	bne.n	8007b6c <_printf_i+0x30>
 8007bc2:	2378      	movs	r3, #120	; 0x78
 8007bc4:	4865      	ldr	r0, [pc, #404]	; (8007d5c <_printf_i+0x220>)
 8007bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bca:	e055      	b.n	8007c78 <_printf_i+0x13c>
 8007bcc:	6813      	ldr	r3, [r2, #0]
 8007bce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bd2:	1d19      	adds	r1, r3, #4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6011      	str	r1, [r2, #0]
 8007bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e08c      	b.n	8007cfa <_printf_i+0x1be>
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007be6:	6011      	str	r1, [r2, #0]
 8007be8:	bf18      	it	ne
 8007bea:	b21b      	sxthne	r3, r3
 8007bec:	e7cf      	b.n	8007b8e <_printf_i+0x52>
 8007bee:	6813      	ldr	r3, [r2, #0]
 8007bf0:	6825      	ldr	r5, [r4, #0]
 8007bf2:	1d18      	adds	r0, r3, #4
 8007bf4:	6010      	str	r0, [r2, #0]
 8007bf6:	0628      	lsls	r0, r5, #24
 8007bf8:	d501      	bpl.n	8007bfe <_printf_i+0xc2>
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	e002      	b.n	8007c04 <_printf_i+0xc8>
 8007bfe:	0668      	lsls	r0, r5, #25
 8007c00:	d5fb      	bpl.n	8007bfa <_printf_i+0xbe>
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	296f      	cmp	r1, #111	; 0x6f
 8007c06:	bf14      	ite	ne
 8007c08:	220a      	movne	r2, #10
 8007c0a:	2208      	moveq	r2, #8
 8007c0c:	4852      	ldr	r0, [pc, #328]	; (8007d58 <_printf_i+0x21c>)
 8007c0e:	2100      	movs	r1, #0
 8007c10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c14:	6865      	ldr	r5, [r4, #4]
 8007c16:	2d00      	cmp	r5, #0
 8007c18:	60a5      	str	r5, [r4, #8]
 8007c1a:	f2c0 8095 	blt.w	8007d48 <_printf_i+0x20c>
 8007c1e:	6821      	ldr	r1, [r4, #0]
 8007c20:	f021 0104 	bic.w	r1, r1, #4
 8007c24:	6021      	str	r1, [r4, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d13d      	bne.n	8007ca6 <_printf_i+0x16a>
 8007c2a:	2d00      	cmp	r5, #0
 8007c2c:	f040 808e 	bne.w	8007d4c <_printf_i+0x210>
 8007c30:	4665      	mov	r5, ip
 8007c32:	2a08      	cmp	r2, #8
 8007c34:	d10b      	bne.n	8007c4e <_printf_i+0x112>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	07db      	lsls	r3, r3, #31
 8007c3a:	d508      	bpl.n	8007c4e <_printf_i+0x112>
 8007c3c:	6923      	ldr	r3, [r4, #16]
 8007c3e:	6862      	ldr	r2, [r4, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	bfde      	ittt	le
 8007c44:	2330      	movle	r3, #48	; 0x30
 8007c46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c4a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007c4e:	ebac 0305 	sub.w	r3, ip, r5
 8007c52:	6123      	str	r3, [r4, #16]
 8007c54:	f8cd 8000 	str.w	r8, [sp]
 8007c58:	463b      	mov	r3, r7
 8007c5a:	aa03      	add	r2, sp, #12
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f7ff fef6 	bl	8007a50 <_printf_common>
 8007c64:	3001      	adds	r0, #1
 8007c66:	d14d      	bne.n	8007d04 <_printf_i+0x1c8>
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c6c:	b005      	add	sp, #20
 8007c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c72:	4839      	ldr	r0, [pc, #228]	; (8007d58 <_printf_i+0x21c>)
 8007c74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007c78:	6813      	ldr	r3, [r2, #0]
 8007c7a:	6821      	ldr	r1, [r4, #0]
 8007c7c:	1d1d      	adds	r5, r3, #4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6015      	str	r5, [r2, #0]
 8007c82:	060a      	lsls	r2, r1, #24
 8007c84:	d50b      	bpl.n	8007c9e <_printf_i+0x162>
 8007c86:	07ca      	lsls	r2, r1, #31
 8007c88:	bf44      	itt	mi
 8007c8a:	f041 0120 	orrmi.w	r1, r1, #32
 8007c8e:	6021      	strmi	r1, [r4, #0]
 8007c90:	b91b      	cbnz	r3, 8007c9a <_printf_i+0x15e>
 8007c92:	6822      	ldr	r2, [r4, #0]
 8007c94:	f022 0220 	bic.w	r2, r2, #32
 8007c98:	6022      	str	r2, [r4, #0]
 8007c9a:	2210      	movs	r2, #16
 8007c9c:	e7b7      	b.n	8007c0e <_printf_i+0xd2>
 8007c9e:	064d      	lsls	r5, r1, #25
 8007ca0:	bf48      	it	mi
 8007ca2:	b29b      	uxthmi	r3, r3
 8007ca4:	e7ef      	b.n	8007c86 <_printf_i+0x14a>
 8007ca6:	4665      	mov	r5, ip
 8007ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cac:	fb02 3311 	mls	r3, r2, r1, r3
 8007cb0:	5cc3      	ldrb	r3, [r0, r3]
 8007cb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	2900      	cmp	r1, #0
 8007cba:	d1f5      	bne.n	8007ca8 <_printf_i+0x16c>
 8007cbc:	e7b9      	b.n	8007c32 <_printf_i+0xf6>
 8007cbe:	6813      	ldr	r3, [r2, #0]
 8007cc0:	6825      	ldr	r5, [r4, #0]
 8007cc2:	1d18      	adds	r0, r3, #4
 8007cc4:	6961      	ldr	r1, [r4, #20]
 8007cc6:	6010      	str	r0, [r2, #0]
 8007cc8:	0628      	lsls	r0, r5, #24
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	d501      	bpl.n	8007cd2 <_printf_i+0x196>
 8007cce:	6019      	str	r1, [r3, #0]
 8007cd0:	e002      	b.n	8007cd8 <_printf_i+0x19c>
 8007cd2:	066a      	lsls	r2, r5, #25
 8007cd4:	d5fb      	bpl.n	8007cce <_printf_i+0x192>
 8007cd6:	8019      	strh	r1, [r3, #0]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4665      	mov	r5, ip
 8007cdc:	6123      	str	r3, [r4, #16]
 8007cde:	e7b9      	b.n	8007c54 <_printf_i+0x118>
 8007ce0:	6813      	ldr	r3, [r2, #0]
 8007ce2:	1d19      	adds	r1, r3, #4
 8007ce4:	6011      	str	r1, [r2, #0]
 8007ce6:	681d      	ldr	r5, [r3, #0]
 8007ce8:	6862      	ldr	r2, [r4, #4]
 8007cea:	2100      	movs	r1, #0
 8007cec:	4628      	mov	r0, r5
 8007cee:	f000 f837 	bl	8007d60 <memchr>
 8007cf2:	b108      	cbz	r0, 8007cf8 <_printf_i+0x1bc>
 8007cf4:	1b40      	subs	r0, r0, r5
 8007cf6:	6060      	str	r0, [r4, #4]
 8007cf8:	6863      	ldr	r3, [r4, #4]
 8007cfa:	6123      	str	r3, [r4, #16]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d02:	e7a7      	b.n	8007c54 <_printf_i+0x118>
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	462a      	mov	r2, r5
 8007d08:	4639      	mov	r1, r7
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	47c0      	blx	r8
 8007d0e:	3001      	adds	r0, #1
 8007d10:	d0aa      	beq.n	8007c68 <_printf_i+0x12c>
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	079b      	lsls	r3, r3, #30
 8007d16:	d413      	bmi.n	8007d40 <_printf_i+0x204>
 8007d18:	68e0      	ldr	r0, [r4, #12]
 8007d1a:	9b03      	ldr	r3, [sp, #12]
 8007d1c:	4298      	cmp	r0, r3
 8007d1e:	bfb8      	it	lt
 8007d20:	4618      	movlt	r0, r3
 8007d22:	e7a3      	b.n	8007c6c <_printf_i+0x130>
 8007d24:	2301      	movs	r3, #1
 8007d26:	464a      	mov	r2, r9
 8007d28:	4639      	mov	r1, r7
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	47c0      	blx	r8
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d09a      	beq.n	8007c68 <_printf_i+0x12c>
 8007d32:	3501      	adds	r5, #1
 8007d34:	68e3      	ldr	r3, [r4, #12]
 8007d36:	9a03      	ldr	r2, [sp, #12]
 8007d38:	1a9b      	subs	r3, r3, r2
 8007d3a:	42ab      	cmp	r3, r5
 8007d3c:	dcf2      	bgt.n	8007d24 <_printf_i+0x1e8>
 8007d3e:	e7eb      	b.n	8007d18 <_printf_i+0x1dc>
 8007d40:	2500      	movs	r5, #0
 8007d42:	f104 0919 	add.w	r9, r4, #25
 8007d46:	e7f5      	b.n	8007d34 <_printf_i+0x1f8>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1ac      	bne.n	8007ca6 <_printf_i+0x16a>
 8007d4c:	7803      	ldrb	r3, [r0, #0]
 8007d4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d56:	e76c      	b.n	8007c32 <_printf_i+0xf6>
 8007d58:	08008281 	.word	0x08008281
 8007d5c:	08008292 	.word	0x08008292

08007d60 <memchr>:
 8007d60:	b510      	push	{r4, lr}
 8007d62:	b2c9      	uxtb	r1, r1
 8007d64:	4402      	add	r2, r0
 8007d66:	4290      	cmp	r0, r2
 8007d68:	4603      	mov	r3, r0
 8007d6a:	d101      	bne.n	8007d70 <memchr+0x10>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e003      	b.n	8007d78 <memchr+0x18>
 8007d70:	781c      	ldrb	r4, [r3, #0]
 8007d72:	3001      	adds	r0, #1
 8007d74:	428c      	cmp	r4, r1
 8007d76:	d1f6      	bne.n	8007d66 <memchr+0x6>
 8007d78:	4618      	mov	r0, r3
 8007d7a:	bd10      	pop	{r4, pc}

08007d7c <memcpy>:
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	1e43      	subs	r3, r0, #1
 8007d80:	440a      	add	r2, r1
 8007d82:	4291      	cmp	r1, r2
 8007d84:	d100      	bne.n	8007d88 <memcpy+0xc>
 8007d86:	bd10      	pop	{r4, pc}
 8007d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d90:	e7f7      	b.n	8007d82 <memcpy+0x6>

08007d92 <memmove>:
 8007d92:	4288      	cmp	r0, r1
 8007d94:	b510      	push	{r4, lr}
 8007d96:	eb01 0302 	add.w	r3, r1, r2
 8007d9a:	d807      	bhi.n	8007dac <memmove+0x1a>
 8007d9c:	1e42      	subs	r2, r0, #1
 8007d9e:	4299      	cmp	r1, r3
 8007da0:	d00a      	beq.n	8007db8 <memmove+0x26>
 8007da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007da6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007daa:	e7f8      	b.n	8007d9e <memmove+0xc>
 8007dac:	4283      	cmp	r3, r0
 8007dae:	d9f5      	bls.n	8007d9c <memmove+0xa>
 8007db0:	1881      	adds	r1, r0, r2
 8007db2:	1ad2      	subs	r2, r2, r3
 8007db4:	42d3      	cmn	r3, r2
 8007db6:	d100      	bne.n	8007dba <memmove+0x28>
 8007db8:	bd10      	pop	{r4, pc}
 8007dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dbe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007dc2:	e7f7      	b.n	8007db4 <memmove+0x22>

08007dc4 <_free_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	2900      	cmp	r1, #0
 8007dca:	d043      	beq.n	8007e54 <_free_r+0x90>
 8007dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd0:	1f0c      	subs	r4, r1, #4
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	bfb8      	it	lt
 8007dd6:	18e4      	addlt	r4, r4, r3
 8007dd8:	f000 f8d0 	bl	8007f7c <__malloc_lock>
 8007ddc:	4a1e      	ldr	r2, [pc, #120]	; (8007e58 <_free_r+0x94>)
 8007dde:	6813      	ldr	r3, [r2, #0]
 8007de0:	4610      	mov	r0, r2
 8007de2:	b933      	cbnz	r3, 8007df2 <_free_r+0x2e>
 8007de4:	6063      	str	r3, [r4, #4]
 8007de6:	6014      	str	r4, [r2, #0]
 8007de8:	4628      	mov	r0, r5
 8007dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dee:	f000 b8c6 	b.w	8007f7e <__malloc_unlock>
 8007df2:	42a3      	cmp	r3, r4
 8007df4:	d90b      	bls.n	8007e0e <_free_r+0x4a>
 8007df6:	6821      	ldr	r1, [r4, #0]
 8007df8:	1862      	adds	r2, r4, r1
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	bf01      	itttt	eq
 8007dfe:	681a      	ldreq	r2, [r3, #0]
 8007e00:	685b      	ldreq	r3, [r3, #4]
 8007e02:	1852      	addeq	r2, r2, r1
 8007e04:	6022      	streq	r2, [r4, #0]
 8007e06:	6063      	str	r3, [r4, #4]
 8007e08:	6004      	str	r4, [r0, #0]
 8007e0a:	e7ed      	b.n	8007de8 <_free_r+0x24>
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	b10a      	cbz	r2, 8007e16 <_free_r+0x52>
 8007e12:	42a2      	cmp	r2, r4
 8007e14:	d9fa      	bls.n	8007e0c <_free_r+0x48>
 8007e16:	6819      	ldr	r1, [r3, #0]
 8007e18:	1858      	adds	r0, r3, r1
 8007e1a:	42a0      	cmp	r0, r4
 8007e1c:	d10b      	bne.n	8007e36 <_free_r+0x72>
 8007e1e:	6820      	ldr	r0, [r4, #0]
 8007e20:	4401      	add	r1, r0
 8007e22:	1858      	adds	r0, r3, r1
 8007e24:	4282      	cmp	r2, r0
 8007e26:	6019      	str	r1, [r3, #0]
 8007e28:	d1de      	bne.n	8007de8 <_free_r+0x24>
 8007e2a:	6810      	ldr	r0, [r2, #0]
 8007e2c:	6852      	ldr	r2, [r2, #4]
 8007e2e:	4401      	add	r1, r0
 8007e30:	6019      	str	r1, [r3, #0]
 8007e32:	605a      	str	r2, [r3, #4]
 8007e34:	e7d8      	b.n	8007de8 <_free_r+0x24>
 8007e36:	d902      	bls.n	8007e3e <_free_r+0x7a>
 8007e38:	230c      	movs	r3, #12
 8007e3a:	602b      	str	r3, [r5, #0]
 8007e3c:	e7d4      	b.n	8007de8 <_free_r+0x24>
 8007e3e:	6820      	ldr	r0, [r4, #0]
 8007e40:	1821      	adds	r1, r4, r0
 8007e42:	428a      	cmp	r2, r1
 8007e44:	bf01      	itttt	eq
 8007e46:	6811      	ldreq	r1, [r2, #0]
 8007e48:	6852      	ldreq	r2, [r2, #4]
 8007e4a:	1809      	addeq	r1, r1, r0
 8007e4c:	6021      	streq	r1, [r4, #0]
 8007e4e:	6062      	str	r2, [r4, #4]
 8007e50:	605c      	str	r4, [r3, #4]
 8007e52:	e7c9      	b.n	8007de8 <_free_r+0x24>
 8007e54:	bd38      	pop	{r3, r4, r5, pc}
 8007e56:	bf00      	nop
 8007e58:	20000160 	.word	0x20000160

08007e5c <_malloc_r>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	1ccd      	adds	r5, r1, #3
 8007e60:	f025 0503 	bic.w	r5, r5, #3
 8007e64:	3508      	adds	r5, #8
 8007e66:	2d0c      	cmp	r5, #12
 8007e68:	bf38      	it	cc
 8007e6a:	250c      	movcc	r5, #12
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	4606      	mov	r6, r0
 8007e70:	db01      	blt.n	8007e76 <_malloc_r+0x1a>
 8007e72:	42a9      	cmp	r1, r5
 8007e74:	d903      	bls.n	8007e7e <_malloc_r+0x22>
 8007e76:	230c      	movs	r3, #12
 8007e78:	6033      	str	r3, [r6, #0]
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	bd70      	pop	{r4, r5, r6, pc}
 8007e7e:	f000 f87d 	bl	8007f7c <__malloc_lock>
 8007e82:	4a21      	ldr	r2, [pc, #132]	; (8007f08 <_malloc_r+0xac>)
 8007e84:	6814      	ldr	r4, [r2, #0]
 8007e86:	4621      	mov	r1, r4
 8007e88:	b991      	cbnz	r1, 8007eb0 <_malloc_r+0x54>
 8007e8a:	4c20      	ldr	r4, [pc, #128]	; (8007f0c <_malloc_r+0xb0>)
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	b91b      	cbnz	r3, 8007e98 <_malloc_r+0x3c>
 8007e90:	4630      	mov	r0, r6
 8007e92:	f000 f863 	bl	8007f5c <_sbrk_r>
 8007e96:	6020      	str	r0, [r4, #0]
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f000 f85e 	bl	8007f5c <_sbrk_r>
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	d124      	bne.n	8007eee <_malloc_r+0x92>
 8007ea4:	230c      	movs	r3, #12
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	6033      	str	r3, [r6, #0]
 8007eaa:	f000 f868 	bl	8007f7e <__malloc_unlock>
 8007eae:	e7e4      	b.n	8007e7a <_malloc_r+0x1e>
 8007eb0:	680b      	ldr	r3, [r1, #0]
 8007eb2:	1b5b      	subs	r3, r3, r5
 8007eb4:	d418      	bmi.n	8007ee8 <_malloc_r+0x8c>
 8007eb6:	2b0b      	cmp	r3, #11
 8007eb8:	d90f      	bls.n	8007eda <_malloc_r+0x7e>
 8007eba:	600b      	str	r3, [r1, #0]
 8007ebc:	18cc      	adds	r4, r1, r3
 8007ebe:	50cd      	str	r5, [r1, r3]
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f000 f85c 	bl	8007f7e <__malloc_unlock>
 8007ec6:	f104 000b 	add.w	r0, r4, #11
 8007eca:	1d23      	adds	r3, r4, #4
 8007ecc:	f020 0007 	bic.w	r0, r0, #7
 8007ed0:	1ac3      	subs	r3, r0, r3
 8007ed2:	d0d3      	beq.n	8007e7c <_malloc_r+0x20>
 8007ed4:	425a      	negs	r2, r3
 8007ed6:	50e2      	str	r2, [r4, r3]
 8007ed8:	e7d0      	b.n	8007e7c <_malloc_r+0x20>
 8007eda:	684b      	ldr	r3, [r1, #4]
 8007edc:	428c      	cmp	r4, r1
 8007ede:	bf16      	itet	ne
 8007ee0:	6063      	strne	r3, [r4, #4]
 8007ee2:	6013      	streq	r3, [r2, #0]
 8007ee4:	460c      	movne	r4, r1
 8007ee6:	e7eb      	b.n	8007ec0 <_malloc_r+0x64>
 8007ee8:	460c      	mov	r4, r1
 8007eea:	6849      	ldr	r1, [r1, #4]
 8007eec:	e7cc      	b.n	8007e88 <_malloc_r+0x2c>
 8007eee:	1cc4      	adds	r4, r0, #3
 8007ef0:	f024 0403 	bic.w	r4, r4, #3
 8007ef4:	42a0      	cmp	r0, r4
 8007ef6:	d005      	beq.n	8007f04 <_malloc_r+0xa8>
 8007ef8:	1a21      	subs	r1, r4, r0
 8007efa:	4630      	mov	r0, r6
 8007efc:	f000 f82e 	bl	8007f5c <_sbrk_r>
 8007f00:	3001      	adds	r0, #1
 8007f02:	d0cf      	beq.n	8007ea4 <_malloc_r+0x48>
 8007f04:	6025      	str	r5, [r4, #0]
 8007f06:	e7db      	b.n	8007ec0 <_malloc_r+0x64>
 8007f08:	20000160 	.word	0x20000160
 8007f0c:	20000164 	.word	0x20000164

08007f10 <_realloc_r>:
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	4607      	mov	r7, r0
 8007f14:	4614      	mov	r4, r2
 8007f16:	460e      	mov	r6, r1
 8007f18:	b921      	cbnz	r1, 8007f24 <_realloc_r+0x14>
 8007f1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f1e:	4611      	mov	r1, r2
 8007f20:	f7ff bf9c 	b.w	8007e5c <_malloc_r>
 8007f24:	b922      	cbnz	r2, 8007f30 <_realloc_r+0x20>
 8007f26:	f7ff ff4d 	bl	8007dc4 <_free_r>
 8007f2a:	4625      	mov	r5, r4
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f30:	f000 f826 	bl	8007f80 <_malloc_usable_size_r>
 8007f34:	42a0      	cmp	r0, r4
 8007f36:	d20f      	bcs.n	8007f58 <_realloc_r+0x48>
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	f7ff ff8e 	bl	8007e5c <_malloc_r>
 8007f40:	4605      	mov	r5, r0
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d0f2      	beq.n	8007f2c <_realloc_r+0x1c>
 8007f46:	4631      	mov	r1, r6
 8007f48:	4622      	mov	r2, r4
 8007f4a:	f7ff ff17 	bl	8007d7c <memcpy>
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4638      	mov	r0, r7
 8007f52:	f7ff ff37 	bl	8007dc4 <_free_r>
 8007f56:	e7e9      	b.n	8007f2c <_realloc_r+0x1c>
 8007f58:	4635      	mov	r5, r6
 8007f5a:	e7e7      	b.n	8007f2c <_realloc_r+0x1c>

08007f5c <_sbrk_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	2300      	movs	r3, #0
 8007f60:	4c05      	ldr	r4, [pc, #20]	; (8007f78 <_sbrk_r+0x1c>)
 8007f62:	4605      	mov	r5, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	f7fb fe70 	bl	8003c4c <_sbrk>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_sbrk_r+0x1a>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_sbrk_r+0x1a>
 8007f74:	602b      	str	r3, [r5, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	2000079c 	.word	0x2000079c

08007f7c <__malloc_lock>:
 8007f7c:	4770      	bx	lr

08007f7e <__malloc_unlock>:
 8007f7e:	4770      	bx	lr

08007f80 <_malloc_usable_size_r>:
 8007f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f84:	1f18      	subs	r0, r3, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bfbc      	itt	lt
 8007f8a:	580b      	ldrlt	r3, [r1, r0]
 8007f8c:	18c0      	addlt	r0, r0, r3
 8007f8e:	4770      	bx	lr

08007f90 <_init>:
 8007f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f92:	bf00      	nop
 8007f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f96:	bc08      	pop	{r3}
 8007f98:	469e      	mov	lr, r3
 8007f9a:	4770      	bx	lr

08007f9c <_fini>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	bf00      	nop
 8007fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa2:	bc08      	pop	{r3}
 8007fa4:	469e      	mov	lr, r3
 8007fa6:	4770      	bx	lr
