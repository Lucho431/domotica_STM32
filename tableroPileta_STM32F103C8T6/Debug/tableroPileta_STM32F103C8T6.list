
tableroPileta_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005240  08005240  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08005240  08005240  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005240  08005240  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000084  080052cc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  080052cc  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012127  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034c9  00000000  00000000  000321d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  000356a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  000369f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016862  00000000  00000000  00037b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001178a  00000000  00000000  0004e3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000776cb  00000000  00000000  0005fb5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7227  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c88  00000000  00000000  000d72a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08005020 	.word	0x08005020

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08005020 	.word	0x08005020

0800014c <spi_74HC165_init>:
 * La función de inicialización está modificada para trabajar con dos
 * integrados 74HC165 a la vez, tratándolos como distintos esclavos SPI.
 * Cada integrado contará con su propia función de lectura, así como sus
 * propias señales CE.
 */
void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CE1port, uint16_t CE1pin, GPIO_TypeDef* CE2port, uint16_t CE2pin){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <spi_74HC165_init+0x44>)
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 8000162:	4a0c      	ldr	r2, [pc, #48]	; (8000194 <spi_74HC165_init+0x48>)
 8000164:	68bb      	ldr	r3, [r7, #8]
 8000166:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 8000168:	4a0b      	ldr	r2, [pc, #44]	; (8000198 <spi_74HC165_init+0x4c>)
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	8013      	strh	r3, [r2, #0]

	portCE1 = CE1port;
 800016e:	4a0b      	ldr	r2, [pc, #44]	; (800019c <spi_74HC165_init+0x50>)
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	6013      	str	r3, [r2, #0]
	pinCE1 = CE1pin;
 8000174:	4a0a      	ldr	r2, [pc, #40]	; (80001a0 <spi_74HC165_init+0x54>)
 8000176:	8b3b      	ldrh	r3, [r7, #24]
 8000178:	8013      	strh	r3, [r2, #0]
	portCE2 = CE2port;
 800017a:	4a0a      	ldr	r2, [pc, #40]	; (80001a4 <spi_74HC165_init+0x58>)
 800017c:	69fb      	ldr	r3, [r7, #28]
 800017e:	6013      	str	r3, [r2, #0]
	pinCE2 = CE2pin;
 8000180:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <spi_74HC165_init+0x5c>)
 8000182:	8c3b      	ldrh	r3, [r7, #32]
 8000184:	8013      	strh	r3, [r2, #0]

}
 8000186:	bf00      	nop
 8000188:	3714      	adds	r7, #20
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000b8 	.word	0x200000b8
 8000194:	200000c4 	.word	0x200000c4
 8000198:	200000bc 	.word	0x200000bc
 800019c:	200000cc 	.word	0x200000cc
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	200000c0 	.word	0x200000c0
 80001a8:	200000d0 	.word	0x200000d0

080001ac <spi_74HC165_receiveBotones>:


void spi_74HC165_receiveBotones (uint8_t* pdata, uint16_t sizeData){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	460b      	mov	r3, r1
 80001b6:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 80001b8:	4b15      	ldr	r3, [pc, #84]	; (8000210 <spi_74HC165_receiveBotones+0x64>)
 80001ba:	6818      	ldr	r0, [r3, #0]
 80001bc:	4b15      	ldr	r3, [pc, #84]	; (8000214 <spi_74HC165_receiveBotones+0x68>)
 80001be:	881b      	ldrh	r3, [r3, #0]
 80001c0:	2200      	movs	r2, #0
 80001c2:	4619      	mov	r1, r3
 80001c4:	f002 f8b7 	bl	8002336 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 80001c8:	4b11      	ldr	r3, [pc, #68]	; (8000210 <spi_74HC165_receiveBotones+0x64>)
 80001ca:	6818      	ldr	r0, [r3, #0]
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <spi_74HC165_receiveBotones+0x68>)
 80001ce:	881b      	ldrh	r3, [r3, #0]
 80001d0:	2201      	movs	r2, #1
 80001d2:	4619      	mov	r1, r3
 80001d4:	f002 f8af 	bl	8002336 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE1, pinCE1, 0);
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <spi_74HC165_receiveBotones+0x6c>)
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <spi_74HC165_receiveBotones+0x70>)
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	2200      	movs	r2, #0
 80001e2:	4619      	mov	r1, r3
 80001e4:	f002 f8a7 	bl	8002336 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 80001e8:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <spi_74HC165_receiveBotones+0x74>)
 80001ea:	6818      	ldr	r0, [r3, #0]
 80001ec:	887a      	ldrh	r2, [r7, #2]
 80001ee:	2364      	movs	r3, #100	; 0x64
 80001f0:	6879      	ldr	r1, [r7, #4]
 80001f2:	f003 febc 	bl	8003f6e <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE1, pinCE1, 1);
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <spi_74HC165_receiveBotones+0x6c>)
 80001f8:	6818      	ldr	r0, [r3, #0]
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <spi_74HC165_receiveBotones+0x70>)
 80001fc:	881b      	ldrh	r3, [r3, #0]
 80001fe:	2201      	movs	r2, #1
 8000200:	4619      	mov	r1, r3
 8000202:	f002 f898 	bl	8002336 <HAL_GPIO_WritePin>
}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	200000c4 	.word	0x200000c4
 8000214:	200000bc 	.word	0x200000bc
 8000218:	200000cc 	.word	0x200000cc
 800021c:	200000c8 	.word	0x200000c8
 8000220:	200000b8 	.word	0x200000b8

08000224 <spi_74HC165_receiveTeclado>:


void spi_74HC165_receiveTeclado (uint8_t* pdata, uint16_t sizeData){
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	460b      	mov	r3, r1
 800022e:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <spi_74HC165_receiveTeclado+0x64>)
 8000232:	6818      	ldr	r0, [r3, #0]
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <spi_74HC165_receiveTeclado+0x68>)
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	2200      	movs	r2, #0
 800023a:	4619      	mov	r1, r3
 800023c:	f002 f87b 	bl	8002336 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <spi_74HC165_receiveTeclado+0x64>)
 8000242:	6818      	ldr	r0, [r3, #0]
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <spi_74HC165_receiveTeclado+0x68>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	2201      	movs	r2, #1
 800024a:	4619      	mov	r1, r3
 800024c:	f002 f873 	bl	8002336 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE2, pinCE2, 0);
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <spi_74HC165_receiveTeclado+0x6c>)
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <spi_74HC165_receiveTeclado+0x70>)
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	2200      	movs	r2, #0
 800025a:	4619      	mov	r1, r3
 800025c:	f002 f86b 	bl	8002336 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <spi_74HC165_receiveTeclado+0x74>)
 8000262:	6818      	ldr	r0, [r3, #0]
 8000264:	887a      	ldrh	r2, [r7, #2]
 8000266:	2364      	movs	r3, #100	; 0x64
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	f003 fe80 	bl	8003f6e <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE2, pinCE2, 1);
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <spi_74HC165_receiveTeclado+0x6c>)
 8000270:	6818      	ldr	r0, [r3, #0]
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <spi_74HC165_receiveTeclado+0x70>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	2201      	movs	r2, #1
 8000278:	4619      	mov	r1, r3
 800027a:	f002 f85c 	bl	8002336 <HAL_GPIO_WritePin>
}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	200000c4 	.word	0x200000c4
 800028c:	200000bc 	.word	0x200000bc
 8000290:	200000c0 	.word	0x200000c0
 8000294:	200000d0 	.word	0x200000d0
 8000298:	200000b8 	.word	0x200000b8

0800029c <spi_74HC595_init>:
SPI_HandleTypeDef* spi_handler;
GPIO_TypeDef* portST;
uint16_t pinST;


void spi_74HC595_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* STport, uint16_t STpin){
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	4613      	mov	r3, r2
 80002a8:	80fb      	strh	r3, [r7, #6]

	spi_handler =hspi;
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <spi_74HC595_init+0x38>)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	6013      	str	r3, [r2, #0]

	portST = STport;
 80002b0:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <spi_74HC595_init+0x3c>)
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	6013      	str	r3, [r2, #0]
	pinST = STpin;
 80002b6:	4a09      	ldr	r2, [pc, #36]	; (80002dc <spi_74HC595_init+0x40>)
 80002b8:	88fb      	ldrh	r3, [r7, #6]
 80002ba:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(portST, pinST, 0);
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <spi_74HC595_init+0x3c>)
 80002be:	6818      	ldr	r0, [r3, #0]
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <spi_74HC595_init+0x40>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	2200      	movs	r2, #0
 80002c6:	4619      	mov	r1, r3
 80002c8:	f002 f835 	bl	8002336 <HAL_GPIO_WritePin>

} //end spi_74HC595_init()
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200000b8 	.word	0x200000b8
 80002d8:	200000d8 	.word	0x200000d8
 80002dc:	200000d4 	.word	0x200000d4

080002e0 <spi_74HC595_Transmit>:


void spi_74HC595_Transmit (uint8_t* pdata, uint16_t sizeData){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(spi_handler, pdata, sizeData, 100);
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <spi_74HC595_Transmit+0x44>)
 80002ee:	6818      	ldr	r0, [r3, #0]
 80002f0:	887a      	ldrh	r2, [r7, #2]
 80002f2:	2364      	movs	r3, #100	; 0x64
 80002f4:	6879      	ldr	r1, [r7, #4]
 80002f6:	f003 fd06 	bl	8003d06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(portST, pinST, 1);
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <spi_74HC595_Transmit+0x48>)
 80002fc:	6818      	ldr	r0, [r3, #0]
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <spi_74HC595_Transmit+0x4c>)
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	2201      	movs	r2, #1
 8000304:	4619      	mov	r1, r3
 8000306:	f002 f816 	bl	8002336 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(portST, pinST, 0);
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <spi_74HC595_Transmit+0x48>)
 800030c:	6818      	ldr	r0, [r3, #0]
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <spi_74HC595_Transmit+0x4c>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	2200      	movs	r2, #0
 8000314:	4619      	mov	r1, r3
 8000316:	f002 f80e 	bl	8002336 <HAL_GPIO_WritePin>

} //end spi_74HC595_transmit()
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000b8 	.word	0x200000b8
 8000328:	200000d8 	.word	0x200000d8
 800032c:	200000d4 	.word	0x200000d4

08000330 <turnONFila>:
uint32_t read_input, last_input, fall_input, rise_input;

uint16_t write_output;


void turnONFila (uint8_t filaNum){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]

	switch (filaNum){
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b03      	cmp	r3, #3
 800033e:	d862      	bhi.n	8000406 <turnONFila+0xd6>
 8000340:	a201      	add	r2, pc, #4	; (adr r2, 8000348 <turnONFila+0x18>)
 8000342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000346:	bf00      	nop
 8000348:	08000359 	.word	0x08000359
 800034c:	08000385 	.word	0x08000385
 8000350:	080003b1 	.word	0x080003b1
 8000354:	080003dd 	.word	0x080003dd
		case 0:
			//pongo en 0 la fila 0; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2120      	movs	r1, #32
 800035c:	482c      	ldr	r0, [pc, #176]	; (8000410 <turnONFila+0xe0>)
 800035e:	f001 ffea 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 8000362:	2201      	movs	r2, #1
 8000364:	2110      	movs	r1, #16
 8000366:	482a      	ldr	r0, [pc, #168]	; (8000410 <turnONFila+0xe0>)
 8000368:	f001 ffe5 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 800036c:	2201      	movs	r2, #1
 800036e:	2108      	movs	r1, #8
 8000370:	4827      	ldr	r0, [pc, #156]	; (8000410 <turnONFila+0xe0>)
 8000372:	f001 ffe0 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 8000376:	2201      	movs	r2, #1
 8000378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037c:	4825      	ldr	r0, [pc, #148]	; (8000414 <turnONFila+0xe4>)
 800037e:	f001 ffda 	bl	8002336 <HAL_GPIO_WritePin>
		break;
 8000382:	e041      	b.n	8000408 <turnONFila+0xd8>
		case 1:
			//pongo en 0 la fila 1; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 8000384:	2201      	movs	r2, #1
 8000386:	2120      	movs	r1, #32
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <turnONFila+0xe0>)
 800038a:	f001 ffd4 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2110      	movs	r1, #16
 8000392:	481f      	ldr	r0, [pc, #124]	; (8000410 <turnONFila+0xe0>)
 8000394:	f001 ffcf 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 8000398:	2201      	movs	r2, #1
 800039a:	2108      	movs	r1, #8
 800039c:	481c      	ldr	r0, [pc, #112]	; (8000410 <turnONFila+0xe0>)
 800039e:	f001 ffca 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003a8:	481a      	ldr	r0, [pc, #104]	; (8000414 <turnONFila+0xe4>)
 80003aa:	f001 ffc4 	bl	8002336 <HAL_GPIO_WritePin>
		break;
 80003ae:	e02b      	b.n	8000408 <turnONFila+0xd8>
		case 2:
			//pongo en 0 la fila 2; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2120      	movs	r1, #32
 80003b4:	4816      	ldr	r0, [pc, #88]	; (8000410 <turnONFila+0xe0>)
 80003b6:	f001 ffbe 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2110      	movs	r1, #16
 80003be:	4814      	ldr	r0, [pc, #80]	; (8000410 <turnONFila+0xe0>)
 80003c0:	f001 ffb9 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2108      	movs	r1, #8
 80003c8:	4811      	ldr	r0, [pc, #68]	; (8000410 <turnONFila+0xe0>)
 80003ca:	f001 ffb4 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003d4:	480f      	ldr	r0, [pc, #60]	; (8000414 <turnONFila+0xe4>)
 80003d6:	f001 ffae 	bl	8002336 <HAL_GPIO_WritePin>
		break;
 80003da:	e015      	b.n	8000408 <turnONFila+0xd8>
		case 3:
			//pongo en 0 la fila 3; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	480b      	ldr	r0, [pc, #44]	; (8000410 <turnONFila+0xe0>)
 80003e2:	f001 ffa8 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2110      	movs	r1, #16
 80003ea:	4809      	ldr	r0, [pc, #36]	; (8000410 <turnONFila+0xe0>)
 80003ec:	f001 ffa3 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2108      	movs	r1, #8
 80003f4:	4806      	ldr	r0, [pc, #24]	; (8000410 <turnONFila+0xe0>)
 80003f6:	f001 ff9e 	bl	8002336 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <turnONFila+0xe4>)
 8000402:	f001 ff98 	bl	8002336 <HAL_GPIO_WritePin>
		default:
		break;
 8000406:	bf00      	nop
	}//end witch
}//end turnONFila
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40010c00 	.word	0x40010c00
 8000414:	40010800 	.word	0x40010800

08000418 <lecturaTeclas>:


void lecturaTeclas (void){
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0

	last_input = read_input;
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <lecturaTeclas+0x74>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a1b      	ldr	r2, [pc, #108]	; (8000490 <lecturaTeclas+0x78>)
 8000424:	6013      	str	r3, [r2, #0]

	//pulsadores:
	spi_74HC165_receiveBotones (&read_teclas, 1);
 8000426:	2101      	movs	r1, #1
 8000428:	481a      	ldr	r0, [pc, #104]	; (8000494 <lecturaTeclas+0x7c>)
 800042a:	f7ff febf 	bl	80001ac <spi_74HC165_receiveBotones>

	//teclado matricial:

	for (uint8_t i = 0; i < 4; i++){
 800042e:	2300      	movs	r3, #0
 8000430:	71fb      	strb	r3, [r7, #7]
 8000432:	e00d      	b.n	8000450 <lecturaTeclas+0x38>
		turnONFila(i);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff7a 	bl	8000330 <turnONFila>
		spi_74HC165_receiveTeclado(&read_teclado[i], 1);
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	4a16      	ldr	r2, [pc, #88]	; (8000498 <lecturaTeclas+0x80>)
 8000440:	4413      	add	r3, r2
 8000442:	2101      	movs	r1, #1
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff feed 	bl	8000224 <spi_74HC165_receiveTeclado>
	for (uint8_t i = 0; i < 4; i++){
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	3301      	adds	r3, #1
 800044e:	71fb      	strb	r3, [r7, #7]
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	2b03      	cmp	r3, #3
 8000454:	d9ee      	bls.n	8000434 <lecturaTeclas+0x1c>
	}//end for i

	read_input = (uint32_t) (read_teclas |
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <lecturaTeclas+0x7c>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	461a      	mov	r2, r3
							(read_teclado[0] << 6) |
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <lecturaTeclas+0x80>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	019b      	lsls	r3, r3, #6
	read_input = (uint32_t) (read_teclas |
 8000462:	431a      	orrs	r2, r3
							(read_teclado[1] << 10) |
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <lecturaTeclas+0x80>)
 8000466:	785b      	ldrb	r3, [r3, #1]
 8000468:	029b      	lsls	r3, r3, #10
							(read_teclado[0] << 6) |
 800046a:	431a      	orrs	r2, r3
							(read_teclado[2] << 14) |
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <lecturaTeclas+0x80>)
 800046e:	789b      	ldrb	r3, [r3, #2]
 8000470:	039b      	lsls	r3, r3, #14
							(read_teclado[1] << 10) |
 8000472:	431a      	orrs	r2, r3
							(read_teclado[3] << 18));
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <lecturaTeclas+0x80>)
 8000476:	78db      	ldrb	r3, [r3, #3]
 8000478:	049b      	lsls	r3, r3, #18
							(read_teclado[2] << 14) |
 800047a:	4313      	orrs	r3, r2
	read_input = (uint32_t) (read_teclas |
 800047c:	461a      	mov	r2, r3
 800047e:	4b03      	ldr	r3, [pc, #12]	; (800048c <lecturaTeclas+0x74>)
 8000480:	601a      	str	r2, [r3, #0]

} //end lecturaTeclas()
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	200000e4 	.word	0x200000e4
 8000490:	20000108 	.word	0x20000108
 8000494:	2000010c 	.word	0x2000010c
 8000498:	200000e0 	.word	0x200000e0

0800049c <update_teclas>:


void update_teclas(void){ //ESTADO DE LAS TECLAS CON LOGICA NEGATIVA
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0


	fall_input = last_input & ~read_input;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <update_teclas+0x2c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	43da      	mvns	r2, r3
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <update_teclas+0x30>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4013      	ands	r3, r2
 80004ac:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <update_teclas+0x34>)
 80004ae:	6013      	str	r3, [r2, #0]
	rise_input = ~last_input & read_input;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <update_teclas+0x30>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	43da      	mvns	r2, r3
 80004b6:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <update_teclas+0x2c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4013      	ands	r3, r2
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <update_teclas+0x38>)
 80004be:	6013      	str	r3, [r2, #0]



} //end teclas
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	200000e4 	.word	0x200000e4
 80004cc:	20000108 	.word	0x20000108
 80004d0:	200000e8 	.word	0x200000e8
 80004d4:	200000ec 	.word	0x200000ec

080004d8 <getStatBoton>:


T_INPUT getStatBoton (T_POS_INPUT b){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]

	if ( (fall_input & (1 << b)) != 0)
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	2201      	movs	r2, #1
 80004e6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <getStatBoton+0x74>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4013      	ands	r3, r2
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <getStatBoton+0x22>
		return FALL;
 80004f6:	2302      	movs	r3, #2
 80004f8:	e022      	b.n	8000540 <getStatBoton+0x68>

	if (rise_input & (1 << b) != 0)
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2201      	movs	r2, #1
 80004fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	bf14      	ite	ne
 8000506:	2301      	movne	r3, #1
 8000508:	2300      	moveq	r3, #0
 800050a:	b2db      	uxtb	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <getStatBoton+0x78>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4013      	ands	r3, r2
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <getStatBoton+0x44>
		return RISE;
 8000518:	2303      	movs	r3, #3
 800051a:	e011      	b.n	8000540 <getStatBoton+0x68>

	if (read_input & (1 << b) != 0)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2201      	movs	r2, #1
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	2b00      	cmp	r3, #0
 8000526:	bf14      	ite	ne
 8000528:	2301      	movne	r3, #1
 800052a:	2300      	moveq	r3, #0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <getStatBoton+0x7c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4013      	ands	r3, r2
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <getStatBoton+0x66>
		return HIGH_L;
 800053a:	2301      	movs	r3, #1
 800053c:	e000      	b.n	8000540 <getStatBoton+0x68>

	return LOW_L;
 800053e:	2300      	movs	r3, #0

} //end getStatBoton()
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	200000e8 	.word	0x200000e8
 8000550:	200000ec 	.word	0x200000ec
 8000554:	200000e4 	.word	0x200000e4

08000558 <setOutput>:

	return -1;
} //end getNumber()


void setOutput (T_POS_OUTPUT s, uint8_t val){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	460a      	mov	r2, r1
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	71bb      	strb	r3, [r7, #6]

	if (val != 0){
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00b      	beq.n	8000586 <setOutput+0x2e>
		write_output |= (uint16_t)(1 << s);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2201      	movs	r2, #1
 8000572:	fa02 f303 	lsl.w	r3, r2, r3
 8000576:	b29a      	uxth	r2, r3
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <setOutput+0x54>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	4313      	orrs	r3, r2
 800057e:	b29a      	uxth	r2, r3
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <setOutput+0x54>)
 8000582:	801a      	strh	r2, [r3, #0]
		return;
 8000584:	e00e      	b.n	80005a4 <setOutput+0x4c>
	}else{
		write_output &= ~( (uint16_t)(1 << s) );
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2201      	movs	r2, #1
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	b21b      	sxth	r3, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	b21a      	sxth	r2, r3
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <setOutput+0x54>)
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	b21b      	sxth	r3, r3
 800059a:	4013      	ands	r3, r2
 800059c:	b21b      	sxth	r3, r3
 800059e:	b29a      	uxth	r2, r3
 80005a0:	4b02      	ldr	r3, [pc, #8]	; (80005ac <setOutput+0x54>)
 80005a2:	801a      	strh	r2, [r3, #0]
	}

} //end setOutput()
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	200000dc 	.word	0x200000dc

080005b0 <toggleOutput>:

void toggleOutput (T_POS_OUTPUT s){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]

	write_output ^= (uint16_t)(1 << s);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2201      	movs	r2, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <toggleOutput+0x2c>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	4053      	eors	r3, r2
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <toggleOutput+0x2c>)
 80005ce:	801a      	strh	r2, [r3, #0]

} //end toggleOutput()
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000dc 	.word	0x200000dc

080005e0 <update_outputs>:


void update_outputs (void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

	spi_74HC595_Transmit( (uint8_t*)&write_output, 2); // 2 bytes.
 80005e4:	2102      	movs	r1, #2
 80005e6:	4802      	ldr	r0, [pc, #8]	; (80005f0 <update_outputs+0x10>)
 80005e8:	f7ff fe7a 	bl	80002e0 <spi_74HC595_Transmit>

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000dc 	.word	0x200000dc

080005f4 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e01f      	b.n	8000644 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000604:	79fa      	ldrb	r2, [r7, #7]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000610:	2b00      	cmp	r3, #0
 8000612:	d005      	beq.n	8000620 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000614:	2201      	movs	r2, #1
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	480e      	ldr	r0, [pc, #56]	; (8000654 <SendByteSPI+0x60>)
 800061a:	f001 fe8c 	bl	8002336 <HAL_GPIO_WritePin>
 800061e:	e004      	b.n	800062a <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8000620:	2200      	movs	r2, #0
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <SendByteSPI+0x60>)
 8000626:	f001 fe86 	bl	8002336 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800062a:	2200      	movs	r2, #0
 800062c:	2120      	movs	r1, #32
 800062e:	4809      	ldr	r0, [pc, #36]	; (8000654 <SendByteSPI+0x60>)
 8000630:	f001 fe81 	bl	8002336 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000634:	2201      	movs	r2, #1
 8000636:	2120      	movs	r1, #32
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <SendByteSPI+0x60>)
 800063a:	f001 fe7c 	bl	8002336 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2b07      	cmp	r3, #7
 8000648:	dddc      	ble.n	8000604 <SendByteSPI+0x10>

	}
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010800 	.word	0x40010800

08000658 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000662:	2201      	movs	r2, #1
 8000664:	2140      	movs	r1, #64	; 0x40
 8000666:	480f      	ldr	r0, [pc, #60]	; (80006a4 <ST7920_SendCmd+0x4c>)
 8000668:	f001 fe65 	bl	8002336 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 800066c:	20f8      	movs	r0, #248	; 0xf8
 800066e:	f7ff ffc1 	bl	80005f4 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f023 030f 	bic.w	r3, r3, #15
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffba 	bl	80005f4 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ffb4 	bl	80005f4 <SendByteSPI>
	delay_us(50);
 800068c:	2032      	movs	r0, #50	; 0x32
 800068e:	f000 f973 	bl	8000978 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000692:	2200      	movs	r2, #0
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	4803      	ldr	r0, [pc, #12]	; (80006a4 <ST7920_SendCmd+0x4c>)
 8000698:	f001 fe4d 	bl	8002336 <HAL_GPIO_WritePin>

}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40010800 	.word	0x40010800

080006a8 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80006b2:	2201      	movs	r2, #1
 80006b4:	2140      	movs	r1, #64	; 0x40
 80006b6:	480f      	ldr	r0, [pc, #60]	; (80006f4 <ST7920_SendData+0x4c>)
 80006b8:	f001 fe3d 	bl	8002336 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 80006bc:	20fa      	movs	r0, #250	; 0xfa
 80006be:	f7ff ff99 	bl	80005f4 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff92 	bl	80005f4 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff8c 	bl	80005f4 <SendByteSPI>
	delay_us(50);
 80006dc:	2032      	movs	r0, #50	; 0x32
 80006de:	f000 f94b 	bl	8000978 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80006e2:	2200      	movs	r2, #0
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <ST7920_SendData+0x4c>)
 80006e8:	f001 fe25 	bl	8002336 <HAL_GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40010800 	.word	0x40010800

080006f8 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
    switch (row)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b03      	cmp	r3, #3
 8000708:	d81e      	bhi.n	8000748 <ST7920_SendString+0x50>
 800070a:	a201      	add	r2, pc, #4	; (adr r2, 8000710 <ST7920_SendString+0x18>)
 800070c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000710:	08000721 	.word	0x08000721
 8000714:	0800072b 	.word	0x0800072b
 8000718:	08000735 	.word	0x08000735
 800071c:	0800073f 	.word	0x0800073f
    {
        case 0:
            col |= 0x80;
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000726:	60bb      	str	r3, [r7, #8]
            break;
 8000728:	e013      	b.n	8000752 <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000730:	60bb      	str	r3, [r7, #8]
            break;
 8000732:	e00e      	b.n	8000752 <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800073a:	60bb      	str	r3, [r7, #8]
            break;
 800073c:	e009      	b.n	8000752 <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 8000744:	60bb      	str	r3, [r7, #8]
            break;
 8000746:	e004      	b.n	8000752 <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074e:	60bb      	str	r3, [r7, #8]
            break;
 8000750:	bf00      	nop
    }

    ST7920_SendCmd(col);
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff7e 	bl	8000658 <ST7920_SendCmd>

    while (*string)
 800075c:	e006      	b.n	800076c <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff9e 	bl	80006a8 <ST7920_SendData>
    while (*string)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1f4      	bne.n	800075e <ST7920_SendString+0x66>
    	}
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <ST7920_DrawBitmap>:
		Graphic_Check = 0;  // update the variable
	}
}

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 8000784:	2300      	movs	r3, #0
 8000786:	73bb      	strb	r3, [r7, #14]
 8000788:	e06a      	b.n	8000860 <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	2b1f      	cmp	r3, #31
 800078e:	d830      	bhi.n	80007f2 <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e029      	b.n	80007ea <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 8000796:	7bbb      	ldrb	r3, [r7, #14]
 8000798:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff5a 	bl	8000658 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff53 	bl	8000658 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	7bbb      	ldrb	r3, [r7, #14]
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	4413      	add	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	461a      	mov	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff6f 	bl	80006a8 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	4413      	add	r3, r2
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff62 	bl	80006a8 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	3301      	adds	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	2b07      	cmp	r3, #7
 80007ee:	d9d2      	bls.n	8000796 <ST7920_DrawBitmap+0x1a>
 80007f0:	e033      	b.n	800085a <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
 80007f6:	e02d      	b.n	8000854 <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	3b20      	subs	r3, #32
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000804:	b25b      	sxtb	r3, r3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff25 	bl	8000658 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff1e 	bl	8000658 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 800081c:	7bfa      	ldrb	r2, [r7, #15]
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff3a 	bl	80006a8 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4413      	add	r3, r2
 8000840:	461a      	mov	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff2d 	bl	80006a8 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	3301      	adds	r3, #1
 8000852:	73fb      	strb	r3, [r7, #15]
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	2b07      	cmp	r3, #7
 8000858:	d9ce      	bls.n	80007f8 <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	3301      	adds	r3, #1
 800085e:	73bb      	strb	r3, [r7, #14]
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	2b3f      	cmp	r3, #63	; 0x3f
 8000864:	d991      	bls.n	800078a <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <ST7920_Update+0x10>)
 8000876:	f7ff ff81 	bl	800077c <ST7920_DrawBitmap>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000114 	.word	0x20000114

08000884 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_ADC1_Init+0x74>)
 8000896:	4a19      	ldr	r2, [pc, #100]	; (80008fc <MX_ADC1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_ADC1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_ADC1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_ADC1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_ADC1_Init+0x74>)
 80008ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_ADC1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_ADC1_Init+0x74>)
 80008bc:	2201      	movs	r2, #1
 80008be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_ADC1_Init+0x74>)
 80008c2:	f001 f8af 	bl	8001a24 <HAL_ADC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008cc:	f000 fa78 	bl	8000dc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_ADC1_Init+0x74>)
 80008e2:	f001 f977 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80008ec:	f000 fa68 	bl	8000dc0 <Error_Handler>
  }

}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000518 	.word	0x20000518
 80008fc:	40012400 	.word	0x40012400

08000900 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a14      	ldr	r2, [pc, #80]	; (800096c <HAL_ADC_MspInit+0x6c>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d121      	bne.n	8000964 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_ADC_MspInit+0x70>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a12      	ldr	r2, [pc, #72]	; (8000970 <HAL_ADC_MspInit+0x70>)
 8000926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_ADC_MspInit+0x70>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_ADC_MspInit+0x70>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <HAL_ADC_MspInit+0x70>)
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_ADC_MspInit+0x70>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000950:	2301      	movs	r3, #1
 8000952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000954:	2303      	movs	r3, #3
 8000956:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_ADC_MspInit+0x74>)
 8000960:	f001 fb78 	bl	8002054 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40012400 	.word	0x40012400
 8000970:	40021000 	.word	0x40021000
 8000974:	40010800 	.word	0x40010800

08000978 <delay_us>:
{
	HAL_TIM_Base_Start(&htim3);  // change this according to ur setup
}

void delay_us (uint16_t delay)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);  // reset the counter
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <delay_us+0x2c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<delay);  // wait for the delay to complete
 800098a:	bf00      	nop
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <delay_us+0x2c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	429a      	cmp	r2, r3
 8000996:	d3f9      	bcc.n	800098c <delay_us+0x14>
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200005c0 	.word	0x200005c0

080009a8 <set_pantalla>:
#include "display_tablero.h"
#include "ST7920_SERIAL.h"

uint8_t flag_pantalla = 0;

void set_pantalla (char* texto){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	ST7920_SendString(0, 0, texto);
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	2100      	movs	r1, #0
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fe9f 	bl	80006f8 <ST7920_SendString>
	flag_pantalla = 1;
 80009ba:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <set_pantalla+0x20>)
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200000a0 	.word	0x200000a0

080009cc <pantallaUpdate>:

void pantallaLista(void){
	flag_pantalla = 1;
}

void pantallaUpdate(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	if (flag_pantalla != 0){
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <pantallaUpdate+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d004      	beq.n	80009e2 <pantallaUpdate+0x16>
		ST7920_Update();
 80009d8:	f7ff ff4a 	bl	8000870 <ST7920_Update>
		flag_pantalla = 0;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <pantallaUpdate+0x1c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
	}
} //end pantallaUpdate()
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000a0 	.word	0x200000a0

080009ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a33      	ldr	r2, [pc, #204]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a18:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a27      	ldr	r2, [pc, #156]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_GPIO_Init+0xe8>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE1_Pin
 8000a60:	2200      	movs	r2, #0
 8000a62:	f248 71e0 	movw	r1, #34784	; 0x87e0
 8000a66:	481c      	ldr	r0, [pc, #112]	; (8000ad8 <MX_GPIO_Init+0xec>)
 8000a68:	f001 fc65 	bl	8002336 <HAL_GPIO_WritePin>
                          |OUT_CE2_Pin|OUT_ST_Pin|OUT_fila3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_GLCD_RST_Pin|OUT_PL_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f241 0139 	movw	r1, #4153	; 0x1039
 8000a72:	481a      	ldr	r0, [pc, #104]	; (8000adc <MX_GPIO_Init+0xf0>)
 8000a74:	f001 fc5f 	bl	8002336 <HAL_GPIO_WritePin>
                          |OUT_fila0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_nivelAgua_Pin;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN_nivelAgua_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <MX_GPIO_Init+0xec>)
 8000a8c:	f001 fae2 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE1_Pin
 8000a90:	f248 73e0 	movw	r3, #34784	; 0x87e0
 8000a94:	613b      	str	r3, [r7, #16]
                          |OUT_CE2_Pin|OUT_ST_Pin|OUT_fila3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <MX_GPIO_Init+0xec>)
 8000aaa:	f001 fad3 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_GLCD_RST_Pin|OUT_PL_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 8000aae:	f241 0339 	movw	r3, #4153	; 0x1039
 8000ab2:	613b      	str	r3, [r7, #16]
                          |OUT_fila0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_GPIO_Init+0xf0>)
 8000ac8:	f001 fac4 	bl	8002054 <HAL_GPIO_Init>

}
 8000acc:	bf00      	nop
 8000ace:	3720      	adds	r7, #32
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010800 	.word	0x40010800
 8000adc:	40010c00 	.word	0x40010c00

08000ae0 <update_leds>:

uint8_t demora_rapida = 19; //equivale a 200 ms: (valor + 1)*10ms
uint8_t demora_lenta = 49; //equivale a 500 ms: (valor + 1)*10ms


void update_leds (void){ //LOGICA NEGATIVA
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

	for (uint8_t i=0; i < 6; i++){
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	e03c      	b.n	8000b66 <update_leds+0x86>

		switch (status_led[i]) {
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <update_leds+0xcc>)
 8000af0:	5cd3      	ldrb	r3, [r2, r3]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d82f      	bhi.n	8000b56 <update_leds+0x76>
 8000af6:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <update_leds+0x1c>)
 8000af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afc:	08000b0d 	.word	0x08000b0d
 8000b00:	08000b1d 	.word	0x08000b1d
 8000b04:	08000b2b 	.word	0x08000b2b
 8000b08:	08000b41 	.word	0x08000b41
			case APAGADO:
				setOutput(OUT_led_tomas + i, 1); //APAGA LED
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	3306      	adds	r3, #6
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fd1f 	bl	8000558 <setOutput>
			break;
 8000b1a:	e021      	b.n	8000b60 <update_leds+0x80>
			case PRENDIDO:
				setOutput(OUT_led_tomas + i, 0); //PRENDE LED
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	3306      	adds	r3, #6
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fd17 	bl	8000558 <setOutput>
			case TITILA_LENTO:
				if (!demora_lenta){
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <update_leds+0xd0>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d113      	bne.n	8000b5a <update_leds+0x7a>
					toggleOutput (OUT_led_tomas + i);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	3306      	adds	r3, #6
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fd39 	bl	80005b0 <toggleOutput>
					break;
 8000b3e:	e00f      	b.n	8000b60 <update_leds+0x80>
				}
			break;
			case TITILA_RAPIDO:
				if (!demora_rapida){
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <update_leds+0xd4>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10a      	bne.n	8000b5e <update_leds+0x7e>
					toggleOutput (OUT_led_tomas + i);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	3306      	adds	r3, #6
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fd2e 	bl	80005b0 <toggleOutput>
					break;
 8000b54:	e004      	b.n	8000b60 <update_leds+0x80>
				}
			break;
			default:
			break;
 8000b56:	bf00      	nop
 8000b58:	e002      	b.n	8000b60 <update_leds+0x80>
			break;
 8000b5a:	bf00      	nop
 8000b5c:	e000      	b.n	8000b60 <update_leds+0x80>
			break;
 8000b5e:	bf00      	nop
	for (uint8_t i=0; i < 6; i++){
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	3301      	adds	r3, #1
 8000b64:	71fb      	strb	r3, [r7, #7]
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	d9bf      	bls.n	8000aec <update_leds+0xc>
		} //end switch status_led

	} //end for uint8_t i...

	if (demora_lenta != 0){
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <update_leds+0xd0>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <update_leds+0xa2>
		demora_lenta--;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <update_leds+0xd0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <update_leds+0xd0>)
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	e002      	b.n	8000b88 <update_leds+0xa8>
	}else{
		demora_lenta = 49;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <update_leds+0xd0>)
 8000b84:	2231      	movs	r2, #49	; 0x31
 8000b86:	701a      	strb	r2, [r3, #0]
	}

	if (demora_rapida != 0){
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <update_leds+0xd4>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <update_leds+0xbe>
		demora_rapida--;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <update_leds+0xd4>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <update_leds+0xd4>)
 8000b9a:	701a      	strb	r2, [r3, #0]
	}else{
		demora_rapida = 19;
	}

} //end update_leds()
 8000b9c:	e002      	b.n	8000ba4 <update_leds+0xc4>
		demora_rapida = 19;
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <update_leds+0xd4>)
 8000ba0:	2213      	movs	r2, #19
 8000ba2:	701a      	strb	r2, [r3, #0]
} //end update_leds()
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000a4 	.word	0x200000a4
 8000bb0:	20000003 	.word	0x20000003
 8000bb4:	20000002 	.word	0x20000002

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f000 fecf 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f87f 	bl	8000cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f7ff ff11 	bl	80009ec <MX_GPIO_Init>
  MX_RTC_Init();
 8000bca:	f000 fb85 	bl	80012d8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000bce:	f000 fe1d 	bl	800180c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000bd2:	f000 fd49 	bl	8001668 <MX_TIM2_Init>
  MX_SPI2_Init();
 8000bd6:	f000 fc17 	bl	8001408 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000bda:	f7ff fe53 	bl	8000884 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000bde:	f000 fd8f 	bl	8001700 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  spi_74HC165_init(&hspi2, OUT_PL_GPIO_Port, OUT_PL_Pin, OUT_CE1_GPIO_Port, OUT_CE1_Pin, OUT_CE2_GPIO_Port, OUT_CE2_Pin);
 8000be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be6:	9302      	str	r3, [sp, #8]
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <main+0xe0>)
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	4b29      	ldr	r3, [pc, #164]	; (8000c98 <main+0xe0>)
 8000bf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf8:	4928      	ldr	r1, [pc, #160]	; (8000c9c <main+0xe4>)
 8000bfa:	4829      	ldr	r0, [pc, #164]	; (8000ca0 <main+0xe8>)
 8000bfc:	f7ff faa6 	bl	800014c <spi_74HC165_init>
  spi_74HC595_init(&hspi2, OUT_ST_GPIO_Port, OUT_ST_Pin);
 8000c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c04:	4924      	ldr	r1, [pc, #144]	; (8000c98 <main+0xe0>)
 8000c06:	4826      	ldr	r0, [pc, #152]	; (8000ca0 <main+0xe8>)
 8000c08:	f7ff fb48 	bl	800029c <spi_74HC595_init>

  HAL_TIM_Base_Start_IT(&htim2); //ticks eery 10 ms.
 8000c0c:	4825      	ldr	r0, [pc, #148]	; (8000ca4 <main+0xec>)
 8000c0e:	f003 fd5e 	bl	80046ce <HAL_TIM_Base_Start_IT>


  start_menu();
 8000c12:	f000 f8db 	bl	8000dcc <start_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_tick){ //ticks every 10 ms.
 8000c16:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <main+0xf0>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d039      	beq.n	8000c92 <main+0xda>

		  //segun el proyecto "MAQUINA_MD":
		  HAL_RTC_GetTime(&hrtc, &hora, RTC_FORMAT_BIN);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4922      	ldr	r1, [pc, #136]	; (8000cac <main+0xf4>)
 8000c22:	4823      	ldr	r0, [pc, #140]	; (8000cb0 <main+0xf8>)
 8000c24:	f002 fa68 	bl	80030f8 <HAL_RTC_GetTime>
		  //HAL_RTC_GetTime(&hrtc, &aux_tiempo, RTC_FORMAT_BIN);
		  HAL_RTC_GetDate(&hrtc, &aux_fecha, RTC_FORMAT_BIN);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4922      	ldr	r1, [pc, #136]	; (8000cb4 <main+0xfc>)
 8000c2c:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <main+0xf8>)
 8000c2e:	f002 fbf1 	bl	8003414 <HAL_RTC_GetDate>

		  update_teclas();
 8000c32:	f7ff fc33 	bl	800049c <update_teclas>

		  if (flag_lecturas != 0){ //para demorar las lecturas de teclas cada 30 ms.
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <main+0x100>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d006      	beq.n	8000c4c <main+0x94>
			  flag_lecturas--;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <main+0x100>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <main+0x100>)
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e004      	b.n	8000c56 <main+0x9e>
		  }else{
			  lecturaTeclas();
 8000c4c:	f7ff fbe4 	bl	8000418 <lecturaTeclas>

			  flag_lecturas = 2;
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <main+0x100>)
 8000c52:	2202      	movs	r2, #2
 8000c54:	701a      	strb	r2, [r3, #0]
		  }

		  if (flag_salidas != 0){ //para demorar la escritura de las salidas cada 100 ms.
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <main+0x104>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d006      	beq.n	8000c6c <main+0xb4>
			  flag_salidas--;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <main+0x104>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <main+0x104>)
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e006      	b.n	8000c7a <main+0xc2>
		  }else{
			  update_leds();
 8000c6c:	f7ff ff38 	bl	8000ae0 <update_leds>
			  update_outputs();
 8000c70:	f7ff fcb6 	bl	80005e0 <update_outputs>

			  flag_salidas = 9;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <main+0x104>)
 8000c76:	2209      	movs	r2, #9
 8000c78:	701a      	strb	r2, [r3, #0]
		  }

		  if (refresh_pantalla != 0){ //refresca cada 300 ms
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <main+0x108>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d004      	beq.n	8000c8c <main+0xd4>
			  pantallaUpdate();
 8000c82:	f7ff fea3 	bl	80009cc <pantallaUpdate>
			  refresh_pantalla = 29;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <main+0x108>)
 8000c88:	221d      	movs	r2, #29
 8000c8a:	701a      	strb	r2, [r3, #0]
		  }


		  flag_tick = 0;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <main+0xf0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
	  }//end if flag_tick

	  check_menu();
 8000c92:	f000 f8a9 	bl	8000de8 <check_menu>
	  if (flag_tick){ //ticks every 10 ms.
 8000c96:	e7be      	b.n	8000c16 <main+0x5e>
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	40010c00 	.word	0x40010c00
 8000ca0:	20000568 	.word	0x20000568
 8000ca4:	20000600 	.word	0x20000600
 8000ca8:	200000b0 	.word	0x200000b0
 8000cac:	20000548 	.word	0x20000548
 8000cb0:	20000554 	.word	0x20000554
 8000cb4:	200000ac 	.word	0x200000ac
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000001 	.word	0x20000001
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b094      	sub	sp, #80	; 0x50
 8000cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cce:	2228      	movs	r2, #40	; 0x28
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 f99c 	bl	8005010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000cf4:	2309      	movs	r3, #9
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d02:	2301      	movs	r3, #1
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d06:	2301      	movs	r3, #1
 8000d08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d14:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fb2e 	bl	8002380 <HAL_RCC_OscConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d2a:	f000 f849 	bl	8000dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2e:	230f      	movs	r3, #15
 8000d30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fd98 	bl	8002880 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d56:	f000 f833 	bl	8000dc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d62:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d68:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 ff23 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d78:	f000 f822 	bl	8000dc0 <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3750      	adds	r7, #80	; 0x50
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d94:	d102      	bne.n	8000d9c <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tick = 1;
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	200000b0 	.word	0x200000b0

08000dac <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	__NOP();
 8000db4:	bf00      	nop
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <start_menu>:
T_STATUS_LUCESEXT status_menuLucesExt = LIMITE_TIEMPO_LUCESEXT;

/////////////////////////////////////////
//         FUNCIONES PUBLICAS          //
/////////////////////////////////////////
void start_menu (void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	init_menuPrincipal();
 8000dd0:	f000 f814 	bl	8000dfc <init_menuPrincipal>
	menuActual = &menu[MENU_PRINCIPAL];
 8000dd4:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <start_menu+0x14>)
 8000dd6:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <start_menu+0x18>)
 8000dd8:	601a      	str	r2, [r3, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000054c 	.word	0x2000054c
 8000de4:	20000008 	.word	0x20000008

08000de8 <check_menu>:

void check_menu (void){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	menuActual->accion();
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <check_menu+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	4798      	blx	r3
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2000054c 	.word	0x2000054c

08000dfc <init_menuPrincipal>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

void init_menuPrincipal (void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	set_pantalla("Estoy en el menu principal");
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <init_menuPrincipal+0x10>)
 8000e02:	f7ff fdd1 	bl	80009a8 <set_pantalla>
//	menuActual = &menu[MENU_PRINCIPAL];
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	08005038 	.word	0x08005038

08000e10 <init_llenado>:

void init_llenado (void){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <init_llenado+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d103      	bne.n	8000e24 <init_llenado+0x14>
		case PREGUNTA_SENSOR:
			set_pantalla("¿Sensor conectado?");
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <init_llenado+0x24>)
 8000e1e:	f7ff fdc3 	bl	80009a8 <set_pantalla>
		break;
 8000e22:	e003      	b.n	8000e2c <init_llenado+0x1c>
		default:
			set_pantalla("Llenando. ¿terminar?");
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <init_llenado+0x28>)
 8000e26:	f7ff fdbf 	bl	80009a8 <set_pantalla>
			//status_menuLlenado = 90;
		break;
 8000e2a:	bf00      	nop
	} //end switch status_menuTablero
} //end init_llenado()
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200000b1 	.word	0x200000b1
 8000e34:	08005054 	.word	0x08005054
 8000e38:	08005068 	.word	0x08005068

08000e3c <init_skimmer>:

void init_skimmer (void){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	set_pantalla("COMPRUEBE LE ESTADO DE LA BOMBA");
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <init_skimmer+0x10>)
 8000e42:	f7ff fdb1 	bl	80009a8 <set_pantalla>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	08005080 	.word	0x08005080

08000e50 <init_hidro>:

void init_hidro (void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	set_pantalla("LIMITE DE TIEMPO");
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <init_hidro+0x10>)
 8000e56:	f7ff fda7 	bl	80009a8 <set_pantalla>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	080050a0 	.word	0x080050a0

08000e64 <init_lucesExt>:

void init_lucesExt (void){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	set_pantalla("LIMITE DE TIEMPO");
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <init_lucesExt+0x10>)
 8000e6a:	f7ff fd9d 	bl	80009a8 <set_pantalla>
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	080050a0 	.word	0x080050a0

08000e78 <init_lucesLed>:

void init_lucesLed (void){
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <init_config>:

void init_config (void){
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <acc_menuPrincipal>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

void acc_menuPrincipal (void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

	if (getStatBoton(IN_napa)==FALL){
 8000e94:	2013      	movs	r0, #19
 8000e96:	f7ff fb1f 	bl	80004d8 <getStatBoton>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d10b      	bne.n	8000eb8 <acc_menuPrincipal+0x28>
		menuActual = &menu[MENU_LLENADO];
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <acc_menuPrincipal+0x50>)
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <acc_menuPrincipal+0x54>)
 8000ea4:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <acc_menuPrincipal+0x50>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <acc_menuPrincipal+0x58>)
 8000eac:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <acc_menuPrincipal+0x50>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	4798      	blx	r3
		return;
 8000eb6:	e011      	b.n	8000edc <acc_menuPrincipal+0x4c>
	}

	if (getStatBoton(IN_jet)==FALL){
 8000eb8:	2014      	movs	r0, #20
 8000eba:	f7ff fb0d 	bl	80004d8 <getStatBoton>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d10b      	bne.n	8000edc <acc_menuPrincipal+0x4c>
		menuActual = &menu[MENU_HIDRO];
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <acc_menuPrincipal+0x50>)
 8000ec6:	4a09      	ldr	r2, [pc, #36]	; (8000eec <acc_menuPrincipal+0x5c>)
 8000ec8:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <acc_menuPrincipal+0x50>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <acc_menuPrincipal+0x58>)
 8000ed0:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8000ed2:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <acc_menuPrincipal+0x50>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	4798      	blx	r3
		return;
 8000eda:	bf00      	nop
	}
}
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000054c 	.word	0x2000054c
 8000ee4:	20000018 	.word	0x20000018
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000038 	.word	0x20000038

08000ef0 <acc_llenado>:

void acc_llenado (void){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 8000ef4:	4b49      	ldr	r3, [pc, #292]	; (800101c <acc_llenado+0x12c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	f200 8086 	bhi.w	800100a <acc_llenado+0x11a>
 8000efe:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <acc_llenado+0x14>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f19 	.word	0x08000f19
 8000f08:	08000f4d 	.word	0x08000f4d
 8000f0c:	08000f83 	.word	0x08000f83
 8000f10:	08000fb7 	.word	0x08000fb7
 8000f14:	08000fd3 	.word	0x08000fd3
		case PREGUNTA_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8000f18:	200e      	movs	r0, #14
 8000f1a:	f7ff fadd 	bl	80004d8 <getStatBoton>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d106      	bne.n	8000f32 <acc_llenado+0x42>
				set_pantalla("COMPRUEBE EL SENSOR Y PULSE EL BOTON...");
 8000f24:	483e      	ldr	r0, [pc, #248]	; (8001020 <acc_llenado+0x130>)
 8000f26:	f7ff fd3f 	bl	80009a8 <set_pantalla>
				status_menuLlenado = COMPRUEBE_SENSOR;
 8000f2a:	4b3c      	ldr	r3, [pc, #240]	; (800101c <acc_llenado+0x12c>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	701a      	strb	r2, [r3, #0]
				break;
 8000f30:	e072      	b.n	8001018 <acc_llenado+0x128>
			}

			if (getStatBoton(IN_AST) == FALL) { //niego
 8000f32:	200c      	movs	r0, #12
 8000f34:	f7ff fad0 	bl	80004d8 <getStatBoton>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d167      	bne.n	800100e <acc_llenado+0x11e>
				set_pantalla("CONECTE EL SENSOR");
 8000f3e:	4839      	ldr	r0, [pc, #228]	; (8001024 <acc_llenado+0x134>)
 8000f40:	f7ff fd32 	bl	80009a8 <set_pantalla>
				status_menuLlenado = CONECTE_SENSOR;
 8000f44:	4b35      	ldr	r3, [pc, #212]	; (800101c <acc_llenado+0x12c>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
				break;
 8000f4a:	e065      	b.n	8001018 <acc_llenado+0x128>
			}

		break;
		case CONECTE_SENSOR:

			if (getStatBoton(IN_AST) == FALL) { //volver
 8000f4c:	200c      	movs	r0, #12
 8000f4e:	f7ff fac3 	bl	80004d8 <getStatBoton>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d107      	bne.n	8000f68 <acc_llenado+0x78>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8000f58:	4b33      	ldr	r3, [pc, #204]	; (8001028 <acc_llenado+0x138>)
 8000f5a:	4a34      	ldr	r2, [pc, #208]	; (800102c <acc_llenado+0x13c>)
 8000f5c:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8000f5e:	4b32      	ldr	r3, [pc, #200]	; (8001028 <acc_llenado+0x138>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	4798      	blx	r3
				break;
 8000f66:	e057      	b.n	8001018 <acc_llenado+0x128>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8000f68:	200e      	movs	r0, #14
 8000f6a:	f7ff fab5 	bl	80004d8 <getStatBoton>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d14e      	bne.n	8001012 <acc_llenado+0x122>
				set_pantalla("¿Sensor conectado?");
 8000f74:	482e      	ldr	r0, [pc, #184]	; (8001030 <acc_llenado+0x140>)
 8000f76:	f7ff fd17 	bl	80009a8 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <acc_llenado+0x12c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
				break;
 8000f80:	e04a      	b.n	8001018 <acc_llenado+0x128>
			}
		break;
		case COMPRUEBE_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8000f82:	200e      	movs	r0, #14
 8000f84:	f7ff faa8 	bl	80004d8 <getStatBoton>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d106      	bne.n	8000f9c <acc_llenado+0xac>
				set_pantalla("llenando...");
 8000f8e:	4829      	ldr	r0, [pc, #164]	; (8001034 <acc_llenado+0x144>)
 8000f90:	f7ff fd0a 	bl	80009a8 <set_pantalla>
				status_menuLlenado = LLENANDO;
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <acc_llenado+0x12c>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	701a      	strb	r2, [r3, #0]
				//funcion de llenado de pileta (biblio de funciones automaticas)
				break;
 8000f9a:	e03d      	b.n	8001018 <acc_llenado+0x128>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8000f9c:	200c      	movs	r0, #12
 8000f9e:	f7ff fa9b 	bl	80004d8 <getStatBoton>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d136      	bne.n	8001016 <acc_llenado+0x126>
				set_pantalla("¿Sensor conectado?");
 8000fa8:	4821      	ldr	r0, [pc, #132]	; (8001030 <acc_llenado+0x140>)
 8000faa:	f7ff fcfd 	bl	80009a8 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <acc_llenado+0x12c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
				break;
 8000fb4:	e030      	b.n	8001018 <acc_llenado+0x128>
			}

		break;
		case LLENANDO:

			if (!HAL_GPIO_ReadPin(IN_nivelAgua_GPIO_Port, IN_nivelAgua_Pin)) { //LOGICA NEGATIVA
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	481f      	ldr	r0, [pc, #124]	; (8001038 <acc_llenado+0x148>)
 8000fba:	f001 f9a5 	bl	8002308 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d106      	bne.n	8000fd2 <acc_llenado+0xe2>
				set_pantalla("pileta llena.");
 8000fc4:	481d      	ldr	r0, [pc, #116]	; (800103c <acc_llenado+0x14c>)
 8000fc6:	f7ff fcef 	bl	80009a8 <set_pantalla>
				status_menuLlenado = PILETA_LLENA;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <acc_llenado+0x12c>)
 8000fcc:	2204      	movs	r2, #4
 8000fce:	701a      	strb	r2, [r3, #0]
				break;
 8000fd0:	e022      	b.n	8001018 <acc_llenado+0x128>
			}
		case PILETA_LLENA:
			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8000fd2:	200e      	movs	r0, #14
 8000fd4:	f7ff fa80 	bl	80004d8 <getStatBoton>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d107      	bne.n	8000fee <acc_llenado+0xfe>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <acc_llenado+0x138>)
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <acc_llenado+0x13c>)
 8000fe2:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <acc_llenado+0x138>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	4798      	blx	r3
				break;
 8000fec:	e014      	b.n	8001018 <acc_llenado+0x128>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f7ff fa72 	bl	80004d8 <getStatBoton>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d107      	bne.n	800100a <acc_llenado+0x11a>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <acc_llenado+0x138>)
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	; (800102c <acc_llenado+0x13c>)
 8000ffe:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <acc_llenado+0x138>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	4798      	blx	r3
				break;
 8001008:	e006      	b.n	8001018 <acc_llenado+0x128>
			}

		default:
		break;
 800100a:	bf00      	nop
 800100c:	e004      	b.n	8001018 <acc_llenado+0x128>
		break;
 800100e:	bf00      	nop
 8001010:	e002      	b.n	8001018 <acc_llenado+0x128>
		break;
 8001012:	bf00      	nop
 8001014:	e000      	b.n	8001018 <acc_llenado+0x128>
		break;
 8001016:	bf00      	nop
	} //end switch status_menuLlenado

} //end acc_llenado ()
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200000b1 	.word	0x200000b1
 8001020:	080050b4 	.word	0x080050b4
 8001024:	080050dc 	.word	0x080050dc
 8001028:	2000054c 	.word	0x2000054c
 800102c:	20000008 	.word	0x20000008
 8001030:	08005054 	.word	0x08005054
 8001034:	080050f0 	.word	0x080050f0
 8001038:	40010800 	.word	0x40010800
 800103c:	080050fc 	.word	0x080050fc

08001040 <acc_skimmer>:

void acc_skimmer (void){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	switch (status_menuSkimmer) {
 8001044:	4b69      	ldr	r3, [pc, #420]	; (80011ec <acc_skimmer+0x1ac>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b08      	cmp	r3, #8
 800104a:	f200 80cd 	bhi.w	80011e8 <acc_skimmer+0x1a8>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <acc_skimmer+0x14>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	08001079 	.word	0x08001079
 8001058:	080010af 	.word	0x080010af
 800105c:	080010e9 	.word	0x080010e9
 8001060:	080011d3 	.word	0x080011d3
 8001064:	080011d3 	.word	0x080011d3
 8001068:	08001137 	.word	0x08001137
 800106c:	08001185 	.word	0x08001185
 8001070:	080011d3 	.word	0x080011d3
 8001074:	080011d3 	.word	0x080011d3
		case COMPRUEBE_BOMBA:
			if (getStatBoton(IN_AST) == FALL) {
 8001078:	200c      	movs	r0, #12
 800107a:	f7ff fa2d 	bl	80004d8 <getStatBoton>
 800107e:	4603      	mov	r3, r0
 8001080:	2b02      	cmp	r3, #2
 8001082:	d106      	bne.n	8001092 <acc_skimmer+0x52>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001084:	4b5a      	ldr	r3, [pc, #360]	; (80011f0 <acc_skimmer+0x1b0>)
 8001086:	4a5b      	ldr	r2, [pc, #364]	; (80011f4 <acc_skimmer+0x1b4>)
 8001088:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 800108a:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <acc_skimmer+0x1b0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4798      	blx	r3
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001092:	200e      	movs	r0, #14
 8001094:	f7ff fa20 	bl	80004d8 <getStatBoton>
 8001098:	4603      	mov	r3, r0
 800109a:	2b02      	cmp	r3, #2
 800109c:	f040 809b 	bne.w	80011d6 <acc_skimmer+0x196>
				set_pantalla("elija freecuecia u horario");
 80010a0:	4855      	ldr	r0, [pc, #340]	; (80011f8 <acc_skimmer+0x1b8>)
 80010a2:	f7ff fc81 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 80010a6:	4b51      	ldr	r3, [pc, #324]	; (80011ec <acc_skimmer+0x1ac>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
				break;
 80010ac:	e09c      	b.n	80011e8 <acc_skimmer+0x1a8>
			}
		break;
		case OPCIONES_SKIMMER:
			if (getStatBoton(IN_AST) == FALL) {
 80010ae:	200c      	movs	r0, #12
 80010b0:	f7ff fa12 	bl	80004d8 <getStatBoton>
				//vuelve al menu principal
			}

			if (getStatBoton(IN_1) == FALL) {
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff fa0f 	bl	80004d8 <getStatBoton>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d106      	bne.n	80010ce <acc_skimmer+0x8e>
				set_pantalla("elijo timepo ON o timepo OFF");
 80010c0:	484e      	ldr	r0, [pc, #312]	; (80011fc <acc_skimmer+0x1bc>)
 80010c2:	f7ff fc71 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
 80010c6:	4b49      	ldr	r3, [pc, #292]	; (80011ec <acc_skimmer+0x1ac>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	701a      	strb	r2, [r3, #0]
				break;
 80010cc:	e08c      	b.n	80011e8 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff fa02 	bl	80004d8 <getStatBoton>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d17f      	bne.n	80011da <acc_skimmer+0x19a>
				set_pantalla("elijo programa 1 o programa 2");
 80010da:	4849      	ldr	r0, [pc, #292]	; (8001200 <acc_skimmer+0x1c0>)
 80010dc:	f7ff fc64 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 80010e0:	4b42      	ldr	r3, [pc, #264]	; (80011ec <acc_skimmer+0x1ac>)
 80010e2:	2205      	movs	r2, #5
 80010e4:	701a      	strb	r2, [r3, #0]
				break;
 80010e6:	e07f      	b.n	80011e8 <acc_skimmer+0x1a8>
			}
		break;
		case ELIJE_FRECUENCIA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff f9f5 	bl	80004d8 <getStatBoton>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d106      	bne.n	8001102 <acc_skimmer+0xc2>
				set_pantalla("defina el tiempo de duracion ON:");
 80010f4:	4843      	ldr	r0, [pc, #268]	; (8001204 <acc_skimmer+0x1c4>)
 80010f6:	f7ff fc57 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = PERIODO_ON_SKIMMER;
 80010fa:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <acc_skimmer+0x1ac>)
 80010fc:	2203      	movs	r2, #3
 80010fe:	701a      	strb	r2, [r3, #0]
				break;
 8001100:	e072      	b.n	80011e8 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff f9e8 	bl	80004d8 <getStatBoton>
 8001108:	4603      	mov	r3, r0
 800110a:	2b02      	cmp	r3, #2
 800110c:	d106      	bne.n	800111c <acc_skimmer+0xdc>
				set_pantalla("defina el tiempo de duracion OFF:");
 800110e:	483e      	ldr	r0, [pc, #248]	; (8001208 <acc_skimmer+0x1c8>)
 8001110:	f7ff fc4a 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = PERIODO_OFF_SKIMMER;
 8001114:	4b35      	ldr	r3, [pc, #212]	; (80011ec <acc_skimmer+0x1ac>)
 8001116:	2204      	movs	r2, #4
 8001118:	701a      	strb	r2, [r3, #0]
				break;
 800111a:	e065      	b.n	80011e8 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 800111c:	200c      	movs	r0, #12
 800111e:	f7ff f9db 	bl	80004d8 <getStatBoton>
 8001122:	4603      	mov	r3, r0
 8001124:	2b02      	cmp	r3, #2
 8001126:	d15a      	bne.n	80011de <acc_skimmer+0x19e>
				set_pantalla("elija freecuecia u horario");
 8001128:	4833      	ldr	r0, [pc, #204]	; (80011f8 <acc_skimmer+0x1b8>)
 800112a:	f7ff fc3d 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <acc_skimmer+0x1ac>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
				break;
 8001134:	e058      	b.n	80011e8 <acc_skimmer+0x1a8>
		break;
		case PERIODO_OFF_SKIMMER:
			//funcion de seteo de periodo off
		break;
		case ELIJE_PROGRAMA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff f9ce 	bl	80004d8 <getStatBoton>
 800113c:	4603      	mov	r3, r0
 800113e:	2b02      	cmp	r3, #2
 8001140:	d106      	bne.n	8001150 <acc_skimmer+0x110>
				//levanta el flag de modificar el programa 1
				set_pantalla("elije horario ON u horario OFF");
 8001142:	4832      	ldr	r0, [pc, #200]	; (800120c <acc_skimmer+0x1cc>)
 8001144:	f7ff fc30 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <acc_skimmer+0x1ac>)
 800114a:	2206      	movs	r2, #6
 800114c:	701a      	strb	r2, [r3, #0]
				break;
 800114e:	e04b      	b.n	80011e8 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff f9c1 	bl	80004d8 <getStatBoton>
 8001156:	4603      	mov	r3, r0
 8001158:	2b02      	cmp	r3, #2
 800115a:	d106      	bne.n	800116a <acc_skimmer+0x12a>
				//levanta el flag de modificar el programa 2
				set_pantalla("elije horario ON u horario OFF");
 800115c:	482b      	ldr	r0, [pc, #172]	; (800120c <acc_skimmer+0x1cc>)
 800115e:	f7ff fc23 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <acc_skimmer+0x1ac>)
 8001164:	2206      	movs	r2, #6
 8001166:	701a      	strb	r2, [r3, #0]
				break;
 8001168:	e03e      	b.n	80011e8 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 800116a:	200c      	movs	r0, #12
 800116c:	f7ff f9b4 	bl	80004d8 <getStatBoton>
 8001170:	4603      	mov	r3, r0
 8001172:	2b02      	cmp	r3, #2
 8001174:	d135      	bne.n	80011e2 <acc_skimmer+0x1a2>
				set_pantalla("elija freecuecia u horario");
 8001176:	4820      	ldr	r0, [pc, #128]	; (80011f8 <acc_skimmer+0x1b8>)
 8001178:	f7ff fc16 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <acc_skimmer+0x1ac>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
				break;
 8001182:	e031      	b.n	80011e8 <acc_skimmer+0x1a8>
			}
		break;
		case ELIJE_ON_OFF_HORARIO_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff f9a7 	bl	80004d8 <getStatBoton>
 800118a:	4603      	mov	r3, r0
 800118c:	2b02      	cmp	r3, #2
 800118e:	d106      	bne.n	800119e <acc_skimmer+0x15e>
				//levanta el flag de modificar el horario ON
				set_pantalla("defina el horario ON");
 8001190:	481f      	ldr	r0, [pc, #124]	; (8001210 <acc_skimmer+0x1d0>)
 8001192:	f7ff fc09 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = HORARIO_ON_SKIMMER;
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <acc_skimmer+0x1ac>)
 8001198:	2207      	movs	r2, #7
 800119a:	701a      	strb	r2, [r3, #0]
				break;
 800119c:	e024      	b.n	80011e8 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff f99a 	bl	80004d8 <getStatBoton>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d106      	bne.n	80011b8 <acc_skimmer+0x178>
				//levanta el flag de modificar el horario OFF
				set_pantalla("defina el horario OFF");
 80011aa:	481a      	ldr	r0, [pc, #104]	; (8001214 <acc_skimmer+0x1d4>)
 80011ac:	f7ff fbfc 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = HORARIO_OFF_SKIMMER;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <acc_skimmer+0x1ac>)
 80011b2:	2208      	movs	r2, #8
 80011b4:	701a      	strb	r2, [r3, #0]
				break;
 80011b6:	e017      	b.n	80011e8 <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 80011b8:	200c      	movs	r0, #12
 80011ba:	f7ff f98d 	bl	80004d8 <getStatBoton>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d110      	bne.n	80011e6 <acc_skimmer+0x1a6>
				set_pantalla("elijo programa 1 o programa 2");
 80011c4:	480e      	ldr	r0, [pc, #56]	; (8001200 <acc_skimmer+0x1c0>)
 80011c6:	f7ff fbef 	bl	80009a8 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <acc_skimmer+0x1ac>)
 80011cc:	2205      	movs	r2, #5
 80011ce:	701a      	strb	r2, [r3, #0]
				break;
 80011d0:	e00a      	b.n	80011e8 <acc_skimmer+0x1a8>
		break;
 80011d2:	bf00      	nop
 80011d4:	e008      	b.n	80011e8 <acc_skimmer+0x1a8>
		break;
 80011d6:	bf00      	nop
 80011d8:	e006      	b.n	80011e8 <acc_skimmer+0x1a8>
		break;
 80011da:	bf00      	nop
 80011dc:	e004      	b.n	80011e8 <acc_skimmer+0x1a8>
		break;
 80011de:	bf00      	nop
 80011e0:	e002      	b.n	80011e8 <acc_skimmer+0x1a8>
		break;
 80011e2:	bf00      	nop
 80011e4:	e000      	b.n	80011e8 <acc_skimmer+0x1a8>
			}
		break;
 80011e6:	bf00      	nop
		break;
		case HORARIO_OFF_SKIMMER:
			//funcion de seteo de horario off
		break;
	} //end switch status_menuSkimmer
} //end acc_skimmer()
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200000b2 	.word	0x200000b2
 80011f0:	2000054c 	.word	0x2000054c
 80011f4:	20000008 	.word	0x20000008
 80011f8:	0800510c 	.word	0x0800510c
 80011fc:	08005128 	.word	0x08005128
 8001200:	08005148 	.word	0x08005148
 8001204:	08005168 	.word	0x08005168
 8001208:	0800518c 	.word	0x0800518c
 800120c:	080051b0 	.word	0x080051b0
 8001210:	080051d0 	.word	0x080051d0
 8001214:	080051e8 	.word	0x080051e8

08001218 <acc_hidro>:

void acc_hidro (void){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

	switch (status_menuHidro) {
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <acc_hidro+0x48>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <acc_hidro+0x10>
 8001224:	2b01      	cmp	r3, #1
				break;
			}
		break;
		case ELIJE_TIEMPO_HIDRO:
			//funcion de seteo de timepo de hidro
		break;
 8001226:	e018      	b.n	800125a <acc_hidro+0x42>
			if (getStatBoton(IN_AST) == FALL) {
 8001228:	200c      	movs	r0, #12
 800122a:	f7ff f955 	bl	80004d8 <getStatBoton>
 800122e:	4603      	mov	r3, r0
 8001230:	2b02      	cmp	r3, #2
 8001232:	d107      	bne.n	8001244 <acc_hidro+0x2c>
				menuActual = &menu[MENU_PRINCIPAL];
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <acc_hidro+0x4c>)
 8001236:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <acc_hidro+0x50>)
 8001238:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <acc_hidro+0x4c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4798      	blx	r3
				break;
 8001242:	e00a      	b.n	800125a <acc_hidro+0x42>
			if (getStatBoton(IN_HASH) == FALL) {
 8001244:	200e      	movs	r0, #14
 8001246:	f7ff f947 	bl	80004d8 <getStatBoton>
 800124a:	4603      	mov	r3, r0
 800124c:	2b02      	cmp	r3, #2
 800124e:	d103      	bne.n	8001258 <acc_hidro+0x40>
				status_menuHidro = ELIJE_TIEMPO_HIDRO;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <acc_hidro+0x48>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
				break;
 8001256:	e000      	b.n	800125a <acc_hidro+0x42>
		break;
 8001258:	bf00      	nop
	} //end switch status_menuHidro

} //end acc_hidro()
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200000b3 	.word	0x200000b3
 8001264:	2000054c 	.word	0x2000054c
 8001268:	20000008 	.word	0x20000008

0800126c <acc_lucesExt>:

void acc_lucesExt (void){ //luces Amarillas
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	switch (status_menuLucesExt) {
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <acc_lucesExt+0x44>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <acc_lucesExt+0x10>
 8001278:	2b01      	cmp	r3, #1
					break;
				}
			break;
			case ELIJE_TIEMPO_LUCESEXT:
				//funcion de seteo de timepo de hidro
			break;
 800127a:	e017      	b.n	80012ac <acc_lucesExt+0x40>
				if (getStatBoton(IN_AST) == FALL) {
 800127c:	200c      	movs	r0, #12
 800127e:	f7ff f92b 	bl	80004d8 <getStatBoton>
 8001282:	4603      	mov	r3, r0
 8001284:	2b02      	cmp	r3, #2
 8001286:	d106      	bne.n	8001296 <acc_lucesExt+0x2a>
					menuActual = &menu[MENU_PRINCIPAL];
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <acc_lucesExt+0x48>)
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <acc_lucesExt+0x4c>)
 800128c:	601a      	str	r2, [r3, #0]
					menuActual->inicia_menu();
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <acc_lucesExt+0x48>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	4798      	blx	r3
				if (getStatBoton(IN_HASH) == FALL) {
 8001296:	200e      	movs	r0, #14
 8001298:	f7ff f91e 	bl	80004d8 <getStatBoton>
 800129c:	4603      	mov	r3, r0
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d103      	bne.n	80012aa <acc_lucesExt+0x3e>
					status_menuHidro = ELIJE_TIEMPO_LUCESEXT;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <acc_lucesExt+0x50>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
					break;
 80012a8:	e000      	b.n	80012ac <acc_lucesExt+0x40>
			break;
 80012aa:	bf00      	nop
		} //end switch status_menuLucesExt
} //end acc_lucesExt()
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200000b4 	.word	0x200000b4
 80012b4:	2000054c 	.word	0x2000054c
 80012b8:	20000008 	.word	0x20000008
 80012bc:	200000b3 	.word	0x200000b3

080012c0 <acc_lucesLed>:

void acc_lucesLed (void){
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <acc_config>:

void acc_config (void){
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2100      	movs	r1, #0
 80012e4:	460a      	mov	r2, r1
 80012e6:	801a      	strh	r2, [r3, #0]
 80012e8:	460a      	mov	r2, r1
 80012ea:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MX_RTC_Init+0xc0>)
 80012fa:	4a28      	ldr	r2, [pc, #160]	; (800139c <MX_RTC_Init+0xc4>)
 80012fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <MX_RTC_Init+0xc0>)
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <MX_RTC_Init+0xc0>)
 8001308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800130e:	4822      	ldr	r0, [pc, #136]	; (8001398 <MX_RTC_Init+0xc0>)
 8001310:	f001 fdc4 	bl	8002e9c <HAL_RTC_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800131a:	f7ff fd51 	bl	8000dc0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800131e:	2312      	movs	r3, #18
 8001320:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x59;
 8001322:	2359      	movs	r3, #89	; 0x59
 8001324:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x30;
 8001326:	2330      	movs	r3, #48	; 0x30
 8001328:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2201      	movs	r2, #1
 8001330:	4619      	mov	r1, r3
 8001332:	4819      	ldr	r0, [pc, #100]	; (8001398 <MX_RTC_Init+0xc0>)
 8001334:	f001 fe48 	bl	8002fc8 <HAL_RTC_SetTime>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800133e:	f7ff fd3f 	bl	8000dc0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001342:	2301      	movs	r3, #1
 8001344:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8001346:	2305      	movs	r3, #5
 8001348:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 800134a:	2301      	movs	r3, #1
 800134c:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 800134e:	2300      	movs	r3, #0
 8001350:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	2201      	movs	r2, #1
 8001358:	4619      	mov	r1, r3
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <MX_RTC_Init+0xc0>)
 800135c:	f001 ffa4 	bl	80032a8 <HAL_RTC_SetDate>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001366:	f7ff fd2b 	bl	8000dc0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 800136a:	2313      	movs	r3, #19
 800136c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800136e:	2301      	movs	r3, #1
 8001370:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001372:	2300      	movs	r3, #0
 8001374:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	2201      	movs	r2, #1
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_RTC_Init+0xc0>)
 8001382:	f002 f89b 	bl	80034bc <HAL_RTC_SetAlarm_IT>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800138c:	f7ff fd18 	bl	8000dc0 <Error_Handler>
  }

}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000554 	.word	0x20000554
 800139c:	40002800 	.word	0x40002800

080013a0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <HAL_RTC_MspInit+0x5c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d120      	bne.n	80013f4 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80013b2:	f000 ffd9 	bl	8002368 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_RTC_MspInit+0x60>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_RTC_MspInit+0x60>)
 80013bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_RTC_MspInit+0x60>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_RTC_MspInit+0x64>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 fe04 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80013de:	2003      	movs	r0, #3
 80013e0:	f000 fe1d 	bl	800201e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2029      	movs	r0, #41	; 0x29
 80013ea:	f000 fdfc 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013ee:	2029      	movs	r0, #41	; 0x29
 80013f0:	f000 fe15 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40002800 	.word	0x40002800
 8001400:	40021000 	.word	0x40021000
 8001404:	4242043c 	.word	0x4242043c

08001408 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_SPI2_Init+0x64>)
 800140e:	4a18      	ldr	r2, [pc, #96]	; (8001470 <MX_SPI2_Init+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_SPI2_Init+0x64>)
 8001414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_SPI2_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_SPI2_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_SPI2_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_SPI2_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_SPI2_Init+0x64>)
 8001434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001438:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_SPI2_Init+0x64>)
 800143c:	2238      	movs	r2, #56	; 0x38
 800143e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <MX_SPI2_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_SPI2_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <MX_SPI2_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_SPI2_Init+0x64>)
 8001454:	220a      	movs	r2, #10
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <MX_SPI2_Init+0x64>)
 800145a:	f002 fbf3 	bl	8003c44 <HAL_SPI_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001464:	f7ff fcac 	bl	8000dc0 <Error_Handler>
  }

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000568 	.word	0x20000568
 8001470:	40003800 	.word	0x40003800

08001474 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_SPI_MspInit+0x8c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d131      	bne.n	80014f8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_SPI_MspInit+0x90>)
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <HAL_SPI_MspInit+0x90>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149e:	61d3      	str	r3, [r2, #28]
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_SPI_MspInit+0x90>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_SPI_MspInit+0x90>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <HAL_SPI_MspInit+0x90>)
 80014b2:	f043 0308 	orr.w	r3, r3, #8
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_SPI_MspInit+0x90>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80014c4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80014c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	4619      	mov	r1, r3
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <HAL_SPI_MspInit+0x94>)
 80014da:	f000 fdbb 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4619      	mov	r1, r3
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <HAL_SPI_MspInit+0x94>)
 80014f4:	f000 fdae 	bl	8002054 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80014f8:	bf00      	nop
 80014fa:	3720      	adds	r7, #32
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40003800 	.word	0x40003800
 8001504:	40021000 	.word	0x40021000
 8001508:	40010c00 	.word	0x40010c00

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_MspInit+0x5c>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_MspInit+0x5c>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6193      	str	r3, [r2, #24]
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_MspInit+0x5c>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_MspInit+0x5c>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_MspInit+0x5c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_MspInit+0x5c>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_MspInit+0x60>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_MspInit+0x60>)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000
 800156c:	40010000 	.word	0x40010000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <HardFault_Handler+0x4>

08001582 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <MemManage_Handler+0x4>

08001588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <BusFault_Handler+0x4>

0800158e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <UsageFault_Handler+0x4>

08001594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015bc:	f000 fa16 	bl	80019ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <RTC_IRQHandler+0x10>)
 80015ca:	f002 faf5 	bl	8003bb8 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000554 	.word	0x20000554

080015d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <TIM2_IRQHandler+0x10>)
 80015de:	f003 f899 	bl	8004714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000600 	.word	0x20000600

080015ec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <RTC_Alarm_IRQHandler+0x10>)
 80015f2:	f002 f817 	bl	8003624 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000554 	.word	0x20000554

08001600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <SystemInit+0x5c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <SystemInit+0x5c>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <SystemInit+0x5c>)
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4911      	ldr	r1, [pc, #68]	; (800165c <SystemInit+0x5c>)
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <SystemInit+0x60>)
 8001618:	4013      	ands	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <SystemInit+0x5c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <SystemInit+0x5c>)
 8001622:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <SystemInit+0x5c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <SystemInit+0x5c>)
 8001632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001636:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <SystemInit+0x5c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <SystemInit+0x5c>)
 800163e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001642:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SystemInit+0x5c>)
 8001646:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800164a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SystemInit+0x64>)
 800164e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001652:	609a      	str	r2, [r3, #8]
#endif 
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40021000 	.word	0x40021000
 8001660:	f8ff0000 	.word	0xf8ff0000
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <MX_TIM2_Init+0x94>)
 8001686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <MX_TIM2_Init+0x94>)
 800168e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001692:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_TIM2_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <MX_TIM2_Init+0x94>)
 800169c:	2263      	movs	r2, #99	; 0x63
 800169e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_TIM2_Init+0x94>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_TIM2_Init+0x94>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ac:	4813      	ldr	r0, [pc, #76]	; (80016fc <MX_TIM2_Init+0x94>)
 80016ae:	f002 ffe3 	bl	8004678 <HAL_TIM_Base_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016b8:	f7ff fb82 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <MX_TIM2_Init+0x94>)
 80016ca:	f003 f92b 	bl	8004924 <HAL_TIM_ConfigClockSource>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016d4:	f7ff fb74 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_TIM2_Init+0x94>)
 80016e6:	f003 faf1 	bl	8004ccc <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016f0:	f7ff fb66 	bl	8000dc0 <Error_Handler>
  }

}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000600 	.word	0x20000600

08001700 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	463b      	mov	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_TIM3_Init+0x94>)
 800171e:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <MX_TIM3_Init+0x98>)
 8001720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <MX_TIM3_Init+0x94>)
 8001724:	2248      	movs	r2, #72	; 0x48
 8001726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_TIM3_Init+0x94>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <MX_TIM3_Init+0x94>)
 8001730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001734:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_TIM3_Init+0x94>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_TIM3_Init+0x94>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001742:	4814      	ldr	r0, [pc, #80]	; (8001794 <MX_TIM3_Init+0x94>)
 8001744:	f002 ff98 	bl	8004678 <HAL_TIM_Base_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800174e:	f7ff fb37 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	4619      	mov	r1, r3
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <MX_TIM3_Init+0x94>)
 8001760:	f003 f8e0 	bl	8004924 <HAL_TIM_ConfigClockSource>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800176a:	f7ff fb29 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001776:	463b      	mov	r3, r7
 8001778:	4619      	mov	r1, r3
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <MX_TIM3_Init+0x94>)
 800177c:	f003 faa6 	bl	8004ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001786:	f7ff fb1b 	bl	8000dc0 <Error_Handler>
  }

}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200005c0 	.word	0x200005c0
 8001798:	40000400 	.word	0x40000400

0800179c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ac:	d114      	bne.n	80017d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_TIM_Base_MspInit+0x68>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a14      	ldr	r2, [pc, #80]	; (8001804 <HAL_TIM_Base_MspInit+0x68>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_TIM_Base_MspInit+0x68>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	201c      	movs	r0, #28
 80017cc:	f000 fc0b 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017d0:	201c      	movs	r0, #28
 80017d2:	f000 fc24 	bl	800201e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017d6:	e010      	b.n	80017fa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_TIM_Base_MspInit+0x6c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10b      	bne.n	80017fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_TIM_Base_MspInit+0x68>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_TIM_Base_MspInit+0x68>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_TIM_Base_MspInit+0x68>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	40000400 	.word	0x40000400

0800180c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <MX_USART1_UART_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001844:	f003 fa98 	bl	8004d78 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800184e:	f7ff fab7 	bl	8000dc0 <Error_Handler>
  }

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000640 	.word	0x20000640
 800185c:	40013800 	.word	0x40013800

08001860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a22      	ldr	r2, [pc, #136]	; (8001904 <HAL_UART_MspInit+0xa4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d13d      	bne.n	80018fc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_UART_MspInit+0xa8>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a20      	ldr	r2, [pc, #128]	; (8001908 <HAL_UART_MspInit+0xa8>)
 8001886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_UART_MspInit+0xa8>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_UART_MspInit+0xa8>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_UART_MspInit+0xa8>)
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_UART_MspInit+0xa8>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018b0:	2340      	movs	r3, #64	; 0x40
 80018b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4812      	ldr	r0, [pc, #72]	; (800190c <HAL_UART_MspInit+0xac>)
 80018c4:	f000 fbc6 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	480c      	ldr	r0, [pc, #48]	; (800190c <HAL_UART_MspInit+0xac>)
 80018dc:	f000 fbba 	bl	8002054 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_UART_MspInit+0xb0>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
 80018f6:	4a06      	ldr	r2, [pc, #24]	; (8001910 <HAL_UART_MspInit+0xb0>)
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	; 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40013800 	.word	0x40013800
 8001908:	40021000 	.word	0x40021000
 800190c:	40010c00 	.word	0x40010c00
 8001910:	40010000 	.word	0x40010000

08001914 <Reset_Handler>:
 8001914:	2100      	movs	r1, #0
 8001916:	e003      	b.n	8001920 <LoopCopyDataInit>

08001918 <CopyDataInit>:
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <LoopFillZerobss+0x14>)
 800191a:	585b      	ldr	r3, [r3, r1]
 800191c:	5043      	str	r3, [r0, r1]
 800191e:	3104      	adds	r1, #4

08001920 <LoopCopyDataInit>:
 8001920:	480a      	ldr	r0, [pc, #40]	; (800194c <LoopFillZerobss+0x18>)
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <LoopFillZerobss+0x1c>)
 8001924:	1842      	adds	r2, r0, r1
 8001926:	429a      	cmp	r2, r3
 8001928:	d3f6      	bcc.n	8001918 <CopyDataInit>
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <LoopFillZerobss+0x20>)
 800192c:	e002      	b.n	8001934 <LoopFillZerobss>

0800192e <FillZerobss>:
 800192e:	2300      	movs	r3, #0
 8001930:	f842 3b04 	str.w	r3, [r2], #4

08001934 <LoopFillZerobss>:
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <LoopFillZerobss+0x24>)
 8001936:	429a      	cmp	r2, r3
 8001938:	d3f9      	bcc.n	800192e <FillZerobss>
 800193a:	f7ff fe61 	bl	8001600 <SystemInit>
 800193e:	f003 fb43 	bl	8004fc8 <__libc_init_array>
 8001942:	f7ff f939 	bl	8000bb8 <main>
 8001946:	4770      	bx	lr
 8001948:	08005248 	.word	0x08005248
 800194c:	20000000 	.word	0x20000000
 8001950:	20000084 	.word	0x20000084
 8001954:	20000084 	.word	0x20000084
 8001958:	20000684 	.word	0x20000684

0800195c <ADC1_2_IRQHandler>:
 800195c:	e7fe      	b.n	800195c <ADC1_2_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_Init+0x28>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_Init+0x28>)
 800196a:	f043 0310 	orr.w	r3, r3, #16
 800196e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 fb2d 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f808 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197c:	f7ff fdc6 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40022000 	.word	0x40022000

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x54>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x58>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fb45 	bl	800203a <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00e      	b.n	80019d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	d80a      	bhi.n	80019d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c0:	2200      	movs	r2, #0
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f000 fb0d 	bl	8001fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <HAL_InitTick+0x5c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000078 	.word	0x20000078
 80019e4:	20000080 	.word	0x20000080
 80019e8:	2000007c 	.word	0x2000007c

080019ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_IncTick+0x1c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_IncTick+0x20>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <HAL_IncTick+0x20>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000080 	.word	0x20000080
 8001a0c:	20000680 	.word	0x20000680

08001a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <HAL_GetTick+0x10>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	20000680 	.word	0x20000680

08001a24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0be      	b.n	8001bc4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7fe ff4c 	bl	8000900 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f9ab 	bl	8001dc4 <ADC_ConversionStop_Disable>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 8099 	bne.w	8001bb2 <HAL_ADC_Init+0x18e>
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 8095 	bne.w	8001bb2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a90:	f023 0302 	bic.w	r3, r3, #2
 8001a94:	f043 0202 	orr.w	r2, r3, #2
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aa4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7b1b      	ldrb	r3, [r3, #12]
 8001aaa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001aac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001abc:	d003      	beq.n	8001ac6 <HAL_ADC_Init+0xa2>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d102      	bne.n	8001acc <HAL_ADC_Init+0xa8>
 8001ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aca:	e000      	b.n	8001ace <HAL_ADC_Init+0xaa>
 8001acc:	2300      	movs	r3, #0
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7d1b      	ldrb	r3, [r3, #20]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d119      	bne.n	8001b10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7b1b      	ldrb	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	035a      	lsls	r2, r3, #13
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	e00b      	b.n	8001b10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	f043 0220 	orr.w	r2, r3, #32
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <HAL_ADC_Init+0x1a8>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b40:	d003      	beq.n	8001b4a <HAL_ADC_Init+0x126>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d104      	bne.n	8001b54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	051b      	lsls	r3, r3, #20
 8001b52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_ADC_Init+0x1ac>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d10b      	bne.n	8001b90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	f023 0303 	bic.w	r3, r3, #3
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b8e:	e018      	b.n	8001bc2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	f023 0312 	bic.w	r3, r3, #18
 8001b98:	f043 0210 	orr.w	r2, r3, #16
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bb0:	e007      	b.n	8001bc2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f043 0210 	orr.w	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	ffe1f7fd 	.word	0xffe1f7fd
 8001bd0:	ff1f0efe 	.word	0xff1f0efe

08001bd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x20>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e0dc      	b.n	8001dae <HAL_ADC_ConfigChannel+0x1da>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	d81c      	bhi.n	8001c3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	3b05      	subs	r3, #5
 8001c16:	221f      	movs	r2, #31
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	4019      	ands	r1, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b05      	subs	r3, #5
 8001c30:	fa00 f203 	lsl.w	r2, r0, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3c:	e03c      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d81c      	bhi.n	8001c80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b23      	subs	r3, #35	; 0x23
 8001c58:	221f      	movs	r2, #31
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	4019      	ands	r1, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b23      	subs	r3, #35	; 0x23
 8001c72:	fa00 f203 	lsl.w	r2, r0, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c7e:	e01b      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b41      	subs	r3, #65	; 0x41
 8001c92:	221f      	movs	r2, #31
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4019      	ands	r1, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b41      	subs	r3, #65	; 0x41
 8001cac:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b09      	cmp	r3, #9
 8001cbe:	d91c      	bls.n	8001cfa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68d9      	ldr	r1, [r3, #12]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b1e      	subs	r3, #30
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4019      	ands	r1, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6898      	ldr	r0, [r3, #8]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b1e      	subs	r3, #30
 8001cec:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	e019      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6919      	ldr	r1, [r3, #16]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4019      	ands	r1, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6898      	ldr	r0, [r3, #8]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d003      	beq.n	8001d3e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d3a:	2b11      	cmp	r3, #17
 8001d3c:	d132      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d125      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d126      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d64:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d11a      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_ADC_ConfigChannel+0x1e8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	0c9a      	lsrs	r2, r3, #18
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f9      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x1b2>
 8001d92:	e007      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	f043 0220 	orr.w	r2, r3, #32
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40012400 	.word	0x40012400
 8001dbc:	20000078 	.word	0x20000078
 8001dc0:	431bde83 	.word	0x431bde83

08001dc4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d127      	bne.n	8001e2e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dee:	f7ff fe0f 	bl	8001a10 <HAL_GetTick>
 8001df2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001df4:	e014      	b.n	8001e20 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001df6:	f7ff fe0b 	bl	8001a10 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d90d      	bls.n	8001e20 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	f043 0210 	orr.w	r2, r3, #16
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e007      	b.n	8001e30 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d0e3      	beq.n	8001df6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4906      	ldr	r1, [pc, #24]	; (8001ed0 <__NVIC_EnableIRQ+0x34>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f7ff ff90 	bl	8001ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff2d 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff8:	f7ff ff42 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8001ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff ff90 	bl	8001f28 <NVIC_EncodePriority>
 8002008:	4602      	mov	r2, r0
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5f 	bl	8001ed4 <__NVIC_SetPriority>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff35 	bl	8001e9c <__NVIC_EnableIRQ>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffa2 	bl	8001f8c <SysTick_Config>
 8002048:	4603      	mov	r3, r0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b08b      	sub	sp, #44	; 0x2c
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002066:	e127      	b.n	80022b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002068:	2201      	movs	r2, #1
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	429a      	cmp	r2, r3
 8002082:	f040 8116 	bne.w	80022b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b12      	cmp	r3, #18
 800208c:	d034      	beq.n	80020f8 <HAL_GPIO_Init+0xa4>
 800208e:	2b12      	cmp	r3, #18
 8002090:	d80d      	bhi.n	80020ae <HAL_GPIO_Init+0x5a>
 8002092:	2b02      	cmp	r3, #2
 8002094:	d02b      	beq.n	80020ee <HAL_GPIO_Init+0x9a>
 8002096:	2b02      	cmp	r3, #2
 8002098:	d804      	bhi.n	80020a4 <HAL_GPIO_Init+0x50>
 800209a:	2b00      	cmp	r3, #0
 800209c:	d031      	beq.n	8002102 <HAL_GPIO_Init+0xae>
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d01c      	beq.n	80020dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020a2:	e048      	b.n	8002136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d043      	beq.n	8002130 <HAL_GPIO_Init+0xdc>
 80020a8:	2b11      	cmp	r3, #17
 80020aa:	d01b      	beq.n	80020e4 <HAL_GPIO_Init+0x90>
          break;
 80020ac:	e043      	b.n	8002136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020ae:	4a89      	ldr	r2, [pc, #548]	; (80022d4 <HAL_GPIO_Init+0x280>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d026      	beq.n	8002102 <HAL_GPIO_Init+0xae>
 80020b4:	4a87      	ldr	r2, [pc, #540]	; (80022d4 <HAL_GPIO_Init+0x280>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d806      	bhi.n	80020c8 <HAL_GPIO_Init+0x74>
 80020ba:	4a87      	ldr	r2, [pc, #540]	; (80022d8 <HAL_GPIO_Init+0x284>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d020      	beq.n	8002102 <HAL_GPIO_Init+0xae>
 80020c0:	4a86      	ldr	r2, [pc, #536]	; (80022dc <HAL_GPIO_Init+0x288>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01d      	beq.n	8002102 <HAL_GPIO_Init+0xae>
          break;
 80020c6:	e036      	b.n	8002136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020c8:	4a85      	ldr	r2, [pc, #532]	; (80022e0 <HAL_GPIO_Init+0x28c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d019      	beq.n	8002102 <HAL_GPIO_Init+0xae>
 80020ce:	4a85      	ldr	r2, [pc, #532]	; (80022e4 <HAL_GPIO_Init+0x290>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d016      	beq.n	8002102 <HAL_GPIO_Init+0xae>
 80020d4:	4a84      	ldr	r2, [pc, #528]	; (80022e8 <HAL_GPIO_Init+0x294>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0xae>
          break;
 80020da:	e02c      	b.n	8002136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	623b      	str	r3, [r7, #32]
          break;
 80020e2:	e028      	b.n	8002136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	3304      	adds	r3, #4
 80020ea:	623b      	str	r3, [r7, #32]
          break;
 80020ec:	e023      	b.n	8002136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	3308      	adds	r3, #8
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e01e      	b.n	8002136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	330c      	adds	r3, #12
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	e019      	b.n	8002136 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800210a:	2304      	movs	r3, #4
 800210c:	623b      	str	r3, [r7, #32]
          break;
 800210e:	e012      	b.n	8002136 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002118:	2308      	movs	r3, #8
 800211a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	611a      	str	r2, [r3, #16]
          break;
 8002122:	e008      	b.n	8002136 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002124:	2308      	movs	r3, #8
 8002126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	615a      	str	r2, [r3, #20]
          break;
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
          break;
 8002134:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2bff      	cmp	r3, #255	; 0xff
 800213a:	d801      	bhi.n	8002140 <HAL_GPIO_Init+0xec>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	e001      	b.n	8002144 <HAL_GPIO_Init+0xf0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2bff      	cmp	r3, #255	; 0xff
 800214a:	d802      	bhi.n	8002152 <HAL_GPIO_Init+0xfe>
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x104>
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	3b08      	subs	r3, #8
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	210f      	movs	r1, #15
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	401a      	ands	r2, r3
 800216a:	6a39      	ldr	r1, [r7, #32]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	431a      	orrs	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8096 	beq.w	80022b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002186:	4b59      	ldr	r3, [pc, #356]	; (80022ec <HAL_GPIO_Init+0x298>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	4a58      	ldr	r2, [pc, #352]	; (80022ec <HAL_GPIO_Init+0x298>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6193      	str	r3, [r2, #24]
 8002192:	4b56      	ldr	r3, [pc, #344]	; (80022ec <HAL_GPIO_Init+0x298>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800219e:	4a54      	ldr	r2, [pc, #336]	; (80022f0 <HAL_GPIO_Init+0x29c>)
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	220f      	movs	r2, #15
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4b      	ldr	r2, [pc, #300]	; (80022f4 <HAL_GPIO_Init+0x2a0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x19e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4a      	ldr	r2, [pc, #296]	; (80022f8 <HAL_GPIO_Init+0x2a4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x19a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a49      	ldr	r2, [pc, #292]	; (80022fc <HAL_GPIO_Init+0x2a8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x196>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a48      	ldr	r2, [pc, #288]	; (8002300 <HAL_GPIO_Init+0x2ac>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x192>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x1a0>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e004      	b.n	80021f4 <HAL_GPIO_Init+0x1a0>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e002      	b.n	80021f4 <HAL_GPIO_Init+0x1a0>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_GPIO_Init+0x1a0>
 80021f2:	2300      	movs	r3, #0
 80021f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f6:	f002 0203 	and.w	r2, r2, #3
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	4093      	lsls	r3, r2
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002204:	493a      	ldr	r1, [pc, #232]	; (80022f0 <HAL_GPIO_Init+0x29c>)
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4938      	ldr	r1, [pc, #224]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
 800222a:	e006      	b.n	800223a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800222c:	4b35      	ldr	r3, [pc, #212]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	43db      	mvns	r3, r3
 8002234:	4933      	ldr	r1, [pc, #204]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 8002236:	4013      	ands	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	492e      	ldr	r1, [pc, #184]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
 8002252:	e006      	b.n	8002262 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	43db      	mvns	r3, r3
 800225c:	4929      	ldr	r1, [pc, #164]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 800225e:	4013      	ands	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800226e:	4b25      	ldr	r3, [pc, #148]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	4924      	ldr	r1, [pc, #144]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
 800227a:	e006      	b.n	800228a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	43db      	mvns	r3, r3
 8002284:	491f      	ldr	r1, [pc, #124]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 8002286:	4013      	ands	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	491a      	ldr	r1, [pc, #104]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60cb      	str	r3, [r1, #12]
 80022a2:	e006      	b.n	80022b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	4915      	ldr	r1, [pc, #84]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	3301      	adds	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	fa22 f303 	lsr.w	r3, r2, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f47f aed0 	bne.w	8002068 <HAL_GPIO_Init+0x14>
  }
}
 80022c8:	bf00      	nop
 80022ca:	372c      	adds	r7, #44	; 0x2c
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	10210000 	.word	0x10210000
 80022d8:	10110000 	.word	0x10110000
 80022dc:	10120000 	.word	0x10120000
 80022e0:	10310000 	.word	0x10310000
 80022e4:	10320000 	.word	0x10320000
 80022e8:	10220000 	.word	0x10220000
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40010800 	.word	0x40010800
 80022f8:	40010c00 	.word	0x40010c00
 80022fc:	40011000 	.word	0x40011000
 8002300:	40011400 	.word	0x40011400
 8002304:	40010400 	.word	0x40010400

08002308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e001      	b.n	800232a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	807b      	strh	r3, [r7, #2]
 8002342:	4613      	mov	r3, r2
 8002344:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002346:	787b      	ldrb	r3, [r7, #1]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234c:	887a      	ldrh	r2, [r7, #2]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002352:	e003      	b.n	800235c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	041a      	lsls	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	611a      	str	r2, [r3, #16]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
	...

08002368 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_PWR_EnableBkUpAccess+0x14>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	420e0020 	.word	0x420e0020

08002380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e26c      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8087 	beq.w	80024ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023a0:	4b92      	ldr	r3, [pc, #584]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d00c      	beq.n	80023c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ac:	4b8f      	ldr	r3, [pc, #572]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d112      	bne.n	80023de <HAL_RCC_OscConfig+0x5e>
 80023b8:	4b8c      	ldr	r3, [pc, #560]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d10b      	bne.n	80023de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c6:	4b89      	ldr	r3, [pc, #548]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d06c      	beq.n	80024ac <HAL_RCC_OscConfig+0x12c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d168      	bne.n	80024ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e246      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x76>
 80023e8:	4b80      	ldr	r3, [pc, #512]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a7f      	ldr	r2, [pc, #508]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e02e      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x98>
 80023fe:	4b7b      	ldr	r3, [pc, #492]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a7a      	ldr	r2, [pc, #488]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b78      	ldr	r3, [pc, #480]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a77      	ldr	r2, [pc, #476]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e01d      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0xbc>
 8002422:	4b72      	ldr	r3, [pc, #456]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a71      	ldr	r2, [pc, #452]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b6f      	ldr	r3, [pc, #444]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6e      	ldr	r2, [pc, #440]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 800243c:	4b6b      	ldr	r3, [pc, #428]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6a      	ldr	r2, [pc, #424]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b68      	ldr	r3, [pc, #416]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a67      	ldr	r2, [pc, #412]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002452:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fad8 	bl	8001a10 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002464:	f7ff fad4 	bl	8001a10 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e1fa      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0xe4>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff fac4 	bl	8001a10 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff fac0 	bl	8001a10 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1e6      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x10c>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d063      	beq.n	8002582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ba:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024c6:	4b49      	ldr	r3, [pc, #292]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d11c      	bne.n	800250c <HAL_RCC_OscConfig+0x18c>
 80024d2:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d116      	bne.n	800250c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	4b43      	ldr	r3, [pc, #268]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_RCC_OscConfig+0x176>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1ba      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4939      	ldr	r1, [pc, #228]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	e03a      	b.n	8002582 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002514:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7ff fa79 	bl	8001a10 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002522:	f7ff fa75 	bl	8001a10 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e19b      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4927      	ldr	r1, [pc, #156]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002556:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff fa58 	bl	8001a10 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002564:	f7ff fa54 	bl	8001a10 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e17a      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d03a      	beq.n	8002604 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d019      	beq.n	80025ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_RCC_OscConfig+0x274>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7ff fa38 	bl	8001a10 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a4:	f7ff fa34 	bl	8001a10 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e15a      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <HAL_RCC_OscConfig+0x26c>)
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f000 fada 	bl	8002b7c <RCC_Delay>
 80025c8:	e01c      	b.n	8002604 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCC_OscConfig+0x274>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d0:	f7ff fa1e 	bl	8001a10 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d6:	e00f      	b.n	80025f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d8:	f7ff fa1a 	bl	8001a10 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d908      	bls.n	80025f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e140      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	42420000 	.word	0x42420000
 80025f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f8:	4b9e      	ldr	r3, [pc, #632]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e9      	bne.n	80025d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80a6 	beq.w	800275e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002616:	4b97      	ldr	r3, [pc, #604]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10d      	bne.n	800263e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b94      	ldr	r3, [pc, #592]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a93      	ldr	r2, [pc, #588]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	61d3      	str	r3, [r2, #28]
 800262e:	4b91      	ldr	r3, [pc, #580]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263a:	2301      	movs	r3, #1
 800263c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263e:	4b8e      	ldr	r3, [pc, #568]	; (8002878 <HAL_RCC_OscConfig+0x4f8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d118      	bne.n	800267c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264a:	4b8b      	ldr	r3, [pc, #556]	; (8002878 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a8a      	ldr	r2, [pc, #552]	; (8002878 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002656:	f7ff f9db 	bl	8001a10 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7ff f9d7 	bl	8001a10 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b64      	cmp	r3, #100	; 0x64
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e0fd      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	4b81      	ldr	r3, [pc, #516]	; (8002878 <HAL_RCC_OscConfig+0x4f8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x312>
 8002684:	4b7b      	ldr	r3, [pc, #492]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a7a      	ldr	r2, [pc, #488]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	e02d      	b.n	80026ee <HAL_RCC_OscConfig+0x36e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x334>
 800269a:	4b76      	ldr	r3, [pc, #472]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4a75      	ldr	r2, [pc, #468]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6213      	str	r3, [r2, #32]
 80026a6:	4b73      	ldr	r3, [pc, #460]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a72      	ldr	r2, [pc, #456]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	e01c      	b.n	80026ee <HAL_RCC_OscConfig+0x36e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d10c      	bne.n	80026d6 <HAL_RCC_OscConfig+0x356>
 80026bc:	4b6d      	ldr	r3, [pc, #436]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4a6c      	ldr	r2, [pc, #432]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	6213      	str	r3, [r2, #32]
 80026c8:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a69      	ldr	r2, [pc, #420]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	e00b      	b.n	80026ee <HAL_RCC_OscConfig+0x36e>
 80026d6:	4b67      	ldr	r3, [pc, #412]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a66      	ldr	r2, [pc, #408]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	4b64      	ldr	r3, [pc, #400]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a63      	ldr	r2, [pc, #396]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 0304 	bic.w	r3, r3, #4
 80026ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d015      	beq.n	8002722 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7ff f98b 	bl	8001a10 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7ff f987 	bl	8001a10 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0ab      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002714:	4b57      	ldr	r3, [pc, #348]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ee      	beq.n	80026fe <HAL_RCC_OscConfig+0x37e>
 8002720:	e014      	b.n	800274c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7ff f975 	bl	8001a10 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7ff f971 	bl	8001a10 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e095      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002740:	4b4c      	ldr	r3, [pc, #304]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ee      	bne.n	800272a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d105      	bne.n	800275e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002752:	4b48      	ldr	r3, [pc, #288]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4a47      	ldr	r2, [pc, #284]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8081 	beq.w	800286a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002768:	4b42      	ldr	r3, [pc, #264]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b08      	cmp	r3, #8
 8002772:	d061      	beq.n	8002838 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d146      	bne.n	800280a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277c:	4b3f      	ldr	r3, [pc, #252]	; (800287c <HAL_RCC_OscConfig+0x4fc>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7ff f945 	bl	8001a10 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278a:	f7ff f941 	bl	8001a10 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e067      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279c:	4b35      	ldr	r3, [pc, #212]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d108      	bne.n	80027c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027b2:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	492d      	ldr	r1, [pc, #180]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c4:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a19      	ldr	r1, [r3, #32]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	430b      	orrs	r3, r1
 80027d6:	4927      	ldr	r1, [pc, #156]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_OscConfig+0x4fc>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7ff f915 	bl	8001a10 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7ff f911 	bl	8001a10 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e037      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x46a>
 8002808:	e02f      	b.n	800286a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_RCC_OscConfig+0x4fc>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff f8fe 	bl	8001a10 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7ff f8fa 	bl	8001a10 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e020      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x498>
 8002836:	e018      	b.n	800286a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e013      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_OscConfig+0x4f4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	429a      	cmp	r2, r3
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	40007000 	.word	0x40007000
 800287c:	42420060 	.word	0x42420060

08002880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0d0      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002894:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d910      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 0207 	bic.w	r2, r3, #7
 80028aa:	4965      	ldr	r1, [pc, #404]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0b8      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028dc:	4b59      	ldr	r3, [pc, #356]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a58      	ldr	r2, [pc, #352]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f4:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a52      	ldr	r2, [pc, #328]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002900:	4b50      	ldr	r3, [pc, #320]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	494d      	ldr	r1, [pc, #308]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d040      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d115      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e07f      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293e:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e073      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e06b      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295e:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f023 0203 	bic.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4936      	ldr	r1, [pc, #216]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002970:	f7ff f84e 	bl	8001a10 <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	e00a      	b.n	800298e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002978:	f7ff f84a 	bl	8001a10 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e053      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 020c 	and.w	r2, r3, #12
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	429a      	cmp	r2, r3
 800299e:	d1eb      	bne.n	8002978 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d210      	bcs.n	80029d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 0207 	bic.w	r2, r3, #7
 80029b6:	4922      	ldr	r1, [pc, #136]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e032      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4916      	ldr	r1, [pc, #88]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	490e      	ldr	r1, [pc, #56]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a0e:	f000 f821 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002a12:	4601      	mov	r1, r0
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	5cd3      	ldrb	r3, [r2, r3]
 8002a22:	fa21 f303 	lsr.w	r3, r1, r3
 8002a26:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <HAL_RCC_ClockConfig+0x1cc>)
 8002a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_ClockConfig+0x1d0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe ffac 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40022000 	.word	0x40022000
 8002a44:	40021000 	.word	0x40021000
 8002a48:	08005228 	.word	0x08005228
 8002a4c:	20000078 	.word	0x20000078
 8002a50:	2000007c 	.word	0x2000007c

08002a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a54:	b490      	push	{r4, r7}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a5c:	1d3c      	adds	r4, r7, #4
 8002a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a64:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a7e:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d002      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x40>
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d003      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x46>
 8002a92:	e02d      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a94:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a96:	623b      	str	r3, [r7, #32]
      break;
 8002a98:	e02d      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	0c9b      	lsrs	r3, r3, #18
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	0c5b      	lsrs	r3, r3, #17
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002acc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ad2:	fb02 f203 	mul.w	r2, r2, r3
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	e004      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	4a0c      	ldr	r2, [pc, #48]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	623b      	str	r3, [r7, #32]
      break;
 8002aee:	e002      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002af2:	623b      	str	r3, [r7, #32]
      break;
 8002af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af6:	6a3b      	ldr	r3, [r7, #32]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3728      	adds	r7, #40	; 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc90      	pop	{r4, r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	08005200 	.word	0x08005200
 8002b08:	08005210 	.word	0x08005210
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	007a1200 	.word	0x007a1200
 8002b14:	003d0900 	.word	0x003d0900

08002b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b1c:	4b02      	ldr	r3, [pc, #8]	; (8002b28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	20000078 	.word	0x20000078

08002b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b30:	f7ff fff2 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b34:	4601      	mov	r1, r0
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4a03      	ldr	r2, [pc, #12]	; (8002b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	08005238 	.word	0x08005238

08002b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b58:	f7ff ffde 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b5c:	4601      	mov	r1, r0
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	0adb      	lsrs	r3, r3, #11
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	4a03      	ldr	r2, [pc, #12]	; (8002b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	08005238 	.word	0x08005238

08002b7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <RCC_Delay+0x34>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <RCC_Delay+0x38>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0a5b      	lsrs	r3, r3, #9
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b98:	bf00      	nop
  }
  while (Delay --);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1e5a      	subs	r2, r3, #1
 8002b9e:	60fa      	str	r2, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f9      	bne.n	8002b98 <RCC_Delay+0x1c>
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000078 	.word	0x20000078
 8002bb4:	10624dd3 	.word	0x10624dd3

08002bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d07d      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd8:	4b4f      	ldr	r3, [pc, #316]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10d      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be4:	4b4c      	ldr	r3, [pc, #304]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	4a4b      	ldr	r2, [pc, #300]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	61d3      	str	r3, [r2, #28]
 8002bf0:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	4b46      	ldr	r3, [pc, #280]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d118      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0c:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a42      	ldr	r2, [pc, #264]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c18:	f7fe fefa 	bl	8001a10 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	e008      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c20:	f7fe fef6 	bl	8001a10 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e06d      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b3a      	ldr	r3, [pc, #232]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c3e:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d02e      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d027      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c5c:	4b2e      	ldr	r3, [pc, #184]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c66:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c72:	4a29      	ldr	r2, [pc, #164]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d014      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fe fec5 	bl	8001a10 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fe fec1 	bl	8001a10 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e036      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ee      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cac:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4917      	ldr	r1, [pc, #92]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d105      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc4:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	490b      	ldr	r1, [pc, #44]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4904      	ldr	r1, [pc, #16]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	42420440 	.word	0x42420440

08002d24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b08d      	sub	sp, #52	; 0x34
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d2c:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002d2e:	f107 040c 	add.w	r4, r7, #12
 8002d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	2300      	movs	r3, #0
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d07f      	beq.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d002      	beq.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d048      	beq.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002d60:	e08b      	b.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002d62:	4b4a      	ldr	r3, [pc, #296]	; (8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d68:	4b48      	ldr	r3, [pc, #288]	; (8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d07f      	beq.n	8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	0c9b      	lsrs	r3, r3, #18
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d80:	4413      	add	r3, r2
 8002d82:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d86:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d018      	beq.n	8002dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d92:	4b3e      	ldr	r3, [pc, #248]	; (8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0c5b      	lsrs	r3, r3, #17
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002da0:	4413      	add	r3, r2
 8002da2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002db2:	4a37      	ldr	r2, [pc, #220]	; (8002e90 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	fb02 f303 	mul.w	r3, r2, r3
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc2:	e004      	b.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	4a33      	ldr	r2, [pc, #204]	; (8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002dce:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dda:	d102      	bne.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002de0:	e048      	b.n	8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4a2c      	ldr	r2, [pc, #176]	; (8002e98 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002df0:	e040      	b.n	8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e02:	d108      	bne.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e14:	e01f      	b.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e20:	d109      	bne.n	8002e36 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002e22:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002e2e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e34:	e00f      	b.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e40:	d11a      	bne.n	8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002e42:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d014      	beq.n	8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002e4e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e54:	e010      	b.n	8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002e56:	e00f      	b.n	8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e58:	f7ff fe7c 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	0b9b      	lsrs	r3, r3, #14
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e72:	e002      	b.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002e74:	bf00      	nop
 8002e76:	e000      	b.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002e78:	bf00      	nop
    }
  }
  return (frequency);
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3734      	adds	r7, #52	; 0x34
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd90      	pop	{r4, r7, pc}
 8002e84:	08005214 	.word	0x08005214
 8002e88:	08005224 	.word	0x08005224
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	007a1200 	.word	0x007a1200
 8002e94:	003d0900 	.word	0x003d0900
 8002e98:	aaaaaaab 	.word	0xaaaaaaab

08002e9c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e084      	b.n	8002fbc <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7c5b      	ldrb	r3, [r3, #17]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe fa6c 	bl	80013a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fbd0 	bl	8003674 <HAL_RTC_WaitForSynchro>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2204      	movs	r2, #4
 8002ede:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e06b      	b.n	8002fbc <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fc89 	bl	80037fc <RTC_EnterInitMode>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e060      	b.n	8002fbc <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0207 	bic.w	r2, r2, #7
 8002f08:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002f12:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <HAL_RTC_Init+0x128>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a2b      	ldr	r2, [pc, #172]	; (8002fc4 <HAL_RTC_Init+0x128>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002f1e:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <HAL_RTC_Init+0x128>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	4926      	ldr	r1, [pc, #152]	; (8002fc4 <HAL_RTC_Init+0x128>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d003      	beq.n	8002f42 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	e00e      	b.n	8002f60 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002f42:	2001      	movs	r0, #1
 8002f44:	f7ff feee 	bl	8002d24 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f48:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2204      	movs	r2, #4
 8002f54:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e030      	b.n	8002fbc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f023 010f 	bic.w	r1, r3, #15
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	0c1a      	lsrs	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	b291      	uxth	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fc5d 	bl	800384c <RTC_ExitInitMode>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00c      	b.n	8002fbc <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002fba:	2300      	movs	r3, #0
  }
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40006c00 	.word	0x40006c00

08002fc8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_RTC_SetTime+0x20>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e080      	b.n	80030ee <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	7c1b      	ldrb	r3, [r3, #16]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RTC_SetTime+0x30>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e07a      	b.n	80030ee <HAL_RTC_SetTime+0x126>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2202      	movs	r2, #2
 8003002:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d113      	bne.n	8003032 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003014:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	785b      	ldrb	r3, [r3, #1]
 800301c:	4619      	mov	r1, r3
 800301e:	460b      	mov	r3, r1
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	1a5b      	subs	r3, r3, r1
 8003024:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003026:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800302c:	4413      	add	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	e01e      	b.n	8003070 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fc4d 	bl	80038d6 <RTC_Bcd2ToByte>
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003044:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	785b      	ldrb	r3, [r3, #1]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fc42 	bl	80038d6 <RTC_Bcd2ToByte>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800305e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	789b      	ldrb	r3, [r3, #2]
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fc36 	bl	80038d6 <RTC_Bcd2ToByte>
 800306a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800306c:	4423      	add	r3, r4
 800306e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003070:	6979      	ldr	r1, [r7, #20]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fb5b 	bl	800372e <RTC_WriteTimeCounter>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2204      	movs	r2, #4
 8003082:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e02f      	b.n	80030ee <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0205 	bic.w	r2, r2, #5
 800309c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fb6c 	bl	800377c <RTC_ReadAlarmCounter>
 80030a4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d018      	beq.n	80030e0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d214      	bcs.n	80030e0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80030bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80030c0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80030c2:	6939      	ldr	r1, [r7, #16]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fb72 	bl	80037ae <RTC_WriteAlarmCounter>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2204      	movs	r2, #4
 80030d4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e006      	b.n	80030ee <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd90      	pop	{r4, r7, pc}
	...

080030f8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_RTC_GetTime+0x28>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0b5      	b.n	8003290 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e0ac      	b.n	8003290 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fac9 	bl	80036ce <RTC_ReadTimeCounter>
 800313c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4a55      	ldr	r2, [pc, #340]	; (8003298 <HAL_RTC_GetTime+0x1a0>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	0adb      	lsrs	r3, r3, #11
 8003148:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4b52      	ldr	r3, [pc, #328]	; (8003298 <HAL_RTC_GetTime+0x1a0>)
 800314e:	fba3 1302 	umull	r1, r3, r3, r2
 8003152:	0adb      	lsrs	r3, r3, #11
 8003154:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	4a4f      	ldr	r2, [pc, #316]	; (800329c <HAL_RTC_GetTime+0x1a4>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4a4a      	ldr	r2, [pc, #296]	; (8003298 <HAL_RTC_GetTime+0x1a0>)
 8003170:	fba2 1203 	umull	r1, r2, r2, r3
 8003174:	0ad2      	lsrs	r2, r2, #11
 8003176:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800317a:	fb01 f202 	mul.w	r2, r1, r2
 800317e:	1a9a      	subs	r2, r3, r2
 8003180:	4b46      	ldr	r3, [pc, #280]	; (800329c <HAL_RTC_GetTime+0x1a4>)
 8003182:	fba3 1302 	umull	r1, r3, r3, r2
 8003186:	0959      	lsrs	r1, r3, #5
 8003188:	460b      	mov	r3, r1
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a5b      	subs	r3, r3, r1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	1ad1      	subs	r1, r2, r3
 8003192:	b2ca      	uxtb	r2, r1
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	2b17      	cmp	r3, #23
 800319c:	d955      	bls.n	800324a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4a3f      	ldr	r2, [pc, #252]	; (80032a0 <HAL_RTC_GetTime+0x1a8>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80031aa:	6939      	ldr	r1, [r7, #16]
 80031ac:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <HAL_RTC_GetTime+0x1a8>)
 80031ae:	fba3 2301 	umull	r2, r3, r3, r1
 80031b2:	091a      	lsrs	r2, r3, #4
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	1aca      	subs	r2, r1, r3
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fad9 	bl	800377c <RTC_ReadAlarmCounter>
 80031ca:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d008      	beq.n	80031e6 <HAL_RTC_GetTime+0xee>
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d904      	bls.n	80031e6 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	e002      	b.n	80031ec <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ea:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	4a2d      	ldr	r2, [pc, #180]	; (80032a4 <HAL_RTC_GetTime+0x1ac>)
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80031fa:	69b9      	ldr	r1, [r7, #24]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fa96 	bl	800372e <RTC_WriteTimeCounter>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e041      	b.n	8003290 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d00c      	beq.n	800322e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4413      	add	r3, r2
 800321a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800321c:	69f9      	ldr	r1, [r7, #28]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fac5 	bl	80037ae <RTC_WriteAlarmCounter>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e030      	b.n	8003290 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800322e:	69f9      	ldr	r1, [r7, #28]
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 fabc 	bl	80037ae <RTC_WriteAlarmCounter>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e027      	b.n	8003290 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003240:	6979      	ldr	r1, [r7, #20]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fb64 	bl	8003910 <RTC_DateUpdate>
 8003248:	e003      	b.n	8003252 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01a      	beq.n	800328e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fb1d 	bl	800389c <RTC_ByteToBcd2>
 8003262:	4603      	mov	r3, r0
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fb14 	bl	800389c <RTC_ByteToBcd2>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	789b      	ldrb	r3, [r3, #2]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fb0b 	bl	800389c <RTC_ByteToBcd2>
 8003286:	4603      	mov	r3, r0
 8003288:	461a      	mov	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	91a2b3c5 	.word	0x91a2b3c5
 800329c:	88888889 	.word	0x88888889
 80032a0:	aaaaaaab 	.word	0xaaaaaaab
 80032a4:	00015180 	.word	0x00015180

080032a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	2300      	movs	r3, #0
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_RTC_SetDate+0x24>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e097      	b.n	8003400 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	7c1b      	ldrb	r3, [r3, #16]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_RTC_SetDate+0x34>
 80032d8:	2302      	movs	r3, #2
 80032da:	e091      	b.n	8003400 <HAL_RTC_SetDate+0x158>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2202      	movs	r2, #2
 80032e6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10c      	bne.n	8003308 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	78da      	ldrb	r2, [r3, #3]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	785a      	ldrb	r2, [r3, #1]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	789a      	ldrb	r2, [r3, #2]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	739a      	strb	r2, [r3, #14]
 8003306:	e01a      	b.n	800333e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	78db      	ldrb	r3, [r3, #3]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fae2 	bl	80038d6 <RTC_Bcd2ToByte>
 8003312:	4603      	mov	r3, r0
 8003314:	461a      	mov	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	785b      	ldrb	r3, [r3, #1]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fad9 	bl	80038d6 <RTC_Bcd2ToByte>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	789b      	ldrb	r3, [r3, #2]
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fad0 	bl	80038d6 <RTC_Bcd2ToByte>
 8003336:	4603      	mov	r3, r0
 8003338:	461a      	mov	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	7bdb      	ldrb	r3, [r3, #15]
 8003342:	4618      	mov	r0, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	7b59      	ldrb	r1, [r3, #13]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	7b9b      	ldrb	r3, [r3, #14]
 800334c:	461a      	mov	r2, r3
 800334e:	f000 fbbb 	bl	8003ac8 <RTC_WeekDayNum>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	7b1a      	ldrb	r2, [r3, #12]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f9b3 	bl	80036ce <RTC_ReadTimeCounter>
 8003368:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	4a26      	ldr	r2, [pc, #152]	; (8003408 <HAL_RTC_SetDate+0x160>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0adb      	lsrs	r3, r3, #11
 8003374:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b18      	cmp	r3, #24
 800337a:	d93a      	bls.n	80033f2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_RTC_SetDate+0x164>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	4a22      	ldr	r2, [pc, #136]	; (8003410 <HAL_RTC_SetDate+0x168>)
 8003388:	fb02 f303 	mul.w	r3, r2, r3
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003392:	69f9      	ldr	r1, [r7, #28]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f9ca 	bl	800372e <RTC_WriteTimeCounter>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2204      	movs	r2, #4
 80033a4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e027      	b.n	8003400 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f9e3 	bl	800377c <RTC_ReadAlarmCounter>
 80033b6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d018      	beq.n	80033f2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d214      	bcs.n	80033f2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80033ce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80033d2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80033d4:	69b9      	ldr	r1, [r7, #24]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f9e9 	bl	80037ae <RTC_WriteAlarmCounter>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2204      	movs	r2, #4
 80033e6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e006      	b.n	8003400 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	91a2b3c5 	.word	0x91a2b3c5
 800340c:	aaaaaaab 	.word	0xaaaaaaab
 8003410:	00015180 	.word	0x00015180

08003414 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	2100      	movs	r1, #0
 8003426:	460a      	mov	r2, r1
 8003428:	801a      	strh	r2, [r3, #0]
 800342a:	460a      	mov	r2, r1
 800342c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_RTC_GetDate+0x26>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e03a      	b.n	80034b4 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	2200      	movs	r2, #0
 8003444:	4619      	mov	r1, r3
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff fe56 	bl	80030f8 <HAL_RTC_GetTime>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e02e      	b.n	80034b4 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	7b1a      	ldrb	r2, [r3, #12]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	7bda      	ldrb	r2, [r3, #15]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	7b5a      	ldrb	r2, [r3, #13]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	7b9a      	ldrb	r2, [r3, #14]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01a      	beq.n	80034b2 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	78db      	ldrb	r3, [r3, #3]
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fa0b 	bl	800389c <RTC_ByteToBcd2>
 8003486:	4603      	mov	r3, r0
 8003488:	461a      	mov	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fa02 	bl	800389c <RTC_ByteToBcd2>
 8003498:	4603      	mov	r3, r0
 800349a:	461a      	mov	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	789b      	ldrb	r3, [r3, #2]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 f9f9 	bl	800389c <RTC_ByteToBcd2>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80034cc:	f107 0314 	add.w	r3, r7, #20
 80034d0:	2100      	movs	r1, #0
 80034d2:	460a      	mov	r2, r1
 80034d4:	801a      	strh	r2, [r3, #0]
 80034d6:	460a      	mov	r2, r1
 80034d8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_RTC_SetAlarm_IT+0x2a>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e096      	b.n	8003618 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	7c1b      	ldrb	r3, [r3, #16]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_RTC_SetAlarm_IT+0x3a>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e090      	b.n	8003618 <HAL_RTC_SetAlarm_IT+0x15c>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2202      	movs	r2, #2
 8003500:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003502:	f107 0314 	add.w	r3, r7, #20
 8003506:	2200      	movs	r2, #0
 8003508:	4619      	mov	r1, r3
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff fdf4 	bl	80030f8 <HAL_RTC_GetTime>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e07e      	b.n	8003618 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800351a:	7d3b      	ldrb	r3, [r7, #20]
 800351c:	461a      	mov	r2, r3
 800351e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003522:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8003526:	7d7b      	ldrb	r3, [r7, #21]
 8003528:	4619      	mov	r1, r3
 800352a:	460b      	mov	r3, r1
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a5b      	subs	r3, r3, r1
 8003530:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003532:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8003534:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003536:	4413      	add	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d113      	bne.n	8003568 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800354a:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	4619      	mov	r1, r3
 8003554:	460b      	mov	r3, r1
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a5b      	subs	r3, r3, r1
 800355a:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800355c:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003562:	4413      	add	r3, r2
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	e01e      	b.n	80035a6 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f9b2 	bl	80038d6 <RTC_Bcd2ToByte>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800357a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	785b      	ldrb	r3, [r3, #1]
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f9a7 	bl	80038d6 <RTC_Bcd2ToByte>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003594:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	789b      	ldrb	r3, [r3, #2]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f99b 	bl	80038d6 <RTC_Bcd2ToByte>
 80035a0:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80035a2:	4423      	add	r3, r4
 80035a4:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d205      	bcs.n	80035ba <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80035b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80035b8:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80035ba:	69f9      	ldr	r1, [r7, #28]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f8f6 	bl	80037ae <RTC_WriteAlarmCounter>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2204      	movs	r2, #4
 80035cc:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e01f      	b.n	8003618 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0202 	mvn.w	r2, #2
 80035e0:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0202 	orr.w	r2, r2, #2
 80035f0:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RTC_SetAlarm_IT+0x164>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <HAL_RTC_SetAlarm_IT+0x164>)
 80035f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035fc:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_RTC_SetAlarm_IT+0x164>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4a07      	ldr	r2, [pc, #28]	; (8003620 <HAL_RTC_SetAlarm_IT+0x164>)
 8003604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003608:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003616:	2300      	movs	r3, #0
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3724      	adds	r7, #36	; 0x24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd90      	pop	{r4, r7, pc}
 8003620:	40010400 	.word	0x40010400

08003624 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00e      	beq.n	8003658 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fd fbaf 	bl	8000dac <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f06f 0202 	mvn.w	r2, #2
 8003656:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RTC_AlarmIRQHandler+0x4c>)
 800365a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800365e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	745a      	strb	r2, [r3, #17]
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40010400 	.word	0x40010400

08003674 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e01d      	b.n	80036c6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0208 	bic.w	r2, r2, #8
 8003698:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800369a:	f7fe f9b9 	bl	8001a10 <HAL_GetTick>
 800369e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80036a0:	e009      	b.n	80036b6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80036a2:	f7fe f9b5 	bl	8001a10 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036b0:	d901      	bls.n	80036b6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e007      	b.n	80036c6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0ee      	beq.n	80036a2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b087      	sub	sp, #28
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	827b      	strh	r3, [r7, #18]
 80036da:	2300      	movs	r3, #0
 80036dc:	823b      	strh	r3, [r7, #16]
 80036de:	2300      	movs	r3, #0
 80036e0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80036fe:	8a7a      	ldrh	r2, [r7, #18]
 8003700:	8a3b      	ldrh	r3, [r7, #16]
 8003702:	429a      	cmp	r2, r3
 8003704:	d008      	beq.n	8003718 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003706:	8a3b      	ldrh	r3, [r7, #16]
 8003708:	041a      	lsls	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	b29b      	uxth	r3, r3
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e004      	b.n	8003722 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003718:	8a7b      	ldrh	r3, [r7, #18]
 800371a:	041a      	lsls	r2, r3, #16
 800371c:	89fb      	ldrh	r3, [r7, #14]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003722:	697b      	ldr	r3, [r7, #20]
}
 8003724:	4618      	mov	r0, r3
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f85d 	bl	80037fc <RTC_EnterInitMode>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	e011      	b.n	8003772 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	0c12      	lsrs	r2, r2, #16
 8003756:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	b292      	uxth	r2, r2
 8003760:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f872 	bl	800384c <RTC_ExitInitMode>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	81fb      	strh	r3, [r7, #14]
 8003788:	2300      	movs	r3, #0
 800378a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800379c:	89fb      	ldrh	r3, [r7, #14]
 800379e:	041a      	lsls	r2, r3, #16
 80037a0:	89bb      	ldrh	r3, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f81d 	bl	80037fc <RTC_EnterInitMode>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	e011      	b.n	80037f2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	0c12      	lsrs	r2, r2, #16
 80037d6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	b292      	uxth	r2, r2
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f832 	bl	800384c <RTC_ExitInitMode>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003808:	f7fe f902 	bl	8001a10 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800380e:	e009      	b.n	8003824 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003810:	f7fe f8fe 	bl	8001a10 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800381e:	d901      	bls.n	8003824 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e00f      	b.n	8003844 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ee      	beq.n	8003810 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0210 	orr.w	r2, r2, #16
 8003840:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0210 	bic.w	r2, r2, #16
 8003866:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003868:	f7fe f8d2 	bl	8001a10 <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800386e:	e009      	b.n	8003884 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003870:	f7fe f8ce 	bl	8001a10 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800387e:	d901      	bls.n	8003884 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e007      	b.n	8003894 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0ee      	beq.n	8003870 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80038aa:	e005      	b.n	80038b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	3b0a      	subs	r3, #10
 80038b6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	2b09      	cmp	r3, #9
 80038bc:	d8f6      	bhi.n	80038ac <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	b2db      	uxtb	r3, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	4413      	add	r3, r2
 8003904:	b2db      	uxtb	r3, r3
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	2300      	movs	r3, #0
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7bdb      	ldrb	r3, [r3, #15]
 800392e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7b5b      	ldrb	r3, [r3, #13]
 8003934:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7b9b      	ldrb	r3, [r3, #14]
 800393a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	e06f      	b.n	8003a22 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d011      	beq.n	800396c <RTC_DateUpdate+0x5c>
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d00e      	beq.n	800396c <RTC_DateUpdate+0x5c>
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b05      	cmp	r3, #5
 8003952:	d00b      	beq.n	800396c <RTC_DateUpdate+0x5c>
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b07      	cmp	r3, #7
 8003958:	d008      	beq.n	800396c <RTC_DateUpdate+0x5c>
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d005      	beq.n	800396c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b0a      	cmp	r3, #10
 8003964:	d002      	beq.n	800396c <RTC_DateUpdate+0x5c>
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b0c      	cmp	r3, #12
 800396a:	d117      	bne.n	800399c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b1e      	cmp	r3, #30
 8003970:	d803      	bhi.n	800397a <RTC_DateUpdate+0x6a>
      {
        day++;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3301      	adds	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003978:	e050      	b.n	8003a1c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b0c      	cmp	r3, #12
 800397e:	d005      	beq.n	800398c <RTC_DateUpdate+0x7c>
        {
          month++;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	3301      	adds	r3, #1
 8003984:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003986:	2301      	movs	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800398a:	e047      	b.n	8003a1c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800398c:	2301      	movs	r3, #1
 800398e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003990:	2301      	movs	r3, #1
 8003992:	60fb      	str	r3, [r7, #12]
          year++;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3301      	adds	r3, #1
 8003998:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800399a:	e03f      	b.n	8003a1c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d008      	beq.n	80039b4 <RTC_DateUpdate+0xa4>
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d005      	beq.n	80039b4 <RTC_DateUpdate+0xa4>
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b09      	cmp	r3, #9
 80039ac:	d002      	beq.n	80039b4 <RTC_DateUpdate+0xa4>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b0b      	cmp	r3, #11
 80039b2:	d10c      	bne.n	80039ce <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b1d      	cmp	r3, #29
 80039b8:	d803      	bhi.n	80039c2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3301      	adds	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80039c0:	e02c      	b.n	8003a1c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3301      	adds	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80039c8:	2301      	movs	r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80039cc:	e026      	b.n	8003a1c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d123      	bne.n	8003a1c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b1b      	cmp	r3, #27
 80039d8:	d803      	bhi.n	80039e2 <RTC_DateUpdate+0xd2>
      {
        day++;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3301      	adds	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e01c      	b.n	8003a1c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b1c      	cmp	r3, #28
 80039e6:	d111      	bne.n	8003a0c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 f839 	bl	8003a64 <RTC_IsLeapYear>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <RTC_DateUpdate+0xf0>
        {
          day++;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3301      	adds	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e00d      	b.n	8003a1c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	3301      	adds	r3, #1
 8003a04:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003a06:	2301      	movs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	e007      	b.n	8003a1c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b1d      	cmp	r3, #29
 8003a10:	d104      	bne.n	8003a1c <RTC_DateUpdate+0x10c>
      {
        month++;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	3301      	adds	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d38b      	bcc.n	8003942 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6978      	ldr	r0, [r7, #20]
 8003a4e:	f000 f83b 	bl	8003ac8 <RTC_WeekDayNum>
 8003a52:	4603      	mov	r3, r0
 8003a54:	461a      	mov	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	731a      	strb	r2, [r3, #12]
}
 8003a5a:	bf00      	nop
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e01d      	b.n	8003aba <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	4a10      	ldr	r2, [pc, #64]	; (8003ac4 <RTC_IsLeapYear+0x60>)
 8003a82:	fba2 1203 	umull	r1, r2, r2, r3
 8003a86:	0952      	lsrs	r2, r2, #5
 8003a88:	2164      	movs	r1, #100	; 0x64
 8003a8a:	fb01 f202 	mul.w	r2, r1, r2
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e00f      	b.n	8003aba <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <RTC_IsLeapYear+0x60>)
 8003a9e:	fba2 1203 	umull	r1, r2, r2, r3
 8003aa2:	09d2      	lsrs	r2, r2, #7
 8003aa4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003aa8:	fb01 f202 	mul.w	r2, r1, r2
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003ab8:	2300      	movs	r3, #0
  }
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	51eb851f 	.word	0x51eb851f

08003ac8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003ae6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d82d      	bhi.n	8003b4a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	4a2c      	ldr	r2, [pc, #176]	; (8003bac <RTC_WeekDayNum+0xe4>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	085a      	lsrs	r2, r3, #1
 8003b02:	78bb      	ldrb	r3, [r7, #2]
 8003b04:	441a      	add	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	441a      	add	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	4926      	ldr	r1, [pc, #152]	; (8003bb0 <RTC_WeekDayNum+0xe8>)
 8003b18:	fba1 1303 	umull	r1, r3, r1, r3
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	4922      	ldr	r1, [pc, #136]	; (8003bb0 <RTC_WeekDayNum+0xe8>)
 8003b26:	fba1 1303 	umull	r1, r3, r1, r3
 8003b2a:	09db      	lsrs	r3, r3, #7
 8003b2c:	4413      	add	r3, r2
 8003b2e:	1d1a      	adds	r2, r3, #4
 8003b30:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <RTC_WeekDayNum+0xec>)
 8003b32:	fba3 1302 	umull	r1, r3, r3, r2
 8003b36:	1ad1      	subs	r1, r2, r3
 8003b38:	0849      	lsrs	r1, r1, #1
 8003b3a:	440b      	add	r3, r1
 8003b3c:	0899      	lsrs	r1, r3, #2
 8003b3e:	460b      	mov	r3, r1
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	1a5b      	subs	r3, r3, r1
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e029      	b.n	8003b9e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	4a15      	ldr	r2, [pc, #84]	; (8003bac <RTC_WeekDayNum+0xe4>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	085a      	lsrs	r2, r3, #1
 8003b5e:	78bb      	ldrb	r3, [r7, #2]
 8003b60:	441a      	add	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	441a      	add	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	441a      	add	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4910      	ldr	r1, [pc, #64]	; (8003bb0 <RTC_WeekDayNum+0xe8>)
 8003b70:	fba1 1303 	umull	r1, r3, r1, r3
 8003b74:	095b      	lsrs	r3, r3, #5
 8003b76:	1ad2      	subs	r2, r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	490d      	ldr	r1, [pc, #52]	; (8003bb0 <RTC_WeekDayNum+0xe8>)
 8003b7c:	fba1 1303 	umull	r1, r3, r1, r3
 8003b80:	09db      	lsrs	r3, r3, #7
 8003b82:	4413      	add	r3, r2
 8003b84:	1c9a      	adds	r2, r3, #2
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <RTC_WeekDayNum+0xec>)
 8003b88:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8c:	1ad1      	subs	r1, r2, r3
 8003b8e:	0849      	lsrs	r1, r1, #1
 8003b90:	440b      	add	r3, r1
 8003b92:	0899      	lsrs	r1, r3, #2
 8003b94:	460b      	mov	r3, r1
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	1a5b      	subs	r3, r3, r1
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	b2db      	uxtb	r3, r3
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	38e38e39 	.word	0x38e38e39
 8003bb0:	51eb851f 	.word	0x51eb851f
 8003bb4:	24924925 	.word	0x24924925

08003bb8 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d024      	beq.n	8003c18 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01d      	beq.n	8003c18 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f821 	bl	8003c32 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0204 	mvn.w	r2, #4
 8003bf8:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	745a      	strb	r2, [r3, #17]
 8003c00:	e005      	b.n	8003c0e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f80c 	bl	8003c20 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f06f 0201 	mvn.w	r2, #1
 8003c16:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e053      	b.n	8003cfe <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d106      	bne.n	8003c76 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7fd fbff 	bl	8001474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	ea42 0103 	orr.w	r1, r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	0c1a      	lsrs	r2, r3, #16
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f002 0204 	and.w	r2, r2, #4
 8003cdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b088      	sub	sp, #32
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_SPI_Transmit+0x22>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e11e      	b.n	8003f66 <HAL_SPI_Transmit+0x260>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d30:	f7fd fe6e 	bl	8001a10 <HAL_GetTick>
 8003d34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d002      	beq.n	8003d4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
 8003d48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d4a:	e103      	b.n	8003f54 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_SPI_Transmit+0x52>
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d5c:	e0fa      	b.n	8003f54 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2203      	movs	r2, #3
 8003d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da4:	d107      	bne.n	8003db6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003db4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d007      	beq.n	8003dd4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ddc:	d14b      	bne.n	8003e76 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_SPI_Transmit+0xe6>
 8003de6:	8afb      	ldrh	r3, [r7, #22]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d13e      	bne.n	8003e6a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	881a      	ldrh	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	1c9a      	adds	r2, r3, #2
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e10:	e02b      	b.n	8003e6a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d112      	bne.n	8003e46 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	881a      	ldrh	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	1c9a      	adds	r2, r3, #2
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e44:	e011      	b.n	8003e6a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e46:	f7fd fde3 	bl	8001a10 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d803      	bhi.n	8003e5e <HAL_SPI_Transmit+0x158>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d102      	bne.n	8003e64 <HAL_SPI_Transmit+0x15e>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e68:	e074      	b.n	8003f54 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ce      	bne.n	8003e12 <HAL_SPI_Transmit+0x10c>
 8003e74:	e04c      	b.n	8003f10 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_SPI_Transmit+0x17e>
 8003e7e:	8afb      	ldrh	r3, [r7, #22]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d140      	bne.n	8003f06 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	7812      	ldrb	r2, [r2, #0]
 8003e90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003eaa:	e02c      	b.n	8003f06 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d113      	bne.n	8003ee2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ee0:	e011      	b.n	8003f06 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee2:	f7fd fd95 	bl	8001a10 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d803      	bhi.n	8003efa <HAL_SPI_Transmit+0x1f4>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d102      	bne.n	8003f00 <HAL_SPI_Transmit+0x1fa>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f04:	e026      	b.n	8003f54 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1cd      	bne.n	8003eac <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	6839      	ldr	r1, [r7, #0]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fb91 	bl	800463c <SPI_EndRxTxTransaction>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e000      	b.n	8003f54 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003f52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f64:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b088      	sub	sp, #32
 8003f72:	af02      	add	r7, sp, #8
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	603b      	str	r3, [r7, #0]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8a:	d112      	bne.n	8003fb2 <HAL_SPI_Receive+0x44>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10e      	bne.n	8003fb2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2204      	movs	r2, #4
 8003f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f9c:	88fa      	ldrh	r2, [r7, #6]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f8e9 	bl	8004180 <HAL_SPI_TransmitReceive>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	e0e2      	b.n	8004178 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_SPI_Receive+0x52>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e0db      	b.n	8004178 <HAL_SPI_Receive+0x20a>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc8:	f7fd fd22 	bl	8001a10 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fde:	e0c2      	b.n	8004166 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_SPI_Receive+0x7e>
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ff0:	e0b9      	b.n	8004166 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004038:	d107      	bne.n	800404a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004048:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d007      	beq.n	8004068 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004066:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d162      	bne.n	8004136 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004070:	e02e      	b.n	80040d0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d115      	bne.n	80040ac <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f103 020c 	add.w	r2, r3, #12
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040aa:	e011      	b.n	80040d0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ac:	f7fd fcb0 	bl	8001a10 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d803      	bhi.n	80040c4 <HAL_SPI_Receive+0x156>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d102      	bne.n	80040ca <HAL_SPI_Receive+0x15c>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040ce:	e04a      	b.n	8004166 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1cb      	bne.n	8004072 <HAL_SPI_Receive+0x104>
 80040da:	e031      	b.n	8004140 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d113      	bne.n	8004112 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	b292      	uxth	r2, r2
 80040f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	1c9a      	adds	r2, r3, #2
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004110:	e011      	b.n	8004136 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004112:	f7fd fc7d 	bl	8001a10 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d803      	bhi.n	800412a <HAL_SPI_Receive+0x1bc>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d102      	bne.n	8004130 <HAL_SPI_Receive+0x1c2>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004134:	e017      	b.n	8004166 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1cd      	bne.n	80040dc <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fa27 	bl	8004598 <SPI_EndRxTransaction>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	75fb      	strb	r3, [r7, #23]
 8004162:	e000      	b.n	8004166 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004164:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004176:	7dfb      	ldrb	r3, [r7, #23]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08c      	sub	sp, #48	; 0x30
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800418e:	2301      	movs	r3, #1
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_SPI_TransmitReceive+0x26>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e18a      	b.n	80044bc <HAL_SPI_TransmitReceive+0x33c>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ae:	f7fd fc2f 	bl	8001a10 <HAL_GetTick>
 80041b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d00f      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x70>
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d6:	d107      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x68>
 80041e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d003      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
 80041ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041ee:	e15b      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x82>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x82>
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004208:	e14e      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b04      	cmp	r3, #4
 8004214:	d003      	beq.n	800421e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2205      	movs	r2, #5
 800421a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	887a      	ldrh	r2, [r7, #2]
 800422e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	887a      	ldrh	r2, [r7, #2]
 8004246:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d007      	beq.n	8004272 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004270:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427a:	d178      	bne.n	800436e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_SPI_TransmitReceive+0x10a>
 8004284:	8b7b      	ldrh	r3, [r7, #26]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d166      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	881a      	ldrh	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	1c9a      	adds	r2, r3, #2
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ae:	e053      	b.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d11b      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x176>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d016      	beq.n	80042f6 <HAL_SPI_TransmitReceive+0x176>
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d113      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	881a      	ldrh	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	1c9a      	adds	r2, r3, #2
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d119      	bne.n	8004338 <HAL_SPI_TransmitReceive+0x1b8>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d014      	beq.n	8004338 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	b292      	uxth	r2, r2
 800431a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	1c9a      	adds	r2, r3, #2
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004334:	2301      	movs	r3, #1
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004338:	f7fd fb6a 	bl	8001a10 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004344:	429a      	cmp	r2, r3
 8004346:	d807      	bhi.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d003      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004356:	e0a7      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1a6      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x130>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1a1      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x130>
 800436c:	e07c      	b.n	8004468 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_SPI_TransmitReceive+0x1fc>
 8004376:	8b7b      	ldrh	r3, [r7, #26]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d16b      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	7812      	ldrb	r2, [r2, #0]
 8004388:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a2:	e057      	b.n	8004454 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d11c      	bne.n	80043ec <HAL_SPI_TransmitReceive+0x26c>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d017      	beq.n	80043ec <HAL_SPI_TransmitReceive+0x26c>
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d114      	bne.n	80043ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d119      	bne.n	800442e <HAL_SPI_TransmitReceive+0x2ae>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d014      	beq.n	800442e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800442a:	2301      	movs	r3, #1
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800442e:	f7fd faef 	bl	8001a10 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800443a:	429a      	cmp	r2, r3
 800443c:	d803      	bhi.n	8004446 <HAL_SPI_TransmitReceive+0x2c6>
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d102      	bne.n	800444c <HAL_SPI_TransmitReceive+0x2cc>
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004452:	e029      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1a2      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x224>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d19d      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f8e5 	bl	800463c <SPI_EndRxTxTransaction>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d006      	beq.n	8004486 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004484:	e010      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	e000      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80044a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3730      	adds	r7, #48	; 0x30
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044d4:	e04c      	b.n	8004570 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d048      	beq.n	8004570 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044de:	f7fd fa97 	bl	8001a10 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d902      	bls.n	80044f4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d13d      	bne.n	8004570 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004502:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800450c:	d111      	bne.n	8004532 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004516:	d004      	beq.n	8004522 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004520:	d107      	bne.n	8004532 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004530:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453a:	d10f      	bne.n	800455c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800455a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e00f      	b.n	8004590 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4013      	ands	r3, r2
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	429a      	cmp	r2, r3
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	429a      	cmp	r2, r3
 800458c:	d1a3      	bne.n	80044d6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ac:	d111      	bne.n	80045d2 <SPI_EndRxTransaction+0x3a>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b6:	d004      	beq.n	80045c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c0:	d107      	bne.n	80045d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045da:	d117      	bne.n	800460c <SPI_EndRxTransaction+0x74>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e4:	d112      	bne.n	800460c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2101      	movs	r1, #1
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7ff ff67 	bl	80044c4 <SPI_WaitFlagStateUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01a      	beq.n	8004632 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	f043 0220 	orr.w	r2, r3, #32
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e013      	b.n	8004634 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2200      	movs	r2, #0
 8004614:	2180      	movs	r1, #128	; 0x80
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff ff54 	bl	80044c4 <SPI_WaitFlagStateUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	f043 0220 	orr.w	r2, r3, #32
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e000      	b.n	8004634 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af02      	add	r7, sp, #8
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2200      	movs	r2, #0
 8004650:	2180      	movs	r1, #128	; 0x80
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7ff ff36 	bl	80044c4 <SPI_WaitFlagStateUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	f043 0220 	orr.w	r2, r3, #32
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e000      	b.n	8004670 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e01d      	b.n	80046c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fd f87c 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f000 fa10 	bl	8004adc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0201 	orr.w	r2, r2, #1
 80046e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b06      	cmp	r3, #6
 80046f6:	d007      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr

08004714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b02      	cmp	r3, #2
 8004728:	d122      	bne.n	8004770 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b02      	cmp	r3, #2
 8004736:	d11b      	bne.n	8004770 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0202 	mvn.w	r2, #2
 8004740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f9a4 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 800475c:	e005      	b.n	800476a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f997 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f9a6 	bl	8004ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b04      	cmp	r3, #4
 800477c:	d122      	bne.n	80047c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b04      	cmp	r3, #4
 800478a:	d11b      	bne.n	80047c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0204 	mvn.w	r2, #4
 8004794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f97a 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f96d 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f97c 	bl	8004ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d122      	bne.n	8004818 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d11b      	bne.n	8004818 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0208 	mvn.w	r2, #8
 80047e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2204      	movs	r2, #4
 80047ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f950 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 8004804:	e005      	b.n	8004812 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f943 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f952 	bl	8004ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b10      	cmp	r3, #16
 8004824:	d122      	bne.n	800486c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b10      	cmp	r3, #16
 8004832:	d11b      	bne.n	800486c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0210 	mvn.w	r2, #16
 800483c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2208      	movs	r2, #8
 8004842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f926 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 8004858:	e005      	b.n	8004866 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f919 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f928 	bl	8004ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10e      	bne.n	8004898 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b01      	cmp	r3, #1
 8004886:	d107      	bne.n	8004898 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0201 	mvn.w	r2, #1
 8004890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fc fa76 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a2:	2b80      	cmp	r3, #128	; 0x80
 80048a4:	d10e      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b0:	2b80      	cmp	r3, #128	; 0x80
 80048b2:	d107      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa51 	bl	8004d66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d10e      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d107      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f8ec 	bl	8004ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d10e      	bne.n	800491c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b20      	cmp	r3, #32
 800490a:	d107      	bne.n	800491c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0220 	mvn.w	r2, #32
 8004914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa1c 	bl	8004d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_TIM_ConfigClockSource+0x18>
 8004938:	2302      	movs	r3, #2
 800493a:	e0a6      	b.n	8004a8a <HAL_TIM_ConfigClockSource+0x166>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800495a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004962:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d067      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0x120>
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d80b      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x6c>
 8004978:	2b10      	cmp	r3, #16
 800497a:	d073      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x140>
 800497c:	2b10      	cmp	r3, #16
 800497e:	d802      	bhi.n	8004986 <HAL_TIM_ConfigClockSource+0x62>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d06f      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004984:	e078      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004986:	2b20      	cmp	r3, #32
 8004988:	d06c      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x140>
 800498a:	2b30      	cmp	r3, #48	; 0x30
 800498c:	d06a      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800498e:	e073      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004990:	2b70      	cmp	r3, #112	; 0x70
 8004992:	d00d      	beq.n	80049b0 <HAL_TIM_ConfigClockSource+0x8c>
 8004994:	2b70      	cmp	r3, #112	; 0x70
 8004996:	d804      	bhi.n	80049a2 <HAL_TIM_ConfigClockSource+0x7e>
 8004998:	2b50      	cmp	r3, #80	; 0x50
 800499a:	d033      	beq.n	8004a04 <HAL_TIM_ConfigClockSource+0xe0>
 800499c:	2b60      	cmp	r3, #96	; 0x60
 800499e:	d041      	beq.n	8004a24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80049a0:	e06a      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	d066      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x152>
 80049a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ac:	d017      	beq.n	80049de <HAL_TIM_ConfigClockSource+0xba>
      break;
 80049ae:	e063      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	6899      	ldr	r1, [r3, #8]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f000 f965 	bl	8004c8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	609a      	str	r2, [r3, #8]
      break;
 80049dc:	e04c      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6899      	ldr	r1, [r3, #8]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f000 f94e 	bl	8004c8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a00:	609a      	str	r2, [r3, #8]
      break;
 8004a02:	e039      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	461a      	mov	r2, r3
 8004a12:	f000 f8c5 	bl	8004ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2150      	movs	r1, #80	; 0x50
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 f91c 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 8004a22:	e029      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	461a      	mov	r2, r3
 8004a32:	f000 f8e3 	bl	8004bfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2160      	movs	r1, #96	; 0x60
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 f90c 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 8004a42:	e019      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	6859      	ldr	r1, [r3, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	461a      	mov	r2, r3
 8004a52:	f000 f8a5 	bl	8004ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2140      	movs	r1, #64	; 0x40
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f8fc 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 8004a62:	e009      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f000 f8f3 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 8004a74:	e000      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr
	...

08004adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a29      	ldr	r2, [pc, #164]	; (8004b94 <TIM_Base_SetConfig+0xb8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <TIM_Base_SetConfig+0x30>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afa:	d007      	beq.n	8004b0c <TIM_Base_SetConfig+0x30>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a26      	ldr	r2, [pc, #152]	; (8004b98 <TIM_Base_SetConfig+0xbc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_Base_SetConfig+0x30>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a25      	ldr	r2, [pc, #148]	; (8004b9c <TIM_Base_SetConfig+0xc0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d108      	bne.n	8004b1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <TIM_Base_SetConfig+0xb8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <TIM_Base_SetConfig+0x62>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2c:	d007      	beq.n	8004b3e <TIM_Base_SetConfig+0x62>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <TIM_Base_SetConfig+0xbc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_Base_SetConfig+0x62>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <TIM_Base_SetConfig+0xc0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d108      	bne.n	8004b50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <TIM_Base_SetConfig+0xb8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d103      	bne.n	8004b84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	615a      	str	r2, [r3, #20]
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800

08004ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f023 0201 	bic.w	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f023 030a 	bic.w	r3, r3, #10
 8004bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	f023 0210 	bic.w	r2, r3, #16
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	031b      	lsls	r3, r3, #12
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	621a      	str	r2, [r3, #32]
}
 8004c50:	bf00      	nop
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr

08004c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f043 0307 	orr.w	r3, r3, #7
 8004c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b087      	sub	sp, #28
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	021a      	lsls	r2, r3, #8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	609a      	str	r2, [r3, #8]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e032      	b.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d1c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr

08004d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr

08004d66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e03f      	b.n	8004e0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fc fd5e 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2224      	movs	r2, #36	; 0x24
 8004da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f829 	bl	8004e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e4e:	f023 030c 	bic.w	r3, r3, #12
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a52      	ldr	r2, [pc, #328]	; (8004fc0 <UART_SetConfig+0x1ac>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d14e      	bne.n	8004f1a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e7c:	f7fd fe6a 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
 8004e80:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	009a      	lsls	r2, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	4a4a      	ldr	r2, [pc, #296]	; (8004fc4 <UART_SetConfig+0x1b0>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	0119      	lsls	r1, r3, #4
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009a      	lsls	r2, r3, #2
 8004eac:	441a      	add	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb8:	4b42      	ldr	r3, [pc, #264]	; (8004fc4 <UART_SetConfig+0x1b0>)
 8004eba:	fba3 0302 	umull	r0, r3, r3, r2
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	2064      	movs	r0, #100	; 0x64
 8004ec2:	fb00 f303 	mul.w	r3, r0, r3
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	3332      	adds	r3, #50	; 0x32
 8004ecc:	4a3d      	ldr	r2, [pc, #244]	; (8004fc4 <UART_SetConfig+0x1b0>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ed8:	4419      	add	r1, r3
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009a      	lsls	r2, r3, #2
 8004ee4:	441a      	add	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef0:	4b34      	ldr	r3, [pc, #208]	; (8004fc4 <UART_SetConfig+0x1b0>)
 8004ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	2064      	movs	r0, #100	; 0x64
 8004efa:	fb00 f303 	mul.w	r3, r0, r3
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	3332      	adds	r3, #50	; 0x32
 8004f04:	4a2f      	ldr	r2, [pc, #188]	; (8004fc4 <UART_SetConfig+0x1b0>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	f003 020f 	and.w	r2, r3, #15
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	440a      	add	r2, r1
 8004f16:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004f18:	e04d      	b.n	8004fb6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f1a:	f7fd fe07 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
 8004f1e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009a      	lsls	r2, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f36:	4a23      	ldr	r2, [pc, #140]	; (8004fc4 <UART_SetConfig+0x1b0>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	0119      	lsls	r1, r3, #4
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	009a      	lsls	r2, r3, #2
 8004f4a:	441a      	add	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f56:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <UART_SetConfig+0x1b0>)
 8004f58:	fba3 0302 	umull	r0, r3, r3, r2
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	2064      	movs	r0, #100	; 0x64
 8004f60:	fb00 f303 	mul.w	r3, r0, r3
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	3332      	adds	r3, #50	; 0x32
 8004f6a:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <UART_SetConfig+0x1b0>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f76:	4419      	add	r1, r3
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009a      	lsls	r2, r3, #2
 8004f82:	441a      	add	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <UART_SetConfig+0x1b0>)
 8004f90:	fba3 0302 	umull	r0, r3, r3, r2
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	2064      	movs	r0, #100	; 0x64
 8004f98:	fb00 f303 	mul.w	r3, r0, r3
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	3332      	adds	r3, #50	; 0x32
 8004fa2:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <UART_SetConfig+0x1b0>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	f003 020f 	and.w	r2, r3, #15
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	609a      	str	r2, [r3, #8]
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40013800 	.word	0x40013800
 8004fc4:	51eb851f 	.word	0x51eb851f

08004fc8 <__libc_init_array>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	2500      	movs	r5, #0
 8004fcc:	4e0c      	ldr	r6, [pc, #48]	; (8005000 <__libc_init_array+0x38>)
 8004fce:	4c0d      	ldr	r4, [pc, #52]	; (8005004 <__libc_init_array+0x3c>)
 8004fd0:	1ba4      	subs	r4, r4, r6
 8004fd2:	10a4      	asrs	r4, r4, #2
 8004fd4:	42a5      	cmp	r5, r4
 8004fd6:	d109      	bne.n	8004fec <__libc_init_array+0x24>
 8004fd8:	f000 f822 	bl	8005020 <_init>
 8004fdc:	2500      	movs	r5, #0
 8004fde:	4e0a      	ldr	r6, [pc, #40]	; (8005008 <__libc_init_array+0x40>)
 8004fe0:	4c0a      	ldr	r4, [pc, #40]	; (800500c <__libc_init_array+0x44>)
 8004fe2:	1ba4      	subs	r4, r4, r6
 8004fe4:	10a4      	asrs	r4, r4, #2
 8004fe6:	42a5      	cmp	r5, r4
 8004fe8:	d105      	bne.n	8004ff6 <__libc_init_array+0x2e>
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ff0:	4798      	blx	r3
 8004ff2:	3501      	adds	r5, #1
 8004ff4:	e7ee      	b.n	8004fd4 <__libc_init_array+0xc>
 8004ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ffa:	4798      	blx	r3
 8004ffc:	3501      	adds	r5, #1
 8004ffe:	e7f2      	b.n	8004fe6 <__libc_init_array+0x1e>
 8005000:	08005240 	.word	0x08005240
 8005004:	08005240 	.word	0x08005240
 8005008:	08005240 	.word	0x08005240
 800500c:	08005244 	.word	0x08005244

08005010 <memset>:
 8005010:	4603      	mov	r3, r0
 8005012:	4402      	add	r2, r0
 8005014:	4293      	cmp	r3, r2
 8005016:	d100      	bne.n	800501a <memset+0xa>
 8005018:	4770      	bx	lr
 800501a:	f803 1b01 	strb.w	r1, [r3], #1
 800501e:	e7f9      	b.n	8005014 <memset+0x4>

08005020 <_init>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr

0800502c <_fini>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr
