
tableroPileta_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004434  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004580  08004580  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004580  08004580  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004580  08004580  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000010  08004598  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004598  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108a3  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e1a  00000000  00000000  000308dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001190  00000000  00000000  000336f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  00034888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f54  00000000  00000000  00035870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef55  00000000  00000000  0004b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076ee3  00000000  00000000  0005a719  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d15fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046bc  00000000  00000000  000d1678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08004528 	.word	0x08004528

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08004528 	.word	0x08004528

0800014c <spi_74HC165_init>:
 * La función de inicialización está modificada para trabajar con dos
 * integrados 74HC165 a la vez, tratándolos como distintos esclavos SPI.
 * Cada integrado contará con su propia función de lectura, así como sus
 * propias señales CE.
 */
void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CE1port, uint16_t CE1pin, GPIO_TypeDef* CE2port, uint16_t CE2pin){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <spi_74HC165_init+0x44>)
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 8000162:	4a0c      	ldr	r2, [pc, #48]	; (8000194 <spi_74HC165_init+0x48>)
 8000164:	68bb      	ldr	r3, [r7, #8]
 8000166:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 8000168:	4a0b      	ldr	r2, [pc, #44]	; (8000198 <spi_74HC165_init+0x4c>)
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	8013      	strh	r3, [r2, #0]

	portCE1 = CE1port;
 800016e:	4a0b      	ldr	r2, [pc, #44]	; (800019c <spi_74HC165_init+0x50>)
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	6013      	str	r3, [r2, #0]
	pinCE1 = CE1pin;
 8000174:	4a0a      	ldr	r2, [pc, #40]	; (80001a0 <spi_74HC165_init+0x54>)
 8000176:	8b3b      	ldrh	r3, [r7, #24]
 8000178:	8013      	strh	r3, [r2, #0]
	portCE2 = CE2port;
 800017a:	4a0a      	ldr	r2, [pc, #40]	; (80001a4 <spi_74HC165_init+0x58>)
 800017c:	69fb      	ldr	r3, [r7, #28]
 800017e:	6013      	str	r3, [r2, #0]
	pinCE2 = CE2pin;
 8000180:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <spi_74HC165_init+0x5c>)
 8000182:	8c3b      	ldrh	r3, [r7, #32]
 8000184:	8013      	strh	r3, [r2, #0]

}
 8000186:	bf00      	nop
 8000188:	3714      	adds	r7, #20
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000030 	.word	0x20000030
 8000194:	2000003c 	.word	0x2000003c
 8000198:	20000034 	.word	0x20000034
 800019c:	20000044 	.word	0x20000044
 80001a0:	20000040 	.word	0x20000040
 80001a4:	20000038 	.word	0x20000038
 80001a8:	20000048 	.word	0x20000048

080001ac <spi_74HC165_receiveBotones>:


void spi_74HC165_receiveBotones (uint8_t* pdata, uint16_t sizeData){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	460b      	mov	r3, r1
 80001b6:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 80001b8:	4b15      	ldr	r3, [pc, #84]	; (8000210 <spi_74HC165_receiveBotones+0x64>)
 80001ba:	6818      	ldr	r0, [r3, #0]
 80001bc:	4b15      	ldr	r3, [pc, #84]	; (8000214 <spi_74HC165_receiveBotones+0x68>)
 80001be:	881b      	ldrh	r3, [r3, #0]
 80001c0:	2200      	movs	r2, #0
 80001c2:	4619      	mov	r1, r3
 80001c4:	f001 fb90 	bl	80018e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 80001c8:	4b11      	ldr	r3, [pc, #68]	; (8000210 <spi_74HC165_receiveBotones+0x64>)
 80001ca:	6818      	ldr	r0, [r3, #0]
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <spi_74HC165_receiveBotones+0x68>)
 80001ce:	881b      	ldrh	r3, [r3, #0]
 80001d0:	2201      	movs	r2, #1
 80001d2:	4619      	mov	r1, r3
 80001d4:	f001 fb88 	bl	80018e8 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE1, pinCE1, 0);
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <spi_74HC165_receiveBotones+0x6c>)
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <spi_74HC165_receiveBotones+0x70>)
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	2200      	movs	r2, #0
 80001e2:	4619      	mov	r1, r3
 80001e4:	f001 fb80 	bl	80018e8 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 80001e8:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <spi_74HC165_receiveBotones+0x74>)
 80001ea:	6818      	ldr	r0, [r3, #0]
 80001ec:	887a      	ldrh	r2, [r7, #2]
 80001ee:	2364      	movs	r3, #100	; 0x64
 80001f0:	6879      	ldr	r1, [r7, #4]
 80001f2:	f003 f940 	bl	8003476 <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE1, pinCE1, 1);
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <spi_74HC165_receiveBotones+0x6c>)
 80001f8:	6818      	ldr	r0, [r3, #0]
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <spi_74HC165_receiveBotones+0x70>)
 80001fc:	881b      	ldrh	r3, [r3, #0]
 80001fe:	2201      	movs	r2, #1
 8000200:	4619      	mov	r1, r3
 8000202:	f001 fb71 	bl	80018e8 <HAL_GPIO_WritePin>
}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	2000003c 	.word	0x2000003c
 8000214:	20000034 	.word	0x20000034
 8000218:	20000044 	.word	0x20000044
 800021c:	20000040 	.word	0x20000040
 8000220:	20000030 	.word	0x20000030

08000224 <spi_74HC165_receiveTeclado>:


void spi_74HC165_receiveTeclado (uint8_t* pdata, uint16_t sizeData){
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	460b      	mov	r3, r1
 800022e:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <spi_74HC165_receiveTeclado+0x64>)
 8000232:	6818      	ldr	r0, [r3, #0]
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <spi_74HC165_receiveTeclado+0x68>)
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	2200      	movs	r2, #0
 800023a:	4619      	mov	r1, r3
 800023c:	f001 fb54 	bl	80018e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <spi_74HC165_receiveTeclado+0x64>)
 8000242:	6818      	ldr	r0, [r3, #0]
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <spi_74HC165_receiveTeclado+0x68>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	2201      	movs	r2, #1
 800024a:	4619      	mov	r1, r3
 800024c:	f001 fb4c 	bl	80018e8 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE2, pinCE2, 0);
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <spi_74HC165_receiveTeclado+0x6c>)
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <spi_74HC165_receiveTeclado+0x70>)
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	2200      	movs	r2, #0
 800025a:	4619      	mov	r1, r3
 800025c:	f001 fb44 	bl	80018e8 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <spi_74HC165_receiveTeclado+0x74>)
 8000262:	6818      	ldr	r0, [r3, #0]
 8000264:	887a      	ldrh	r2, [r7, #2]
 8000266:	2364      	movs	r3, #100	; 0x64
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	f003 f904 	bl	8003476 <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE2, pinCE2, 1);
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <spi_74HC165_receiveTeclado+0x6c>)
 8000270:	6818      	ldr	r0, [r3, #0]
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <spi_74HC165_receiveTeclado+0x70>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	2201      	movs	r2, #1
 8000278:	4619      	mov	r1, r3
 800027a:	f001 fb35 	bl	80018e8 <HAL_GPIO_WritePin>
}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	2000003c 	.word	0x2000003c
 800028c:	20000034 	.word	0x20000034
 8000290:	20000038 	.word	0x20000038
 8000294:	20000048 	.word	0x20000048
 8000298:	20000030 	.word	0x20000030

0800029c <spi_74HC595_init>:
SPI_HandleTypeDef* spi_handler;
GPIO_TypeDef* portST;
uint16_t pinST;


void spi_74HC595_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* STport, uint16_t STpin){
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	4613      	mov	r3, r2
 80002a8:	80fb      	strh	r3, [r7, #6]

	spi_handler =hspi;
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <spi_74HC595_init+0x38>)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	6013      	str	r3, [r2, #0]

	portST = STport;
 80002b0:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <spi_74HC595_init+0x3c>)
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	6013      	str	r3, [r2, #0]
	pinST = STpin;
 80002b6:	4a09      	ldr	r2, [pc, #36]	; (80002dc <spi_74HC595_init+0x40>)
 80002b8:	88fb      	ldrh	r3, [r7, #6]
 80002ba:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(portST, pinST, 0);
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <spi_74HC595_init+0x3c>)
 80002be:	6818      	ldr	r0, [r3, #0]
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <spi_74HC595_init+0x40>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	2200      	movs	r2, #0
 80002c6:	4619      	mov	r1, r3
 80002c8:	f001 fb0e 	bl	80018e8 <HAL_GPIO_WritePin>

} //end spi_74HC595_init()
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000030 	.word	0x20000030
 80002d8:	20000050 	.word	0x20000050
 80002dc:	2000004c 	.word	0x2000004c

080002e0 <spi_74HC595_Transmit>:


void spi_74HC595_Transmit (uint8_t* pdata, uint16_t sizeData){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(spi_handler, pdata, sizeData, 100);
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <spi_74HC595_Transmit+0x44>)
 80002ee:	6818      	ldr	r0, [r3, #0]
 80002f0:	887a      	ldrh	r2, [r7, #2]
 80002f2:	2364      	movs	r3, #100	; 0x64
 80002f4:	6879      	ldr	r1, [r7, #4]
 80002f6:	f002 ff8a 	bl	800320e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(portST, pinST, 1);
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <spi_74HC595_Transmit+0x48>)
 80002fc:	6818      	ldr	r0, [r3, #0]
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <spi_74HC595_Transmit+0x4c>)
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	2201      	movs	r2, #1
 8000304:	4619      	mov	r1, r3
 8000306:	f001 faef 	bl	80018e8 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(portST, pinST, 0);
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <spi_74HC595_Transmit+0x48>)
 800030c:	6818      	ldr	r0, [r3, #0]
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <spi_74HC595_Transmit+0x4c>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	2200      	movs	r2, #0
 8000314:	4619      	mov	r1, r3
 8000316:	f001 fae7 	bl	80018e8 <HAL_GPIO_WritePin>

} //end spi_74HC595_transmit()
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000030 	.word	0x20000030
 8000328:	20000050 	.word	0x20000050
 800032c:	2000004c 	.word	0x2000004c

08000330 <turnONFila>:
uint32_t read_input, last_input, fall_input, rise_input;

uint16_t write_output;


void turnONFila (uint8_t filaNum){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]

	switch (filaNum){
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b03      	cmp	r3, #3
 800033e:	d862      	bhi.n	8000406 <turnONFila+0xd6>
 8000340:	a201      	add	r2, pc, #4	; (adr r2, 8000348 <turnONFila+0x18>)
 8000342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000346:	bf00      	nop
 8000348:	08000359 	.word	0x08000359
 800034c:	08000385 	.word	0x08000385
 8000350:	080003b1 	.word	0x080003b1
 8000354:	080003dd 	.word	0x080003dd
		case 0:
			//pongo en 0 la fila 0; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2120      	movs	r1, #32
 800035c:	482c      	ldr	r0, [pc, #176]	; (8000410 <turnONFila+0xe0>)
 800035e:	f001 fac3 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 8000362:	2201      	movs	r2, #1
 8000364:	2110      	movs	r1, #16
 8000366:	482a      	ldr	r0, [pc, #168]	; (8000410 <turnONFila+0xe0>)
 8000368:	f001 fabe 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 800036c:	2201      	movs	r2, #1
 800036e:	2108      	movs	r1, #8
 8000370:	4827      	ldr	r0, [pc, #156]	; (8000410 <turnONFila+0xe0>)
 8000372:	f001 fab9 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 8000376:	2201      	movs	r2, #1
 8000378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037c:	4825      	ldr	r0, [pc, #148]	; (8000414 <turnONFila+0xe4>)
 800037e:	f001 fab3 	bl	80018e8 <HAL_GPIO_WritePin>
		break;
 8000382:	e041      	b.n	8000408 <turnONFila+0xd8>
		case 1:
			//pongo en 0 la fila 1; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 8000384:	2201      	movs	r2, #1
 8000386:	2120      	movs	r1, #32
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <turnONFila+0xe0>)
 800038a:	f001 faad 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2110      	movs	r1, #16
 8000392:	481f      	ldr	r0, [pc, #124]	; (8000410 <turnONFila+0xe0>)
 8000394:	f001 faa8 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 8000398:	2201      	movs	r2, #1
 800039a:	2108      	movs	r1, #8
 800039c:	481c      	ldr	r0, [pc, #112]	; (8000410 <turnONFila+0xe0>)
 800039e:	f001 faa3 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003a8:	481a      	ldr	r0, [pc, #104]	; (8000414 <turnONFila+0xe4>)
 80003aa:	f001 fa9d 	bl	80018e8 <HAL_GPIO_WritePin>
		break;
 80003ae:	e02b      	b.n	8000408 <turnONFila+0xd8>
		case 2:
			//pongo en 0 la fila 2; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2120      	movs	r1, #32
 80003b4:	4816      	ldr	r0, [pc, #88]	; (8000410 <turnONFila+0xe0>)
 80003b6:	f001 fa97 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2110      	movs	r1, #16
 80003be:	4814      	ldr	r0, [pc, #80]	; (8000410 <turnONFila+0xe0>)
 80003c0:	f001 fa92 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2108      	movs	r1, #8
 80003c8:	4811      	ldr	r0, [pc, #68]	; (8000410 <turnONFila+0xe0>)
 80003ca:	f001 fa8d 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003d4:	480f      	ldr	r0, [pc, #60]	; (8000414 <turnONFila+0xe4>)
 80003d6:	f001 fa87 	bl	80018e8 <HAL_GPIO_WritePin>
		break;
 80003da:	e015      	b.n	8000408 <turnONFila+0xd8>
		case 3:
			//pongo en 0 la fila 3; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	480b      	ldr	r0, [pc, #44]	; (8000410 <turnONFila+0xe0>)
 80003e2:	f001 fa81 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2110      	movs	r1, #16
 80003ea:	4809      	ldr	r0, [pc, #36]	; (8000410 <turnONFila+0xe0>)
 80003ec:	f001 fa7c 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2108      	movs	r1, #8
 80003f4:	4806      	ldr	r0, [pc, #24]	; (8000410 <turnONFila+0xe0>)
 80003f6:	f001 fa77 	bl	80018e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <turnONFila+0xe4>)
 8000402:	f001 fa71 	bl	80018e8 <HAL_GPIO_WritePin>
		default:
		break;
 8000406:	bf00      	nop
	}//end witch
}//end turnONFila
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40010c00 	.word	0x40010c00
 8000414:	40010800 	.word	0x40010800

08000418 <lecturaTeclas>:


void lecturaTeclas (void){
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0

	last_input = read_input;
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <lecturaTeclas+0x74>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a1b      	ldr	r2, [pc, #108]	; (8000490 <lecturaTeclas+0x78>)
 8000424:	6013      	str	r3, [r2, #0]

	//pulsadores:
	spi_74HC165_receiveBotones (&read_teclas, 1);
 8000426:	2101      	movs	r1, #1
 8000428:	481a      	ldr	r0, [pc, #104]	; (8000494 <lecturaTeclas+0x7c>)
 800042a:	f7ff febf 	bl	80001ac <spi_74HC165_receiveBotones>

	//teclado matricial:

	for (uint8_t i = 0; i < 4; i++){
 800042e:	2300      	movs	r3, #0
 8000430:	71fb      	strb	r3, [r7, #7]
 8000432:	e00d      	b.n	8000450 <lecturaTeclas+0x38>
		turnONFila(i);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff7a 	bl	8000330 <turnONFila>
		spi_74HC165_receiveTeclado(&read_teclado[i], 1);
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	4a16      	ldr	r2, [pc, #88]	; (8000498 <lecturaTeclas+0x80>)
 8000440:	4413      	add	r3, r2
 8000442:	2101      	movs	r1, #1
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff feed 	bl	8000224 <spi_74HC165_receiveTeclado>
	for (uint8_t i = 0; i < 4; i++){
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	3301      	adds	r3, #1
 800044e:	71fb      	strb	r3, [r7, #7]
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	2b03      	cmp	r3, #3
 8000454:	d9ee      	bls.n	8000434 <lecturaTeclas+0x1c>
	}//end for i

	read_input = (uint32_t) (read_teclas |
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <lecturaTeclas+0x7c>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	461a      	mov	r2, r3
							(read_teclado[0] << 6) |
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <lecturaTeclas+0x80>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	019b      	lsls	r3, r3, #6
	read_input = (uint32_t) (read_teclas |
 8000462:	431a      	orrs	r2, r3
							(read_teclado[1] << 10) |
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <lecturaTeclas+0x80>)
 8000466:	785b      	ldrb	r3, [r3, #1]
 8000468:	029b      	lsls	r3, r3, #10
							(read_teclado[0] << 6) |
 800046a:	431a      	orrs	r2, r3
							(read_teclado[2] << 14) |
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <lecturaTeclas+0x80>)
 800046e:	789b      	ldrb	r3, [r3, #2]
 8000470:	039b      	lsls	r3, r3, #14
							(read_teclado[1] << 10) |
 8000472:	431a      	orrs	r2, r3
							(read_teclado[3] << 18));
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <lecturaTeclas+0x80>)
 8000476:	78db      	ldrb	r3, [r3, #3]
 8000478:	049b      	lsls	r3, r3, #18
							(read_teclado[2] << 14) |
 800047a:	4313      	orrs	r3, r2
	read_input = (uint32_t) (read_teclas |
 800047c:	461a      	mov	r2, r3
 800047e:	4b03      	ldr	r3, [pc, #12]	; (800048c <lecturaTeclas+0x74>)
 8000480:	601a      	str	r2, [r3, #0]

} //end lecturaTeclas()
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	2000005c 	.word	0x2000005c
 8000490:	20000080 	.word	0x20000080
 8000494:	20000084 	.word	0x20000084
 8000498:	20000058 	.word	0x20000058

0800049c <update_teclas>:


void update_teclas(void){ //ESTADO DE LAS TECLAS CON LOGICA NEGATIVA
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0


	fall_input = last_input & ~read_input;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <update_teclas+0x2c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	43da      	mvns	r2, r3
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <update_teclas+0x30>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4013      	ands	r3, r2
 80004ac:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <update_teclas+0x34>)
 80004ae:	6013      	str	r3, [r2, #0]
	rise_input = ~last_input & read_input;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <update_teclas+0x30>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	43da      	mvns	r2, r3
 80004b6:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <update_teclas+0x2c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4013      	ands	r3, r2
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <update_teclas+0x38>)
 80004be:	6013      	str	r3, [r2, #0]



} //end teclas
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	2000005c 	.word	0x2000005c
 80004cc:	20000080 	.word	0x20000080
 80004d0:	20000060 	.word	0x20000060
 80004d4:	20000064 	.word	0x20000064

080004d8 <update_outputs>:
	}

} //end setOutput()


void update_outputs (void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

	spi_74HC595_Transmit( (uint8_t*)&write_output, 2); // 2 bytes.
 80004dc:	2102      	movs	r1, #2
 80004de:	4802      	ldr	r0, [pc, #8]	; (80004e8 <update_outputs+0x10>)
 80004e0:	f7ff fefe 	bl	80002e0 <spi_74HC595_Transmit>

}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000054 	.word	0x20000054

080004ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_ADC1_Init+0x74>)
 80004fe:	4a19      	ldr	r2, [pc, #100]	; (8000564 <MX_ADC1_Init+0x78>)
 8000500:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_ADC1_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_ADC1_Init+0x74>)
 800050a:	2200      	movs	r2, #0
 800050c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_ADC1_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MX_ADC1_Init+0x74>)
 8000516:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800051a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051c:	4b10      	ldr	r3, [pc, #64]	; (8000560 <MX_ADC1_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_ADC1_Init+0x74>)
 8000524:	2201      	movs	r2, #1
 8000526:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <MX_ADC1_Init+0x74>)
 800052a:	f000 fd6b 	bl	8001004 <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000534:	f000 f9ba 	bl	80008ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800053c:	2301      	movs	r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_ADC1_Init+0x74>)
 800054a:	f000 fe33 	bl	80011b4 <HAL_ADC_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000554:	f000 f9aa 	bl	80008ac <Error_Handler>
  }

}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000088 	.word	0x20000088
 8000564:	40012400 	.word	0x40012400

08000568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <HAL_ADC_MspInit+0x6c>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d121      	bne.n	80005cc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <HAL_ADC_MspInit+0x70>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <HAL_ADC_MspInit+0x70>)
 800058e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_ADC_MspInit+0x70>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <HAL_ADC_MspInit+0x70>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <HAL_ADC_MspInit+0x70>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_ADC_MspInit+0x70>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005b8:	2301      	movs	r3, #1
 80005ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005bc:	2303      	movs	r3, #3
 80005be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <HAL_ADC_MspInit+0x74>)
 80005c8:	f001 f834 	bl	8001634 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40012400 	.word	0x40012400
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010800 	.word	0x40010800

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f4:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <MX_GPIO_Init+0xe8>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a33      	ldr	r2, [pc, #204]	; (80006c8 <MX_GPIO_Init+0xe8>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b31      	ldr	r3, [pc, #196]	; (80006c8 <MX_GPIO_Init+0xe8>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0310 	and.w	r3, r3, #16
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060c:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <MX_GPIO_Init+0xe8>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a2d      	ldr	r2, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xe8>)
 8000612:	f043 0320 	orr.w	r3, r3, #32
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <MX_GPIO_Init+0xe8>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0320 	and.w	r3, r3, #32
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <MX_GPIO_Init+0xe8>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xe8>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <MX_GPIO_Init+0xe8>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0304 	and.w	r3, r3, #4
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_GPIO_Init+0xe8>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <MX_GPIO_Init+0xe8>)
 8000642:	f043 0308 	orr.w	r3, r3, #8
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_GPIO_Init+0xe8>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE1_Pin
 8000654:	2200      	movs	r2, #0
 8000656:	f248 71e0 	movw	r1, #34784	; 0x87e0
 800065a:	481c      	ldr	r0, [pc, #112]	; (80006cc <MX_GPIO_Init+0xec>)
 800065c:	f001 f944 	bl	80018e8 <HAL_GPIO_WritePin>
                          |OUT_CE2_Pin|OUT_ST_Pin|OUT_fila3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_GLCD_RST_Pin|OUT_PL_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 8000660:	2200      	movs	r2, #0
 8000662:	f241 0139 	movw	r1, #4153	; 0x1039
 8000666:	481a      	ldr	r0, [pc, #104]	; (80006d0 <MX_GPIO_Init+0xf0>)
 8000668:	f001 f93e 	bl	80018e8 <HAL_GPIO_WritePin>
                          |OUT_fila0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_nivelAgua_Pin;
 800066c:	2304      	movs	r3, #4
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN_nivelAgua_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_GPIO_Init+0xec>)
 8000680:	f000 ffd8 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE1_Pin
 8000684:	f248 73e0 	movw	r3, #34784	; 0x87e0
 8000688:	613b      	str	r3, [r7, #16]
                          |OUT_CE2_Pin|OUT_ST_Pin|OUT_fila3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2302      	movs	r3, #2
 8000694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4619      	mov	r1, r3
 800069c:	480b      	ldr	r0, [pc, #44]	; (80006cc <MX_GPIO_Init+0xec>)
 800069e:	f000 ffc9 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_GLCD_RST_Pin|OUT_PL_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 80006a2:	f241 0339 	movw	r3, #4153	; 0x1039
 80006a6:	613b      	str	r3, [r7, #16]
                          |OUT_fila0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_GPIO_Init+0xf0>)
 80006bc:	f000 ffba 	bl	8001634 <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40010c00 	.word	0x40010c00

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fc31 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f867 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f7ff ff7d 	bl	80005e0 <MX_GPIO_Init>
  MX_RTC_Init();
 80006e6:	f000 f8e7 	bl	80008b8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80006ea:	f000 fb7f 	bl	8000dec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006ee:	f000 faab 	bl	8000c48 <MX_TIM2_Init>
  MX_SPI2_Init();
 80006f2:	f000 f979 	bl	80009e8 <MX_SPI2_Init>
  MX_ADC1_Init();
 80006f6:	f7ff fef9 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 80006fa:	f000 faf1 	bl	8000ce0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  spi_74HC165_init(&hspi2, OUT_PL_GPIO_Port, OUT_PL_Pin, OUT_CE1_GPIO_Port, OUT_CE1_Pin, OUT_CE2_GPIO_Port, OUT_CE2_Pin);
 80006fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000702:	9302      	str	r3, [sp, #8]
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <main+0xb8>)
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <main+0xb8>)
 8000710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000714:	491e      	ldr	r1, [pc, #120]	; (8000790 <main+0xbc>)
 8000716:	481f      	ldr	r0, [pc, #124]	; (8000794 <main+0xc0>)
 8000718:	f7ff fd18 	bl	800014c <spi_74HC165_init>
  spi_74HC595_init(&hspi2, OUT_ST_GPIO_Port, OUT_ST_Pin);
 800071c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000720:	491a      	ldr	r1, [pc, #104]	; (800078c <main+0xb8>)
 8000722:	481c      	ldr	r0, [pc, #112]	; (8000794 <main+0xc0>)
 8000724:	f7ff fdba 	bl	800029c <spi_74HC595_init>

  HAL_TIM_Base_Start_IT(&htim2); //ticks eery 10 ms.
 8000728:	481b      	ldr	r0, [pc, #108]	; (8000798 <main+0xc4>)
 800072a:	f003 fa54 	bl	8003bd6 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_tick){ //ticks every 10 ms.
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <main+0xc8>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0fb      	beq.n	800072e <main+0x5a>

		  HAL_RTC_GetTime(&hrtc, &hora, RTC_FORMAT_BIN);
 8000736:	2200      	movs	r2, #0
 8000738:	4919      	ldr	r1, [pc, #100]	; (80007a0 <main+0xcc>)
 800073a:	481a      	ldr	r0, [pc, #104]	; (80007a4 <main+0xd0>)
 800073c:	f001 ffb4 	bl	80026a8 <HAL_RTC_GetTime>

		  update_teclas();
 8000740:	f7ff feac 	bl	800049c <update_teclas>

		  if (flag_lecturas != 0){ //para demorar las lecturas de teclas cada 30 ms.
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <main+0xd4>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d006      	beq.n	800075a <main+0x86>
			  flag_lecturas--;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <main+0xd4>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	3b01      	subs	r3, #1
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <main+0xd4>)
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e004      	b.n	8000764 <main+0x90>
		  }else{
			  lecturaTeclas();
 800075a:	f7ff fe5d 	bl	8000418 <lecturaTeclas>

			  flag_lecturas = 2;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <main+0xd4>)
 8000760:	2202      	movs	r2, #2
 8000762:	701a      	strb	r2, [r3, #0]
		  }

		  if (flag_salidas != 0){ //para demorar la escritura de las salidas cada 100 ms.
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <main+0xd8>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d006      	beq.n	800077a <main+0xa6>
			  flag_salidas--;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <main+0xd8>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	3b01      	subs	r3, #1
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <main+0xd8>)
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e004      	b.n	8000784 <main+0xb0>
		  }else{
			  update_outputs();
 800077a:	f7ff fead 	bl	80004d8 <update_outputs>

			  flag_salidas = 9;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <main+0xd8>)
 8000780:	2209      	movs	r2, #9
 8000782:	701a      	strb	r2, [r3, #0]
		  }



		  flag_tick = 0;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <main+0xc8>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
	  if (flag_tick){ //ticks every 10 ms.
 800078a:	e7d0      	b.n	800072e <main+0x5a>
 800078c:	40010800 	.word	0x40010800
 8000790:	40010c00 	.word	0x40010c00
 8000794:	200000d0 	.word	0x200000d0
 8000798:	20000168 	.word	0x20000168
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	200000b8 	.word	0x200000b8
 80007a4:	200000bc 	.word	0x200000bc
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000001 	.word	0x20000001

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ba:	2228      	movs	r2, #40	; 0x28
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 feaa 	bl	8004518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007e0:	2309      	movs	r3, #9
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ee:	2301      	movs	r3, #1
 80007f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007f2:	2301      	movs	r3, #1
 80007f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000800:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000804:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080a:	4618      	mov	r0, r3
 800080c:	f001 f890 	bl	8001930 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000816:	f000 f849 	bl	80008ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fafa 	bl	8001e30 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000842:	f000 f833 	bl	80008ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000846:	2303      	movs	r3, #3
 8000848:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800084a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800084e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000854:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fc85 	bl	8002168 <HAL_RCCEx_PeriphCLKConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000864:	f000 f822 	bl	80008ac <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3750      	adds	r7, #80	; 0x50
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000880:	d102      	bne.n	8000888 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tick = 1;
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
	}
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	2000002c 	.word	0x2000002c

08000898 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	__NOP();
 80008a0:	bf00      	nop
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2100      	movs	r1, #0
 80008c4:	460a      	mov	r2, r1
 80008c6:	801a      	strh	r2, [r3, #0]
 80008c8:	460a      	mov	r2, r1
 80008ca:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_RTC_Init+0xc0>)
 80008da:	4a28      	ldr	r2, [pc, #160]	; (800097c <MX_RTC_Init+0xc4>)
 80008dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <MX_RTC_Init+0xc0>)
 80008e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008e4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_RTC_Init+0xc0>)
 80008e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ec:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ee:	4822      	ldr	r0, [pc, #136]	; (8000978 <MX_RTC_Init+0xc0>)
 80008f0:	f001 fdac 	bl	800244c <HAL_RTC_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80008fa:	f7ff ffd7 	bl	80008ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80008fe:	2312      	movs	r3, #18
 8000900:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x59;
 8000902:	2359      	movs	r3, #89	; 0x59
 8000904:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x30;
 8000906:	2330      	movs	r3, #48	; 0x30
 8000908:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2201      	movs	r2, #1
 8000910:	4619      	mov	r1, r3
 8000912:	4819      	ldr	r0, [pc, #100]	; (8000978 <MX_RTC_Init+0xc0>)
 8000914:	f001 fe30 	bl	8002578 <HAL_RTC_SetTime>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800091e:	f7ff ffc5 	bl	80008ac <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000922:	2301      	movs	r3, #1
 8000924:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8000926:	2305      	movs	r3, #5
 8000928:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 800092a:	2301      	movs	r3, #1
 800092c:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 800092e:	2300      	movs	r3, #0
 8000930:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2201      	movs	r2, #1
 8000938:	4619      	mov	r1, r3
 800093a:	480f      	ldr	r0, [pc, #60]	; (8000978 <MX_RTC_Init+0xc0>)
 800093c:	f001 ff8c 	bl	8002858 <HAL_RTC_SetDate>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000946:	f7ff ffb1 	bl	80008ac <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 800094a:	2313      	movs	r3, #19
 800094c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800094e:	2301      	movs	r3, #1
 8000950:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000952:	2300      	movs	r3, #0
 8000954:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	2201      	movs	r2, #1
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_RTC_Init+0xc0>)
 8000962:	f002 f82f 	bl	80029c4 <HAL_RTC_SetAlarm_IT>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800096c:	f7ff ff9e 	bl	80008ac <Error_Handler>
  }

}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000bc 	.word	0x200000bc
 800097c:	40002800 	.word	0x40002800

08000980 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <HAL_RTC_MspInit+0x5c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d120      	bne.n	80009d4 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000992:	f000 ffc1 	bl	8001918 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_RTC_MspInit+0x60>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a11      	ldr	r2, [pc, #68]	; (80009e0 <HAL_RTC_MspInit+0x60>)
 800099c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_RTC_MspInit+0x60>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_RTC_MspInit+0x64>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 fe04 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80009be:	2003      	movs	r0, #3
 80009c0:	f000 fe1d 	bl	80015fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2029      	movs	r0, #41	; 0x29
 80009ca:	f000 fdfc 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009ce:	2029      	movs	r0, #41	; 0x29
 80009d0:	f000 fe15 	bl	80015fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40002800 	.word	0x40002800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	4242043c 	.word	0x4242043c

080009e8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_SPI2_Init+0x64>)
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_SPI2_Init+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_SPI2_Init+0x64>)
 80009f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_SPI2_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_SPI2_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_SPI2_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_SPI2_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_SPI2_Init+0x64>)
 8000a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_SPI2_Init+0x64>)
 8000a1c:	2238      	movs	r2, #56	; 0x38
 8000a1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_SPI2_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_SPI2_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_SPI2_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_SPI2_Init+0x64>)
 8000a34:	220a      	movs	r2, #10
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_SPI2_Init+0x64>)
 8000a3a:	f002 fb87 	bl	800314c <HAL_SPI_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a44:	f7ff ff32 	bl	80008ac <Error_Handler>
  }

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000d0 	.word	0x200000d0
 8000a50:	40003800 	.word	0x40003800

08000a54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <HAL_SPI_MspInit+0x8c>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d131      	bne.n	8000ad8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <HAL_SPI_MspInit+0x90>)
 8000a76:	69db      	ldr	r3, [r3, #28]
 8000a78:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <HAL_SPI_MspInit+0x90>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7e:	61d3      	str	r3, [r2, #28]
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_SPI_MspInit+0x90>)
 8000a82:	69db      	ldr	r3, [r3, #28]
 8000a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_SPI_MspInit+0x90>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <HAL_SPI_MspInit+0x90>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_SPI_MspInit+0x90>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000aa4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <HAL_SPI_MspInit+0x94>)
 8000aba:	f000 fdbb 	bl	8001634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000abe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_SPI_MspInit+0x94>)
 8000ad4:	f000 fdae 	bl	8001634 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40003800 	.word	0x40003800
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010c00 	.word	0x40010c00

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_MspInit+0x5c>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_MspInit+0x5c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6193      	str	r3, [r2, #24]
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_MspInit+0x5c>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_MspInit+0x5c>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_MspInit+0x5c>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	61d3      	str	r3, [r2, #28]
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_MspInit+0x5c>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_MspInit+0x60>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_MspInit+0x60>)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010000 	.word	0x40010000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <HardFault_Handler+0x4>

08000b62 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <BusFault_Handler+0x4>

08000b6e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 fa16 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <RTC_IRQHandler+0x10>)
 8000baa:	f002 fa89 	bl	80030c0 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000bc 	.word	0x200000bc

08000bb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <TIM2_IRQHandler+0x10>)
 8000bbe:	f003 f82d 	bl	8003c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000168 	.word	0x20000168

08000bcc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <RTC_Alarm_IRQHandler+0x10>)
 8000bd2:	f001 ffab 	bl	8002b2c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000bc 	.word	0x200000bc

08000be0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <SystemInit+0x5c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <SystemInit+0x5c>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <SystemInit+0x5c>)
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4911      	ldr	r1, [pc, #68]	; (8000c3c <SystemInit+0x5c>)
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <SystemInit+0x60>)
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <SystemInit+0x5c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <SystemInit+0x5c>)
 8000c02:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c0a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <SystemInit+0x5c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <SystemInit+0x5c>)
 8000c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c16:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <SystemInit+0x5c>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <SystemInit+0x5c>)
 8000c1e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c22:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SystemInit+0x5c>)
 8000c26:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c2a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SystemInit+0x64>)
 8000c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c32:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	f8ff0000 	.word	0xf8ff0000
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c6e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000c72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c7c:	2263      	movs	r2, #99	; 0x63
 8000c7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c8c:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c8e:	f002 ff77 	bl	8003b80 <HAL_TIM_Base_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c98:	f7ff fe08 	bl	80008ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000caa:	f003 f8bf 	bl	8003e2c <HAL_TIM_ConfigClockSource>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cb4:	f7ff fdfa 	bl	80008ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000cc6:	f003 fa85 	bl	80041d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cd0:	f7ff fdec 	bl	80008ac <Error_Handler>
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000168 	.word	0x20000168

08000ce0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <MX_TIM3_Init+0x98>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d04:	2248      	movs	r2, #72	; 0x48
 8000d06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d22:	4814      	ldr	r0, [pc, #80]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d24:	f002 ff2c 	bl	8003b80 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d2e:	f7ff fdbd 	bl	80008ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d40:	f003 f874 	bl	8003e2c <HAL_TIM_ConfigClockSource>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f7ff fdaf 	bl	80008ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d56:	463b      	mov	r3, r7
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d5c:	f003 fa3a 	bl	80041d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d66:	f7ff fda1 	bl	80008ac <Error_Handler>
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000128 	.word	0x20000128
 8000d78:	40000400 	.word	0x40000400

08000d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d8c:	d114      	bne.n	8000db8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_TIM_Base_MspInit+0x68>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <HAL_TIM_Base_MspInit+0x68>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_TIM_Base_MspInit+0x68>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	201c      	movs	r0, #28
 8000dac:	f000 fc0b 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000db0:	201c      	movs	r0, #28
 8000db2:	f000 fc24 	bl	80015fe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000db6:	e010      	b.n	8000dda <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_TIM_Base_MspInit+0x6c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10b      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_TIM_Base_MspInit+0x68>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_TIM_Base_MspInit+0x68>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	61d3      	str	r3, [r2, #28]
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_TIM_Base_MspInit+0x68>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40000400 	.word	0x40000400

08000dec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <MX_USART1_UART_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e24:	f003 fa2c 	bl	8004280 <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e2e:	f7ff fd3d 	bl	80008ac <Error_Handler>
  }

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200001a8 	.word	0x200001a8
 8000e3c:	40013800 	.word	0x40013800

08000e40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <HAL_UART_MspInit+0xa4>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d13d      	bne.n	8000edc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e60:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <HAL_UART_MspInit+0xa8>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a20      	ldr	r2, [pc, #128]	; (8000ee8 <HAL_UART_MspInit+0xa8>)
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <HAL_UART_MspInit+0xa8>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_UART_MspInit+0xa8>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ee8 <HAL_UART_MspInit+0xa8>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_UART_MspInit+0xa8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e90:	2340      	movs	r3, #64	; 0x40
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4812      	ldr	r0, [pc, #72]	; (8000eec <HAL_UART_MspInit+0xac>)
 8000ea4:	f000 fbc6 	bl	8001634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <HAL_UART_MspInit+0xac>)
 8000ebc:	f000 fbba 	bl	8001634 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_UART_MspInit+0xb0>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_UART_MspInit+0xb0>)
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ef4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ef6:	e003      	b.n	8000f00 <LoopCopyDataInit>

08000ef8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000efa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000efc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000efe:	3104      	adds	r1, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f00:	480a      	ldr	r0, [pc, #40]	; (8000f2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f08:	d3f6      	bcc.n	8000ef8 <CopyDataInit>
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f0c:	e002      	b.n	8000f14 <LoopFillZerobss>

08000f0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f10:	f842 3b04 	str.w	r3, [r2], #4

08000f14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f18:	d3f9      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1a:	f7ff fe61 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f003 fad7 	bl	80044d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f22:	f7ff fbd7 	bl	80006d4 <main>
  bx lr
 8000f26:	4770      	bx	lr
  ldr r3, =_sidata
 8000f28:	08004588 	.word	0x08004588
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f30:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000f34:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000f38:	200001ec 	.word	0x200001ec

08000f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_2_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x28>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x28>)
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 fb2d 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fdc6 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40022000 	.word	0x40022000

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fb45 	bl	800161a <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa8:	f000 fb0d 	bl	80015c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	2000000c 	.word	0x2000000c
 8000fc8:	20000008 	.word	0x20000008

08000fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_IncTick+0x1c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x20>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_IncTick+0x20>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	2000000c 	.word	0x2000000c
 8000fec:	200001e8 	.word	0x200001e8

08000ff0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <HAL_GetTick+0x10>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	200001e8 	.word	0x200001e8

08001004 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e0be      	b.n	80011a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	2b00      	cmp	r3, #0
 8001032:	d109      	bne.n	8001048 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fa90 	bl	8000568 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f9ab 	bl	80013a4 <ADC_ConversionStop_Disable>
 800104e:	4603      	mov	r3, r0
 8001050:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	f040 8099 	bne.w	8001192 <HAL_ADC_Init+0x18e>
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 8095 	bne.w	8001192 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001070:	f023 0302 	bic.w	r3, r3, #2
 8001074:	f043 0202 	orr.w	r2, r3, #2
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001084:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7b1b      	ldrb	r3, [r3, #12]
 800108a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800108c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	4313      	orrs	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800109c:	d003      	beq.n	80010a6 <HAL_ADC_Init+0xa2>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d102      	bne.n	80010ac <HAL_ADC_Init+0xa8>
 80010a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010aa:	e000      	b.n	80010ae <HAL_ADC_Init+0xaa>
 80010ac:	2300      	movs	r3, #0
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7d1b      	ldrb	r3, [r3, #20]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d119      	bne.n	80010f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7b1b      	ldrb	r3, [r3, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d109      	bne.n	80010d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	035a      	lsls	r2, r3, #13
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	e00b      	b.n	80010f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	f043 0220 	orr.w	r2, r3, #32
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e8:	f043 0201 	orr.w	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	430a      	orrs	r2, r1
 8001102:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_ADC_Init+0x1a8>)
 800110c:	4013      	ands	r3, r2
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	430b      	orrs	r3, r1
 8001116:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001120:	d003      	beq.n	800112a <HAL_ADC_Init+0x126>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d104      	bne.n	8001134 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	3b01      	subs	r3, #1
 8001130:	051b      	lsls	r3, r3, #20
 8001132:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	430a      	orrs	r2, r1
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_ADC_Init+0x1ac>)
 8001150:	4013      	ands	r3, r2
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	429a      	cmp	r2, r3
 8001156:	d10b      	bne.n	8001170 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001162:	f023 0303 	bic.w	r3, r3, #3
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800116e:	e018      	b.n	80011a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001174:	f023 0312 	bic.w	r3, r3, #18
 8001178:	f043 0210 	orr.w	r2, r3, #16
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001190:	e007      	b.n	80011a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	f043 0210 	orr.w	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	ffe1f7fd 	.word	0xffe1f7fd
 80011b0:	ff1f0efe 	.word	0xff1f0efe

080011b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x20>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e0dc      	b.n	800138e <HAL_ADC_ConfigChannel+0x1da>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b06      	cmp	r3, #6
 80011e2:	d81c      	bhi.n	800121e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	3b05      	subs	r3, #5
 80011f6:	221f      	movs	r2, #31
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4019      	ands	r1, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b05      	subs	r3, #5
 8001210:	fa00 f203 	lsl.w	r2, r0, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	635a      	str	r2, [r3, #52]	; 0x34
 800121c:	e03c      	b.n	8001298 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b0c      	cmp	r3, #12
 8001224:	d81c      	bhi.n	8001260 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b23      	subs	r3, #35	; 0x23
 8001238:	221f      	movs	r2, #31
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	4019      	ands	r1, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	3b23      	subs	r3, #35	; 0x23
 8001252:	fa00 f203 	lsl.w	r2, r0, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	631a      	str	r2, [r3, #48]	; 0x30
 800125e:	e01b      	b.n	8001298 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	3b41      	subs	r3, #65	; 0x41
 8001272:	221f      	movs	r2, #31
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	4019      	ands	r1, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	3b41      	subs	r3, #65	; 0x41
 800128c:	fa00 f203 	lsl.w	r2, r0, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b09      	cmp	r3, #9
 800129e:	d91c      	bls.n	80012da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68d9      	ldr	r1, [r3, #12]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	3b1e      	subs	r3, #30
 80012b2:	2207      	movs	r2, #7
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4019      	ands	r1, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	6898      	ldr	r0, [r3, #8]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	3b1e      	subs	r3, #30
 80012cc:	fa00 f203 	lsl.w	r2, r0, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	e019      	b.n	800130e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6919      	ldr	r1, [r3, #16]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	2207      	movs	r2, #7
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4019      	ands	r1, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6898      	ldr	r0, [r3, #8]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	fa00 f203 	lsl.w	r2, r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b10      	cmp	r3, #16
 8001314:	d003      	beq.n	800131e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800131a:	2b11      	cmp	r3, #17
 800131c:	d132      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_ADC_ConfigChannel+0x1e4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d125      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d126      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001344:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b10      	cmp	r3, #16
 800134c:	d11a      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_ADC_ConfigChannel+0x1e8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0c9a      	lsrs	r2, r3, #18
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001364:	e002      	b.n	800136c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3b01      	subs	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f9      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x1b2>
 8001372:	e007      	b.n	8001384 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	f043 0220 	orr.w	r2, r3, #32
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40012400 	.word	0x40012400
 800139c:	20000004 	.word	0x20000004
 80013a0:	431bde83 	.word	0x431bde83

080013a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d127      	bne.n	800140e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013ce:	f7ff fe0f 	bl	8000ff0 <HAL_GetTick>
 80013d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013d4:	e014      	b.n	8001400 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013d6:	f7ff fe0b 	bl	8000ff0 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d90d      	bls.n	8001400 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	f043 0210 	orr.w	r2, r3, #16
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	f043 0201 	orr.w	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e007      	b.n	8001410 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b01      	cmp	r3, #1
 800140c:	d0e3      	beq.n	80013d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4906      	ldr	r1, [pc, #24]	; (80014b0 <__NVIC_EnableIRQ+0x34>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157c:	d301      	bcc.n	8001582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <SysTick_Config+0x40>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158a:	210f      	movs	r1, #15
 800158c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001590:	f7ff ff90 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SysTick_Config+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x40>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff2d 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff42 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff90 	bl	8001508 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5f 	bl	80014b4 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff35 	bl	800147c <__NVIC_EnableIRQ>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffa2 	bl	800156c <SysTick_Config>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b480      	push	{r7}
 8001636:	b08b      	sub	sp, #44	; 0x2c
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001646:	e127      	b.n	8001898 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001648:	2201      	movs	r2, #1
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	429a      	cmp	r2, r3
 8001662:	f040 8116 	bne.w	8001892 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b12      	cmp	r3, #18
 800166c:	d034      	beq.n	80016d8 <HAL_GPIO_Init+0xa4>
 800166e:	2b12      	cmp	r3, #18
 8001670:	d80d      	bhi.n	800168e <HAL_GPIO_Init+0x5a>
 8001672:	2b02      	cmp	r3, #2
 8001674:	d02b      	beq.n	80016ce <HAL_GPIO_Init+0x9a>
 8001676:	2b02      	cmp	r3, #2
 8001678:	d804      	bhi.n	8001684 <HAL_GPIO_Init+0x50>
 800167a:	2b00      	cmp	r3, #0
 800167c:	d031      	beq.n	80016e2 <HAL_GPIO_Init+0xae>
 800167e:	2b01      	cmp	r3, #1
 8001680:	d01c      	beq.n	80016bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001682:	e048      	b.n	8001716 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001684:	2b03      	cmp	r3, #3
 8001686:	d043      	beq.n	8001710 <HAL_GPIO_Init+0xdc>
 8001688:	2b11      	cmp	r3, #17
 800168a:	d01b      	beq.n	80016c4 <HAL_GPIO_Init+0x90>
          break;
 800168c:	e043      	b.n	8001716 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800168e:	4a89      	ldr	r2, [pc, #548]	; (80018b4 <HAL_GPIO_Init+0x280>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d026      	beq.n	80016e2 <HAL_GPIO_Init+0xae>
 8001694:	4a87      	ldr	r2, [pc, #540]	; (80018b4 <HAL_GPIO_Init+0x280>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d806      	bhi.n	80016a8 <HAL_GPIO_Init+0x74>
 800169a:	4a87      	ldr	r2, [pc, #540]	; (80018b8 <HAL_GPIO_Init+0x284>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d020      	beq.n	80016e2 <HAL_GPIO_Init+0xae>
 80016a0:	4a86      	ldr	r2, [pc, #536]	; (80018bc <HAL_GPIO_Init+0x288>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01d      	beq.n	80016e2 <HAL_GPIO_Init+0xae>
          break;
 80016a6:	e036      	b.n	8001716 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016a8:	4a85      	ldr	r2, [pc, #532]	; (80018c0 <HAL_GPIO_Init+0x28c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0xae>
 80016ae:	4a85      	ldr	r2, [pc, #532]	; (80018c4 <HAL_GPIO_Init+0x290>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d016      	beq.n	80016e2 <HAL_GPIO_Init+0xae>
 80016b4:	4a84      	ldr	r2, [pc, #528]	; (80018c8 <HAL_GPIO_Init+0x294>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0xae>
          break;
 80016ba:	e02c      	b.n	8001716 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	623b      	str	r3, [r7, #32]
          break;
 80016c2:	e028      	b.n	8001716 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	3304      	adds	r3, #4
 80016ca:	623b      	str	r3, [r7, #32]
          break;
 80016cc:	e023      	b.n	8001716 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	3308      	adds	r3, #8
 80016d4:	623b      	str	r3, [r7, #32]
          break;
 80016d6:	e01e      	b.n	8001716 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	330c      	adds	r3, #12
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	e019      	b.n	8001716 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ea:	2304      	movs	r3, #4
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e012      	b.n	8001716 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f8:	2308      	movs	r3, #8
 80016fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	611a      	str	r2, [r3, #16]
          break;
 8001702:	e008      	b.n	8001716 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001704:	2308      	movs	r3, #8
 8001706:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	615a      	str	r2, [r3, #20]
          break;
 800170e:	e002      	b.n	8001716 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
          break;
 8001714:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2bff      	cmp	r3, #255	; 0xff
 800171a:	d801      	bhi.n	8001720 <HAL_GPIO_Init+0xec>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	e001      	b.n	8001724 <HAL_GPIO_Init+0xf0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3304      	adds	r3, #4
 8001724:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2bff      	cmp	r3, #255	; 0xff
 800172a:	d802      	bhi.n	8001732 <HAL_GPIO_Init+0xfe>
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	e002      	b.n	8001738 <HAL_GPIO_Init+0x104>
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	3b08      	subs	r3, #8
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	210f      	movs	r1, #15
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	401a      	ands	r2, r3
 800174a:	6a39      	ldr	r1, [r7, #32]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	431a      	orrs	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8096 	beq.w	8001892 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001766:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_GPIO_Init+0x298>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_GPIO_Init+0x298>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6193      	str	r3, [r2, #24]
 8001772:	4b56      	ldr	r3, [pc, #344]	; (80018cc <HAL_GPIO_Init+0x298>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800177e:	4a54      	ldr	r2, [pc, #336]	; (80018d0 <HAL_GPIO_Init+0x29c>)
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4013      	ands	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4b      	ldr	r2, [pc, #300]	; (80018d4 <HAL_GPIO_Init+0x2a0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x19e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4a      	ldr	r2, [pc, #296]	; (80018d8 <HAL_GPIO_Init+0x2a4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x19a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a49      	ldr	r2, [pc, #292]	; (80018dc <HAL_GPIO_Init+0x2a8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x196>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a48      	ldr	r2, [pc, #288]	; (80018e0 <HAL_GPIO_Init+0x2ac>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x192>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x1a0>
 80017c6:	2304      	movs	r3, #4
 80017c8:	e004      	b.n	80017d4 <HAL_GPIO_Init+0x1a0>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e002      	b.n	80017d4 <HAL_GPIO_Init+0x1a0>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x1a0>
 80017d2:	2300      	movs	r3, #0
 80017d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d6:	f002 0203 	and.w	r2, r2, #3
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	4093      	lsls	r3, r2
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017e4:	493a      	ldr	r1, [pc, #232]	; (80018d0 <HAL_GPIO_Init+0x29c>)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017fe:	4b39      	ldr	r3, [pc, #228]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4938      	ldr	r1, [pc, #224]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
 800180a:	e006      	b.n	800181a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800180c:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	43db      	mvns	r3, r3
 8001814:	4933      	ldr	r1, [pc, #204]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 8001816:	4013      	ands	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001826:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	492e      	ldr	r1, [pc, #184]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
 8001832:	e006      	b.n	8001842 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001834:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	43db      	mvns	r3, r3
 800183c:	4929      	ldr	r1, [pc, #164]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 800183e:	4013      	ands	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	4924      	ldr	r1, [pc, #144]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
 800185a:	e006      	b.n	800186a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800185c:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	43db      	mvns	r3, r3
 8001864:	491f      	ldr	r1, [pc, #124]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 8001866:	4013      	ands	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d006      	beq.n	8001884 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	491a      	ldr	r1, [pc, #104]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	60cb      	str	r3, [r1, #12]
 8001882:	e006      	b.n	8001892 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	43db      	mvns	r3, r3
 800188c:	4915      	ldr	r1, [pc, #84]	; (80018e4 <HAL_GPIO_Init+0x2b0>)
 800188e:	4013      	ands	r3, r2
 8001890:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	3301      	adds	r3, #1
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	fa22 f303 	lsr.w	r3, r2, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f47f aed0 	bne.w	8001648 <HAL_GPIO_Init+0x14>
  }
}
 80018a8:	bf00      	nop
 80018aa:	372c      	adds	r7, #44	; 0x2c
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	10210000 	.word	0x10210000
 80018b8:	10110000 	.word	0x10110000
 80018bc:	10120000 	.word	0x10120000
 80018c0:	10310000 	.word	0x10310000
 80018c4:	10320000 	.word	0x10320000
 80018c8:	10220000 	.word	0x10220000
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	40010800 	.word	0x40010800
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	40011000 	.word	0x40011000
 80018e0:	40011400 	.word	0x40011400
 80018e4:	40010400 	.word	0x40010400

080018e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
 80018f4:	4613      	mov	r3, r2
 80018f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f8:	787b      	ldrb	r3, [r7, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001904:	e003      	b.n	800190e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	041a      	lsls	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	611a      	str	r2, [r3, #16]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_PWR_EnableBkUpAccess+0x14>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	420e0020 	.word	0x420e0020

08001930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e26c      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8087 	beq.w	8001a5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001950:	4b92      	ldr	r3, [pc, #584]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b04      	cmp	r3, #4
 800195a:	d00c      	beq.n	8001976 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800195c:	4b8f      	ldr	r3, [pc, #572]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d112      	bne.n	800198e <HAL_RCC_OscConfig+0x5e>
 8001968:	4b8c      	ldr	r3, [pc, #560]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d10b      	bne.n	800198e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001976:	4b89      	ldr	r3, [pc, #548]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d06c      	beq.n	8001a5c <HAL_RCC_OscConfig+0x12c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d168      	bne.n	8001a5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e246      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x76>
 8001998:	4b80      	ldr	r3, [pc, #512]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a7f      	ldr	r2, [pc, #508]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800199e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e02e      	b.n	8001a04 <HAL_RCC_OscConfig+0xd4>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x98>
 80019ae:	4b7b      	ldr	r3, [pc, #492]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a7a      	ldr	r2, [pc, #488]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a77      	ldr	r2, [pc, #476]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e01d      	b.n	8001a04 <HAL_RCC_OscConfig+0xd4>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0xbc>
 80019d2:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a71      	ldr	r2, [pc, #452]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b6f      	ldr	r3, [pc, #444]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6e      	ldr	r2, [pc, #440]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0xd4>
 80019ec:	4b6b      	ldr	r3, [pc, #428]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a6a      	ldr	r2, [pc, #424]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b68      	ldr	r3, [pc, #416]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a67      	ldr	r2, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff faf0 	bl	8000ff0 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff faec 	bl	8000ff0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1fa      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0xe4>
 8001a32:	e014      	b.n	8001a5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fadc 	bl	8000ff0 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fad8 	bl	8000ff0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1e6      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x10c>
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d063      	beq.n	8001b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6a:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00b      	beq.n	8001a8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a76:	4b49      	ldr	r3, [pc, #292]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d11c      	bne.n	8001abc <HAL_RCC_OscConfig+0x18c>
 8001a82:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d116      	bne.n	8001abc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x176>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e1ba      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4939      	ldr	r1, [pc, #228]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	e03a      	b.n	8001b32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d020      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac4:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7ff fa91 	bl	8000ff0 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fa8d 	bl	8000ff0 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e19b      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4927      	ldr	r1, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
 8001b04:	e015      	b.n	8001b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fa70 	bl	8000ff0 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b14:	f7ff fa6c 	bl	8000ff0 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e17a      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d03a      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d019      	beq.n	8001b7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fa50 	bl	8000ff0 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b54:	f7ff fa4c 	bl	8000ff0 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e15a      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f000 fada 	bl	800212c <RCC_Delay>
 8001b78:	e01c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff fa36 	bl	8000ff0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b86:	e00f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff fa32 	bl	8000ff0 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d908      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e140      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	42420000 	.word	0x42420000
 8001ba4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	4b9e      	ldr	r3, [pc, #632]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e9      	bne.n	8001b88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80a6 	beq.w	8001d0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc6:	4b97      	ldr	r3, [pc, #604]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10d      	bne.n	8001bee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	4b94      	ldr	r3, [pc, #592]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a93      	ldr	r2, [pc, #588]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b91      	ldr	r3, [pc, #580]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bea:	2301      	movs	r3, #1
 8001bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	4b8e      	ldr	r3, [pc, #568]	; (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d118      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfa:	4b8b      	ldr	r3, [pc, #556]	; (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a8a      	ldr	r2, [pc, #552]	; (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c06:	f7ff f9f3 	bl	8000ff0 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0e:	f7ff f9ef 	bl	8000ff0 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b64      	cmp	r3, #100	; 0x64
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0fd      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	4b81      	ldr	r3, [pc, #516]	; (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x312>
 8001c34:	4b7b      	ldr	r3, [pc, #492]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a7a      	ldr	r2, [pc, #488]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	e02d      	b.n	8001c9e <HAL_RCC_OscConfig+0x36e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x334>
 8001c4a:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4a75      	ldr	r2, [pc, #468]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6213      	str	r3, [r2, #32]
 8001c56:	4b73      	ldr	r3, [pc, #460]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a72      	ldr	r2, [pc, #456]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	6213      	str	r3, [r2, #32]
 8001c62:	e01c      	b.n	8001c9e <HAL_RCC_OscConfig+0x36e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d10c      	bne.n	8001c86 <HAL_RCC_OscConfig+0x356>
 8001c6c:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a6c      	ldr	r2, [pc, #432]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6213      	str	r3, [r2, #32]
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a69      	ldr	r2, [pc, #420]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6213      	str	r3, [r2, #32]
 8001c84:	e00b      	b.n	8001c9e <HAL_RCC_OscConfig+0x36e>
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4a66      	ldr	r2, [pc, #408]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6213      	str	r3, [r2, #32]
 8001c92:	4b64      	ldr	r3, [pc, #400]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	4a63      	ldr	r2, [pc, #396]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d015      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff f9a3 	bl	8000ff0 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7ff f99f 	bl	8000ff0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0ab      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	4b57      	ldr	r3, [pc, #348]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ee      	beq.n	8001cae <HAL_RCC_OscConfig+0x37e>
 8001cd0:	e014      	b.n	8001cfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff f98d 	bl	8000ff0 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff f989 	bl	8000ff0 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e095      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ee      	bne.n	8001cda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d02:	4b48      	ldr	r3, [pc, #288]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a47      	ldr	r2, [pc, #284]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8081 	beq.w	8001e1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d061      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d146      	bne.n	8001dba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <HAL_RCC_OscConfig+0x4fc>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff f95d 	bl	8000ff0 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7ff f959 	bl	8000ff0 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e067      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4c:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f0      	bne.n	8001d3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d60:	d108      	bne.n	8001d74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	492d      	ldr	r1, [pc, #180]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a19      	ldr	r1, [r3, #32]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	430b      	orrs	r3, r1
 8001d86:	4927      	ldr	r1, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <HAL_RCC_OscConfig+0x4fc>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7ff f92d 	bl	8000ff0 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7ff f929 	bl	8000ff0 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e037      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x46a>
 8001db8:	e02f      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_RCC_OscConfig+0x4fc>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f916 	bl	8000ff0 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff f912 	bl	8000ff0 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e020      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x498>
 8001de6:	e018      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e013      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	42420060 	.word	0x42420060

08001e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0d0      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d910      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b67      	ldr	r3, [pc, #412]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4965      	ldr	r1, [pc, #404]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0b8      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e8c:	4b59      	ldr	r3, [pc, #356]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a58      	ldr	r2, [pc, #352]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea4:	4b53      	ldr	r3, [pc, #332]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a52      	ldr	r2, [pc, #328]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b50      	ldr	r3, [pc, #320]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	494d      	ldr	r1, [pc, #308]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d040      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d115      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e07f      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e073      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e06b      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0e:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f023 0203 	bic.w	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4936      	ldr	r1, [pc, #216]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f20:	f7ff f866 	bl	8000ff0 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f28:	f7ff f862 	bl	8000ff0 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e053      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 020c 	and.w	r2, r3, #12
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1eb      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d210      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0207 	bic.w	r2, r3, #7
 8001f66:	4922      	ldr	r1, [pc, #136]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e032      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4916      	ldr	r1, [pc, #88]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	490e      	ldr	r1, [pc, #56]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fbe:	f000 f821 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd0:	5cd3      	ldrb	r3, [r2, r3]
 8001fd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fd6:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1cc>)
 8001fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x1d0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ffc4 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08004568 	.word	0x08004568
 8001ffc:	20000004 	.word	0x20000004
 8002000:	20000008 	.word	0x20000008

08002004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	b490      	push	{r4, r7}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800200c:	1d3c      	adds	r4, r7, #4
 800200e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b04      	cmp	r3, #4
 800203c:	d002      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x40>
 800203e:	2b08      	cmp	r3, #8
 8002040:	d003      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x46>
 8002042:	e02d      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002046:	623b      	str	r3, [r7, #32]
      break;
 8002048:	e02d      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	0c9b      	lsrs	r3, r3, #18
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002056:	4413      	add	r3, r2
 8002058:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800205c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0c5b      	lsrs	r3, r3, #17
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002076:	4413      	add	r3, r2
 8002078:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800207c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002082:	fb02 f203 	mul.w	r2, r2, r3
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
 800208e:	e004      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002094:	fb02 f303 	mul.w	r3, r2, r3
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	623b      	str	r3, [r7, #32]
      break;
 800209e:	e002      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020a2:	623b      	str	r3, [r7, #32]
      break;
 80020a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a6:	6a3b      	ldr	r3, [r7, #32]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3728      	adds	r7, #40	; 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc90      	pop	{r4, r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	08004540 	.word	0x08004540
 80020b8:	08004550 	.word	0x08004550
 80020bc:	40021000 	.word	0x40021000
 80020c0:	007a1200 	.word	0x007a1200
 80020c4:	003d0900 	.word	0x003d0900

080020c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020cc:	4b02      	ldr	r3, [pc, #8]	; (80020d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	20000004 	.word	0x20000004

080020dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020e0:	f7ff fff2 	bl	80020c8 <HAL_RCC_GetHCLKFreq>
 80020e4:	4601      	mov	r1, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4a03      	ldr	r2, [pc, #12]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	08004578 	.word	0x08004578

08002104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002108:	f7ff ffde 	bl	80020c8 <HAL_RCC_GetHCLKFreq>
 800210c:	4601      	mov	r1, r0
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	0adb      	lsrs	r3, r3, #11
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	4a03      	ldr	r2, [pc, #12]	; (8002128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	08004578 	.word	0x08004578

0800212c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <RCC_Delay+0x34>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <RCC_Delay+0x38>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0a5b      	lsrs	r3, r3, #9
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002148:	bf00      	nop
  }
  while (Delay --);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	60fa      	str	r2, [r7, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f9      	bne.n	8002148 <RCC_Delay+0x1c>
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000004 	.word	0x20000004
 8002164:	10624dd3 	.word	0x10624dd3

08002168 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d07d      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002188:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10d      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219e:	61d3      	str	r3, [r2, #28]
 80021a0:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ac:	2301      	movs	r3, #1
 80021ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d118      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021bc:	4b43      	ldr	r3, [pc, #268]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a42      	ldr	r2, [pc, #264]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c8:	f7fe ff12 	bl	8000ff0 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ce:	e008      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d0:	f7fe ff0e 	bl	8000ff0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e06d      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e2:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d02e      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d027      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800220c:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002214:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002222:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d014      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe fedd 	bl	8000ff0 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fed9 	bl	8000ff0 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e036      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ee      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4917      	ldr	r1, [pc, #92]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	4313      	orrs	r3, r2
 800226c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	490b      	ldr	r1, [pc, #44]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4904      	ldr	r1, [pc, #16]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40007000 	.word	0x40007000
 80022d0:	42420440 	.word	0x42420440

080022d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b08d      	sub	sp, #52	; 0x34
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022dc:	4b55      	ldr	r3, [pc, #340]	; (8002434 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80022de:	f107 040c 	add.w	r4, r7, #12
 80022e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
 80022f2:	2300      	movs	r3, #0
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	2300      	movs	r3, #0
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d07f      	beq.n	8002408 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002308:	2b10      	cmp	r3, #16
 800230a:	d002      	beq.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800230c:	2b01      	cmp	r3, #1
 800230e:	d048      	beq.n	80023a2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002310:	e08b      	b.n	800242a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002318:	4b48      	ldr	r3, [pc, #288]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d07f      	beq.n	8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	0c9b      	lsrs	r3, r3, #18
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002330:	4413      	add	r3, r2
 8002332:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002336:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d018      	beq.n	8002374 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0c5b      	lsrs	r3, r3, #17
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002350:	4413      	add	r3, r2
 8002352:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002362:	4a37      	ldr	r2, [pc, #220]	; (8002440 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	fbb2 f2f3 	udiv	r2, r2, r3
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002372:	e004      	b.n	800237e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	4a33      	ldr	r2, [pc, #204]	; (8002444 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238a:	d102      	bne.n	8002392 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002390:	e048      	b.n	8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4a2c      	ldr	r2, [pc, #176]	; (8002448 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80023a0:	e040      	b.n	8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b2:	d108      	bne.n	80023c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80023be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c4:	e01f      	b.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d0:	d109      	bne.n	80023e6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80023de:	f649 4340 	movw	r3, #40000	; 0x9c40
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e4:	e00f      	b.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023f0:	d11a      	bne.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d014      	beq.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80023fe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002404:	e010      	b.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002406:	e00f      	b.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002408:	f7ff fe7c 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0b9b      	lsrs	r3, r3, #14
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	3301      	adds	r3, #1
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002422:	e002      	b.n	800242a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002424:	bf00      	nop
 8002426:	e000      	b.n	800242a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002428:	bf00      	nop
    }
  }
  return (frequency);
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800242c:	4618      	mov	r0, r3
 800242e:	3734      	adds	r7, #52	; 0x34
 8002430:	46bd      	mov	sp, r7
 8002432:	bd90      	pop	{r4, r7, pc}
 8002434:	08004554 	.word	0x08004554
 8002438:	08004564 	.word	0x08004564
 800243c:	40021000 	.word	0x40021000
 8002440:	007a1200 	.word	0x007a1200
 8002444:	003d0900 	.word	0x003d0900
 8002448:	aaaaaaab 	.word	0xaaaaaaab

0800244c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e084      	b.n	800256c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7c5b      	ldrb	r3, [r3, #17]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fa84 	bl	8000980 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fb7c 	bl	8002b7c <HAL_RTC_WaitForSynchro>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2204      	movs	r2, #4
 800248e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e06b      	b.n	800256c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fc35 	bl	8002d04 <RTC_EnterInitMode>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2204      	movs	r2, #4
 80024a4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e060      	b.n	800256c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0207 	bic.w	r2, r2, #7
 80024b8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <HAL_RTC_Init+0x128>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <HAL_RTC_Init+0x128>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_RTC_Init+0x128>)
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4926      	ldr	r1, [pc, #152]	; (8002574 <HAL_RTC_Init+0x128>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e8:	d003      	beq.n	80024f2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e00e      	b.n	8002510 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff feee 	bl	80022d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80024f8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2204      	movs	r2, #4
 8002504:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e030      	b.n	800256c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3b01      	subs	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f023 010f 	bic.w	r1, r3, #15
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	0c1a      	lsrs	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	041b      	lsls	r3, r3, #16
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	b291      	uxth	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fc09 	bl	8002d54 <RTC_ExitInitMode>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2204      	movs	r2, #4
 800254c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e00c      	b.n	800256c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800256a:	2300      	movs	r3, #0
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40006c00 	.word	0x40006c00

08002578 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_RTC_SetTime+0x20>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e080      	b.n	800269e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	7c1b      	ldrb	r3, [r3, #16]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_RTC_SetTime+0x30>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e07a      	b.n	800269e <HAL_RTC_SetTime+0x126>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2202      	movs	r2, #2
 80025b2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d113      	bne.n	80025e2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80025c4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	785b      	ldrb	r3, [r3, #1]
 80025cc:	4619      	mov	r1, r3
 80025ce:	460b      	mov	r3, r1
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a5b      	subs	r3, r3, r1
 80025d4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80025d6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80025dc:	4413      	add	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e01e      	b.n	8002620 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fbf9 	bl	8002dde <RTC_Bcd2ToByte>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80025f4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	785b      	ldrb	r3, [r3, #1]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fbee 	bl	8002dde <RTC_Bcd2ToByte>
 8002602:	4603      	mov	r3, r0
 8002604:	461a      	mov	r2, r3
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800260e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	789b      	ldrb	r3, [r3, #2]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fbe2 	bl	8002dde <RTC_Bcd2ToByte>
 800261a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800261c:	4423      	add	r3, r4
 800261e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002620:	6979      	ldr	r1, [r7, #20]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fb07 	bl	8002c36 <RTC_WriteTimeCounter>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2204      	movs	r2, #4
 8002632:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e02f      	b.n	800269e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0205 	bic.w	r2, r2, #5
 800264c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fb18 	bl	8002c84 <RTC_ReadAlarmCounter>
 8002654:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800265c:	d018      	beq.n	8002690 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	429a      	cmp	r2, r3
 8002664:	d214      	bcs.n	8002690 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800266c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002670:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002672:	6939      	ldr	r1, [r7, #16]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fb1e 	bl	8002cb6 <RTC_WriteAlarmCounter>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2204      	movs	r2, #4
 8002684:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e006      	b.n	800269e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd90      	pop	{r4, r7, pc}
	...

080026a8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_RTC_GetTime+0x28>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0b5      	b.n	8002840 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0ac      	b.n	8002840 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fa75 	bl	8002bd6 <RTC_ReadTimeCounter>
 80026ec:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4a55      	ldr	r2, [pc, #340]	; (8002848 <HAL_RTC_GetTime+0x1a0>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0adb      	lsrs	r3, r3, #11
 80026f8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4b52      	ldr	r3, [pc, #328]	; (8002848 <HAL_RTC_GetTime+0x1a0>)
 80026fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002702:	0adb      	lsrs	r3, r3, #11
 8002704:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	4a4f      	ldr	r2, [pc, #316]	; (800284c <HAL_RTC_GetTime+0x1a4>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	b2da      	uxtb	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	4a4a      	ldr	r2, [pc, #296]	; (8002848 <HAL_RTC_GetTime+0x1a0>)
 8002720:	fba2 1203 	umull	r1, r2, r2, r3
 8002724:	0ad2      	lsrs	r2, r2, #11
 8002726:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800272a:	fb01 f202 	mul.w	r2, r1, r2
 800272e:	1a9a      	subs	r2, r3, r2
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_RTC_GetTime+0x1a4>)
 8002732:	fba3 1302 	umull	r1, r3, r3, r2
 8002736:	0959      	lsrs	r1, r3, #5
 8002738:	460b      	mov	r3, r1
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a5b      	subs	r3, r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	1ad1      	subs	r1, r2, r3
 8002742:	b2ca      	uxtb	r2, r1
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b17      	cmp	r3, #23
 800274c:	d955      	bls.n	80027fa <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4a3f      	ldr	r2, [pc, #252]	; (8002850 <HAL_RTC_GetTime+0x1a8>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800275a:	6939      	ldr	r1, [r7, #16]
 800275c:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <HAL_RTC_GetTime+0x1a8>)
 800275e:	fba3 2301 	umull	r2, r3, r3, r1
 8002762:	091a      	lsrs	r2, r3, #4
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	1aca      	subs	r2, r1, r3
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fa85 	bl	8002c84 <RTC_ReadAlarmCounter>
 800277a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002782:	d008      	beq.n	8002796 <HAL_RTC_GetTime+0xee>
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	429a      	cmp	r2, r3
 800278a:	d904      	bls.n	8002796 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	e002      	b.n	800279c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800279a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	4a2d      	ldr	r2, [pc, #180]	; (8002854 <HAL_RTC_GetTime+0x1ac>)
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80027aa:	69b9      	ldr	r1, [r7, #24]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fa42 	bl	8002c36 <RTC_WriteTimeCounter>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e041      	b.n	8002840 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c2:	d00c      	beq.n	80027de <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4413      	add	r3, r2
 80027ca:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80027cc:	69f9      	ldr	r1, [r7, #28]
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fa71 	bl	8002cb6 <RTC_WriteAlarmCounter>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e030      	b.n	8002840 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80027de:	69f9      	ldr	r1, [r7, #28]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fa68 	bl	8002cb6 <RTC_WriteAlarmCounter>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e027      	b.n	8002840 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80027f0:	6979      	ldr	r1, [r7, #20]
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fb10 	bl	8002e18 <RTC_DateUpdate>
 80027f8:	e003      	b.n	8002802 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01a      	beq.n	800283e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fac9 	bl	8002da4 <RTC_ByteToBcd2>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fac0 	bl	8002da4 <RTC_ByteToBcd2>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	789b      	ldrb	r3, [r3, #2]
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fab7 	bl	8002da4 <RTC_ByteToBcd2>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	91a2b3c5 	.word	0x91a2b3c5
 800284c:	88888889 	.word	0x88888889
 8002850:	aaaaaaab 	.word	0xaaaaaaab
 8002854:	00015180 	.word	0x00015180

08002858 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	2300      	movs	r3, #0
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_RTC_SetDate+0x24>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e097      	b.n	80029b0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	7c1b      	ldrb	r3, [r3, #16]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_RTC_SetDate+0x34>
 8002888:	2302      	movs	r3, #2
 800288a:	e091      	b.n	80029b0 <HAL_RTC_SetDate+0x158>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2202      	movs	r2, #2
 8002896:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	78da      	ldrb	r2, [r3, #3]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	785a      	ldrb	r2, [r3, #1]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	789a      	ldrb	r2, [r3, #2]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	739a      	strb	r2, [r3, #14]
 80028b6:	e01a      	b.n	80028ee <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	78db      	ldrb	r3, [r3, #3]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fa8e 	bl	8002dde <RTC_Bcd2ToByte>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fa85 	bl	8002dde <RTC_Bcd2ToByte>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	789b      	ldrb	r3, [r3, #2]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fa7c 	bl	8002dde <RTC_Bcd2ToByte>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	7bdb      	ldrb	r3, [r3, #15]
 80028f2:	4618      	mov	r0, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	7b59      	ldrb	r1, [r3, #13]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	7b9b      	ldrb	r3, [r3, #14]
 80028fc:	461a      	mov	r2, r3
 80028fe:	f000 fb67 	bl	8002fd0 <RTC_WeekDayNum>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	7b1a      	ldrb	r2, [r3, #12]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f95f 	bl	8002bd6 <RTC_ReadTimeCounter>
 8002918:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4a26      	ldr	r2, [pc, #152]	; (80029b8 <HAL_RTC_SetDate+0x160>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0adb      	lsrs	r3, r3, #11
 8002924:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b18      	cmp	r3, #24
 800292a:	d93a      	bls.n	80029a2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	4a23      	ldr	r2, [pc, #140]	; (80029bc <HAL_RTC_SetDate+0x164>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	4a22      	ldr	r2, [pc, #136]	; (80029c0 <HAL_RTC_SetDate+0x168>)
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002942:	69f9      	ldr	r1, [r7, #28]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f976 	bl	8002c36 <RTC_WriteTimeCounter>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2204      	movs	r2, #4
 8002954:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e027      	b.n	80029b0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f98f 	bl	8002c84 <RTC_ReadAlarmCounter>
 8002966:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800296e:	d018      	beq.n	80029a2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	429a      	cmp	r2, r3
 8002976:	d214      	bcs.n	80029a2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800297e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002982:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002984:	69b9      	ldr	r1, [r7, #24]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f995 	bl	8002cb6 <RTC_WriteAlarmCounter>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2204      	movs	r2, #4
 8002996:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e006      	b.n	80029b0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	91a2b3c5 	.word	0x91a2b3c5
 80029bc:	aaaaaaab 	.word	0xaaaaaaab
 80029c0:	00015180 	.word	0x00015180

080029c4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2100      	movs	r1, #0
 80029da:	460a      	mov	r2, r1
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	460a      	mov	r2, r1
 80029e0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_RTC_SetAlarm_IT+0x2a>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e096      	b.n	8002b20 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	7c1b      	ldrb	r3, [r3, #16]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_RTC_SetAlarm_IT+0x3a>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e090      	b.n	8002b20 <HAL_RTC_SetAlarm_IT+0x15c>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2202      	movs	r2, #2
 8002a08:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4619      	mov	r1, r3
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff fe48 	bl	80026a8 <HAL_RTC_GetTime>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e07e      	b.n	8002b20 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002a22:	7d3b      	ldrb	r3, [r7, #20]
 8002a24:	461a      	mov	r2, r3
 8002a26:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a2a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002a2e:	7d7b      	ldrb	r3, [r7, #21]
 8002a30:	4619      	mov	r1, r3
 8002a32:	460b      	mov	r3, r1
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a5b      	subs	r3, r3, r1
 8002a38:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002a3a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002a3c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002a3e:	4413      	add	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d113      	bne.n	8002a70 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a52:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	785b      	ldrb	r3, [r3, #1]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a5b      	subs	r3, r3, r1
 8002a62:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002a64:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002a6a:	4413      	add	r3, r2
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	e01e      	b.n	8002aae <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f9b2 	bl	8002dde <RTC_Bcd2ToByte>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a82:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f9a7 	bl	8002dde <RTC_Bcd2ToByte>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002a9c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	789b      	ldrb	r3, [r3, #2]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f99b 	bl	8002dde <RTC_Bcd2ToByte>
 8002aa8:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002aaa:	4423      	add	r3, r4
 8002aac:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d205      	bcs.n	8002ac2 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002abc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ac0:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002ac2:	69f9      	ldr	r1, [r7, #28]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f8f6 	bl	8002cb6 <RTC_WriteAlarmCounter>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e01f      	b.n	8002b20 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0202 	mvn.w	r2, #2
 8002ae8:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0202 	orr.w	r2, r2, #2
 8002af8:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RTC_SetAlarm_IT+0x164>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <HAL_RTC_SetAlarm_IT+0x164>)
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b04:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_RTC_SetAlarm_IT+0x164>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_RTC_SetAlarm_IT+0x164>)
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b10:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
  }
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3724      	adds	r7, #36	; 0x24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd90      	pop	{r4, r7, pc}
 8002b28:	40010400 	.word	0x40010400

08002b2c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00e      	beq.n	8002b60 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7fd fea1 	bl	8000898 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f06f 0202 	mvn.w	r2, #2
 8002b5e:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8002b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b66:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	745a      	strb	r2, [r3, #17]
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40010400 	.word	0x40010400

08002b7c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e01d      	b.n	8002bce <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0208 	bic.w	r2, r2, #8
 8002ba0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002ba2:	f7fe fa25 	bl	8000ff0 <HAL_GetTick>
 8002ba6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002ba8:	e009      	b.n	8002bbe <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002baa:	f7fe fa21 	bl	8000ff0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb8:	d901      	bls.n	8002bbe <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e007      	b.n	8002bce <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ee      	beq.n	8002baa <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b087      	sub	sp, #28
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	827b      	strh	r3, [r7, #18]
 8002be2:	2300      	movs	r3, #0
 8002be4:	823b      	strh	r3, [r7, #16]
 8002be6:	2300      	movs	r3, #0
 8002be8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002c06:	8a7a      	ldrh	r2, [r7, #18]
 8002c08:	8a3b      	ldrh	r3, [r7, #16]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d008      	beq.n	8002c20 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002c0e:	8a3b      	ldrh	r3, [r7, #16]
 8002c10:	041a      	lsls	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e004      	b.n	8002c2a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002c20:	8a7b      	ldrh	r3, [r7, #18]
 8002c22:	041a      	lsls	r2, r3, #16
 8002c24:	89fb      	ldrh	r3, [r7, #14]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002c2a:	697b      	ldr	r3, [r7, #20]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f85d 	bl	8002d04 <RTC_EnterInitMode>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e011      	b.n	8002c7a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	0c12      	lsrs	r2, r2, #16
 8002c5e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	b292      	uxth	r2, r2
 8002c68:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f872 	bl	8002d54 <RTC_ExitInitMode>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	81fb      	strh	r3, [r7, #14]
 8002c90:	2300      	movs	r3, #0
 8002c92:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002ca4:	89fb      	ldrh	r3, [r7, #14]
 8002ca6:	041a      	lsls	r2, r3, #16
 8002ca8:	89bb      	ldrh	r3, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f81d 	bl	8002d04 <RTC_EnterInitMode>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e011      	b.n	8002cfa <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	0c12      	lsrs	r2, r2, #16
 8002cde:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	b292      	uxth	r2, r2
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f832 	bl	8002d54 <RTC_ExitInitMode>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002d10:	f7fe f96e 	bl	8000ff0 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d16:	e009      	b.n	8002d2c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d18:	f7fe f96a 	bl	8000ff0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d26:	d901      	bls.n	8002d2c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e00f      	b.n	8002d4c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ee      	beq.n	8002d18 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0210 	orr.w	r2, r2, #16
 8002d48:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0210 	bic.w	r2, r2, #16
 8002d6e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002d70:	f7fe f93e 	bl	8000ff0 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d76:	e009      	b.n	8002d8c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d78:	f7fe f93a 	bl	8000ff0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d86:	d901      	bls.n	8002d8c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e007      	b.n	8002d9c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0ee      	beq.n	8002d78 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002db2:	e005      	b.n	8002dc0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3301      	adds	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	3b0a      	subs	r3, #10
 8002dbe:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	2b09      	cmp	r3, #9
 8002dc4:	d8f6      	bhi.n	8002db4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	b2db      	uxtb	r3, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	b2db      	uxtb	r3, r3
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7bdb      	ldrb	r3, [r3, #15]
 8002e36:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7b5b      	ldrb	r3, [r3, #13]
 8002e3c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7b9b      	ldrb	r3, [r3, #14]
 8002e42:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	e06f      	b.n	8002f2a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d011      	beq.n	8002e74 <RTC_DateUpdate+0x5c>
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d00e      	beq.n	8002e74 <RTC_DateUpdate+0x5c>
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d00b      	beq.n	8002e74 <RTC_DateUpdate+0x5c>
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	2b07      	cmp	r3, #7
 8002e60:	d008      	beq.n	8002e74 <RTC_DateUpdate+0x5c>
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d005      	beq.n	8002e74 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b0a      	cmp	r3, #10
 8002e6c:	d002      	beq.n	8002e74 <RTC_DateUpdate+0x5c>
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d117      	bne.n	8002ea4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b1e      	cmp	r3, #30
 8002e78:	d803      	bhi.n	8002e82 <RTC_DateUpdate+0x6a>
      {
        day++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002e80:	e050      	b.n	8002f24 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d005      	beq.n	8002e94 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002e92:	e047      	b.n	8002f24 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002e94:	2301      	movs	r3, #1
 8002e96:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]
          year++;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002ea2:	e03f      	b.n	8002f24 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d008      	beq.n	8002ebc <RTC_DateUpdate+0xa4>
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b06      	cmp	r3, #6
 8002eae:	d005      	beq.n	8002ebc <RTC_DateUpdate+0xa4>
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b09      	cmp	r3, #9
 8002eb4:	d002      	beq.n	8002ebc <RTC_DateUpdate+0xa4>
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	2b0b      	cmp	r3, #11
 8002eba:	d10c      	bne.n	8002ed6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b1d      	cmp	r3, #29
 8002ec0:	d803      	bhi.n	8002eca <RTC_DateUpdate+0xb2>
      {
        day++;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ec8:	e02c      	b.n	8002f24 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ed4:	e026      	b.n	8002f24 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d123      	bne.n	8002f24 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b1b      	cmp	r3, #27
 8002ee0:	d803      	bhi.n	8002eea <RTC_DateUpdate+0xd2>
      {
        day++;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e01c      	b.n	8002f24 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b1c      	cmp	r3, #28
 8002eee:	d111      	bne.n	8002f14 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f839 	bl	8002f6c <RTC_IsLeapYear>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	e00d      	b.n	8002f24 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	e007      	b.n	8002f24 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b1d      	cmp	r3, #29
 8002f18:	d104      	bne.n	8002f24 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002f20:	2301      	movs	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d38b      	bcc.n	8002e4a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	6978      	ldr	r0, [r7, #20]
 8002f56:	f000 f83b 	bl	8002fd0 <RTC_WeekDayNum>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	731a      	strb	r2, [r3, #12]
}
 8002f62:	bf00      	nop
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e01d      	b.n	8002fc2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <RTC_IsLeapYear+0x60>)
 8002f8a:	fba2 1203 	umull	r1, r2, r2, r3
 8002f8e:	0952      	lsrs	r2, r2, #5
 8002f90:	2164      	movs	r1, #100	; 0x64
 8002f92:	fb01 f202 	mul.w	r2, r1, r2
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00f      	b.n	8002fc2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <RTC_IsLeapYear+0x60>)
 8002fa6:	fba2 1203 	umull	r1, r2, r2, r3
 8002faa:	09d2      	lsrs	r2, r2, #7
 8002fac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002fb0:	fb01 f202 	mul.w	r2, r1, r2
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002fc0:	2300      	movs	r3, #0
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	51eb851f 	.word	0x51eb851f

08002fd0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002fee:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d82d      	bhi.n	8003052 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	4a2c      	ldr	r2, [pc, #176]	; (80030b4 <RTC_WeekDayNum+0xe4>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	085a      	lsrs	r2, r3, #1
 800300a:	78bb      	ldrb	r3, [r7, #2]
 800300c:	441a      	add	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	441a      	add	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	3b01      	subs	r3, #1
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	441a      	add	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	3b01      	subs	r3, #1
 800301e:	4926      	ldr	r1, [pc, #152]	; (80030b8 <RTC_WeekDayNum+0xe8>)
 8003020:	fba1 1303 	umull	r1, r3, r1, r3
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	1ad2      	subs	r2, r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	3b01      	subs	r3, #1
 800302c:	4922      	ldr	r1, [pc, #136]	; (80030b8 <RTC_WeekDayNum+0xe8>)
 800302e:	fba1 1303 	umull	r1, r3, r1, r3
 8003032:	09db      	lsrs	r3, r3, #7
 8003034:	4413      	add	r3, r2
 8003036:	1d1a      	adds	r2, r3, #4
 8003038:	4b20      	ldr	r3, [pc, #128]	; (80030bc <RTC_WeekDayNum+0xec>)
 800303a:	fba3 1302 	umull	r1, r3, r3, r2
 800303e:	1ad1      	subs	r1, r2, r3
 8003040:	0849      	lsrs	r1, r1, #1
 8003042:	440b      	add	r3, r1
 8003044:	0899      	lsrs	r1, r3, #2
 8003046:	460b      	mov	r3, r1
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	1a5b      	subs	r3, r3, r1
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e029      	b.n	80030a6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <RTC_WeekDayNum+0xe4>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	085a      	lsrs	r2, r3, #1
 8003066:	78bb      	ldrb	r3, [r7, #2]
 8003068:	441a      	add	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	441a      	add	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	089b      	lsrs	r3, r3, #2
 8003072:	441a      	add	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4910      	ldr	r1, [pc, #64]	; (80030b8 <RTC_WeekDayNum+0xe8>)
 8003078:	fba1 1303 	umull	r1, r3, r1, r3
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	1ad2      	subs	r2, r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	490d      	ldr	r1, [pc, #52]	; (80030b8 <RTC_WeekDayNum+0xe8>)
 8003084:	fba1 1303 	umull	r1, r3, r1, r3
 8003088:	09db      	lsrs	r3, r3, #7
 800308a:	4413      	add	r3, r2
 800308c:	1c9a      	adds	r2, r3, #2
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <RTC_WeekDayNum+0xec>)
 8003090:	fba3 1302 	umull	r1, r3, r3, r2
 8003094:	1ad1      	subs	r1, r2, r3
 8003096:	0849      	lsrs	r1, r1, #1
 8003098:	440b      	add	r3, r1
 800309a:	0899      	lsrs	r1, r3, #2
 800309c:	460b      	mov	r3, r1
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	1a5b      	subs	r3, r3, r1
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	b2db      	uxtb	r3, r3
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr
 80030b4:	38e38e39 	.word	0x38e38e39
 80030b8:	51eb851f 	.word	0x51eb851f
 80030bc:	24924925 	.word	0x24924925

080030c0 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d024      	beq.n	8003120 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01d      	beq.n	8003120 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f821 	bl	800313a <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0204 	mvn.w	r2, #4
 8003100:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2204      	movs	r2, #4
 8003106:	745a      	strb	r2, [r3, #17]
 8003108:	e005      	b.n	8003116 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f80c 	bl	8003128 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f06f 0201 	mvn.w	r2, #1
 800311e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e053      	b.n	8003206 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fd fc6b 	bl	8000a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003194:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	ea42 0103 	orr.w	r1, r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	0c1a      	lsrs	r2, r3, #16
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f002 0204 	and.w	r2, r2, #4
 80031e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69da      	ldr	r2, [r3, #28]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b088      	sub	sp, #32
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_SPI_Transmit+0x22>
 800322c:	2302      	movs	r3, #2
 800322e:	e11e      	b.n	800346e <HAL_SPI_Transmit+0x260>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003238:	f7fd feda 	bl	8000ff0 <HAL_GetTick>
 800323c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d002      	beq.n	8003254 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800324e:	2302      	movs	r3, #2
 8003250:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003252:	e103      	b.n	800345c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_SPI_Transmit+0x52>
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003264:	e0fa      	b.n	800345c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2203      	movs	r2, #3
 800326a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ac:	d107      	bne.n	80032be <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d007      	beq.n	80032dc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e4:	d14b      	bne.n	800337e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_SPI_Transmit+0xe6>
 80032ee:	8afb      	ldrh	r3, [r7, #22]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d13e      	bne.n	8003372 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	881a      	ldrh	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	1c9a      	adds	r2, r3, #2
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003318:	e02b      	b.n	8003372 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b02      	cmp	r3, #2
 8003326:	d112      	bne.n	800334e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	1c9a      	adds	r2, r3, #2
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	86da      	strh	r2, [r3, #54]	; 0x36
 800334c:	e011      	b.n	8003372 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800334e:	f7fd fe4f 	bl	8000ff0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d803      	bhi.n	8003366 <HAL_SPI_Transmit+0x158>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003364:	d102      	bne.n	800336c <HAL_SPI_Transmit+0x15e>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003370:	e074      	b.n	800345c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ce      	bne.n	800331a <HAL_SPI_Transmit+0x10c>
 800337c:	e04c      	b.n	8003418 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_SPI_Transmit+0x17e>
 8003386:	8afb      	ldrh	r3, [r7, #22]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d140      	bne.n	800340e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	7812      	ldrb	r2, [r2, #0]
 8003398:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033b2:	e02c      	b.n	800340e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d113      	bne.n	80033ea <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80033e8:	e011      	b.n	800340e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ea:	f7fd fe01 	bl	8000ff0 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d803      	bhi.n	8003402 <HAL_SPI_Transmit+0x1f4>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003400:	d102      	bne.n	8003408 <HAL_SPI_Transmit+0x1fa>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800340c:	e026      	b.n	800345c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1cd      	bne.n	80033b4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	6839      	ldr	r1, [r7, #0]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fb91 	bl	8003b44 <SPI_EndRxTxTransaction>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e000      	b.n	800345c <HAL_SPI_Transmit+0x24e>
  }

error:
 800345a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800346c:	7ffb      	ldrb	r3, [r7, #31]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b088      	sub	sp, #32
 800347a:	af02      	add	r7, sp, #8
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	603b      	str	r3, [r7, #0]
 8003482:	4613      	mov	r3, r2
 8003484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003492:	d112      	bne.n	80034ba <HAL_SPI_Receive+0x44>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10e      	bne.n	80034ba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2204      	movs	r2, #4
 80034a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034a4:	88fa      	ldrh	r2, [r7, #6]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f8e9 	bl	8003688 <HAL_SPI_TransmitReceive>
 80034b6:	4603      	mov	r3, r0
 80034b8:	e0e2      	b.n	8003680 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_SPI_Receive+0x52>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e0db      	b.n	8003680 <HAL_SPI_Receive+0x20a>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034d0:	f7fd fd8e 	bl	8000ff0 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d002      	beq.n	80034e8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
 80034e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034e6:	e0c2      	b.n	800366e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_SPI_Receive+0x7e>
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034f8:	e0b9      	b.n	800366e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2204      	movs	r2, #4
 80034fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	88fa      	ldrh	r2, [r7, #6]
 8003512:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003540:	d107      	bne.n	8003552 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003550:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d007      	beq.n	8003570 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d162      	bne.n	800363e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003578:	e02e      	b.n	80035d8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d115      	bne.n	80035b4 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f103 020c 	add.w	r2, r3, #12
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	7812      	ldrb	r2, [r2, #0]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035b2:	e011      	b.n	80035d8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035b4:	f7fd fd1c 	bl	8000ff0 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d803      	bhi.n	80035cc <HAL_SPI_Receive+0x156>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ca:	d102      	bne.n	80035d2 <HAL_SPI_Receive+0x15c>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035d6:	e04a      	b.n	800366e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1cb      	bne.n	800357a <HAL_SPI_Receive+0x104>
 80035e2:	e031      	b.n	8003648 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d113      	bne.n	800361a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	b292      	uxth	r2, r2
 80035fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	1c9a      	adds	r2, r3, #2
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003618:	e011      	b.n	800363e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800361a:	f7fd fce9 	bl	8000ff0 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d803      	bhi.n	8003632 <HAL_SPI_Receive+0x1bc>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003630:	d102      	bne.n	8003638 <HAL_SPI_Receive+0x1c2>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800363c:	e017      	b.n	800366e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1cd      	bne.n	80035e4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	6839      	ldr	r1, [r7, #0]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 fa27 	bl	8003aa0 <SPI_EndRxTransaction>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
 800366a:	e000      	b.n	800366e <HAL_SPI_Receive+0x1f8>
  }

error :
 800366c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003696:	2301      	movs	r3, #1
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_SPI_TransmitReceive+0x26>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e18a      	b.n	80039c4 <HAL_SPI_TransmitReceive+0x33c>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036b6:	f7fd fc9b 	bl	8000ff0 <HAL_GetTick>
 80036ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d00f      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x70>
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036de:	d107      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d103      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x68>
 80036e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d003      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
 80036f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036f6:	e15b      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_SPI_TransmitReceive+0x82>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_SPI_TransmitReceive+0x82>
 8003704:	887b      	ldrh	r3, [r7, #2]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d103      	bne.n	8003712 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003710:	e14e      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b04      	cmp	r3, #4
 800371c:	d003      	beq.n	8003726 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2205      	movs	r2, #5
 8003722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	887a      	ldrh	r2, [r7, #2]
 8003736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	887a      	ldrh	r2, [r7, #2]
 800374e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d007      	beq.n	800377a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003782:	d178      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x10a>
 800378c:	8b7b      	ldrh	r3, [r7, #26]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d166      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	881a      	ldrh	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	1c9a      	adds	r2, r3, #2
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b6:	e053      	b.n	8003860 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d11b      	bne.n	80037fe <HAL_SPI_TransmitReceive+0x176>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d016      	beq.n	80037fe <HAL_SPI_TransmitReceive+0x176>
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d113      	bne.n	80037fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	881a      	ldrh	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	1c9a      	adds	r2, r3, #2
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d119      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x1b8>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d014      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	b292      	uxth	r2, r2
 8003822:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	1c9a      	adds	r2, r3, #2
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800383c:	2301      	movs	r3, #1
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003840:	f7fd fbd6 	bl	8000ff0 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800384c:	429a      	cmp	r2, r3
 800384e:	d807      	bhi.n	8003860 <HAL_SPI_TransmitReceive+0x1d8>
 8003850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003856:	d003      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800385e:	e0a7      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1a6      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x130>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1a1      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x130>
 8003874:	e07c      	b.n	8003970 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x1fc>
 800387e:	8b7b      	ldrh	r3, [r7, #26]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d16b      	bne.n	800395c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	7812      	ldrb	r2, [r2, #0]
 8003890:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038aa:	e057      	b.n	800395c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d11c      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x26c>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d017      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x26c>
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d114      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d119      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x2ae>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d014      	beq.n	8003936 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003932:	2301      	movs	r3, #1
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003936:	f7fd fb5b 	bl	8000ff0 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003942:	429a      	cmp	r2, r3
 8003944:	d803      	bhi.n	800394e <HAL_SPI_TransmitReceive+0x2c6>
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800394c:	d102      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x2cc>
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800395a:	e029      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1a2      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x224>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d19d      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f8e5 	bl	8003b44 <SPI_EndRxTxTransaction>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800398c:	e010      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	e000      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3730      	adds	r7, #48	; 0x30
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	4613      	mov	r3, r2
 80039da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039dc:	e04c      	b.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e4:	d048      	beq.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80039e6:	f7fd fb03 	bl	8000ff0 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d902      	bls.n	80039fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d13d      	bne.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a14:	d111      	bne.n	8003a3a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1e:	d004      	beq.n	8003a2a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a28:	d107      	bne.n	8003a3a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a42:	d10f      	bne.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e00f      	b.n	8003a98 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4013      	ands	r3, r2
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d1a3      	bne.n	80039de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ab4:	d111      	bne.n	8003ada <SPI_EndRxTransaction+0x3a>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003abe:	d004      	beq.n	8003aca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac8:	d107      	bne.n	8003ada <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae2:	d117      	bne.n	8003b14 <SPI_EndRxTransaction+0x74>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aec:	d112      	bne.n	8003b14 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2200      	movs	r2, #0
 8003af6:	2101      	movs	r1, #1
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff ff67 	bl	80039cc <SPI_WaitFlagStateUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01a      	beq.n	8003b3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e013      	b.n	8003b3c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2180      	movs	r1, #128	; 0x80
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f7ff ff54 	bl	80039cc <SPI_WaitFlagStateUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	f043 0220 	orr.w	r2, r3, #32
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e000      	b.n	8003b3c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff ff36 	bl	80039cc <SPI_WaitFlagStateUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e000      	b.n	8003b78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e01d      	b.n	8003bce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd f8e8 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f000 fa10 	bl	8003fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0201 	orr.w	r2, r2, #1
 8003bec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b06      	cmp	r3, #6
 8003bfe:	d007      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d122      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d11b      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0202 	mvn.w	r2, #2
 8003c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9a4 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f997 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f9a6 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d122      	bne.n	8003ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d11b      	bne.n	8003ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0204 	mvn.w	r2, #4
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f97a 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f96d 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f97c 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d122      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d11b      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0208 	mvn.w	r2, #8
 8003cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f950 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003d0c:	e005      	b.n	8003d1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f943 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f952 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d122      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d11b      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0210 	mvn.w	r2, #16
 8003d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f926 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f919 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f928 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d10e      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d107      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0201 	mvn.w	r2, #1
 8003d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fc fd68 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d10e      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b80      	cmp	r3, #128	; 0x80
 8003dba:	d107      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa51 	bl	800426e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d10e      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d107      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f8ec 	bl	8003fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d10e      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d107      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0220 	mvn.w	r2, #32
 8003e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fa1c 	bl	800425c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_ConfigClockSource+0x18>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e0a6      	b.n	8003f92 <HAL_TIM_ConfigClockSource+0x166>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d067      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x120>
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d80b      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x6c>
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d073      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d802      	bhi.n	8003e8e <HAL_TIM_ConfigClockSource+0x62>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d06f      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003e8c:	e078      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d06c      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
 8003e92:	2b30      	cmp	r3, #48	; 0x30
 8003e94:	d06a      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e96:	e073      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e98:	2b70      	cmp	r3, #112	; 0x70
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0x8c>
 8003e9c:	2b70      	cmp	r3, #112	; 0x70
 8003e9e:	d804      	bhi.n	8003eaa <HAL_TIM_ConfigClockSource+0x7e>
 8003ea0:	2b50      	cmp	r3, #80	; 0x50
 8003ea2:	d033      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0xe0>
 8003ea4:	2b60      	cmp	r3, #96	; 0x60
 8003ea6:	d041      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ea8:	e06a      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d066      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x152>
 8003eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb4:	d017      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003eb6:	e063      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f000 f965 	bl	8004196 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	609a      	str	r2, [r3, #8]
      break;
 8003ee4:	e04c      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f000 f94e 	bl	8004196 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f08:	609a      	str	r2, [r3, #8]
      break;
 8003f0a:	e039      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f000 f8c5 	bl	80040a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2150      	movs	r1, #80	; 0x50
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 f91c 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003f2a:	e029      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f000 f8e3 	bl	8004104 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2160      	movs	r1, #96	; 0x60
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f90c 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003f4a:	e019      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f000 f8a5 	bl	80040a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2140      	movs	r1, #64	; 0x40
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f8fc 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003f6a:	e009      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f000 f8f3 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e000      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr
	...

08003fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a29      	ldr	r2, [pc, #164]	; (800409c <TIM_Base_SetConfig+0xb8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00b      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d007      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a26      	ldr	r2, [pc, #152]	; (80040a0 <TIM_Base_SetConfig+0xbc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a25      	ldr	r2, [pc, #148]	; (80040a4 <TIM_Base_SetConfig+0xc0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d108      	bne.n	8004026 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1c      	ldr	r2, [pc, #112]	; (800409c <TIM_Base_SetConfig+0xb8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d007      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <TIM_Base_SetConfig+0xbc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <TIM_Base_SetConfig+0xc0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a07      	ldr	r2, [pc, #28]	; (800409c <TIM_Base_SetConfig+0xb8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d103      	bne.n	800408c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	615a      	str	r2, [r3, #20]
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800

080040a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0201 	bic.w	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f023 030a 	bic.w	r3, r3, #10
 80040e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f023 0210 	bic.w	r2, r3, #16
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800412e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	031b      	lsls	r3, r3, #12
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004140:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	621a      	str	r2, [r3, #32]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	f043 0307 	orr.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004196:	b480      	push	{r7}
 8004198:	b087      	sub	sp, #28
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	021a      	lsls	r2, r3, #8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4313      	orrs	r3, r2
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	609a      	str	r2, [r3, #8]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e032      	b.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004224:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	4313      	orrs	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr

0800426e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e03f      	b.n	8004312 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fc fdca 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2224      	movs	r2, #36	; 0x24
 80042b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f829 	bl	800431c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695a      	ldr	r2, [r3, #20]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004356:	f023 030c 	bic.w	r3, r3, #12
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	430b      	orrs	r3, r1
 8004362:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a52      	ldr	r2, [pc, #328]	; (80044c8 <UART_SetConfig+0x1ac>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d14e      	bne.n	8004422 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004384:	f7fd febe 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8004388:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009a      	lsls	r2, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	4a4a      	ldr	r2, [pc, #296]	; (80044cc <UART_SetConfig+0x1b0>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	0119      	lsls	r1, r3, #4
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009a      	lsls	r2, r3, #2
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c0:	4b42      	ldr	r3, [pc, #264]	; (80044cc <UART_SetConfig+0x1b0>)
 80043c2:	fba3 0302 	umull	r0, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2064      	movs	r0, #100	; 0x64
 80043ca:	fb00 f303 	mul.w	r3, r0, r3
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	3332      	adds	r3, #50	; 0x32
 80043d4:	4a3d      	ldr	r2, [pc, #244]	; (80044cc <UART_SetConfig+0x1b0>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e0:	4419      	add	r1, r3
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009a      	lsls	r2, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f8:	4b34      	ldr	r3, [pc, #208]	; (80044cc <UART_SetConfig+0x1b0>)
 80043fa:	fba3 0302 	umull	r0, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2064      	movs	r0, #100	; 0x64
 8004402:	fb00 f303 	mul.w	r3, r0, r3
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	3332      	adds	r3, #50	; 0x32
 800440c:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <UART_SetConfig+0x1b0>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	f003 020f 	and.w	r2, r3, #15
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	440a      	add	r2, r1
 800441e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004420:	e04d      	b.n	80044be <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004422:	f7fd fe5b 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 8004426:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009a      	lsls	r2, r3, #2
 8004432:	441a      	add	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	fbb2 f3f3 	udiv	r3, r2, r3
 800443e:	4a23      	ldr	r2, [pc, #140]	; (80044cc <UART_SetConfig+0x1b0>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	0119      	lsls	r1, r3, #4
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	009a      	lsls	r2, r3, #2
 8004452:	441a      	add	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	fbb2 f2f3 	udiv	r2, r2, r3
 800445e:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <UART_SetConfig+0x1b0>)
 8004460:	fba3 0302 	umull	r0, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	2064      	movs	r0, #100	; 0x64
 8004468:	fb00 f303 	mul.w	r3, r0, r3
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	3332      	adds	r3, #50	; 0x32
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <UART_SetConfig+0x1b0>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800447e:	4419      	add	r1, r3
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009a      	lsls	r2, r3, #2
 800448a:	441a      	add	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	fbb2 f2f3 	udiv	r2, r2, r3
 8004496:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <UART_SetConfig+0x1b0>)
 8004498:	fba3 0302 	umull	r0, r3, r3, r2
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	2064      	movs	r0, #100	; 0x64
 80044a0:	fb00 f303 	mul.w	r3, r0, r3
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	3332      	adds	r3, #50	; 0x32
 80044aa:	4a08      	ldr	r2, [pc, #32]	; (80044cc <UART_SetConfig+0x1b0>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	f003 020f 	and.w	r2, r3, #15
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	440a      	add	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40013800 	.word	0x40013800
 80044cc:	51eb851f 	.word	0x51eb851f

080044d0 <__libc_init_array>:
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	2500      	movs	r5, #0
 80044d4:	4e0c      	ldr	r6, [pc, #48]	; (8004508 <__libc_init_array+0x38>)
 80044d6:	4c0d      	ldr	r4, [pc, #52]	; (800450c <__libc_init_array+0x3c>)
 80044d8:	1ba4      	subs	r4, r4, r6
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	42a5      	cmp	r5, r4
 80044de:	d109      	bne.n	80044f4 <__libc_init_array+0x24>
 80044e0:	f000 f822 	bl	8004528 <_init>
 80044e4:	2500      	movs	r5, #0
 80044e6:	4e0a      	ldr	r6, [pc, #40]	; (8004510 <__libc_init_array+0x40>)
 80044e8:	4c0a      	ldr	r4, [pc, #40]	; (8004514 <__libc_init_array+0x44>)
 80044ea:	1ba4      	subs	r4, r4, r6
 80044ec:	10a4      	asrs	r4, r4, #2
 80044ee:	42a5      	cmp	r5, r4
 80044f0:	d105      	bne.n	80044fe <__libc_init_array+0x2e>
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044f8:	4798      	blx	r3
 80044fa:	3501      	adds	r5, #1
 80044fc:	e7ee      	b.n	80044dc <__libc_init_array+0xc>
 80044fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004502:	4798      	blx	r3
 8004504:	3501      	adds	r5, #1
 8004506:	e7f2      	b.n	80044ee <__libc_init_array+0x1e>
 8004508:	08004580 	.word	0x08004580
 800450c:	08004580 	.word	0x08004580
 8004510:	08004580 	.word	0x08004580
 8004514:	08004584 	.word	0x08004584

08004518 <memset>:
 8004518:	4603      	mov	r3, r0
 800451a:	4402      	add	r2, r0
 800451c:	4293      	cmp	r3, r2
 800451e:	d100      	bne.n	8004522 <memset+0xa>
 8004520:	4770      	bx	lr
 8004522:	f803 1b01 	strb.w	r1, [r3], #1
 8004526:	e7f9      	b.n	800451c <memset+0x4>

08004528 <_init>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	bf00      	nop
 800452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	469e      	mov	lr, r3
 8004532:	4770      	bx	lr

08004534 <_fini>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr
