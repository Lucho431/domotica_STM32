
tableroPileta_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000640c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  08006784  08006784  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006784  08006784  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800678c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  200000e8  08006874  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08006874  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158c0  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bd3  00000000  00000000  000359d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001430  00000000  00000000  000395a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  0003a9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018582  00000000  00000000  0003bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012fe4  00000000  00000000  0005417a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007bfb4  00000000  00000000  0006715e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005288  00000000  00000000  000e3190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08006500 	.word	0x08006500

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	08006500 	.word	0x08006500

0800014c <spi_74HC165_init>:
 * La función de inicialización está modificada para trabajar con dos
 * integrados 74HC165 a la vez, tratándolos como distintos esclavos SPI.
 * Cada integrado contará con su propia función de lectura, así como sus
 * propias señales CE.
 */
void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CE1port, uint16_t CE1pin, GPIO_TypeDef* CE2port, uint16_t CE2pin){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <spi_74HC165_init+0x44>)
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 8000162:	4a0c      	ldr	r2, [pc, #48]	; (8000194 <spi_74HC165_init+0x48>)
 8000164:	68bb      	ldr	r3, [r7, #8]
 8000166:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 8000168:	4a0b      	ldr	r2, [pc, #44]	; (8000198 <spi_74HC165_init+0x4c>)
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	8013      	strh	r3, [r2, #0]

	portCE1 = CE1port;
 800016e:	4a0b      	ldr	r2, [pc, #44]	; (800019c <spi_74HC165_init+0x50>)
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	6013      	str	r3, [r2, #0]
	pinCE1 = CE1pin;
 8000174:	4a0a      	ldr	r2, [pc, #40]	; (80001a0 <spi_74HC165_init+0x54>)
 8000176:	8b3b      	ldrh	r3, [r7, #24]
 8000178:	8013      	strh	r3, [r2, #0]
	portCE2 = CE2port;
 800017a:	4a0a      	ldr	r2, [pc, #40]	; (80001a4 <spi_74HC165_init+0x58>)
 800017c:	69fb      	ldr	r3, [r7, #28]
 800017e:	6013      	str	r3, [r2, #0]
	pinCE2 = CE2pin;
 8000180:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <spi_74HC165_init+0x5c>)
 8000182:	8c3b      	ldrh	r3, [r7, #32]
 8000184:	8013      	strh	r3, [r2, #0]

}
 8000186:	bf00      	nop
 8000188:	3714      	adds	r7, #20
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000134 	.word	0x20000134
 8000194:	20000140 	.word	0x20000140
 8000198:	20000138 	.word	0x20000138
 800019c:	20000148 	.word	0x20000148
 80001a0:	20000144 	.word	0x20000144
 80001a4:	2000013c 	.word	0x2000013c
 80001a8:	2000014c 	.word	0x2000014c

080001ac <spi_74HC165_receiveBotones>:


void spi_74HC165_receiveBotones (uint8_t* pdata, uint16_t sizeData){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	460b      	mov	r3, r1
 80001b6:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 80001b8:	4b15      	ldr	r3, [pc, #84]	; (8000210 <spi_74HC165_receiveBotones+0x64>)
 80001ba:	6818      	ldr	r0, [r3, #0]
 80001bc:	4b15      	ldr	r3, [pc, #84]	; (8000214 <spi_74HC165_receiveBotones+0x68>)
 80001be:	881b      	ldrh	r3, [r3, #0]
 80001c0:	2200      	movs	r2, #0
 80001c2:	4619      	mov	r1, r3
 80001c4:	f002 feed 	bl	8002fa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 80001c8:	4b11      	ldr	r3, [pc, #68]	; (8000210 <spi_74HC165_receiveBotones+0x64>)
 80001ca:	6818      	ldr	r0, [r3, #0]
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <spi_74HC165_receiveBotones+0x68>)
 80001ce:	881b      	ldrh	r3, [r3, #0]
 80001d0:	2201      	movs	r2, #1
 80001d2:	4619      	mov	r1, r3
 80001d4:	f002 fee5 	bl	8002fa2 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE1, pinCE1, 0);
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <spi_74HC165_receiveBotones+0x6c>)
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <spi_74HC165_receiveBotones+0x70>)
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	2200      	movs	r2, #0
 80001e2:	4619      	mov	r1, r3
 80001e4:	f002 fedd 	bl	8002fa2 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 80001e8:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <spi_74HC165_receiveBotones+0x74>)
 80001ea:	6818      	ldr	r0, [r3, #0]
 80001ec:	887a      	ldrh	r2, [r7, #2]
 80001ee:	2364      	movs	r3, #100	; 0x64
 80001f0:	6879      	ldr	r1, [r7, #4]
 80001f2:	f004 fcf2 	bl	8004bda <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE1, pinCE1, 1);
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <spi_74HC165_receiveBotones+0x6c>)
 80001f8:	6818      	ldr	r0, [r3, #0]
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <spi_74HC165_receiveBotones+0x70>)
 80001fc:	881b      	ldrh	r3, [r3, #0]
 80001fe:	2201      	movs	r2, #1
 8000200:	4619      	mov	r1, r3
 8000202:	f002 fece 	bl	8002fa2 <HAL_GPIO_WritePin>
}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	20000140 	.word	0x20000140
 8000214:	20000138 	.word	0x20000138
 8000218:	20000148 	.word	0x20000148
 800021c:	20000144 	.word	0x20000144
 8000220:	20000134 	.word	0x20000134

08000224 <spi_74HC165_receiveTeclado>:


void spi_74HC165_receiveTeclado (uint8_t* pdata, uint16_t sizeData){
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	460b      	mov	r3, r1
 800022e:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <spi_74HC165_receiveTeclado+0x64>)
 8000232:	6818      	ldr	r0, [r3, #0]
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <spi_74HC165_receiveTeclado+0x68>)
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	2200      	movs	r2, #0
 800023a:	4619      	mov	r1, r3
 800023c:	f002 feb1 	bl	8002fa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <spi_74HC165_receiveTeclado+0x64>)
 8000242:	6818      	ldr	r0, [r3, #0]
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <spi_74HC165_receiveTeclado+0x68>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	2201      	movs	r2, #1
 800024a:	4619      	mov	r1, r3
 800024c:	f002 fea9 	bl	8002fa2 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE2, pinCE2, 0);
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <spi_74HC165_receiveTeclado+0x6c>)
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <spi_74HC165_receiveTeclado+0x70>)
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	2200      	movs	r2, #0
 800025a:	4619      	mov	r1, r3
 800025c:	f002 fea1 	bl	8002fa2 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <spi_74HC165_receiveTeclado+0x74>)
 8000262:	6818      	ldr	r0, [r3, #0]
 8000264:	887a      	ldrh	r2, [r7, #2]
 8000266:	2364      	movs	r3, #100	; 0x64
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	f004 fcb6 	bl	8004bda <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE2, pinCE2, 1);
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <spi_74HC165_receiveTeclado+0x6c>)
 8000270:	6818      	ldr	r0, [r3, #0]
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <spi_74HC165_receiveTeclado+0x70>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	2201      	movs	r2, #1
 8000278:	4619      	mov	r1, r3
 800027a:	f002 fe92 	bl	8002fa2 <HAL_GPIO_WritePin>
}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000140 	.word	0x20000140
 800028c:	20000138 	.word	0x20000138
 8000290:	2000013c 	.word	0x2000013c
 8000294:	2000014c 	.word	0x2000014c
 8000298:	20000134 	.word	0x20000134

0800029c <spi_74HC595_init>:
SPI_HandleTypeDef* spi_handler;
GPIO_TypeDef* portST;
uint16_t pinST;


void spi_74HC595_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* STport, uint16_t STpin){
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	4613      	mov	r3, r2
 80002a8:	80fb      	strh	r3, [r7, #6]

	spi_handler =hspi;
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <spi_74HC595_init+0x38>)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	6013      	str	r3, [r2, #0]

	portST = STport;
 80002b0:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <spi_74HC595_init+0x3c>)
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	6013      	str	r3, [r2, #0]
	pinST = STpin;
 80002b6:	4a09      	ldr	r2, [pc, #36]	; (80002dc <spi_74HC595_init+0x40>)
 80002b8:	88fb      	ldrh	r3, [r7, #6]
 80002ba:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(portST, pinST, 0);
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <spi_74HC595_init+0x3c>)
 80002be:	6818      	ldr	r0, [r3, #0]
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <spi_74HC595_init+0x40>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	2200      	movs	r2, #0
 80002c6:	4619      	mov	r1, r3
 80002c8:	f002 fe6b 	bl	8002fa2 <HAL_GPIO_WritePin>

} //end spi_74HC595_init()
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000134 	.word	0x20000134
 80002d8:	20000154 	.word	0x20000154
 80002dc:	20000150 	.word	0x20000150

080002e0 <spi_74HC595_Transmit>:


void spi_74HC595_Transmit (uint8_t* pdata, uint16_t sizeData){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(spi_handler, pdata, sizeData, 100);
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <spi_74HC595_Transmit+0x44>)
 80002ee:	6818      	ldr	r0, [r3, #0]
 80002f0:	887a      	ldrh	r2, [r7, #2]
 80002f2:	2364      	movs	r3, #100	; 0x64
 80002f4:	6879      	ldr	r1, [r7, #4]
 80002f6:	f004 fb3c 	bl	8004972 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(portST, pinST, 1);
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <spi_74HC595_Transmit+0x48>)
 80002fc:	6818      	ldr	r0, [r3, #0]
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <spi_74HC595_Transmit+0x4c>)
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	2201      	movs	r2, #1
 8000304:	4619      	mov	r1, r3
 8000306:	f002 fe4c 	bl	8002fa2 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(portST, pinST, 0);
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <spi_74HC595_Transmit+0x48>)
 800030c:	6818      	ldr	r0, [r3, #0]
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <spi_74HC595_Transmit+0x4c>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	2200      	movs	r2, #0
 8000314:	4619      	mov	r1, r3
 8000316:	f002 fe44 	bl	8002fa2 <HAL_GPIO_WritePin>

} //end spi_74HC595_transmit()
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000134 	.word	0x20000134
 8000328:	20000154 	.word	0x20000154
 800032c:	20000150 	.word	0x20000150

08000330 <turnONFila>:
uint32_t read_input, last_input, fall_input, rise_input;

uint16_t write_output;


void turnONFila (uint8_t filaNum){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]

	switch (filaNum){
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b03      	cmp	r3, #3
 800033e:	d862      	bhi.n	8000406 <turnONFila+0xd6>
 8000340:	a201      	add	r2, pc, #4	; (adr r2, 8000348 <turnONFila+0x18>)
 8000342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000346:	bf00      	nop
 8000348:	08000359 	.word	0x08000359
 800034c:	08000385 	.word	0x08000385
 8000350:	080003b1 	.word	0x080003b1
 8000354:	080003dd 	.word	0x080003dd
		case 0:
			//pongo en 0 la fila 0; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2120      	movs	r1, #32
 800035c:	482c      	ldr	r0, [pc, #176]	; (8000410 <turnONFila+0xe0>)
 800035e:	f002 fe20 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 8000362:	2201      	movs	r2, #1
 8000364:	2110      	movs	r1, #16
 8000366:	482a      	ldr	r0, [pc, #168]	; (8000410 <turnONFila+0xe0>)
 8000368:	f002 fe1b 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 800036c:	2201      	movs	r2, #1
 800036e:	2108      	movs	r1, #8
 8000370:	4827      	ldr	r0, [pc, #156]	; (8000410 <turnONFila+0xe0>)
 8000372:	f002 fe16 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 8000376:	2201      	movs	r2, #1
 8000378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037c:	4825      	ldr	r0, [pc, #148]	; (8000414 <turnONFila+0xe4>)
 800037e:	f002 fe10 	bl	8002fa2 <HAL_GPIO_WritePin>
		break;
 8000382:	e041      	b.n	8000408 <turnONFila+0xd8>
		case 1:
			//pongo en 0 la fila 1; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 8000384:	2201      	movs	r2, #1
 8000386:	2120      	movs	r1, #32
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <turnONFila+0xe0>)
 800038a:	f002 fe0a 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2110      	movs	r1, #16
 8000392:	481f      	ldr	r0, [pc, #124]	; (8000410 <turnONFila+0xe0>)
 8000394:	f002 fe05 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 8000398:	2201      	movs	r2, #1
 800039a:	2108      	movs	r1, #8
 800039c:	481c      	ldr	r0, [pc, #112]	; (8000410 <turnONFila+0xe0>)
 800039e:	f002 fe00 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003a8:	481a      	ldr	r0, [pc, #104]	; (8000414 <turnONFila+0xe4>)
 80003aa:	f002 fdfa 	bl	8002fa2 <HAL_GPIO_WritePin>
		break;
 80003ae:	e02b      	b.n	8000408 <turnONFila+0xd8>
		case 2:
			//pongo en 0 la fila 2; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2120      	movs	r1, #32
 80003b4:	4816      	ldr	r0, [pc, #88]	; (8000410 <turnONFila+0xe0>)
 80003b6:	f002 fdf4 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2110      	movs	r1, #16
 80003be:	4814      	ldr	r0, [pc, #80]	; (8000410 <turnONFila+0xe0>)
 80003c0:	f002 fdef 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2108      	movs	r1, #8
 80003c8:	4811      	ldr	r0, [pc, #68]	; (8000410 <turnONFila+0xe0>)
 80003ca:	f002 fdea 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 1);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003d4:	480f      	ldr	r0, [pc, #60]	; (8000414 <turnONFila+0xe4>)
 80003d6:	f002 fde4 	bl	8002fa2 <HAL_GPIO_WritePin>
		break;
 80003da:	e015      	b.n	8000408 <turnONFila+0xd8>
		case 3:
			//pongo en 0 la fila 3; resto en 1 (LOGICA NEGATIVA).
			HAL_GPIO_WritePin(OUT_fila0_GPIO_Port, OUT_fila0_Pin, 1);
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	480b      	ldr	r0, [pc, #44]	; (8000410 <turnONFila+0xe0>)
 80003e2:	f002 fdde 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila1_GPIO_Port, OUT_fila1_Pin, 1);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2110      	movs	r1, #16
 80003ea:	4809      	ldr	r0, [pc, #36]	; (8000410 <turnONFila+0xe0>)
 80003ec:	f002 fdd9 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila2_GPIO_Port, OUT_fila2_Pin, 1);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2108      	movs	r1, #8
 80003f4:	4806      	ldr	r0, [pc, #24]	; (8000410 <turnONFila+0xe0>)
 80003f6:	f002 fdd4 	bl	8002fa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_fila3_GPIO_Port, OUT_fila3_Pin, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <turnONFila+0xe4>)
 8000402:	f002 fdce 	bl	8002fa2 <HAL_GPIO_WritePin>
		default:
		break;
 8000406:	bf00      	nop
	}//end witch
}//end turnONFila
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40010c00 	.word	0x40010c00
 8000414:	40010800 	.word	0x40010800

08000418 <lecturaTeclas>:


void lecturaTeclas (void){
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0

//	last_input = read_input;

	//pulsadores:
	spi_74HC165_receiveBotones (&read_teclas, 1);
 800041e:	2101      	movs	r1, #1
 8000420:	481a      	ldr	r0, [pc, #104]	; (800048c <lecturaTeclas+0x74>)
 8000422:	f7ff fec3 	bl	80001ac <spi_74HC165_receiveBotones>

	//teclado matricial:

	for (uint8_t i = 0; i < 4; i++){
 8000426:	2300      	movs	r3, #0
 8000428:	71fb      	strb	r3, [r7, #7]
 800042a:	e00d      	b.n	8000448 <lecturaTeclas+0x30>
		turnONFila(i);
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff ff7e 	bl	8000330 <turnONFila>
		spi_74HC165_receiveTeclado(&read_teclado[i], 1);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	4a16      	ldr	r2, [pc, #88]	; (8000490 <lecturaTeclas+0x78>)
 8000438:	4413      	add	r3, r2
 800043a:	2101      	movs	r1, #1
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fef1 	bl	8000224 <spi_74HC165_receiveTeclado>
	for (uint8_t i = 0; i < 4; i++){
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	3301      	adds	r3, #1
 8000446:	71fb      	strb	r3, [r7, #7]
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b03      	cmp	r3, #3
 800044c:	d9ee      	bls.n	800042c <lecturaTeclas+0x14>
//							(read_teclado[0] << 6) |
//							(read_teclado[1] << 10) |
//							(read_teclado[2] << 14) |
//							(read_teclado[3] << 18));

	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <lecturaTeclas+0x78>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	f003 020f 	and.w	r2, r3, #15
							( (read_teclado[1] & 0b1111) << 4) |
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <lecturaTeclas+0x78>)
 8000458:	785b      	ldrb	r3, [r3, #1]
 800045a:	011b      	lsls	r3, r3, #4
 800045c:	b2db      	uxtb	r3, r3
	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 800045e:	431a      	orrs	r2, r3
							( (read_teclado[2] & 0b1111) << 8) |
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <lecturaTeclas+0x78>)
 8000462:	789b      	ldrb	r3, [r3, #2]
 8000464:	021b      	lsls	r3, r3, #8
 8000466:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
							( (read_teclado[1] & 0b1111) << 4) |
 800046a:	431a      	orrs	r2, r3
							( (read_teclado[3] & 0b1111) << 12) |
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <lecturaTeclas+0x78>)
 800046e:	78db      	ldrb	r3, [r3, #3]
 8000470:	031b      	lsls	r3, r3, #12
 8000472:	b29b      	uxth	r3, r3
							( (read_teclado[2] & 0b1111) << 8) |
 8000474:	431a      	orrs	r2, r3
							(read_teclas << 16) );
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <lecturaTeclas+0x74>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	041b      	lsls	r3, r3, #16
							( (read_teclado[3] & 0b1111) << 12) |
 800047c:	4313      	orrs	r3, r2
	read_input = (uint32_t) ( (read_teclado[0] & 0b1111) |
 800047e:	461a      	mov	r2, r3
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <lecturaTeclas+0x7c>)
 8000482:	601a      	str	r2, [r3, #0]


} //end lecturaTeclas()
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000188 	.word	0x20000188
 8000490:	2000015c 	.word	0x2000015c
 8000494:	20000160 	.word	0x20000160

08000498 <update_teclas>:


void update_teclas(void){ //ESTADO DE LAS TECLAS CON LOGICA NEGATIVA
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0


	fall_input = last_input & ~read_input;
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <update_teclas+0x34>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	43da      	mvns	r2, r3
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <update_teclas+0x38>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4013      	ands	r3, r2
 80004a8:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <update_teclas+0x3c>)
 80004aa:	6013      	str	r3, [r2, #0]
	rise_input = ~last_input & read_input;
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <update_teclas+0x38>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	43da      	mvns	r2, r3
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <update_teclas+0x34>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4013      	ands	r3, r2
 80004b8:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <update_teclas+0x40>)
 80004ba:	6013      	str	r3, [r2, #0]

	last_input = read_input;
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <update_teclas+0x34>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a03      	ldr	r2, [pc, #12]	; (80004d0 <update_teclas+0x38>)
 80004c2:	6013      	str	r3, [r2, #0]

} //end teclas
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	20000160 	.word	0x20000160
 80004d0:	20000184 	.word	0x20000184
 80004d4:	20000164 	.word	0x20000164
 80004d8:	20000168 	.word	0x20000168

080004dc <getStatBoton>:


T_INPUT getStatBoton (T_POS_INPUT b){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]

	if ( (fall_input & (1 << b)) != 0)
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2201      	movs	r2, #1
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <getStatBoton+0x74>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4013      	ands	r3, r2
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <getStatBoton+0x22>
		return FALL;
 80004fa:	2302      	movs	r3, #2
 80004fc:	e022      	b.n	8000544 <getStatBoton+0x68>

	if (rise_input & (1 << b) != 0)
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2201      	movs	r2, #1
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	bf14      	ite	ne
 800050a:	2301      	movne	r3, #1
 800050c:	2300      	moveq	r3, #0
 800050e:	b2db      	uxtb	r3, r3
 8000510:	461a      	mov	r2, r3
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <getStatBoton+0x78>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4013      	ands	r3, r2
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <getStatBoton+0x44>
		return RISE;
 800051c:	2303      	movs	r3, #3
 800051e:	e011      	b.n	8000544 <getStatBoton+0x68>

	if (read_input & (1 << b) != 0)
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2201      	movs	r2, #1
 8000524:	fa02 f303 	lsl.w	r3, r2, r3
 8000528:	2b00      	cmp	r3, #0
 800052a:	bf14      	ite	ne
 800052c:	2301      	movne	r3, #1
 800052e:	2300      	moveq	r3, #0
 8000530:	b2db      	uxtb	r3, r3
 8000532:	461a      	mov	r2, r3
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <getStatBoton+0x7c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4013      	ands	r3, r2
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <getStatBoton+0x66>
		return HIGH_L;
 800053e:	2301      	movs	r3, #1
 8000540:	e000      	b.n	8000544 <getStatBoton+0x68>

	return LOW_L;
 8000542:	2300      	movs	r3, #0

} //end getStatBoton()
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000164 	.word	0x20000164
 8000554:	20000168 	.word	0x20000168
 8000558:	20000160 	.word	0x20000160

0800055c <getNumber>:


int8_t getNumber (void){
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

	if (fall_input & (1 << IN_0))
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <getNumber+0xb0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <getNumber+0x14>
			return 0;
 800056c:	2300      	movs	r3, #0
 800056e:	e049      	b.n	8000604 <getNumber+0xa8>
	if (fall_input & (1 << IN_1))
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <getNumber+0xb0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <getNumber+0x24>
			return 1;
 800057c:	2301      	movs	r3, #1
 800057e:	e041      	b.n	8000604 <getNumber+0xa8>
	if (fall_input & (1 << IN_2))
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <getNumber+0xb0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f003 0302 	and.w	r3, r3, #2
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <getNumber+0x34>
			return 2;
 800058c:	2302      	movs	r3, #2
 800058e:	e039      	b.n	8000604 <getNumber+0xa8>
	if (fall_input & (1 << IN_3))
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <getNumber+0xb0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <getNumber+0x44>
			return 3;
 800059c:	2303      	movs	r3, #3
 800059e:	e031      	b.n	8000604 <getNumber+0xa8>
	if (fall_input & (1 << IN_4))
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <getNumber+0xb0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f003 0310 	and.w	r3, r3, #16
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <getNumber+0x54>
			return 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	e029      	b.n	8000604 <getNumber+0xa8>
	if (fall_input & (1 << IN_5))
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <getNumber+0xb0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f003 0320 	and.w	r3, r3, #32
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <getNumber+0x64>
			return 5;
 80005bc:	2305      	movs	r3, #5
 80005be:	e021      	b.n	8000604 <getNumber+0xa8>
	if (fall_input & (1 << IN_6))
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <getNumber+0xb0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <getNumber+0x74>
			return 6;
 80005cc:	2306      	movs	r3, #6
 80005ce:	e019      	b.n	8000604 <getNumber+0xa8>
	if (fall_input & (1 << IN_7))
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <getNumber+0xb0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <getNumber+0x84>
			return 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	e011      	b.n	8000604 <getNumber+0xa8>
	if (fall_input & (1 << IN_8))
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <getNumber+0xb0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <getNumber+0x94>
			return 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	e009      	b.n	8000604 <getNumber+0xa8>
	if (fall_input & (1 << IN_9))
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <getNumber+0xb0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <getNumber+0xa4>
			return 9;
 80005fc:	2309      	movs	r3, #9
 80005fe:	e001      	b.n	8000604 <getNumber+0xa8>

	return -1;
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
} //end getNumber()
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	20000164 	.word	0x20000164

08000610 <setOutput>:


void setOutput (T_POS_OUTPUT s, uint8_t val){
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	460a      	mov	r2, r1
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]

	if (val != 0){
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00b      	beq.n	800063e <setOutput+0x2e>
		write_output |= (uint16_t)(1 << s);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2201      	movs	r2, #1
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <setOutput+0x54>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	4313      	orrs	r3, r2
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <setOutput+0x54>)
 800063a:	801a      	strh	r2, [r3, #0]
		return;
 800063c:	e00e      	b.n	800065c <setOutput+0x4c>
	}else{
		write_output &= ~( (uint16_t)(1 << s) );
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2201      	movs	r2, #1
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	b21b      	sxth	r3, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	b21a      	sxth	r2, r3
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <setOutput+0x54>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	b21b      	sxth	r3, r3
 8000652:	4013      	ands	r3, r2
 8000654:	b21b      	sxth	r3, r3
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b02      	ldr	r3, [pc, #8]	; (8000664 <setOutput+0x54>)
 800065a:	801a      	strh	r2, [r3, #0]
	}

} //end setOutput()
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	20000158 	.word	0x20000158

08000668 <toggleOutput>:

void toggleOutput (T_POS_OUTPUT s){
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]

	write_output ^= (uint16_t)(1 << s);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2201      	movs	r2, #1
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <toggleOutput+0x2c>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	4053      	eors	r3, r2
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <toggleOutput+0x2c>)
 8000686:	801a      	strh	r2, [r3, #0]

} //end toggleOutput()
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000158 	.word	0x20000158

08000698 <update_outputs>:


void update_outputs (void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

	spi_74HC595_Transmit( (uint8_t*)&write_output, 2); // 2 bytes.
 800069c:	2102      	movs	r1, #2
 800069e:	4802      	ldr	r0, [pc, #8]	; (80006a8 <update_outputs+0x10>)
 80006a0:	f7ff fe1e 	bl	80002e0 <spi_74HC595_Transmit>

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000158 	.word	0x20000158

080006ac <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	e01f      	b.n	80006fc <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 80006bc:	79fa      	ldrb	r2, [r7, #7]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d005      	beq.n	80006d8 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 80006cc:	2201      	movs	r2, #1
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	480e      	ldr	r0, [pc, #56]	; (800070c <SendByteSPI+0x60>)
 80006d2:	f002 fc66 	bl	8002fa2 <HAL_GPIO_WritePin>
 80006d6:	e004      	b.n	80006e2 <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 80006d8:	2200      	movs	r2, #0
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <SendByteSPI+0x60>)
 80006de:	f002 fc60 	bl	8002fa2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 80006e2:	2200      	movs	r2, #0
 80006e4:	2120      	movs	r1, #32
 80006e6:	4809      	ldr	r0, [pc, #36]	; (800070c <SendByteSPI+0x60>)
 80006e8:	f002 fc5b 	bl	8002fa2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 80006ec:	2201      	movs	r2, #1
 80006ee:	2120      	movs	r1, #32
 80006f0:	4806      	ldr	r0, [pc, #24]	; (800070c <SendByteSPI+0x60>)
 80006f2:	f002 fc56 	bl	8002fa2 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b07      	cmp	r3, #7
 8000700:	dddc      	ble.n	80006bc <SendByteSPI+0x10>

	}
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40010800 	.word	0x40010800

08000710 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800071a:	2201      	movs	r2, #1
 800071c:	2140      	movs	r1, #64	; 0x40
 800071e:	480f      	ldr	r0, [pc, #60]	; (800075c <ST7920_SendCmd+0x4c>)
 8000720:	f002 fc3f 	bl	8002fa2 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 8000724:	20f8      	movs	r0, #248	; 0xf8
 8000726:	f7ff ffc1 	bl	80006ac <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f023 030f 	bic.w	r3, r3, #15
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffba 	bl	80006ac <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	011b      	lsls	r3, r3, #4
 800073c:	b2db      	uxtb	r3, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ffb4 	bl	80006ac <SendByteSPI>
	delay_us(50);
 8000744:	2032      	movs	r0, #50	; 0x32
 8000746:	f000 f9bd 	bl	8000ac4 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800074a:	2200      	movs	r2, #0
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <ST7920_SendCmd+0x4c>)
 8000750:	f002 fc27 	bl	8002fa2 <HAL_GPIO_WritePin>

}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40010800 	.word	0x40010800

08000760 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800076a:	2201      	movs	r2, #1
 800076c:	2140      	movs	r1, #64	; 0x40
 800076e:	480f      	ldr	r0, [pc, #60]	; (80007ac <ST7920_SendData+0x4c>)
 8000770:	f002 fc17 	bl	8002fa2 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8000774:	20fa      	movs	r0, #250	; 0xfa
 8000776:	f7ff ff99 	bl	80006ac <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f023 030f 	bic.w	r3, r3, #15
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff92 	bl	80006ac <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff8c 	bl	80006ac <SendByteSPI>
	delay_us(50);
 8000794:	2032      	movs	r0, #50	; 0x32
 8000796:	f000 f995 	bl	8000ac4 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <ST7920_SendData+0x4c>)
 80007a0:	f002 fbff 	bl	8002fa2 <HAL_GPIO_WritePin>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40010800 	.word	0x40010800

080007b0 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
    switch (row)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d81e      	bhi.n	8000800 <ST7920_SendString+0x50>
 80007c2:	a201      	add	r2, pc, #4	; (adr r2, 80007c8 <ST7920_SendString+0x18>)
 80007c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c8:	080007d9 	.word	0x080007d9
 80007cc:	080007e3 	.word	0x080007e3
 80007d0:	080007ed 	.word	0x080007ed
 80007d4:	080007f7 	.word	0x080007f7
    {
        case 0:
            col |= 0x80;
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007de:	60bb      	str	r3, [r7, #8]
            break;
 80007e0:	e013      	b.n	800080a <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80007e8:	60bb      	str	r3, [r7, #8]
            break;
 80007ea:	e00e      	b.n	800080a <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80007f2:	60bb      	str	r3, [r7, #8]
            break;
 80007f4:	e009      	b.n	800080a <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 80007fc:	60bb      	str	r3, [r7, #8]
            break;
 80007fe:	e004      	b.n	800080a <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000806:	60bb      	str	r3, [r7, #8]
            break;
 8000808:	bf00      	nop
    }

    ST7920_SendCmd(col);
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff7e 	bl	8000710 <ST7920_SendCmd>

    while (*string)
 8000814:	e006      	b.n	8000824 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff9e 	bl	8000760 <ST7920_SendData>
    while (*string)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f4      	bne.n	8000816 <ST7920_SendString+0x66>
    	}
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <ST7920_DrawBitmap>:
		Graphic_Check = 0;  // update the variable
	}
}

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 800083c:	2300      	movs	r3, #0
 800083e:	73bb      	strb	r3, [r7, #14]
 8000840:	e06a      	b.n	8000918 <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	2b1f      	cmp	r3, #31
 8000846:	d830      	bhi.n	80008aa <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8000848:	2300      	movs	r3, #0
 800084a:	73fb      	strb	r3, [r7, #15]
 800084c:	e029      	b.n	80008a2 <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff5a 	bl	8000710 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff53 	bl	8000710 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 800086a:	7bfa      	ldrb	r2, [r7, #15]
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	4413      	add	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	461a      	mov	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff6f 	bl	8000760 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	7bbb      	ldrb	r3, [r7, #14]
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	4413      	add	r3, r2
 800088e:	461a      	mov	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4413      	add	r3, r2
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff62 	bl	8000760 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	3301      	adds	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	2b07      	cmp	r3, #7
 80008a6:	d9d2      	bls.n	800084e <ST7920_DrawBitmap+0x1a>
 80008a8:	e033      	b.n	8000912 <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	e02d      	b.n	800090c <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	3b20      	subs	r3, #32
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff25 	bl	8000710 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	f063 0377 	orn	r3, r3, #119	; 0x77
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff1e 	bl	8000710 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 80008d4:	7bfa      	ldrb	r2, [r7, #15]
 80008d6:	7bbb      	ldrb	r3, [r7, #14]
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	4413      	add	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	461a      	mov	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4413      	add	r3, r2
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff3a 	bl	8000760 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	011b      	lsls	r3, r3, #4
 80008f6:	4413      	add	r3, r2
 80008f8:	461a      	mov	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff2d 	bl	8000760 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	3301      	adds	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	2b07      	cmp	r3, #7
 8000910:	d9ce      	bls.n	80008b0 <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	3301      	adds	r3, #1
 8000916:	73bb      	strb	r3, [r7, #14]
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	2b3f      	cmp	r3, #63	; 0x3f
 800091c:	d991      	bls.n	8000842 <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <ST7920_Update+0x10>)
 800092e:	f7ff ff81 	bl	8000834 <ST7920_DrawBitmap>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000190 	.word	0x20000190

0800093c <ST7920_Init>:
	}
}


void ST7920_Init (void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	481c      	ldr	r0, [pc, #112]	; (80009b8 <ST7920_Init+0x7c>)
 8000946:	f002 fb2c 	bl	8002fa2 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 800094a:	200a      	movs	r0, #10
 800094c:	f001 fe7e 	bl	800264c <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000950:	2201      	movs	r2, #1
 8000952:	2101      	movs	r1, #1
 8000954:	4818      	ldr	r0, [pc, #96]	; (80009b8 <ST7920_Init+0x7c>)
 8000956:	f002 fb24 	bl	8002fa2 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 800095a:	2032      	movs	r0, #50	; 0x32
 800095c:	f001 fe76 	bl	800264c <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8000960:	2030      	movs	r0, #48	; 0x30
 8000962:	f7ff fed5 	bl	8000710 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 8000966:	206e      	movs	r0, #110	; 0x6e
 8000968:	f000 f8ac 	bl	8000ac4 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 800096c:	2030      	movs	r0, #48	; 0x30
 800096e:	f7ff fecf 	bl	8000710 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 8000972:	2028      	movs	r0, #40	; 0x28
 8000974:	f000 f8a6 	bl	8000ac4 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8000978:	2008      	movs	r0, #8
 800097a:	f7ff fec9 	bl	8000710 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 800097e:	206e      	movs	r0, #110	; 0x6e
 8000980:	f000 f8a0 	bl	8000ac4 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 8000984:	2001      	movs	r0, #1
 8000986:	f7ff fec3 	bl	8000710 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 800098a:	200c      	movs	r0, #12
 800098c:	f001 fe5e 	bl	800264c <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000990:	2006      	movs	r0, #6
 8000992:	f7ff febd 	bl	8000710 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000996:	2001      	movs	r0, #1
 8000998:	f001 fe58 	bl	800264c <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 800099c:	200c      	movs	r0, #12
 800099e:	f7ff feb7 	bl	8000710 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 80009a2:	2001      	movs	r0, #1
 80009a4:	f001 fe52 	bl	800264c <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff feb1 	bl	8000710 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 80009ae:	2001      	movs	r0, #1
 80009b0:	f001 fe4c 	bl	800264c <HAL_Delay>

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40010c00 	.word	0x40010c00

080009bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_ADC1_Init+0x74>)
 80009ce:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <MX_ADC1_Init+0x78>)
 80009d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_ADC1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_ADC1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_ADC1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_ADC1_Init+0x74>)
 80009e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_ADC1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_ADC1_Init+0x74>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <MX_ADC1_Init+0x74>)
 80009fa:	f001 fe49 	bl	8002690 <HAL_ADC_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a04:	f000 feee 	bl	80017e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_ADC1_Init+0x74>)
 8000a1a:	f001 ff11 	bl	8002840 <HAL_ADC_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a24:	f000 fede 	bl	80017e4 <Error_Handler>
  }

}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000594 	.word	0x20000594
 8000a34:	40012400 	.word	0x40012400

08000a38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <HAL_ADC_MspInit+0x6c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d121      	bne.n	8000a9c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_ADC_MspInit+0x70>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <HAL_ADC_MspInit+0x70>)
 8000a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_ADC_MspInit+0x70>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_ADC_MspInit+0x70>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <HAL_ADC_MspInit+0x70>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_ADC_MspInit+0x70>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0304 	and.w	r3, r3, #4
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <HAL_ADC_MspInit+0x74>)
 8000a98:	f002 f912 	bl	8002cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40012400 	.word	0x40012400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010800 	.word	0x40010800

08000ab0 <delay_init>:

extern TIM_HandleTypeDef htim3;


void delay_init ()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim3);  // change this according to ur setup
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <delay_init+0x10>)
 8000ab6:	f004 fc40 	bl	800533a <HAL_TIM_Base_Start>
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000067c 	.word	0x2000067c

08000ac4 <delay_us>:

void delay_us (uint16_t delay)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);  // reset the counter
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <delay_us+0x2c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<delay);  // wait for the delay to complete
 8000ad6:	bf00      	nop
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <delay_us+0x2c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d3f9      	bcc.n	8000ad8 <delay_us+0x14>
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2000067c 	.word	0x2000067c

08000af4 <init_pantalla>:
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	f7ff ffda 	bl	8000ab0 <delay_init>
 8000afc:	f7ff ff1e 	bl	800093c <ST7920_Init>
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <set_pantalla>:
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fe4d 	bl	80007b0 <ST7920_SendString>
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <pantallaUpdate>:
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <pantallaUpdate+0x1c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d004      	beq.n	8000b36 <pantallaUpdate+0x16>
 8000b2c:	f7ff fefc 	bl	8000928 <ST7920_Update>
 8000b30:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <pantallaUpdate+0x1c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000104 	.word	0x20000104

08000b40 <setProg_hidro>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

T_PROG_OUTPUT setProg_hidro (T_PROG_CMD cmd){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]

	int8_t newNumber = getNumber();
 8000b4a:	f7ff fd07 	bl	800055c <getNumber>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	73fb      	strb	r3, [r7, #15]

	switch (statusTiempoHidro) {
 8000b52:	4b7b      	ldr	r3, [pc, #492]	; (8000d40 <setProg_hidro+0x200>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	f200 80e3 	bhi.w	8000d22 <setProg_hidro+0x1e2>
 8000b5c:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <setProg_hidro+0x24>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000bb7 	.word	0x08000bb7
 8000b6c:	08000c55 	.word	0x08000c55
 8000b70:	08000d0f 	.word	0x08000d0f
		case 0: //tiempo en 0.
			if (getStatBoton(IN_AST) == FALL) {
 8000b74:	200c      	movs	r0, #12
 8000b76:	f7ff fcb1 	bl	80004dc <getStatBoton>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d101      	bne.n	8000b84 <setProg_hidro+0x44>
//			menuActual = menuActual->menuPadre;
//			HMI_setPage(menuActual->nombre);
				return PROG_IDLE;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e0d8      	b.n	8000d36 <setProg_hidro+0x1f6>
			}

			if (newNumber > 0) {
 8000b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f340 80cc 	ble.w	8000d26 <setProg_hidro+0x1e6>
				tiempoHidroAux = newNumber;
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	4b6b      	ldr	r3, [pc, #428]	; (8000d44 <setProg_hidro+0x204>)
 8000b96:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000b98:	4b6a      	ldr	r3, [pc, #424]	; (8000d44 <setProg_hidro+0x204>)
 8000b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4969      	ldr	r1, [pc, #420]	; (8000d48 <setProg_hidro+0x208>)
 8000ba2:	486a      	ldr	r0, [pc, #424]	; (8000d4c <setProg_hidro+0x20c>)
 8000ba4:	f005 f89a 	bl	8005cdc <siprintf>
				set_pantalla(texto);
 8000ba8:	4868      	ldr	r0, [pc, #416]	; (8000d4c <setProg_hidro+0x20c>)
 8000baa:	f7ff ffab 	bl	8000b04 <set_pantalla>
				statusTiempoHidro = 1;
 8000bae:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <setProg_hidro+0x200>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000bb4:	e0b7      	b.n	8000d26 <setProg_hidro+0x1e6>
		case 1: //lote entre 1 y 9.
			if (getStatBoton(IN_AST) == FALL) {
 8000bb6:	200c      	movs	r0, #12
 8000bb8:	f7ff fc90 	bl	80004dc <getStatBoton>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d111      	bne.n	8000be6 <setProg_hidro+0xa6>
				tiempoHidroAux = 0;
 8000bc2:	4b60      	ldr	r3, [pc, #384]	; (8000d44 <setProg_hidro+0x204>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000bc8:	4b5e      	ldr	r3, [pc, #376]	; (8000d44 <setProg_hidro+0x204>)
 8000bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	495d      	ldr	r1, [pc, #372]	; (8000d48 <setProg_hidro+0x208>)
 8000bd2:	485e      	ldr	r0, [pc, #376]	; (8000d4c <setProg_hidro+0x20c>)
 8000bd4:	f005 f882 	bl	8005cdc <siprintf>
				set_pantalla(texto);
 8000bd8:	485c      	ldr	r0, [pc, #368]	; (8000d4c <setProg_hidro+0x20c>)
 8000bda:	f7ff ff93 	bl	8000b04 <set_pantalla>
				statusTiempoHidro = 0;
 8000bde:	4b58      	ldr	r3, [pc, #352]	; (8000d40 <setProg_hidro+0x200>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
				break;
 8000be4:	e0a6      	b.n	8000d34 <setProg_hidro+0x1f4>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8000be6:	200e      	movs	r0, #14
 8000be8:	f7ff fc78 	bl	80004dc <getStatBoton>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d103      	bne.n	8000bfa <setProg_hidro+0xba>
				statusTiempoHidro = 3;
 8000bf2:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <setProg_hidro+0x200>)
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	701a      	strb	r2, [r3, #0]
				break;
 8000bf8:	e09c      	b.n	8000d34 <setProg_hidro+0x1f4>
			}

			if (newNumber != -1) {
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c02:	f000 8092 	beq.w	8000d2a <setProg_hidro+0x1ea>
				tiempoHidroAux *= 10;
 8000c06:	4b4f      	ldr	r3, [pc, #316]	; (8000d44 <setProg_hidro+0x204>)
 8000c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	0092      	lsls	r2, r2, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <setProg_hidro+0x204>)
 8000c1c:	801a      	strh	r2, [r3, #0]
				tiempoHidroAux += newNumber;
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <setProg_hidro+0x204>)
 8000c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	4b44      	ldr	r3, [pc, #272]	; (8000d44 <setProg_hidro+0x204>)
 8000c34:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000c36:	4b43      	ldr	r3, [pc, #268]	; (8000d44 <setProg_hidro+0x204>)
 8000c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4942      	ldr	r1, [pc, #264]	; (8000d48 <setProg_hidro+0x208>)
 8000c40:	4842      	ldr	r0, [pc, #264]	; (8000d4c <setProg_hidro+0x20c>)
 8000c42:	f005 f84b 	bl	8005cdc <siprintf>
				set_pantalla(texto);
 8000c46:	4841      	ldr	r0, [pc, #260]	; (8000d4c <setProg_hidro+0x20c>)
 8000c48:	f7ff ff5c 	bl	8000b04 <set_pantalla>
				statusTiempoHidro = 2;
 8000c4c:	4b3c      	ldr	r3, [pc, #240]	; (8000d40 <setProg_hidro+0x200>)
 8000c4e:	2202      	movs	r2, #2
 8000c50:	701a      	strb	r2, [r3, #0]
				break;
 8000c52:	e06f      	b.n	8000d34 <setProg_hidro+0x1f4>
			}

		break;
		case 2: //lote en 10 o más...
			if (getStatBoton(IN_AST) == FALL) {
 8000c54:	200c      	movs	r0, #12
 8000c56:	f7ff fc41 	bl	80004dc <getStatBoton>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d11e      	bne.n	8000c9e <setProg_hidro+0x15e>
				tiempoHidroAux /= 10;
 8000c60:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <setProg_hidro+0x204>)
 8000c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c66:	4a3a      	ldr	r2, [pc, #232]	; (8000d50 <setProg_hidro+0x210>)
 8000c68:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6c:	1092      	asrs	r2, r2, #2
 8000c6e:	17db      	asrs	r3, r3, #31
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <setProg_hidro+0x204>)
 8000c76:	801a      	strh	r2, [r3, #0]
				sprintf(texto, "%d min.", tiempoHidroAux);
 8000c78:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <setProg_hidro+0x204>)
 8000c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4931      	ldr	r1, [pc, #196]	; (8000d48 <setProg_hidro+0x208>)
 8000c82:	4832      	ldr	r0, [pc, #200]	; (8000d4c <setProg_hidro+0x20c>)
 8000c84:	f005 f82a 	bl	8005cdc <siprintf>
				set_pantalla(texto);
 8000c88:	4830      	ldr	r0, [pc, #192]	; (8000d4c <setProg_hidro+0x20c>)
 8000c8a:	f7ff ff3b 	bl	8000b04 <set_pantalla>
				if (statusTiempoHidro < 10) {
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <setProg_hidro+0x200>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b09      	cmp	r3, #9
 8000c94:	d84b      	bhi.n	8000d2e <setProg_hidro+0x1ee>
					statusTiempoHidro = 1;
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <setProg_hidro+0x200>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000c9c:	e047      	b.n	8000d2e <setProg_hidro+0x1ee>
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8000c9e:	200e      	movs	r0, #14
 8000ca0:	f7ff fc1c 	bl	80004dc <getStatBoton>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d103      	bne.n	8000cb2 <setProg_hidro+0x172>
				statusTiempoHidro = 3;
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <setProg_hidro+0x200>)
 8000cac:	2203      	movs	r2, #3
 8000cae:	701a      	strb	r2, [r3, #0]
				break;
 8000cb0:	e040      	b.n	8000d34 <setProg_hidro+0x1f4>
			}

			if (tiempoHidroAux < 120) {
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <setProg_hidro+0x204>)
 8000cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb8:	2b77      	cmp	r3, #119	; 0x77
 8000cba:	dc3a      	bgt.n	8000d32 <setProg_hidro+0x1f2>
				if (newNumber != -1) {
 8000cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cc4:	d035      	beq.n	8000d32 <setProg_hidro+0x1f2>
					tiempoHidroAux *= 10;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <setProg_hidro+0x204>)
 8000cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <setProg_hidro+0x204>)
 8000cdc:	801a      	strh	r2, [r3, #0]
					tiempoHidroAux += newNumber;
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <setProg_hidro+0x204>)
 8000ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	4413      	add	r3, r2
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <setProg_hidro+0x204>)
 8000cf4:	801a      	strh	r2, [r3, #0]
					sprintf(texto, "%d min.", tiempoHidroAux);
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <setProg_hidro+0x204>)
 8000cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4912      	ldr	r1, [pc, #72]	; (8000d48 <setProg_hidro+0x208>)
 8000d00:	4812      	ldr	r0, [pc, #72]	; (8000d4c <setProg_hidro+0x20c>)
 8000d02:	f004 ffeb 	bl	8005cdc <siprintf>
					set_pantalla(texto);
 8000d06:	4811      	ldr	r0, [pc, #68]	; (8000d4c <setProg_hidro+0x20c>)
 8000d08:	f7ff fefc 	bl	8000b04 <set_pantalla>
					break;
 8000d0c:	e012      	b.n	8000d34 <setProg_hidro+0x1f4>
			}

		break;
		case 3: //retorna y graba el valor

			tiempoHidro = tiempoHidroAux;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <setProg_hidro+0x204>)
 8000d10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <setProg_hidro+0x214>)
 8000d16:	801a      	strh	r2, [r3, #0]
			statusTiempoHidro = 0;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <setProg_hidro+0x200>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]

			return PROG_FINISHED;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e009      	b.n	8000d36 <setProg_hidro+0x1f6>
		break;

		default:
			return PROG_ERROR;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e007      	b.n	8000d36 <setProg_hidro+0x1f6>
		break;
 8000d26:	bf00      	nop
 8000d28:	e004      	b.n	8000d34 <setProg_hidro+0x1f4>
		break;
 8000d2a:	bf00      	nop
 8000d2c:	e002      	b.n	8000d34 <setProg_hidro+0x1f4>
				break;
 8000d2e:	bf00      	nop
 8000d30:	e000      	b.n	8000d34 <setProg_hidro+0x1f4>
		break;
 8000d32:	bf00      	nop
		break;
	} //end switch statusTiempoHidro.

	return PROG_BUSY;
 8000d34:	2302      	movs	r3, #2

} //end setProg_hidro()
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000010a 	.word	0x2000010a
 8000d44:	20000106 	.word	0x20000106
 8000d48:	08006518 	.word	0x08006518
 8000d4c:	200005c8 	.word	0x200005c8
 8000d50:	66666667 	.word	0x66666667
 8000d54:	20000108 	.word	0x20000108

08000d58 <setProg_luz>:
T_PROG_OUTPUT setProg_skimmer (T_PROG_CMD cmd){
	__NOP();
} //end setProg_skimmer()


T_PROG_OUTPUT setProg_luz (T_PROG_CMD cmd){
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	__NOP();
 8000d62:	bf00      	nop
} //end setProg_luz()
 8000d64:	bf00      	nop
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <runProg_hidro>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

T_PROG_OUTPUT runProg_hidro (T_PROG_CMD cmd){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]

	switch (cmd) {
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d005      	beq.n	8000d8c <runProg_hidro+0x1c>
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	f000 80a7 	beq.w	8000ed4 <runProg_hidro+0x164>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d051      	beq.n	8000e2e <runProg_hidro+0xbe>
//			return PROG_FINISHED;
			status_progHidro = PROG_IDLE;
		break;

		default:
		break;
 8000d8a:	e0b2      	b.n	8000ef2 <runProg_hidro+0x182>
			setOutput(OUT_rele_jet, 1); //logica positiva
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	2004      	movs	r0, #4
 8000d90:	f7ff fc3e 	bl	8000610 <setOutput>
			set_led(OUT_led_jet, TITILA_LENTO);
 8000d94:	2102      	movs	r1, #2
 8000d96:	200a      	movs	r0, #10
 8000d98:	f000 fc04 	bl	80015a4 <set_led>
			fecha_hidro = get_fecha();
 8000d9c:	f000 fb8e 	bl	80014bc <get_fecha>
 8000da0:	4602      	mov	r2, r0
 8000da2:	4b57      	ldr	r3, [pc, #348]	; (8000f00 <runProg_hidro+0x190>)
 8000da4:	4611      	mov	r1, r2
 8000da6:	7019      	strb	r1, [r3, #0]
 8000da8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8000dac:	7059      	strb	r1, [r3, #1]
 8000dae:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8000db2:	7099      	strb	r1, [r3, #2]
 8000db4:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8000db8:	70da      	strb	r2, [r3, #3]
			hora_hidro = get_hora();
 8000dba:	f000 fb77 	bl	80014ac <get_hora>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	4b50      	ldr	r3, [pc, #320]	; (8000f04 <runProg_hidro+0x194>)
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	7019      	strb	r1, [r3, #0]
 8000dc6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8000dca:	7059      	strb	r1, [r3, #1]
 8000dcc:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000dd0:	709a      	strb	r2, [r3, #2]
			hora_hidro.Minutes += tiempoHidro;
 8000dd2:	4b4c      	ldr	r3, [pc, #304]	; (8000f04 <runProg_hidro+0x194>)
 8000dd4:	785a      	ldrb	r2, [r3, #1]
 8000dd6:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <runProg_hidro+0x198>)
 8000dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b48      	ldr	r3, [pc, #288]	; (8000f04 <runProg_hidro+0x194>)
 8000de4:	705a      	strb	r2, [r3, #1]
			if (hora_hidro.Minutes > 59){
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <runProg_hidro+0x194>)
 8000de8:	785b      	ldrb	r3, [r3, #1]
 8000dea:	2b3b      	cmp	r3, #59	; 0x3b
 8000dec:	d91b      	bls.n	8000e26 <runProg_hidro+0xb6>
				hora_hidro.Minutes -= 59;
 8000dee:	4b45      	ldr	r3, [pc, #276]	; (8000f04 <runProg_hidro+0x194>)
 8000df0:	785b      	ldrb	r3, [r3, #1]
 8000df2:	3b3b      	subs	r3, #59	; 0x3b
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <runProg_hidro+0x194>)
 8000df8:	705a      	strb	r2, [r3, #1]
				hora_hidro.Hours++;
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <runProg_hidro+0x194>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <runProg_hidro+0x194>)
 8000e04:	701a      	strb	r2, [r3, #0]
				if (hora_hidro.Hours > 23){
 8000e06:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <runProg_hidro+0x194>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b17      	cmp	r3, #23
 8000e0c:	d90b      	bls.n	8000e26 <runProg_hidro+0xb6>
					hora_hidro.Hours -= 23;
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <runProg_hidro+0x194>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	3b17      	subs	r3, #23
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <runProg_hidro+0x194>)
 8000e18:	701a      	strb	r2, [r3, #0]
					fecha_hidro.Date++;
 8000e1a:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <runProg_hidro+0x190>)
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <runProg_hidro+0x190>)
 8000e24:	709a      	strb	r2, [r3, #2]
			status_progHidro = PROG_BUSY;
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <runProg_hidro+0x19c>)
 8000e28:	2202      	movs	r2, #2
 8000e2a:	701a      	strb	r2, [r3, #0]
		break;
 8000e2c:	e061      	b.n	8000ef2 <runProg_hidro+0x182>
			if (status_progHidro == PROG_IDLE){
 8000e2e:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <runProg_hidro+0x19c>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d05a      	beq.n	8000eec <runProg_hidro+0x17c>
			auxFecha = get_fecha();
 8000e36:	f000 fb41 	bl	80014bc <get_fecha>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <runProg_hidro+0x1a0>)
 8000e3e:	4611      	mov	r1, r2
 8000e40:	7019      	strb	r1, [r3, #0]
 8000e42:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8000e46:	7059      	strb	r1, [r3, #1]
 8000e48:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8000e4c:	7099      	strb	r1, [r3, #2]
 8000e4e:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8000e52:	70da      	strb	r2, [r3, #3]
			auxHora = get_hora();
 8000e54:	f000 fb2a 	bl	80014ac <get_hora>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <runProg_hidro+0x1a4>)
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	7019      	strb	r1, [r3, #0]
 8000e60:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8000e64:	7059      	strb	r1, [r3, #1]
 8000e66:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000e6a:	709a      	strb	r2, [r3, #2]
			if (fecha_hidro.Date < auxFecha.Date){
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <runProg_hidro+0x190>)
 8000e6e:	789a      	ldrb	r2, [r3, #2]
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <runProg_hidro+0x1a0>)
 8000e72:	789b      	ldrb	r3, [r3, #2]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d20a      	bcs.n	8000e8e <runProg_hidro+0x11e>
				setOutput(OUT_rele_jet, 0); //logica positiva
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2004      	movs	r0, #4
 8000e7c:	f7ff fbc8 	bl	8000610 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 8000e80:	2100      	movs	r1, #0
 8000e82:	200a      	movs	r0, #10
 8000e84:	f000 fb8e 	bl	80015a4 <set_led>
				status_progHidro = PROG_IDLE;
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <runProg_hidro+0x19c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
			if (hora_hidro.Hours < auxHora.Hours){
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <runProg_hidro+0x194>)
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <runProg_hidro+0x1a4>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d20a      	bcs.n	8000eb0 <runProg_hidro+0x140>
				setOutput(OUT_rele_jet, 0); //logica positiva
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2004      	movs	r0, #4
 8000e9e:	f7ff fbb7 	bl	8000610 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	200a      	movs	r0, #10
 8000ea6:	f000 fb7d 	bl	80015a4 <set_led>
				status_progHidro = PROG_IDLE;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <runProg_hidro+0x19c>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
			if (hora_hidro.Minutes < auxHora.Minutes){
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <runProg_hidro+0x194>)
 8000eb2:	785a      	ldrb	r2, [r3, #1]
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <runProg_hidro+0x1a4>)
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d219      	bcs.n	8000ef0 <runProg_hidro+0x180>
				setOutput(OUT_rele_jet, 0); //logica positiva
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2004      	movs	r0, #4
 8000ec0:	f7ff fba6 	bl	8000610 <setOutput>
				set_led(OUT_led_jet, APAGADO);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	200a      	movs	r0, #10
 8000ec8:	f000 fb6c 	bl	80015a4 <set_led>
				status_progHidro = PROG_IDLE;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <runProg_hidro+0x19c>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
		break;
 8000ed2:	e00d      	b.n	8000ef0 <runProg_hidro+0x180>
			setOutput(OUT_rele_jet, 0); //logica positiva
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2004      	movs	r0, #4
 8000ed8:	f7ff fb9a 	bl	8000610 <setOutput>
			set_led(OUT_led_jet, APAGADO);
 8000edc:	2100      	movs	r1, #0
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f000 fb60 	bl	80015a4 <set_led>
			status_progHidro = PROG_IDLE;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <runProg_hidro+0x19c>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
		break;
 8000eea:	e002      	b.n	8000ef2 <runProg_hidro+0x182>
				break;
 8000eec:	bf00      	nop
 8000eee:	e000      	b.n	8000ef2 <runProg_hidro+0x182>
		break;
 8000ef0:	bf00      	nop
	} //end switch progCmd_hidro

	return status_progHidro;
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <runProg_hidro+0x19c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
} //end runProg_hidro()
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200005c4 	.word	0x200005c4
 8000f04:	200005f8 	.word	0x200005f8
 8000f08:	20000108 	.word	0x20000108
 8000f0c:	200005f0 	.word	0x200005f0
 8000f10:	200005f4 	.word	0x200005f4
 8000f14:	200005fc 	.word	0x200005fc

08000f18 <runProg_llenado>:

T_PROG_OUTPUT runProg_llenado (T_PROG_CMD cmd){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]

	switch (cmd) {
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d005      	beq.n	8000f34 <runProg_llenado+0x1c>
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	f000 8194 	beq.w	8001256 <runProg_llenado+0x33e>
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d054      	beq.n	8000fdc <runProg_llenado+0xc4>

			status_progLlenado = PROG_IDLE;
		break;

		default:
		break;
 8000f32:	e19d      	b.n	8001270 <runProg_llenado+0x358>
			setOutput(OUT_rele_napa, 1); //logica positiva
 8000f34:	2101      	movs	r1, #1
 8000f36:	2003      	movs	r0, #3
 8000f38:	f7ff fb6a 	bl	8000610 <setOutput>
			set_led(OUT_led_napa, TITILA_LENTO);
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	2009      	movs	r0, #9
 8000f40:	f000 fb30 	bl	80015a4 <set_led>
			flag_bombaNapa = 1;
 8000f44:	4b79      	ldr	r3, [pc, #484]	; (800112c <runProg_llenado+0x214>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
			fecha_llenadoOn = get_fecha();
 8000f4a:	f000 fab7 	bl	80014bc <get_fecha>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	4b77      	ldr	r3, [pc, #476]	; (8001130 <runProg_llenado+0x218>)
 8000f52:	4611      	mov	r1, r2
 8000f54:	7019      	strb	r1, [r3, #0]
 8000f56:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8000f5a:	7059      	strb	r1, [r3, #1]
 8000f5c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8000f60:	7099      	strb	r1, [r3, #2]
 8000f62:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8000f66:	70da      	strb	r2, [r3, #3]
			hora_llenadoOn = get_hora();
 8000f68:	f000 faa0 	bl	80014ac <get_hora>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	4b71      	ldr	r3, [pc, #452]	; (8001134 <runProg_llenado+0x21c>)
 8000f70:	4611      	mov	r1, r2
 8000f72:	7019      	strb	r1, [r3, #0]
 8000f74:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8000f78:	7059      	strb	r1, [r3, #1]
 8000f7a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000f7e:	709a      	strb	r2, [r3, #2]
			hora_llenadoOn.Minutes += tiempoLlenado_ON;
 8000f80:	4b6c      	ldr	r3, [pc, #432]	; (8001134 <runProg_llenado+0x21c>)
 8000f82:	785a      	ldrb	r2, [r3, #1]
 8000f84:	4b6c      	ldr	r3, [pc, #432]	; (8001138 <runProg_llenado+0x220>)
 8000f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <runProg_llenado+0x21c>)
 8000f92:	705a      	strb	r2, [r3, #1]
			if (hora_llenadoOn.Minutes > 59) {
 8000f94:	4b67      	ldr	r3, [pc, #412]	; (8001134 <runProg_llenado+0x21c>)
 8000f96:	785b      	ldrb	r3, [r3, #1]
 8000f98:	2b3b      	cmp	r3, #59	; 0x3b
 8000f9a:	d91b      	bls.n	8000fd4 <runProg_llenado+0xbc>
				hora_llenadoOn.Minutes -= 59;
 8000f9c:	4b65      	ldr	r3, [pc, #404]	; (8001134 <runProg_llenado+0x21c>)
 8000f9e:	785b      	ldrb	r3, [r3, #1]
 8000fa0:	3b3b      	subs	r3, #59	; 0x3b
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b63      	ldr	r3, [pc, #396]	; (8001134 <runProg_llenado+0x21c>)
 8000fa6:	705a      	strb	r2, [r3, #1]
				hora_llenadoOn.Hours++;
 8000fa8:	4b62      	ldr	r3, [pc, #392]	; (8001134 <runProg_llenado+0x21c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b60      	ldr	r3, [pc, #384]	; (8001134 <runProg_llenado+0x21c>)
 8000fb2:	701a      	strb	r2, [r3, #0]
				if (hora_llenadoOn.Hours > 23) {
 8000fb4:	4b5f      	ldr	r3, [pc, #380]	; (8001134 <runProg_llenado+0x21c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b17      	cmp	r3, #23
 8000fba:	d90b      	bls.n	8000fd4 <runProg_llenado+0xbc>
					hora_llenadoOn.Hours -= 23;
 8000fbc:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <runProg_llenado+0x21c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	3b17      	subs	r3, #23
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b5b      	ldr	r3, [pc, #364]	; (8001134 <runProg_llenado+0x21c>)
 8000fc6:	701a      	strb	r2, [r3, #0]
					fecha_llenadoOn.Date++;
 8000fc8:	4b59      	ldr	r3, [pc, #356]	; (8001130 <runProg_llenado+0x218>)
 8000fca:	789b      	ldrb	r3, [r3, #2]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b57      	ldr	r3, [pc, #348]	; (8001130 <runProg_llenado+0x218>)
 8000fd2:	709a      	strb	r2, [r3, #2]
			status_progLlenado = PROG_BUSY;
 8000fd4:	4b59      	ldr	r3, [pc, #356]	; (800113c <runProg_llenado+0x224>)
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	701a      	strb	r2, [r3, #0]
		break;
 8000fda:	e149      	b.n	8001270 <runProg_llenado+0x358>
			if (status_progLlenado == PROG_IDLE) {
 8000fdc:	4b57      	ldr	r3, [pc, #348]	; (800113c <runProg_llenado+0x224>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f000 8144 	beq.w	800126e <runProg_llenado+0x356>
			auxFecha = get_fecha();
 8000fe6:	f000 fa69 	bl	80014bc <get_fecha>
 8000fea:	4602      	mov	r2, r0
 8000fec:	4b54      	ldr	r3, [pc, #336]	; (8001140 <runProg_llenado+0x228>)
 8000fee:	4611      	mov	r1, r2
 8000ff0:	7019      	strb	r1, [r3, #0]
 8000ff2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8000ff6:	7059      	strb	r1, [r3, #1]
 8000ff8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8000ffc:	7099      	strb	r1, [r3, #2]
 8000ffe:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8001002:	70da      	strb	r2, [r3, #3]
			auxHora = get_hora();
 8001004:	f000 fa52 	bl	80014ac <get_hora>
 8001008:	4602      	mov	r2, r0
 800100a:	4b4e      	ldr	r3, [pc, #312]	; (8001144 <runProg_llenado+0x22c>)
 800100c:	4611      	mov	r1, r2
 800100e:	7019      	strb	r1, [r3, #0]
 8001010:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001014:	7059      	strb	r1, [r3, #1]
 8001016:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800101a:	709a      	strb	r2, [r3, #2]
			switch (flag_bombaNapa) {
 800101c:	4b43      	ldr	r3, [pc, #268]	; (800112c <runProg_llenado+0x214>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 8097 	beq.w	8001154 <runProg_llenado+0x23c>
 8001026:	2b01      	cmp	r3, #1
 8001028:	d000      	beq.n	800102c <runProg_llenado+0x114>
				break;
 800102a:	e112      	b.n	8001252 <runProg_llenado+0x33a>
					if (fecha_llenadoOn.Date < auxFecha.Date) {
 800102c:	4b40      	ldr	r3, [pc, #256]	; (8001130 <runProg_llenado+0x218>)
 800102e:	789a      	ldrb	r2, [r3, #2]
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <runProg_llenado+0x228>)
 8001032:	789b      	ldrb	r3, [r3, #2]
 8001034:	429a      	cmp	r2, r3
 8001036:	d20a      	bcs.n	800104e <runProg_llenado+0x136>
						setOutput(OUT_rele_napa, 0); //logica positiva
 8001038:	2100      	movs	r1, #0
 800103a:	2003      	movs	r0, #3
 800103c:	f7ff fae8 	bl	8000610 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 8001040:	2101      	movs	r1, #1
 8001042:	2009      	movs	r0, #9
 8001044:	f000 faae 	bl	80015a4 <set_led>
						flag_bombaNapa = 0;
 8001048:	4b38      	ldr	r3, [pc, #224]	; (800112c <runProg_llenado+0x214>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOn.Hours < auxHora.Hours) {
 800104e:	4b39      	ldr	r3, [pc, #228]	; (8001134 <runProg_llenado+0x21c>)
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <runProg_llenado+0x22c>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d20a      	bcs.n	8001070 <runProg_llenado+0x158>
						setOutput(OUT_rele_napa, 0); //logica positiva
 800105a:	2100      	movs	r1, #0
 800105c:	2003      	movs	r0, #3
 800105e:	f7ff fad7 	bl	8000610 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 8001062:	2101      	movs	r1, #1
 8001064:	2009      	movs	r0, #9
 8001066:	f000 fa9d 	bl	80015a4 <set_led>
						flag_bombaNapa = 0;
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <runProg_llenado+0x214>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOn.Minutes < auxHora.Minutes) {
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <runProg_llenado+0x21c>)
 8001072:	785a      	ldrb	r2, [r3, #1]
 8001074:	4b33      	ldr	r3, [pc, #204]	; (8001144 <runProg_llenado+0x22c>)
 8001076:	785b      	ldrb	r3, [r3, #1]
 8001078:	429a      	cmp	r2, r3
 800107a:	d20a      	bcs.n	8001092 <runProg_llenado+0x17a>
						setOutput(OUT_rele_napa, 0); //logica positiva
 800107c:	2100      	movs	r1, #0
 800107e:	2003      	movs	r0, #3
 8001080:	f7ff fac6 	bl	8000610 <setOutput>
						set_led(OUT_led_napa, PRENDIDO);
 8001084:	2101      	movs	r1, #1
 8001086:	2009      	movs	r0, #9
 8001088:	f000 fa8c 	bl	80015a4 <set_led>
						flag_bombaNapa = 0;
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <runProg_llenado+0x214>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
					if (!flag_bombaNapa) {
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <runProg_llenado+0x214>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 80d9 	bne.w	800124e <runProg_llenado+0x336>
						fecha_llenadoOff = get_fecha();
 800109c:	f000 fa0e 	bl	80014bc <get_fecha>
 80010a0:	4602      	mov	r2, r0
 80010a2:	4b29      	ldr	r3, [pc, #164]	; (8001148 <runProg_llenado+0x230>)
 80010a4:	4611      	mov	r1, r2
 80010a6:	7019      	strb	r1, [r3, #0]
 80010a8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80010ac:	7059      	strb	r1, [r3, #1]
 80010ae:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80010b2:	7099      	strb	r1, [r3, #2]
 80010b4:	f3c2 6207 	ubfx	r2, r2, #24, #8
 80010b8:	70da      	strb	r2, [r3, #3]
						hora_llenadoOff = get_hora();
 80010ba:	f000 f9f7 	bl	80014ac <get_hora>
 80010be:	4602      	mov	r2, r0
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <runProg_llenado+0x234>)
 80010c2:	4611      	mov	r1, r2
 80010c4:	7019      	strb	r1, [r3, #0]
 80010c6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80010ca:	7059      	strb	r1, [r3, #1]
 80010cc:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80010d0:	709a      	strb	r2, [r3, #2]
						hora_llenadoOff.Minutes += tiempoLlenado_OFF;
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <runProg_llenado+0x234>)
 80010d4:	785a      	ldrb	r2, [r3, #1]
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <runProg_llenado+0x238>)
 80010d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4413      	add	r3, r2
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <runProg_llenado+0x234>)
 80010e4:	705a      	strb	r2, [r3, #1]
						if (hora_llenadoOff.Minutes > 59) {
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <runProg_llenado+0x234>)
 80010e8:	785b      	ldrb	r3, [r3, #1]
 80010ea:	2b3b      	cmp	r3, #59	; 0x3b
 80010ec:	f240 80af 	bls.w	800124e <runProg_llenado+0x336>
							hora_llenadoOff.Minutes -= 59;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <runProg_llenado+0x234>)
 80010f2:	785b      	ldrb	r3, [r3, #1]
 80010f4:	3b3b      	subs	r3, #59	; 0x3b
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <runProg_llenado+0x234>)
 80010fa:	705a      	strb	r2, [r3, #1]
							hora_llenadoOff.Hours++;
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <runProg_llenado+0x234>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <runProg_llenado+0x234>)
 8001106:	701a      	strb	r2, [r3, #0]
							if (hora_llenadoOff.Hours > 23) {
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <runProg_llenado+0x234>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b17      	cmp	r3, #23
 800110e:	f240 809e 	bls.w	800124e <runProg_llenado+0x336>
								hora_llenadoOff.Hours -= 23;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <runProg_llenado+0x234>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	3b17      	subs	r3, #23
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <runProg_llenado+0x234>)
 800111c:	701a      	strb	r2, [r3, #0]
								fecha_llenadoOff.Date++;
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <runProg_llenado+0x230>)
 8001120:	789b      	ldrb	r3, [r3, #2]
 8001122:	3301      	adds	r3, #1
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <runProg_llenado+0x230>)
 8001128:	709a      	strb	r2, [r3, #2]
				break;
 800112a:	e090      	b.n	800124e <runProg_llenado+0x336>
 800112c:	20000110 	.word	0x20000110
 8001130:	200005ec 	.word	0x200005ec
 8001134:	200005dc 	.word	0x200005dc
 8001138:	2000010c 	.word	0x2000010c
 800113c:	200005e8 	.word	0x200005e8
 8001140:	200005f4 	.word	0x200005f4
 8001144:	200005fc 	.word	0x200005fc
 8001148:	200005e4 	.word	0x200005e4
 800114c:	200005e0 	.word	0x200005e0
 8001150:	2000010e 	.word	0x2000010e
					if (fecha_llenadoOff.Date < auxFecha.Date) {
 8001154:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <runProg_llenado+0x37c>)
 8001156:	789a      	ldrb	r2, [r3, #2]
 8001158:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <runProg_llenado+0x380>)
 800115a:	789b      	ldrb	r3, [r3, #2]
 800115c:	429a      	cmp	r2, r3
 800115e:	d20a      	bcs.n	8001176 <runProg_llenado+0x25e>
						setOutput(OUT_rele_napa, 1); //logica positiva
 8001160:	2101      	movs	r1, #1
 8001162:	2003      	movs	r0, #3
 8001164:	f7ff fa54 	bl	8000610 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 8001168:	2102      	movs	r1, #2
 800116a:	2009      	movs	r0, #9
 800116c:	f000 fa1a 	bl	80015a4 <set_led>
						flag_bombaNapa = 1;
 8001170:	4b4a      	ldr	r3, [pc, #296]	; (800129c <runProg_llenado+0x384>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOff.Hours < auxHora.Hours) {
 8001176:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <runProg_llenado+0x388>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <runProg_llenado+0x38c>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d20a      	bcs.n	8001198 <runProg_llenado+0x280>
						setOutput(OUT_rele_napa, 1); //logica positiva
 8001182:	2101      	movs	r1, #1
 8001184:	2003      	movs	r0, #3
 8001186:	f7ff fa43 	bl	8000610 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 800118a:	2102      	movs	r1, #2
 800118c:	2009      	movs	r0, #9
 800118e:	f000 fa09 	bl	80015a4 <set_led>
						flag_bombaNapa = 1;
 8001192:	4b42      	ldr	r3, [pc, #264]	; (800129c <runProg_llenado+0x384>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
					if (hora_llenadoOff.Minutes < auxHora.Minutes) {
 8001198:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <runProg_llenado+0x388>)
 800119a:	785a      	ldrb	r2, [r3, #1]
 800119c:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <runProg_llenado+0x38c>)
 800119e:	785b      	ldrb	r3, [r3, #1]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d20a      	bcs.n	80011ba <runProg_llenado+0x2a2>
						setOutput(OUT_rele_napa, 1); //logica positiva
 80011a4:	2101      	movs	r1, #1
 80011a6:	2003      	movs	r0, #3
 80011a8:	f7ff fa32 	bl	8000610 <setOutput>
						set_led(OUT_led_napa, TITILA_LENTO);
 80011ac:	2102      	movs	r1, #2
 80011ae:	2009      	movs	r0, #9
 80011b0:	f000 f9f8 	bl	80015a4 <set_led>
						flag_bombaNapa = 1;
 80011b4:	4b39      	ldr	r3, [pc, #228]	; (800129c <runProg_llenado+0x384>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
					if (flag_bombaNapa != 0) {
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <runProg_llenado+0x384>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d047      	beq.n	8001252 <runProg_llenado+0x33a>
						fecha_llenadoOn = get_fecha();
 80011c2:	f000 f97b 	bl	80014bc <get_fecha>
 80011c6:	4602      	mov	r2, r0
 80011c8:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <runProg_llenado+0x390>)
 80011ca:	4611      	mov	r1, r2
 80011cc:	7019      	strb	r1, [r3, #0]
 80011ce:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80011d2:	7059      	strb	r1, [r3, #1]
 80011d4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80011d8:	7099      	strb	r1, [r3, #2]
 80011da:	f3c2 6207 	ubfx	r2, r2, #24, #8
 80011de:	70da      	strb	r2, [r3, #3]
						hora_llenadoOn = get_hora();
 80011e0:	f000 f964 	bl	80014ac <get_hora>
 80011e4:	4602      	mov	r2, r0
 80011e6:	4b31      	ldr	r3, [pc, #196]	; (80012ac <runProg_llenado+0x394>)
 80011e8:	4611      	mov	r1, r2
 80011ea:	7019      	strb	r1, [r3, #0]
 80011ec:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80011f0:	7059      	strb	r1, [r3, #1]
 80011f2:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80011f6:	709a      	strb	r2, [r3, #2]
						hora_llenadoOn.Minutes += tiempoLlenado_ON;
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <runProg_llenado+0x394>)
 80011fa:	785a      	ldrb	r2, [r3, #1]
 80011fc:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <runProg_llenado+0x398>)
 80011fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4413      	add	r3, r2
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <runProg_llenado+0x394>)
 800120a:	705a      	strb	r2, [r3, #1]
						if (hora_llenadoOn.Minutes > 59) {
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <runProg_llenado+0x394>)
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	2b3b      	cmp	r3, #59	; 0x3b
 8001212:	d91e      	bls.n	8001252 <runProg_llenado+0x33a>
							hora_llenadoOn.Minutes -= 59;
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <runProg_llenado+0x394>)
 8001216:	785b      	ldrb	r3, [r3, #1]
 8001218:	3b3b      	subs	r3, #59	; 0x3b
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <runProg_llenado+0x394>)
 800121e:	705a      	strb	r2, [r3, #1]
							hora_llenadoOn.Hours++;
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <runProg_llenado+0x394>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <runProg_llenado+0x394>)
 800122a:	701a      	strb	r2, [r3, #0]
							if (hora_llenadoOn.Hours > 23) {
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <runProg_llenado+0x394>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b17      	cmp	r3, #23
 8001232:	d90e      	bls.n	8001252 <runProg_llenado+0x33a>
								hora_llenadoOn.Hours -= 23;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <runProg_llenado+0x394>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	3b17      	subs	r3, #23
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <runProg_llenado+0x394>)
 800123e:	701a      	strb	r2, [r3, #0]
								fecha_llenadoOn.Date++;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <runProg_llenado+0x390>)
 8001242:	789b      	ldrb	r3, [r3, #2]
 8001244:	3301      	adds	r3, #1
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <runProg_llenado+0x390>)
 800124a:	709a      	strb	r2, [r3, #2]
				break;
 800124c:	e001      	b.n	8001252 <runProg_llenado+0x33a>
				break;
 800124e:	bf00      	nop
 8001250:	e00e      	b.n	8001270 <runProg_llenado+0x358>
				break;
 8001252:	bf00      	nop
		break;
 8001254:	e00c      	b.n	8001270 <runProg_llenado+0x358>
			setOutput(OUT_rele_napa, 0); //logica positiva
 8001256:	2100      	movs	r1, #0
 8001258:	2003      	movs	r0, #3
 800125a:	f7ff f9d9 	bl	8000610 <setOutput>
			set_led(OUT_led_napa, APAGADO);
 800125e:	2100      	movs	r1, #0
 8001260:	2009      	movs	r0, #9
 8001262:	f000 f99f 	bl	80015a4 <set_led>
			status_progLlenado = PROG_IDLE;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <runProg_llenado+0x39c>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
		break;
 800126c:	e000      	b.n	8001270 <runProg_llenado+0x358>
				break;
 800126e:	bf00      	nop
	} //end switch cmd

	if (!HAL_GPIO_ReadPin(IN_nivelAgua_GPIO_Port, IN_nivelAgua_Pin)) { //LOGICA NEGATIVA
 8001270:	2104      	movs	r1, #4
 8001272:	4811      	ldr	r0, [pc, #68]	; (80012b8 <runProg_llenado+0x3a0>)
 8001274:	f001 fe7e 	bl	8002f74 <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <runProg_llenado+0x372>
		setOutput(OUT_rele_napa, 0); //logica positiva
 800127e:	2100      	movs	r1, #0
 8001280:	2003      	movs	r0, #3
 8001282:	f7ff f9c5 	bl	8000610 <setOutput>
		//falta manejar los led
		return PROG_FINISHED;
 8001286:	2303      	movs	r3, #3
 8001288:	e000      	b.n	800128c <runProg_llenado+0x374>
	}
	return PROG_BUSY;
 800128a:	2302      	movs	r3, #2

} //end runProg_llenado()
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200005e4 	.word	0x200005e4
 8001298:	200005f4 	.word	0x200005f4
 800129c:	20000110 	.word	0x20000110
 80012a0:	200005e0 	.word	0x200005e0
 80012a4:	200005fc 	.word	0x200005fc
 80012a8:	200005ec 	.word	0x200005ec
 80012ac:	200005dc 	.word	0x200005dc
 80012b0:	2000010c 	.word	0x2000010c
 80012b4:	200005e8 	.word	0x200005e8
 80012b8:	40010800 	.word	0x40010800

080012bc <runProg_skimmer>:

T_PROG_OUTPUT runProg_skimmer (T_PROG_CMD cmd){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	__NOP();
 80012c6:	bf00      	nop

	switch (cmd) {
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d843      	bhi.n	8001358 <runProg_skimmer+0x9c>
 80012d0:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <runProg_skimmer+0x1c>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	08001327 	.word	0x08001327
 80012dc:	08001359 	.word	0x08001359
 80012e0:	08001309 	.word	0x08001309
 80012e4:	080012ed 	.word	0x080012ed
 80012e8:	080012fb 	.word	0x080012fb
		case PROG_SET1: //con programa
			status_modoPileta = 1;
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <runProg_skimmer+0xb0>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_BUSY;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <runProg_skimmer+0xb4>)
 80012f4:	2202      	movs	r2, #2
 80012f6:	701a      	strb	r2, [r3, #0]
			break;
 80012f8:	e031      	b.n	800135e <runProg_skimmer+0xa2>
		case PROG_SET2: //sin programa
			status_modoPileta = 2;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <runProg_skimmer+0xb0>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_BUSY;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <runProg_skimmer+0xb4>)
 8001302:	2202      	movs	r2, #2
 8001304:	701a      	strb	r2, [r3, #0]
			break;
 8001306:	e02a      	b.n	800135e <runProg_skimmer+0xa2>
		case PROG_STOP:
			setOutput(OUT_rele_pileta, 0); //LOGICA POSITIVA
 8001308:	2100      	movs	r1, #0
 800130a:	2005      	movs	r0, #5
 800130c:	f7ff f980 	bl	8000610 <setOutput>
			set_led(OUT_led_pileta, APAGADO);
 8001310:	2100      	movs	r1, #0
 8001312:	200b      	movs	r0, #11
 8001314:	f000 f946 	bl	80015a4 <set_led>
			status_modoPileta = 0;
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <runProg_skimmer+0xb0>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
			status_progPileta = PROG_IDLE;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <runProg_skimmer+0xb4>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
			break;
 8001324:	e01b      	b.n	800135e <runProg_skimmer+0xa2>
		case PROG_CHECK:
			if (status_progHidro == PROG_IDLE){
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <runProg_skimmer+0xb8>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d016      	beq.n	800135c <runProg_skimmer+0xa0>
				//return PROG_IDLE;
				break;
			}

			switch (status_modoPileta) {
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <runProg_skimmer+0xb0>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d00d      	beq.n	8001352 <runProg_skimmer+0x96>
 8001336:	2b02      	cmp	r3, #2
 8001338:	d002      	beq.n	8001340 <runProg_skimmer+0x84>
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <runProg_skimmer+0x9a>
				case 2:
					setOutput(OUT_rele_pileta, 1); //logica positiva
					set_led(OUT_led_pileta, TITILA_RAPIDO);
					break;
				default:
					break;
 800133e:	e00b      	b.n	8001358 <runProg_skimmer+0x9c>
					setOutput(OUT_rele_pileta, 1); //logica positiva
 8001340:	2101      	movs	r1, #1
 8001342:	2005      	movs	r0, #5
 8001344:	f7ff f964 	bl	8000610 <setOutput>
					set_led(OUT_led_pileta, TITILA_RAPIDO);
 8001348:	2103      	movs	r1, #3
 800134a:	200b      	movs	r0, #11
 800134c:	f000 f92a 	bl	80015a4 <set_led>
					break;
 8001350:	e002      	b.n	8001358 <runProg_skimmer+0x9c>
					break;
 8001352:	bf00      	nop
 8001354:	e000      	b.n	8001358 <runProg_skimmer+0x9c>
					break;
 8001356:	bf00      	nop
			}

		default:
			break;
 8001358:	bf00      	nop
 800135a:	e000      	b.n	800135e <runProg_skimmer+0xa2>
				break;
 800135c:	bf00      	nop
	} //end switch cmd

	return status_progPileta;
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <runProg_skimmer+0xb4>)
 8001360:	781b      	ldrb	r3, [r3, #0]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000111 	.word	0x20000111
 8001370:	200005df 	.word	0x200005df
 8001374:	200005f0 	.word	0x200005f0

08001378 <runProg_luz>:

T_PROG_OUTPUT runProg_luz (T_PROG_CMD cmd){
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	__NOP();
 8001382:	bf00      	nop
}
 8001384:	bf00      	nop
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	4b34      	ldr	r3, [pc, #208]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a33      	ldr	r2, [pc, #204]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b31      	ldr	r3, [pc, #196]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a2d      	ldr	r2, [pc, #180]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013c2:	f043 0320 	orr.w	r3, r3, #32
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b25      	ldr	r3, [pc, #148]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE1_Pin
 8001404:	2200      	movs	r2, #0
 8001406:	f248 71e0 	movw	r1, #34784	; 0x87e0
 800140a:	481c      	ldr	r0, [pc, #112]	; (800147c <MX_GPIO_Init+0xec>)
 800140c:	f001 fdc9 	bl	8002fa2 <HAL_GPIO_WritePin>
                          |OUT_CE2_Pin|OUT_ST_Pin|OUT_fila3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_GLCD_RST_Pin|OUT_PL_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 8001410:	2200      	movs	r2, #0
 8001412:	f241 0139 	movw	r1, #4153	; 0x1039
 8001416:	481a      	ldr	r0, [pc, #104]	; (8001480 <MX_GPIO_Init+0xf0>)
 8001418:	f001 fdc3 	bl	8002fa2 <HAL_GPIO_WritePin>
                          |OUT_fila0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_nivelAgua_Pin;
 800141c:	2304      	movs	r3, #4
 800141e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001424:	2301      	movs	r3, #1
 8001426:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN_nivelAgua_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	4813      	ldr	r0, [pc, #76]	; (800147c <MX_GPIO_Init+0xec>)
 8001430:	f001 fc46 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OUT_GLCD_SCLK_Pin|OUT_GLCD_CS_Pin|OUT_GLCD_SID_Pin|OUT_CE1_Pin
 8001434:	f248 73e0 	movw	r3, #34784	; 0x87e0
 8001438:	613b      	str	r3, [r7, #16]
                          |OUT_CE2_Pin|OUT_ST_Pin|OUT_fila3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2302      	movs	r3, #2
 8001444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4619      	mov	r1, r3
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <MX_GPIO_Init+0xec>)
 800144e:	f001 fc37 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_GLCD_RST_Pin|OUT_PL_Pin|OUT_fila2_Pin|OUT_fila1_Pin
 8001452:	f241 0339 	movw	r3, #4153	; 0x1039
 8001456:	613b      	str	r3, [r7, #16]
                          |OUT_fila0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_GPIO_Init+0xf0>)
 800146c:	f001 fc28 	bl	8002cc0 <HAL_GPIO_Init>

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	40010800 	.word	0x40010800
 8001480:	40010c00 	.word	0x40010c00

08001484 <update_horaFecha>:
#include "hora_tablero.h"

RTC_TimeTypeDef hora;
RTC_DateTypeDef aux_fecha;

void update_horaFecha (void){
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	 //segun el proyecto "MAQUINA_MD":
	  HAL_RTC_GetTime(&hrtc, &hora, RTC_FORMAT_BIN);
 8001488:	2200      	movs	r2, #0
 800148a:	4905      	ldr	r1, [pc, #20]	; (80014a0 <update_horaFecha+0x1c>)
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <update_horaFecha+0x20>)
 800148e:	f002 fc69 	bl	8003d64 <HAL_RTC_GetTime>
	  //HAL_RTC_GetTime(&hrtc, &aux_tiempo, RTC_FORMAT_BIN);
	  HAL_RTC_GetDate(&hrtc, &aux_fecha, RTC_FORMAT_BIN);
 8001492:	2200      	movs	r2, #0
 8001494:	4904      	ldr	r1, [pc, #16]	; (80014a8 <update_horaFecha+0x24>)
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <update_horaFecha+0x20>)
 8001498:	f002 fdf2 	bl	8004080 <HAL_RTC_GetDate>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000600 	.word	0x20000600
 80014a4:	20000610 	.word	0x20000610
 80014a8:	2000011c 	.word	0x2000011c

080014ac <get_hora>:

void set_fecha (void){
	__NOP();
}

RTC_TimeTypeDef get_hora (void){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	__NOP();
 80014b0:	bf00      	nop
}
 80014b2:	bf00      	nop
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <get_fecha>:

RTC_DateTypeDef get_fecha (void){
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

}
 80014c0:	bf00      	nop
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
	...

080014cc <update_leds>:

uint8_t demora_rapida = 19; //equivale a 200 ms: (valor + 1)*10ms
uint8_t demora_lenta = 49; //equivale a 500 ms: (valor + 1)*10ms


void update_leds (void){ //LOGICA NEGATIVA
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

	for (uint8_t i=0; i < 6; i++){
 80014d2:	2300      	movs	r3, #0
 80014d4:	71fb      	strb	r3, [r7, #7]
 80014d6:	e03c      	b.n	8001552 <update_leds+0x86>

		switch (status_led[i]) {
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4a2f      	ldr	r2, [pc, #188]	; (8001598 <update_leds+0xcc>)
 80014dc:	5cd3      	ldrb	r3, [r2, r3]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d82f      	bhi.n	8001542 <update_leds+0x76>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <update_leds+0x1c>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	08001509 	.word	0x08001509
 80014f0:	08001517 	.word	0x08001517
 80014f4:	0800152d 	.word	0x0800152d
			case APAGADO:
				setOutput(OUT_led_tomas + i, 1); //APAGA LED
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	3306      	adds	r3, #6
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2101      	movs	r1, #1
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f885 	bl	8000610 <setOutput>
			break;
 8001506:	e021      	b.n	800154c <update_leds+0x80>
			case PRENDIDO:
				setOutput(OUT_led_tomas + i, 0); //PRENDE LED
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	3306      	adds	r3, #6
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f87d 	bl	8000610 <setOutput>
			case TITILA_LENTO:
				if (!demora_lenta){
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <update_leds+0xd0>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d113      	bne.n	8001546 <update_leds+0x7a>
					toggleOutput (OUT_led_tomas + i);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	3306      	adds	r3, #6
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f89f 	bl	8000668 <toggleOutput>
					break;
 800152a:	e00f      	b.n	800154c <update_leds+0x80>
				}
			break;
			case TITILA_RAPIDO:
				if (!demora_rapida){
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <update_leds+0xd4>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10a      	bne.n	800154a <update_leds+0x7e>
					toggleOutput (OUT_led_tomas + i);
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	3306      	adds	r3, #6
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f894 	bl	8000668 <toggleOutput>
					break;
 8001540:	e004      	b.n	800154c <update_leds+0x80>
				}
			break;
			default:
			break;
 8001542:	bf00      	nop
 8001544:	e002      	b.n	800154c <update_leds+0x80>
			break;
 8001546:	bf00      	nop
 8001548:	e000      	b.n	800154c <update_leds+0x80>
			break;
 800154a:	bf00      	nop
	for (uint8_t i=0; i < 6; i++){
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	3301      	adds	r3, #1
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b05      	cmp	r3, #5
 8001556:	d9bf      	bls.n	80014d8 <update_leds+0xc>
		} //end switch status_led

	} //end for uint8_t i...

	if (demora_lenta != 0){
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <update_leds+0xd0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <update_leds+0xa2>
		demora_lenta--;
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <update_leds+0xd0>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <update_leds+0xd0>)
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e002      	b.n	8001574 <update_leds+0xa8>
	}else{
		demora_lenta = 5; // por 100 ms.
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <update_leds+0xd0>)
 8001570:	2205      	movs	r2, #5
 8001572:	701a      	strb	r2, [r3, #0]
	}

	if (demora_rapida != 0){
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <update_leds+0xd4>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <update_leds+0xbe>
		demora_rapida--;
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <update_leds+0xd4>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <update_leds+0xd4>)
 8001586:	701a      	strb	r2, [r3, #0]
	}else{
		demora_rapida = 1; // por 100 ms.
	}

} //end update_leds()
 8001588:	e002      	b.n	8001590 <update_leds+0xc4>
		demora_rapida = 1; // por 100 ms.
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <update_leds+0xd4>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
} //end update_leds()
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000114 	.word	0x20000114
 800159c:	20000003 	.word	0x20000003
 80015a0:	20000002 	.word	0x20000002

080015a4 <set_led>:


void set_led (T_POS_OUTPUT l, T_STATUS_LED val){
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]

	if (l < OUT_led_tomas) return;
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d905      	bls.n	80015c6 <set_led+0x22>

	status_led [l - OUT_led_tomas] = val;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	3b06      	subs	r3, #6
 80015be:	4904      	ldr	r1, [pc, #16]	; (80015d0 <set_led+0x2c>)
 80015c0:	79ba      	ldrb	r2, [r7, #6]
 80015c2:	54ca      	strb	r2, [r1, r3]
 80015c4:	e000      	b.n	80015c8 <set_led+0x24>
	if (l < OUT_led_tomas) return;
 80015c6:	bf00      	nop

} //end set_led()
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	20000114 	.word	0x20000114

080015d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015da:	f000 ffd5 	bl	8002588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015de:	f000 f883 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e2:	f7ff fed5 	bl	8001390 <MX_GPIO_Init>
  MX_RTC_Init();
 80015e6:	f000 fc55 	bl	8001e94 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80015ea:	f000 ff23 	bl	8002434 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80015ee:	f000 fe4f 	bl	8002290 <MX_TIM2_Init>
  MX_SPI2_Init();
 80015f2:	f000 fce7 	bl	8001fc4 <MX_SPI2_Init>
  MX_ADC1_Init();
 80015f6:	f7ff f9e1 	bl	80009bc <MX_ADC1_Init>
  MX_TIM3_Init();
 80015fa:	f000 fe95 	bl	8002328 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  spi_74HC165_init(&hspi2, OUT_PL_GPIO_Port, OUT_PL_Pin, OUT_CE1_GPIO_Port, OUT_CE1_Pin, OUT_CE2_GPIO_Port, OUT_CE2_Pin);
 80015fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <main+0xf4>)
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <main+0xf4>)
 8001610:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001614:	492d      	ldr	r1, [pc, #180]	; (80016cc <main+0xf8>)
 8001616:	482e      	ldr	r0, [pc, #184]	; (80016d0 <main+0xfc>)
 8001618:	f7fe fd98 	bl	800014c <spi_74HC165_init>
  spi_74HC595_init(&hspi2, OUT_ST_GPIO_Port, OUT_ST_Pin);
 800161c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001620:	4929      	ldr	r1, [pc, #164]	; (80016c8 <main+0xf4>)
 8001622:	482b      	ldr	r0, [pc, #172]	; (80016d0 <main+0xfc>)
 8001624:	f7fe fe3a 	bl	800029c <spi_74HC595_init>

  HAL_TIM_Base_Start_IT(&htim2); //ticks eery 10 ms.
 8001628:	482a      	ldr	r0, [pc, #168]	; (80016d4 <main+0x100>)
 800162a:	f003 fea9 	bl	8005380 <HAL_TIM_Base_Start_IT>


  start_menu();
 800162e:	f000 f8df 	bl	80017f0 <start_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  update_teclas();
 8001632:	f7fe ff31 	bl	8000498 <update_teclas>

	  uint8_t pruebaNumero = getNumber();
 8001636:	f7fe ff91 	bl	800055c <getNumber>
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]

	  if (flag_tick){ //ticks every 10 ms.
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <main+0x104>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d031      	beq.n	80016aa <main+0xd6>

		  update_horaFecha();
 8001646:	f7ff ff1d 	bl	8001484 <update_horaFecha>

//		  update_teclas();

		  if (flag_lecturas != 0){ //para demorar las lecturas de teclas cada 30 ms.
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <main+0x108>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <main+0x8c>
			  flag_lecturas--;
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <main+0x108>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3b01      	subs	r3, #1
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <main+0x108>)
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e004      	b.n	800166a <main+0x96>
		  }else{
			  lecturaTeclas();
 8001660:	f7fe feda 	bl	8000418 <lecturaTeclas>

			  flag_lecturas = 2;
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <main+0x108>)
 8001666:	2202      	movs	r2, #2
 8001668:	701a      	strb	r2, [r3, #0]
		  }

		  if (flag_salidas != 0){ //para demorar la escritura de las salidas cada 100 ms.
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <main+0x10c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <main+0xac>
			  flag_salidas--;
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <main+0x10c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3b01      	subs	r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <main+0x10c>)
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	e006      	b.n	800168e <main+0xba>
		  }else{
			  update_leds();
 8001680:	f7ff ff24 	bl	80014cc <update_leds>
			  update_outputs();
 8001684:	f7ff f808 	bl	8000698 <update_outputs>

			  flag_salidas = 9;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <main+0x10c>)
 800168a:	2209      	movs	r2, #9
 800168c:	701a      	strb	r2, [r3, #0]
		  }

		  if (refresh_pantalla != 0){ //refresca cada 300 ms
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <main+0x110>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d004      	beq.n	80016a0 <main+0xcc>
			  pantallaUpdate();
 8001696:	f7ff fa43 	bl	8000b20 <pantallaUpdate>
			  refresh_pantalla = 29;
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <main+0x110>)
 800169c:	221d      	movs	r2, #29
 800169e:	701a      	strb	r2, [r3, #0]
		  }

		  check_pulsadores();
 80016a0:	f000 f8c0 	bl	8001824 <check_pulsadores>

		  flag_tick = 0;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <main+0x104>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
	  }//end if flag_tick

	  check_menu();
 80016aa:	f000 f8b1 	bl	8001810 <check_menu>
	  runProg_hidro(PROG_CHECK);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff fb5e 	bl	8000d70 <runProg_hidro>
	  runProg_llenado(PROG_CHECK);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff fc2f 	bl	8000f18 <runProg_llenado>
	  runProg_luz(PROG_CHECK);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff fe5c 	bl	8001378 <runProg_luz>
	  runProg_skimmer(PROG_CHECK);
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff fdfb 	bl	80012bc <runProg_skimmer>
  {
 80016c6:	e7b4      	b.n	8001632 <main+0x5e>
 80016c8:	40010800 	.word	0x40010800
 80016cc:	40010c00 	.word	0x40010c00
 80016d0:	20000624 	.word	0x20000624
 80016d4:	200006bc 	.word	0x200006bc
 80016d8:	20000120 	.word	0x20000120
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000001 	.word	0x20000001
 80016e4:	20000004 	.word	0x20000004

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b094      	sub	sp, #80	; 0x50
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f2:	2228      	movs	r2, #40	; 0x28
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 fae8 	bl	8005ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001718:	2309      	movs	r3, #9
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001726:	2301      	movs	r3, #1
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800172a:	2301      	movs	r3, #1
 800172c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172e:	2302      	movs	r3, #2
 8001730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001738:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800173c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001742:	4618      	mov	r0, r3
 8001744:	f001 fc52 	bl	8002fec <HAL_RCC_OscConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800174e:	f000 f849 	bl	80017e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001762:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2102      	movs	r1, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f001 febc 	bl	80034ec <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800177a:	f000 f833 	bl	80017e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800177e:	2303      	movs	r3, #3
 8001780:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001782:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001786:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800178c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4618      	mov	r0, r3
 8001792:	f002 f847 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800179c:	f000 f822 	bl	80017e4 <Error_Handler>
  }
}
 80017a0:	bf00      	nop
 80017a2:	3750      	adds	r7, #80	; 0x50
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d102      	bne.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tick = 1;
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
	}
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000120 	.word	0x20000120

080017d0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	__NOP();
 80017d8:	bf00      	nop
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <start_menu>:
T_STATUS_LUCESEXT status_menuLucesExt = LIMITE_TIEMPO_LUCESEXT;

/////////////////////////////////////////
//         FUNCIONES PUBLICAS          //
/////////////////////////////////////////
void start_menu (void){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	init_pantalla();
 80017f4:	f7ff f97e 	bl	8000af4 <init_pantalla>
	init_menuPrincipal();
 80017f8:	f000 f8b2 	bl	8001960 <init_menuPrincipal>
	menuActual = &menu[MENU_PRINCIPAL];
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <start_menu+0x18>)
 80017fe:	4a03      	ldr	r2, [pc, #12]	; (800180c <start_menu+0x1c>)
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000604 	.word	0x20000604
 800180c:	20000008 	.word	0x20000008

08001810 <check_menu>:

void check_menu (void){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	menuActual->accion();
 8001814:	4b02      	ldr	r3, [pc, #8]	; (8001820 <check_menu+0x10>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	4798      	blx	r3
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000604 	.word	0x20000604

08001824 <check_pulsadores>:

void check_pulsadores (void){
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0

	if (getStatBoton(IN_jet) == FALL){
 8001828:	2014      	movs	r0, #20
 800182a:	f7fe fe57 	bl	80004dc <getStatBoton>
 800182e:	4603      	mov	r3, r0
 8001830:	2b02      	cmp	r3, #2
 8001832:	d112      	bne.n	800185a <check_pulsadores+0x36>
		if (runProg_hidro(PROG_CHECK) == PROG_BUSY){
 8001834:	2001      	movs	r0, #1
 8001836:	f7ff fa9b 	bl	8000d70 <runProg_hidro>
 800183a:	4603      	mov	r3, r0
 800183c:	2b02      	cmp	r3, #2
 800183e:	d103      	bne.n	8001848 <check_pulsadores+0x24>
			runProg_hidro(PROG_STOP);
 8001840:	2003      	movs	r0, #3
 8001842:	f7ff fa95 	bl	8000d70 <runProg_hidro>
 8001846:	e008      	b.n	800185a <check_pulsadores+0x36>
		}else if(runProg_hidro(PROG_CHECK) == PROG_IDLE){
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff fa91 	bl	8000d70 <runProg_hidro>
 800184e:	4603      	mov	r3, r0
 8001850:	2b01      	cmp	r3, #1
 8001852:	d102      	bne.n	800185a <check_pulsadores+0x36>
			runProg_hidro(PROG_RUN);
 8001854:	2002      	movs	r0, #2
 8001856:	f7ff fa8b 	bl	8000d70 <runProg_hidro>
		}
	} //end if getStatBoton IN_jet

	if (getStatBoton(IN_napa) == FALL){
 800185a:	2013      	movs	r0, #19
 800185c:	f7fe fe3e 	bl	80004dc <getStatBoton>
 8001860:	4603      	mov	r3, r0
 8001862:	2b02      	cmp	r3, #2
 8001864:	d10e      	bne.n	8001884 <check_pulsadores+0x60>

		menuAux = menuActual;
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <check_pulsadores+0x120>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a37      	ldr	r2, [pc, #220]	; (8001948 <check_pulsadores+0x124>)
 800186c:	6013      	str	r3, [r2, #0]
		menuActual = &menu[MENU_SET_LLENADO];
 800186e:	4b35      	ldr	r3, [pc, #212]	; (8001944 <check_pulsadores+0x120>)
 8001870:	4a36      	ldr	r2, [pc, #216]	; (800194c <check_pulsadores+0x128>)
 8001872:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8001874:	4b33      	ldr	r3, [pc, #204]	; (8001944 <check_pulsadores+0x120>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a35      	ldr	r2, [pc, #212]	; (8001950 <check_pulsadores+0x12c>)
 800187a:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <check_pulsadores+0x120>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	4798      	blx	r3
	} //end if getStatBoton(IN_napa)...

	if (getStatBoton(IN_tomas) == FALL){
 8001884:	2010      	movs	r0, #16
 8001886:	f7fe fe29 	bl	80004dc <getStatBoton>
 800188a:	4603      	mov	r3, r0
 800188c:	2b02      	cmp	r3, #2
 800188e:	d11a      	bne.n	80018c6 <check_pulsadores+0xa2>
		if (!flag_tomas){
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <check_pulsadores+0x130>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10b      	bne.n	80018b0 <check_pulsadores+0x8c>
			setOutput(OUT_rele_tomas, 1); //logica positiva
 8001898:	2101      	movs	r1, #1
 800189a:	2000      	movs	r0, #0
 800189c:	f7fe feb8 	bl	8000610 <setOutput>
			set_led(OUT_led_tomas, PRENDIDO);
 80018a0:	2101      	movs	r1, #1
 80018a2:	2006      	movs	r0, #6
 80018a4:	f7ff fe7e 	bl	80015a4 <set_led>
			flag_tomas = 0;
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <check_pulsadores+0x130>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e00a      	b.n	80018c6 <check_pulsadores+0xa2>
		}else{
			setOutput(OUT_rele_tomas, 0); //logica positiva
 80018b0:	2100      	movs	r1, #0
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7fe feac 	bl	8000610 <setOutput>
			set_led(OUT_led_tomas, APAGADO);
 80018b8:	2100      	movs	r1, #0
 80018ba:	2006      	movs	r0, #6
 80018bc:	f7ff fe72 	bl	80015a4 <set_led>
			flag_tomas = 1;
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <check_pulsadores+0x130>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
		}
	} //end if IN_tomas

	if (getStatBoton(IN_pileta) == FALL){
 80018c6:	2015      	movs	r0, #21
 80018c8:	f7fe fe08 	bl	80004dc <getStatBoton>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d118      	bne.n	8001904 <check_pulsadores+0xe0>
		aux_progOutput = runProg_skimmer(PROG_CHECK);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7ff fcf2 	bl	80012bc <runProg_skimmer>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <check_pulsadores+0x134>)
 80018de:	701a      	strb	r2, [r3, #0]

		if (aux_progOutput == PROG_IDLE){
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <check_pulsadores+0x134>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d103      	bne.n	80018f0 <check_pulsadores+0xcc>
			pulsoLargo_skimmer = 150; //en 10 * ms.
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <check_pulsadores+0x138>)
 80018ea:	2296      	movs	r2, #150	; 0x96
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	e009      	b.n	8001904 <check_pulsadores+0xe0>
		}else if(aux_progOutput == PROG_BUSY){
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <check_pulsadores+0x134>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d105      	bne.n	8001904 <check_pulsadores+0xe0>
			pulsoLargo_skimmer = 0;
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <check_pulsadores+0x138>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
			runProg_skimmer(PROG_STOP);
 80018fe:	2003      	movs	r0, #3
 8001900:	f7ff fcdc 	bl	80012bc <runProg_skimmer>
		}


	}
	if (pulsoLargo_skimmer != 0){
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <check_pulsadores+0x138>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d016      	beq.n	800193a <check_pulsadores+0x116>
		if (getStatBoton(IN_pileta) == HIGH_L){ //pulso corto
 800190c:	2015      	movs	r0, #21
 800190e:	f7fe fde5 	bl	80004dc <getStatBoton>
 8001912:	4603      	mov	r3, r0
 8001914:	2b01      	cmp	r3, #1
 8001916:	d103      	bne.n	8001920 <check_pulsadores+0xfc>
			runProg_skimmer(PROG_SET1); //con programa
 8001918:	2004      	movs	r0, #4
 800191a:	f7ff fccf 	bl	80012bc <runProg_skimmer>
 800191e:	e00c      	b.n	800193a <check_pulsadores+0x116>
		}else{
			pulsoLargo_skimmer--;
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <check_pulsadores+0x138>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	3b01      	subs	r3, #1
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <check_pulsadores+0x138>)
 800192a:	701a      	strb	r2, [r3, #0]
			if (!pulsoLargo_skimmer){ //pulso largo
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <check_pulsadores+0x138>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <check_pulsadores+0x116>
				runProg_skimmer(PROG_SET2); //sin programa
 8001934:	2005      	movs	r0, #5
 8001936:	f7ff fcc1 	bl	80012bc <runProg_skimmer>
			}
		}
	}
	if (getStatBoton(IN_pileta) == LOW_L){
 800193a:	2015      	movs	r0, #21
 800193c:	f7fe fdce 	bl	80004dc <getStatBoton>

	}

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000604 	.word	0x20000604
 8001948:	20000608 	.word	0x20000608
 800194c:	20000018 	.word	0x20000018
 8001950:	20000008 	.word	0x20000008
 8001954:	20000121 	.word	0x20000121
 8001958:	2000060c 	.word	0x2000060c
 800195c:	20000122 	.word	0x20000122

08001960 <init_menuPrincipal>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

void init_menuPrincipal (void){
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	set_pantalla("Estoy en el menu principal");
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <init_menuPrincipal+0x10>)
 8001966:	f7ff f8cd 	bl	8000b04 <set_pantalla>
//	menuActual = &menu[MENU_PRINCIPAL];
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	08006520 	.word	0x08006520

08001974 <init_llenado>:
	set_pantalla("elije tiempo on u off");

} //end init_llenado()


void init_llenado (void){
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <init_llenado+0x28>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d107      	bne.n	8001990 <init_llenado+0x1c>
		case PREGUNTA_SENSOR:
			set_led(OUT_led_napa, PRENDIDO);
 8001980:	2101      	movs	r1, #1
 8001982:	2009      	movs	r0, #9
 8001984:	f7ff fe0e 	bl	80015a4 <set_led>
			set_pantalla("Sensor conectado?");
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <init_llenado+0x2c>)
 800198a:	f7ff f8bb 	bl	8000b04 <set_pantalla>
		break;
 800198e:	e003      	b.n	8001998 <init_llenado+0x24>
		default:
			set_pantalla("Llenando. terminar?");
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <init_llenado+0x30>)
 8001992:	f7ff f8b7 	bl	8000b04 <set_pantalla>
			//status_menuLlenado = 90;
		break;
 8001996:	bf00      	nop
	} //end switch status_menuTablero

} //end init_llenado()
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000123 	.word	0x20000123
 80019a0:	08006554 	.word	0x08006554
 80019a4:	08006568 	.word	0x08006568

080019a8 <init_skimmer>:


void init_skimmer (void){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	set_pantalla("COMPRUEBE EL ESTADO DE LA BOMBA");
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <init_skimmer+0x10>)
 80019ae:	f7ff f8a9 	bl	8000b04 <set_pantalla>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	0800657c 	.word	0x0800657c

080019bc <init_hidro>:


void init_hidro (void){
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	set_pantalla("LIMITE DE TIEMPO");
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <init_hidro+0x10>)
 80019c2:	f7ff f89f 	bl	8000b04 <set_pantalla>
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	0800659c 	.word	0x0800659c

080019d0 <init_lucesExt>:


void init_lucesExt (void){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	set_pantalla("LIMITE DE TIEMPO");
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <init_lucesExt+0x10>)
 80019d6:	f7ff f895 	bl	8000b04 <set_pantalla>
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	0800659c 	.word	0x0800659c

080019e4 <init_lucesLed>:


void init_lucesLed (void){
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <init_config>:


void init_config (void){
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <acc_menuPrincipal>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

void acc_menuPrincipal (void){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0

	if (getStatBoton(IN_napa)==FALL){
 8001a00:	2013      	movs	r0, #19
 8001a02:	f7fe fd6b 	bl	80004dc <getStatBoton>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d10b      	bne.n	8001a24 <acc_menuPrincipal+0x28>
		menuActual = &menu[MENU_SET_LLENADO];
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <acc_menuPrincipal+0x50>)
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <acc_menuPrincipal+0x54>)
 8001a10:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <acc_menuPrincipal+0x50>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <acc_menuPrincipal+0x58>)
 8001a18:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <acc_menuPrincipal+0x50>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4798      	blx	r3
		return;
 8001a22:	e011      	b.n	8001a48 <acc_menuPrincipal+0x4c>
	}

	//RE VER: debería ejecutar el programa y no configurarlo...
	if (getStatBoton(IN_jet)==FALL){
 8001a24:	2014      	movs	r0, #20
 8001a26:	f7fe fd59 	bl	80004dc <getStatBoton>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d10b      	bne.n	8001a48 <acc_menuPrincipal+0x4c>
		menuActual = &menu[MENU_HIDRO];
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <acc_menuPrincipal+0x50>)
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <acc_menuPrincipal+0x5c>)
 8001a34:	601a      	str	r2, [r3, #0]
		menuActual->menuAnterior = &menu[MENU_PRINCIPAL];
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <acc_menuPrincipal+0x50>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <acc_menuPrincipal+0x58>)
 8001a3c:	605a      	str	r2, [r3, #4]
		menuActual->inicia_menu();
 8001a3e:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <acc_menuPrincipal+0x50>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4798      	blx	r3
		return;
 8001a46:	bf00      	nop
	}
}
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000604 	.word	0x20000604
 8001a50:	20000018 	.word	0x20000018
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000038 	.word	0x20000038

08001a5c <acc_llenado>:
	} //end switch status_menuLlenado

} //end acc_setLlenado ()


void acc_llenado (void){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

	switch (status_menuLlenado) {
 8001a60:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <acc_llenado+0x138>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	f200 808c 	bhi.w	8001b82 <acc_llenado+0x126>
 8001a6a:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <acc_llenado+0x14>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001a85 	.word	0x08001a85
 8001a74:	08001ab9 	.word	0x08001ab9
 8001a78:	08001af7 	.word	0x08001af7
 8001a7c:	08001b31 	.word	0x08001b31
 8001a80:	08001b4b 	.word	0x08001b4b
		case PREGUNTA_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001a84:	200e      	movs	r0, #14
 8001a86:	f7fe fd29 	bl	80004dc <getStatBoton>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d106      	bne.n	8001a9e <acc_llenado+0x42>
				set_pantalla("COMPRUEBE EL SENSOR Y PULSE EL BOTON...");
 8001a90:	4841      	ldr	r0, [pc, #260]	; (8001b98 <acc_llenado+0x13c>)
 8001a92:	f7ff f837 	bl	8000b04 <set_pantalla>
				status_menuLlenado = COMPRUEBE_SENSOR;
 8001a96:	4b3f      	ldr	r3, [pc, #252]	; (8001b94 <acc_llenado+0x138>)
 8001a98:	2202      	movs	r2, #2
 8001a9a:	701a      	strb	r2, [r3, #0]
				break;
 8001a9c:	e078      	b.n	8001b90 <acc_llenado+0x134>
			}

			if (getStatBoton(IN_AST) == FALL) { //niego
 8001a9e:	200c      	movs	r0, #12
 8001aa0:	f7fe fd1c 	bl	80004dc <getStatBoton>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d16d      	bne.n	8001b86 <acc_llenado+0x12a>
				set_pantalla("CONECTE EL SENSOR");
 8001aaa:	483c      	ldr	r0, [pc, #240]	; (8001b9c <acc_llenado+0x140>)
 8001aac:	f7ff f82a 	bl	8000b04 <set_pantalla>
				status_menuLlenado = CONECTE_SENSOR;
 8001ab0:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <acc_llenado+0x138>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
				break;
 8001ab6:	e06b      	b.n	8001b90 <acc_llenado+0x134>
			}

		break;
		case CONECTE_SENSOR:

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001ab8:	200c      	movs	r0, #12
 8001aba:	f7fe fd0f 	bl	80004dc <getStatBoton>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d10b      	bne.n	8001adc <acc_llenado+0x80>
				//vuelve al menu principal
				set_led(OUT_led_napa, APAGADO);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2009      	movs	r0, #9
 8001ac8:	f7ff fd6c 	bl	80015a4 <set_led>
				menuActual = &menu[MENU_PRINCIPAL];
 8001acc:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <acc_llenado+0x144>)
 8001ace:	4a35      	ldr	r2, [pc, #212]	; (8001ba4 <acc_llenado+0x148>)
 8001ad0:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <acc_llenado+0x144>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4798      	blx	r3
				break;
 8001ada:	e059      	b.n	8001b90 <acc_llenado+0x134>
			}

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001adc:	200e      	movs	r0, #14
 8001ade:	f7fe fcfd 	bl	80004dc <getStatBoton>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d150      	bne.n	8001b8a <acc_llenado+0x12e>
				set_pantalla("¿Sensor conectado?");
 8001ae8:	482f      	ldr	r0, [pc, #188]	; (8001ba8 <acc_llenado+0x14c>)
 8001aea:	f7ff f80b 	bl	8000b04 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <acc_llenado+0x138>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
				break;
 8001af4:	e04c      	b.n	8001b90 <acc_llenado+0x134>
			}
		break;
		case COMPRUEBE_SENSOR:

			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001af6:	200e      	movs	r0, #14
 8001af8:	f7fe fcf0 	bl	80004dc <getStatBoton>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d109      	bne.n	8001b16 <acc_llenado+0xba>
				set_pantalla("llenando...");
 8001b02:	482a      	ldr	r0, [pc, #168]	; (8001bac <acc_llenado+0x150>)
 8001b04:	f7fe fffe 	bl	8000b04 <set_pantalla>
				runProg_llenado(PROG_RUN);
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f7ff fa05 	bl	8000f18 <runProg_llenado>
				status_menuLlenado = LLENANDO;
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <acc_llenado+0x138>)
 8001b10:	2203      	movs	r2, #3
 8001b12:	701a      	strb	r2, [r3, #0]
				break;
 8001b14:	e03c      	b.n	8001b90 <acc_llenado+0x134>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001b16:	200c      	movs	r0, #12
 8001b18:	f7fe fce0 	bl	80004dc <getStatBoton>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d135      	bne.n	8001b8e <acc_llenado+0x132>
				set_pantalla("¿Sensor conectado?");
 8001b22:	4821      	ldr	r0, [pc, #132]	; (8001ba8 <acc_llenado+0x14c>)
 8001b24:	f7fe ffee 	bl	8000b04 <set_pantalla>
				status_menuLlenado = PREGUNTA_SENSOR;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <acc_llenado+0x138>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
				break;
 8001b2e:	e02f      	b.n	8001b90 <acc_llenado+0x134>
			}

		break;
		case LLENANDO:

			if (runProg_llenado(PROG_CHECK) == PROG_FINISHED ) { //LOGICA NEGATIVA
 8001b30:	2001      	movs	r0, #1
 8001b32:	f7ff f9f1 	bl	8000f18 <runProg_llenado>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d106      	bne.n	8001b4a <acc_llenado+0xee>
				set_pantalla("pileta llena.");
 8001b3c:	481c      	ldr	r0, [pc, #112]	; (8001bb0 <acc_llenado+0x154>)
 8001b3e:	f7fe ffe1 	bl	8000b04 <set_pantalla>
				status_menuLlenado = PILETA_LLENA;
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <acc_llenado+0x138>)
 8001b44:	2204      	movs	r2, #4
 8001b46:	701a      	strb	r2, [r3, #0]
				break;
 8001b48:	e022      	b.n	8001b90 <acc_llenado+0x134>
			}
		case PILETA_LLENA:
			if (getStatBoton(IN_HASH) == FALL) { //CONFIRMO
 8001b4a:	200e      	movs	r0, #14
 8001b4c:	f7fe fcc6 	bl	80004dc <getStatBoton>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d107      	bne.n	8001b66 <acc_llenado+0x10a>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <acc_llenado+0x144>)
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <acc_llenado+0x148>)
 8001b5a:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <acc_llenado+0x144>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4798      	blx	r3
				break;
 8001b64:	e014      	b.n	8001b90 <acc_llenado+0x134>
			}

			if (getStatBoton(IN_AST) == FALL) { //volver
 8001b66:	200c      	movs	r0, #12
 8001b68:	f7fe fcb8 	bl	80004dc <getStatBoton>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d107      	bne.n	8001b82 <acc_llenado+0x126>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <acc_llenado+0x144>)
 8001b74:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <acc_llenado+0x148>)
 8001b76:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <acc_llenado+0x144>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	4798      	blx	r3
				break;
 8001b80:	e006      	b.n	8001b90 <acc_llenado+0x134>
			}

		default:
		break;
 8001b82:	bf00      	nop
 8001b84:	e004      	b.n	8001b90 <acc_llenado+0x134>
		break;
 8001b86:	bf00      	nop
 8001b88:	e002      	b.n	8001b90 <acc_llenado+0x134>
		break;
 8001b8a:	bf00      	nop
 8001b8c:	e000      	b.n	8001b90 <acc_llenado+0x134>
		break;
 8001b8e:	bf00      	nop
	} //end switch status_menuLlenado

} //end acc_llenado ()
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000123 	.word	0x20000123
 8001b98:	080065f8 	.word	0x080065f8
 8001b9c:	08006620 	.word	0x08006620
 8001ba0:	20000604 	.word	0x20000604
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	08006634 	.word	0x08006634
 8001bac:	08006648 	.word	0x08006648
 8001bb0:	08006654 	.word	0x08006654

08001bb4 <acc_skimmer>:


void acc_skimmer (void){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	switch (status_menuSkimmer) {
 8001bb8:	4b69      	ldr	r3, [pc, #420]	; (8001d60 <acc_skimmer+0x1ac>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	f200 80cd 	bhi.w	8001d5c <acc_skimmer+0x1a8>
 8001bc2:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <acc_skimmer+0x14>)
 8001bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc8:	08001bed 	.word	0x08001bed
 8001bcc:	08001c23 	.word	0x08001c23
 8001bd0:	08001c5d 	.word	0x08001c5d
 8001bd4:	08001d47 	.word	0x08001d47
 8001bd8:	08001d47 	.word	0x08001d47
 8001bdc:	08001cab 	.word	0x08001cab
 8001be0:	08001cf9 	.word	0x08001cf9
 8001be4:	08001d47 	.word	0x08001d47
 8001be8:	08001d47 	.word	0x08001d47
		case COMPRUEBE_BOMBA:
			if (getStatBoton(IN_AST) == FALL) {
 8001bec:	200c      	movs	r0, #12
 8001bee:	f7fe fc75 	bl	80004dc <getStatBoton>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d106      	bne.n	8001c06 <acc_skimmer+0x52>
				//vuelve al menu principal
				menuActual = &menu[MENU_PRINCIPAL];
 8001bf8:	4b5a      	ldr	r3, [pc, #360]	; (8001d64 <acc_skimmer+0x1b0>)
 8001bfa:	4a5b      	ldr	r2, [pc, #364]	; (8001d68 <acc_skimmer+0x1b4>)
 8001bfc:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001bfe:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <acc_skimmer+0x1b0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4798      	blx	r3
			}

			if (getStatBoton(IN_HASH) == FALL) {
 8001c06:	200e      	movs	r0, #14
 8001c08:	f7fe fc68 	bl	80004dc <getStatBoton>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	f040 809b 	bne.w	8001d4a <acc_skimmer+0x196>
				set_pantalla("elija freecuecia u horario");
 8001c14:	4855      	ldr	r0, [pc, #340]	; (8001d6c <acc_skimmer+0x1b8>)
 8001c16:	f7fe ff75 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 8001c1a:	4b51      	ldr	r3, [pc, #324]	; (8001d60 <acc_skimmer+0x1ac>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
				break;
 8001c20:	e09c      	b.n	8001d5c <acc_skimmer+0x1a8>
			}
		break;
		case OPCIONES_SKIMMER:
			if (getStatBoton(IN_AST) == FALL) {
 8001c22:	200c      	movs	r0, #12
 8001c24:	f7fe fc5a 	bl	80004dc <getStatBoton>
				//vuelve al menu principal
			}

			if (getStatBoton(IN_1) == FALL) {
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7fe fc57 	bl	80004dc <getStatBoton>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d106      	bne.n	8001c42 <acc_skimmer+0x8e>
				set_pantalla("elijo timepo ON o timepo OFF");
 8001c34:	484e      	ldr	r0, [pc, #312]	; (8001d70 <acc_skimmer+0x1bc>)
 8001c36:	f7fe ff65 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = ELIJE_FRECUENCIA_SKIMMER;
 8001c3a:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <acc_skimmer+0x1ac>)
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	701a      	strb	r2, [r3, #0]
				break;
 8001c40:	e08c      	b.n	8001d5c <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 8001c42:	2001      	movs	r0, #1
 8001c44:	f7fe fc4a 	bl	80004dc <getStatBoton>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d17f      	bne.n	8001d4e <acc_skimmer+0x19a>
				set_pantalla("elijo programa 1 o programa 2");
 8001c4e:	4849      	ldr	r0, [pc, #292]	; (8001d74 <acc_skimmer+0x1c0>)
 8001c50:	f7fe ff58 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 8001c54:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <acc_skimmer+0x1ac>)
 8001c56:	2205      	movs	r2, #5
 8001c58:	701a      	strb	r2, [r3, #0]
				break;
 8001c5a:	e07f      	b.n	8001d5c <acc_skimmer+0x1a8>
			}
		break;
		case ELIJE_FRECUENCIA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7fe fc3d 	bl	80004dc <getStatBoton>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d106      	bne.n	8001c76 <acc_skimmer+0xc2>
				set_pantalla("defina el tiempo de duracion ON:");
 8001c68:	4843      	ldr	r0, [pc, #268]	; (8001d78 <acc_skimmer+0x1c4>)
 8001c6a:	f7fe ff4b 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = PERIODO_ON_SKIMMER;
 8001c6e:	4b3c      	ldr	r3, [pc, #240]	; (8001d60 <acc_skimmer+0x1ac>)
 8001c70:	2203      	movs	r2, #3
 8001c72:	701a      	strb	r2, [r3, #0]
				break;
 8001c74:	e072      	b.n	8001d5c <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7fe fc30 	bl	80004dc <getStatBoton>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d106      	bne.n	8001c90 <acc_skimmer+0xdc>
				set_pantalla("defina el tiempo de duracion OFF:");
 8001c82:	483e      	ldr	r0, [pc, #248]	; (8001d7c <acc_skimmer+0x1c8>)
 8001c84:	f7fe ff3e 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = PERIODO_OFF_SKIMMER;
 8001c88:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <acc_skimmer+0x1ac>)
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	701a      	strb	r2, [r3, #0]
				break;
 8001c8e:	e065      	b.n	8001d5c <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 8001c90:	200c      	movs	r0, #12
 8001c92:	f7fe fc23 	bl	80004dc <getStatBoton>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d15a      	bne.n	8001d52 <acc_skimmer+0x19e>
				set_pantalla("elija freecuecia u horario");
 8001c9c:	4833      	ldr	r0, [pc, #204]	; (8001d6c <acc_skimmer+0x1b8>)
 8001c9e:	f7fe ff31 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <acc_skimmer+0x1ac>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
				break;
 8001ca8:	e058      	b.n	8001d5c <acc_skimmer+0x1a8>
		break;
		case PERIODO_OFF_SKIMMER:
			//funcion de seteo de periodo off
		break;
		case ELIJE_PROGRAMA_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7fe fc16 	bl	80004dc <getStatBoton>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d106      	bne.n	8001cc4 <acc_skimmer+0x110>
				//levanta el flag de modificar el programa 1
				set_pantalla("elije horario ON u horario OFF");
 8001cb6:	4832      	ldr	r0, [pc, #200]	; (8001d80 <acc_skimmer+0x1cc>)
 8001cb8:	f7fe ff24 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 8001cbc:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <acc_skimmer+0x1ac>)
 8001cbe:	2206      	movs	r2, #6
 8001cc0:	701a      	strb	r2, [r3, #0]
				break;
 8001cc2:	e04b      	b.n	8001d5c <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7fe fc09 	bl	80004dc <getStatBoton>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d106      	bne.n	8001cde <acc_skimmer+0x12a>
				//levanta el flag de modificar el programa 2
				set_pantalla("elije horario ON u horario OFF");
 8001cd0:	482b      	ldr	r0, [pc, #172]	; (8001d80 <acc_skimmer+0x1cc>)
 8001cd2:	f7fe ff17 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = ELIJE_ON_OFF_HORARIO_SKIMMER;
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <acc_skimmer+0x1ac>)
 8001cd8:	2206      	movs	r2, #6
 8001cda:	701a      	strb	r2, [r3, #0]
				break;
 8001cdc:	e03e      	b.n	8001d5c <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 8001cde:	200c      	movs	r0, #12
 8001ce0:	f7fe fbfc 	bl	80004dc <getStatBoton>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d135      	bne.n	8001d56 <acc_skimmer+0x1a2>
				set_pantalla("elija freecuecia u horario");
 8001cea:	4820      	ldr	r0, [pc, #128]	; (8001d6c <acc_skimmer+0x1b8>)
 8001cec:	f7fe ff0a 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = OPCIONES_SKIMMER;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <acc_skimmer+0x1ac>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
				break;
 8001cf6:	e031      	b.n	8001d5c <acc_skimmer+0x1a8>
			}
		break;
		case ELIJE_ON_OFF_HORARIO_SKIMMER:
			if (getStatBoton(IN_1) == FALL) {
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7fe fbef 	bl	80004dc <getStatBoton>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d106      	bne.n	8001d12 <acc_skimmer+0x15e>
				//levanta el flag de modificar el horario ON
				set_pantalla("defina el horario ON");
 8001d04:	481f      	ldr	r0, [pc, #124]	; (8001d84 <acc_skimmer+0x1d0>)
 8001d06:	f7fe fefd 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = HORARIO_ON_SKIMMER;
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <acc_skimmer+0x1ac>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	701a      	strb	r2, [r3, #0]
				break;
 8001d10:	e024      	b.n	8001d5c <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_2) == FALL) {
 8001d12:	2001      	movs	r0, #1
 8001d14:	f7fe fbe2 	bl	80004dc <getStatBoton>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d106      	bne.n	8001d2c <acc_skimmer+0x178>
				//levanta el flag de modificar el horario OFF
				set_pantalla("defina el horario OFF");
 8001d1e:	481a      	ldr	r0, [pc, #104]	; (8001d88 <acc_skimmer+0x1d4>)
 8001d20:	f7fe fef0 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = HORARIO_OFF_SKIMMER;
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <acc_skimmer+0x1ac>)
 8001d26:	2208      	movs	r2, #8
 8001d28:	701a      	strb	r2, [r3, #0]
				break;
 8001d2a:	e017      	b.n	8001d5c <acc_skimmer+0x1a8>
			}

			if (getStatBoton(IN_AST) == FALL) {
 8001d2c:	200c      	movs	r0, #12
 8001d2e:	f7fe fbd5 	bl	80004dc <getStatBoton>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d110      	bne.n	8001d5a <acc_skimmer+0x1a6>
				set_pantalla("elijo programa 1 o programa 2");
 8001d38:	480e      	ldr	r0, [pc, #56]	; (8001d74 <acc_skimmer+0x1c0>)
 8001d3a:	f7fe fee3 	bl	8000b04 <set_pantalla>
				status_menuSkimmer = ELIJE_PROGRAMA_SKIMMER;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <acc_skimmer+0x1ac>)
 8001d40:	2205      	movs	r2, #5
 8001d42:	701a      	strb	r2, [r3, #0]
				break;
 8001d44:	e00a      	b.n	8001d5c <acc_skimmer+0x1a8>
		break;
 8001d46:	bf00      	nop
 8001d48:	e008      	b.n	8001d5c <acc_skimmer+0x1a8>
		break;
 8001d4a:	bf00      	nop
 8001d4c:	e006      	b.n	8001d5c <acc_skimmer+0x1a8>
		break;
 8001d4e:	bf00      	nop
 8001d50:	e004      	b.n	8001d5c <acc_skimmer+0x1a8>
		break;
 8001d52:	bf00      	nop
 8001d54:	e002      	b.n	8001d5c <acc_skimmer+0x1a8>
		break;
 8001d56:	bf00      	nop
 8001d58:	e000      	b.n	8001d5c <acc_skimmer+0x1a8>
			}
		break;
 8001d5a:	bf00      	nop
		break;
		case HORARIO_OFF_SKIMMER:
			//funcion de seteo de horario off
		break;
	} //end switch status_menuSkimmer
} //end acc_skimmer()
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000124 	.word	0x20000124
 8001d64:	20000604 	.word	0x20000604
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	08006664 	.word	0x08006664
 8001d70:	08006680 	.word	0x08006680
 8001d74:	080066a0 	.word	0x080066a0
 8001d78:	080065b0 	.word	0x080065b0
 8001d7c:	080065d4 	.word	0x080065d4
 8001d80:	080066c0 	.word	0x080066c0
 8001d84:	080066e0 	.word	0x080066e0
 8001d88:	080066f8 	.word	0x080066f8

08001d8c <acc_hidro>:


void acc_hidro (void){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0

	switch (status_menuHidro) {
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <acc_hidro+0x84>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <acc_hidro+0x12>
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d018      	beq.n	8001dce <acc_hidro+0x42>
			} //end switch status_menuHidro

		break;
	} //end switch status_menuHidro

} //end acc_hidro()
 8001d9c:	e036      	b.n	8001e0c <acc_hidro+0x80>
			if (getStatBoton(IN_AST) == FALL) {
 8001d9e:	200c      	movs	r0, #12
 8001da0:	f7fe fb9c 	bl	80004dc <getStatBoton>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d107      	bne.n	8001dba <acc_hidro+0x2e>
				menuActual = &menu[MENU_PRINCIPAL];
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <acc_hidro+0x88>)
 8001dac:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <acc_hidro+0x8c>)
 8001dae:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <acc_hidro+0x88>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4798      	blx	r3
				break;
 8001db8:	e028      	b.n	8001e0c <acc_hidro+0x80>
			if (getStatBoton(IN_HASH) == FALL) {
 8001dba:	200e      	movs	r0, #14
 8001dbc:	f7fe fb8e 	bl	80004dc <getStatBoton>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d121      	bne.n	8001e0a <acc_hidro+0x7e>
				status_menuHidro = ELIJE_TIEMPO_HIDRO;
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <acc_hidro+0x84>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
				break;
 8001dcc:	e01e      	b.n	8001e0c <acc_hidro+0x80>
			aux_progOutput = setProg_hidro(PROG_RUN);
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f7fe feb6 	bl	8000b40 <setProg_hidro>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <acc_hidro+0x90>)
 8001dda:	701a      	strb	r2, [r3, #0]
			switch (aux_progOutput) {
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <acc_hidro+0x90>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d002      	beq.n	8001dea <acc_hidro+0x5e>
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d004      	beq.n	8001df2 <acc_hidro+0x66>
				break;
 8001de8:	e00d      	b.n	8001e06 <acc_hidro+0x7a>
					status_menuHidro = LIMITE_TIEMPO_HIDRO;
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <acc_hidro+0x84>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
				break;
 8001df0:	e00a      	b.n	8001e08 <acc_hidro+0x7c>
					status_menuHidro = LIMITE_TIEMPO_HIDRO;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <acc_hidro+0x84>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
					menuActual = &menu[MENU_PRINCIPAL];
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <acc_hidro+0x88>)
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <acc_hidro+0x8c>)
 8001dfc:	601a      	str	r2, [r3, #0]
					menuActual->inicia_menu();
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <acc_hidro+0x88>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4798      	blx	r3
				break;
 8001e06:	bf00      	nop
		break;
 8001e08:	e000      	b.n	8001e0c <acc_hidro+0x80>
		break;
 8001e0a:	bf00      	nop
} //end acc_hidro()
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000125 	.word	0x20000125
 8001e14:	20000604 	.word	0x20000604
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	2000060c 	.word	0x2000060c

08001e20 <acc_lucesExt>:


void acc_lucesExt (void){ //luces Amarillas
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	switch (status_menuLucesExt) {
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <acc_lucesExt+0x50>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <acc_lucesExt+0x12>
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d017      	beq.n	8001e60 <acc_lucesExt+0x40>
			case ELIJE_TIEMPO_LUCESEXT:
				//funcion de seteo de timepo de hidro
				setProg_luz(PROG_RUN);
			break;
		} //end switch status_menuLucesExt
} //end acc_lucesExt()
 8001e30:	e01b      	b.n	8001e6a <acc_lucesExt+0x4a>
				if (getStatBoton(IN_AST) == FALL) {
 8001e32:	200c      	movs	r0, #12
 8001e34:	f7fe fb52 	bl	80004dc <getStatBoton>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d106      	bne.n	8001e4c <acc_lucesExt+0x2c>
					menuActual = &menu[MENU_PRINCIPAL];
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <acc_lucesExt+0x54>)
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <acc_lucesExt+0x58>)
 8001e42:	601a      	str	r2, [r3, #0]
					menuActual->inicia_menu();
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <acc_lucesExt+0x54>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	4798      	blx	r3
				if (getStatBoton(IN_HASH) == FALL) {
 8001e4c:	200e      	movs	r0, #14
 8001e4e:	f7fe fb45 	bl	80004dc <getStatBoton>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d107      	bne.n	8001e68 <acc_lucesExt+0x48>
					status_menuLucesExt = ELIJE_TIEMPO_LUCESEXT;
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <acc_lucesExt+0x50>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
					break;
 8001e5e:	e004      	b.n	8001e6a <acc_lucesExt+0x4a>
				setProg_luz(PROG_RUN);
 8001e60:	2002      	movs	r0, #2
 8001e62:	f7fe ff79 	bl	8000d58 <setProg_luz>
			break;
 8001e66:	e000      	b.n	8001e6a <acc_lucesExt+0x4a>
			break;
 8001e68:	bf00      	nop
} //end acc_lucesExt()
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000126 	.word	0x20000126
 8001e74:	20000604 	.word	0x20000604
 8001e78:	20000008 	.word	0x20000008

08001e7c <acc_lucesLed>:


void acc_lucesLed (void){
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <acc_config>:


void acc_config (void){
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	460a      	mov	r2, r1
 8001ea2:	801a      	strh	r2, [r3, #0]
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001eac:	463b      	mov	r3, r7
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <MX_RTC_Init+0xc0>)
 8001eb6:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <MX_RTC_Init+0xc4>)
 8001eb8:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <MX_RTC_Init+0xc0>)
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec0:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <MX_RTC_Init+0xc0>)
 8001ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001eca:	4822      	ldr	r0, [pc, #136]	; (8001f54 <MX_RTC_Init+0xc0>)
 8001ecc:	f001 fe1c 	bl	8003b08 <HAL_RTC_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001ed6:	f7ff fc85 	bl	80017e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8001eda:	2312      	movs	r3, #18
 8001edc:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x59;
 8001ede:	2359      	movs	r3, #89	; 0x59
 8001ee0:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x30;
 8001ee2:	2330      	movs	r3, #48	; 0x30
 8001ee4:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	2201      	movs	r2, #1
 8001eec:	4619      	mov	r1, r3
 8001eee:	4819      	ldr	r0, [pc, #100]	; (8001f54 <MX_RTC_Init+0xc0>)
 8001ef0:	f001 fea0 	bl	8003c34 <HAL_RTC_SetTime>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001efa:	f7ff fc73 	bl	80017e4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001efe:	2301      	movs	r3, #1
 8001f00:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8001f02:	2305      	movs	r3, #5
 8001f04:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8001f06:	2301      	movs	r3, #1
 8001f08:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	2201      	movs	r2, #1
 8001f14:	4619      	mov	r1, r3
 8001f16:	480f      	ldr	r0, [pc, #60]	; (8001f54 <MX_RTC_Init+0xc0>)
 8001f18:	f001 fffc 	bl	8003f14 <HAL_RTC_SetDate>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001f22:	f7ff fc5f 	bl	80017e4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 8001f26:	2313      	movs	r3, #19
 8001f28:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f36:	463b      	mov	r3, r7
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4805      	ldr	r0, [pc, #20]	; (8001f54 <MX_RTC_Init+0xc0>)
 8001f3e:	f002 f8f3 	bl	8004128 <HAL_RTC_SetAlarm_IT>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001f48:	f7ff fc4c 	bl	80017e4 <Error_Handler>
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000610 	.word	0x20000610
 8001f58:	40002800 	.word	0x40002800

08001f5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <HAL_RTC_MspInit+0x5c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d120      	bne.n	8001fb0 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001f6e:	f001 f831 	bl	8002fd4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RTC_MspInit+0x60>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_RTC_MspInit+0x60>)
 8001f78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f7c:	61d3      	str	r3, [r2, #28]
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_RTC_MspInit+0x60>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_RTC_MspInit+0x64>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	2003      	movs	r0, #3
 8001f96:	f000 fe5c 	bl	8002c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	f000 fe75 	bl	8002c8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2029      	movs	r0, #41	; 0x29
 8001fa6:	f000 fe54 	bl	8002c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001faa:	2029      	movs	r0, #41	; 0x29
 8001fac:	f000 fe6d 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40002800 	.word	0x40002800
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	4242043c 	.word	0x4242043c

08001fc4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <MX_SPI2_Init+0x64>)
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <MX_SPI2_Init+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <MX_SPI2_Init+0x64>)
 8001fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <MX_SPI2_Init+0x64>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <MX_SPI2_Init+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_SPI2_Init+0x64>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <MX_SPI2_Init+0x64>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_SPI2_Init+0x64>)
 8001ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_SPI2_Init+0x64>)
 8001ff8:	2238      	movs	r2, #56	; 0x38
 8001ffa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <MX_SPI2_Init+0x64>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_SPI2_Init+0x64>)
 8002004:	2200      	movs	r2, #0
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <MX_SPI2_Init+0x64>)
 800200a:	2200      	movs	r2, #0
 800200c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_SPI2_Init+0x64>)
 8002010:	220a      	movs	r2, #10
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002014:	4804      	ldr	r0, [pc, #16]	; (8002028 <MX_SPI2_Init+0x64>)
 8002016:	f002 fc4b 	bl	80048b0 <HAL_SPI_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002020:	f7ff fbe0 	bl	80017e4 <Error_Handler>
  }

}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000624 	.word	0x20000624
 800202c:	40003800 	.word	0x40003800

08002030 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_SPI_MspInit+0x8c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d131      	bne.n	80020b4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_SPI_MspInit+0x90>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_SPI_MspInit+0x90>)
 8002056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205a:	61d3      	str	r3, [r2, #28]
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_SPI_MspInit+0x90>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_SPI_MspInit+0x90>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_SPI_MspInit+0x90>)
 800206e:	f043 0308 	orr.w	r3, r3, #8
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_SPI_MspInit+0x90>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002080:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002084:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208e:	f107 0310 	add.w	r3, r7, #16
 8002092:	4619      	mov	r1, r3
 8002094:	480b      	ldr	r0, [pc, #44]	; (80020c4 <HAL_SPI_MspInit+0x94>)
 8002096:	f000 fe13 	bl	8002cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800209a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800209e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	4619      	mov	r1, r3
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <HAL_SPI_MspInit+0x94>)
 80020b0:	f000 fe06 	bl	8002cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020b4:	bf00      	nop
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40003800 	.word	0x40003800
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010c00 	.word	0x40010c00

080020c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_MspInit+0x5c>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	4a14      	ldr	r2, [pc, #80]	; (8002124 <HAL_MspInit+0x5c>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6193      	str	r3, [r2, #24]
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_MspInit+0x5c>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_MspInit+0x5c>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_MspInit+0x5c>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	61d3      	str	r3, [r2, #28]
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_MspInit+0x5c>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_MspInit+0x60>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_MspInit+0x60>)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <HardFault_Handler+0x4>

0800213e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <MemManage_Handler+0x4>

08002144 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <BusFault_Handler+0x4>

0800214a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <UsageFault_Handler+0x4>

08002150 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002178:	f000 fa4c 	bl	8002614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}

08002180 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <RTC_IRQHandler+0x10>)
 8002186:	f002 fb4d 	bl	8004824 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000610 	.word	0x20000610

08002194 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <TIM2_IRQHandler+0x10>)
 800219a:	f003 f914 	bl	80053c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200006bc 	.word	0x200006bc

080021a8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <RTC_Alarm_IRQHandler+0x10>)
 80021ae:	f002 f86f 	bl	8004290 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000610 	.word	0x20000610

080021bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <_sbrk+0x5c>)
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <_sbrk+0x60>)
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <_sbrk+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <_sbrk+0x64>)
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <_sbrk+0x68>)
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d207      	bcs.n	80021fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ec:	f003 fd44 	bl	8005c78 <__errno>
 80021f0:	4602      	mov	r2, r0
 80021f2:	230c      	movs	r3, #12
 80021f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021fa:	e009      	b.n	8002210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <_sbrk+0x64>)
 800220c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20005000 	.word	0x20005000
 800221c:	00000400 	.word	0x00000400
 8002220:	20000128 	.word	0x20000128
 8002224:	20000748 	.word	0x20000748

08002228 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800222c:	4b15      	ldr	r3, [pc, #84]	; (8002284 <SystemInit+0x5c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <SystemInit+0x5c>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <SystemInit+0x5c>)
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4911      	ldr	r1, [pc, #68]	; (8002284 <SystemInit+0x5c>)
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <SystemInit+0x60>)
 8002240:	4013      	ands	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <SystemInit+0x5c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <SystemInit+0x5c>)
 800224a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <SystemInit+0x5c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <SystemInit+0x5c>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <SystemInit+0x5c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <SystemInit+0x5c>)
 8002266:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800226a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <SystemInit+0x5c>)
 800226e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002272:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SystemInit+0x64>)
 8002276:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800227a:	609a      	str	r2, [r3, #8]
#endif 
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	40021000 	.word	0x40021000
 8002288:	f8ff0000 	.word	0xf8ff0000
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a4:	463b      	mov	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <MX_TIM2_Init+0x94>)
 80022ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <MX_TIM2_Init+0x94>)
 80022b6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80022ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <MX_TIM2_Init+0x94>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <MX_TIM2_Init+0x94>)
 80022c4:	2263      	movs	r2, #99	; 0x63
 80022c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <MX_TIM2_Init+0x94>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <MX_TIM2_Init+0x94>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022d4:	4813      	ldr	r0, [pc, #76]	; (8002324 <MX_TIM2_Init+0x94>)
 80022d6:	f003 f805 	bl	80052e4 <HAL_TIM_Base_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022e0:	f7ff fa80 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	4619      	mov	r1, r3
 80022f0:	480c      	ldr	r0, [pc, #48]	; (8002324 <MX_TIM2_Init+0x94>)
 80022f2:	f003 f970 	bl	80055d6 <HAL_TIM_ConfigClockSource>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022fc:	f7ff fa72 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002308:	463b      	mov	r3, r7
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_TIM2_Init+0x94>)
 800230e:	f003 fb35 	bl	800597c <HAL_TIMEx_MasterConfigSynchronization>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002318:	f7ff fa64 	bl	80017e4 <Error_Handler>
  }

}
 800231c:	bf00      	nop
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200006bc 	.word	0x200006bc

08002328 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233c:	463b      	mov	r3, r7
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <MX_TIM3_Init+0x94>)
 8002346:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <MX_TIM3_Init+0x98>)
 8002348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <MX_TIM3_Init+0x94>)
 800234c:	2248      	movs	r2, #72	; 0x48
 800234e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <MX_TIM3_Init+0x94>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <MX_TIM3_Init+0x94>)
 8002358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800235c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <MX_TIM3_Init+0x94>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002364:	4b15      	ldr	r3, [pc, #84]	; (80023bc <MX_TIM3_Init+0x94>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800236a:	4814      	ldr	r0, [pc, #80]	; (80023bc <MX_TIM3_Init+0x94>)
 800236c:	f002 ffba 	bl	80052e4 <HAL_TIM_Base_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002376:	f7ff fa35 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	4619      	mov	r1, r3
 8002386:	480d      	ldr	r0, [pc, #52]	; (80023bc <MX_TIM3_Init+0x94>)
 8002388:	f003 f925 	bl	80055d6 <HAL_TIM_ConfigClockSource>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002392:	f7ff fa27 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800239e:	463b      	mov	r3, r7
 80023a0:	4619      	mov	r1, r3
 80023a2:	4806      	ldr	r0, [pc, #24]	; (80023bc <MX_TIM3_Init+0x94>)
 80023a4:	f003 faea 	bl	800597c <HAL_TIMEx_MasterConfigSynchronization>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80023ae:	f7ff fa19 	bl	80017e4 <Error_Handler>
  }

}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000067c 	.word	0x2000067c
 80023c0:	40000400 	.word	0x40000400

080023c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d4:	d114      	bne.n	8002400 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_TIM_Base_MspInit+0x68>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a14      	ldr	r2, [pc, #80]	; (800242c <HAL_TIM_Base_MspInit+0x68>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_TIM_Base_MspInit+0x68>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	201c      	movs	r0, #28
 80023f4:	f000 fc2d 	bl	8002c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023f8:	201c      	movs	r0, #28
 80023fa:	f000 fc46 	bl	8002c8a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023fe:	e010      	b.n	8002422 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <HAL_TIM_Base_MspInit+0x6c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10b      	bne.n	8002422 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_TIM_Base_MspInit+0x68>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4a07      	ldr	r2, [pc, #28]	; (800242c <HAL_TIM_Base_MspInit+0x68>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	61d3      	str	r3, [r2, #28]
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_TIM_Base_MspInit+0x68>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	40000400 	.word	0x40000400

08002434 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_USART1_UART_Init+0x50>)
 800243c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800246c:	f003 fadc 	bl	8005a28 <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002476:	f7ff f9b5 	bl	80017e4 <Error_Handler>
  }

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200006fc 	.word	0x200006fc
 8002484:	40013800 	.word	0x40013800

08002488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a22      	ldr	r2, [pc, #136]	; (800252c <HAL_UART_MspInit+0xa4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d13d      	bne.n	8002524 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <HAL_UART_MspInit+0xa8>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a20      	ldr	r2, [pc, #128]	; (8002530 <HAL_UART_MspInit+0xa8>)
 80024ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_UART_MspInit+0xa8>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_UART_MspInit+0xa8>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <HAL_UART_MspInit+0xa8>)
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_UART_MspInit+0xa8>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024d8:	2340      	movs	r3, #64	; 0x40
 80024da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e0:	2303      	movs	r3, #3
 80024e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	4812      	ldr	r0, [pc, #72]	; (8002534 <HAL_UART_MspInit+0xac>)
 80024ec:	f000 fbe8 	bl	8002cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4619      	mov	r1, r3
 8002502:	480c      	ldr	r0, [pc, #48]	; (8002534 <HAL_UART_MspInit+0xac>)
 8002504:	f000 fbdc 	bl	8002cc0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_UART_MspInit+0xb0>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
 800251e:	4a06      	ldr	r2, [pc, #24]	; (8002538 <HAL_UART_MspInit+0xb0>)
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002524:	bf00      	nop
 8002526:	3728      	adds	r7, #40	; 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40013800 	.word	0x40013800
 8002530:	40021000 	.word	0x40021000
 8002534:	40010c00 	.word	0x40010c00
 8002538:	40010000 	.word	0x40010000

0800253c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800253c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800253e:	e003      	b.n	8002548 <LoopCopyDataInit>

08002540 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002542:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002544:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002546:	3104      	adds	r1, #4

08002548 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002548:	480a      	ldr	r0, [pc, #40]	; (8002574 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800254c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800254e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002550:	d3f6      	bcc.n	8002540 <CopyDataInit>
  ldr r2, =_sbss
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002554:	e002      	b.n	800255c <LoopFillZerobss>

08002556 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002558:	f842 3b04 	str.w	r3, [r2], #4

0800255c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800255e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002560:	d3f9      	bcc.n	8002556 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002562:	f7ff fe61 	bl	8002228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002566:	f003 fb8d 	bl	8005c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800256a:	f7ff f833 	bl	80015d4 <main>
  bx lr
 800256e:	4770      	bx	lr
  ldr r3, =_sidata
 8002570:	0800678c 	.word	0x0800678c
  ldr r0, =_sdata
 8002574:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002578:	200000e8 	.word	0x200000e8
  ldr r2, =_sbss
 800257c:	200000e8 	.word	0x200000e8
  ldr r3, = _ebss
 8002580:	20000744 	.word	0x20000744

08002584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <ADC1_2_IRQHandler>
	...

08002588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_Init+0x28>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <HAL_Init+0x28>)
 8002592:	f043 0310 	orr.w	r3, r3, #16
 8002596:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002598:	2003      	movs	r0, #3
 800259a:	f000 fb4f 	bl	8002c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259e:	2000      	movs	r0, #0
 80025a0:	f000 f808 	bl	80025b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a4:	f7ff fd90 	bl	80020c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40022000 	.word	0x40022000

080025b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_InitTick+0x54>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_InitTick+0x58>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fb67 	bl	8002ca6 <HAL_SYSTICK_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00e      	b.n	8002600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	d80a      	bhi.n	80025fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e8:	2200      	movs	r2, #0
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025f0:	f000 fb2f 	bl	8002c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f4:	4a06      	ldr	r2, [pc, #24]	; (8002610 <HAL_InitTick+0x5c>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000078 	.word	0x20000078
 800260c:	20000080 	.word	0x20000080
 8002610:	2000007c 	.word	0x2000007c

08002614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_IncTick+0x1c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_IncTick+0x20>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4413      	add	r3, r2
 8002624:	4a03      	ldr	r2, [pc, #12]	; (8002634 <HAL_IncTick+0x20>)
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	20000080 	.word	0x20000080
 8002634:	2000073c 	.word	0x2000073c

08002638 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return uwTick;
 800263c:	4b02      	ldr	r3, [pc, #8]	; (8002648 <HAL_GetTick+0x10>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	2000073c 	.word	0x2000073c

0800264c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002654:	f7ff fff0 	bl	8002638 <HAL_GetTick>
 8002658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002664:	d005      	beq.n	8002672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_Delay+0x40>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4413      	add	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002672:	bf00      	nop
 8002674:	f7ff ffe0 	bl	8002638 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	429a      	cmp	r2, r3
 8002682:	d8f7      	bhi.n	8002674 <HAL_Delay+0x28>
  {
  }
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000080 	.word	0x20000080

08002690 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0be      	b.n	8002830 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe f9b2 	bl	8000a38 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f9ab 	bl	8002a30 <ADC_ConversionStop_Disable>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 8099 	bne.w	800281e <HAL_ADC_Init+0x18e>
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 8095 	bne.w	800281e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026fc:	f023 0302 	bic.w	r3, r3, #2
 8002700:	f043 0202 	orr.w	r2, r3, #2
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002710:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	7b1b      	ldrb	r3, [r3, #12]
 8002716:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002718:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	4313      	orrs	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002728:	d003      	beq.n	8002732 <HAL_ADC_Init+0xa2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_ADC_Init+0xa8>
 8002732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002736:	e000      	b.n	800273a <HAL_ADC_Init+0xaa>
 8002738:	2300      	movs	r3, #0
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7d1b      	ldrb	r3, [r3, #20]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d119      	bne.n	800277c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7b1b      	ldrb	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	3b01      	subs	r3, #1
 8002756:	035a      	lsls	r2, r3, #13
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	e00b      	b.n	800277c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f043 0220 	orr.w	r2, r3, #32
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_ADC_Init+0x1a8>)
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ac:	d003      	beq.n	80027b6 <HAL_ADC_Init+0x126>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d104      	bne.n	80027c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	051b      	lsls	r3, r3, #20
 80027be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_ADC_Init+0x1ac>)
 80027dc:	4013      	ands	r3, r2
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d10b      	bne.n	80027fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027fa:	e018      	b.n	800282e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	f023 0312 	bic.w	r3, r3, #18
 8002804:	f043 0210 	orr.w	r2, r3, #16
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800281c:	e007      	b.n	800282e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	ffe1f7fd 	.word	0xffe1f7fd
 800283c:	ff1f0efe 	.word	0xff1f0efe

08002840 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x20>
 800285c:	2302      	movs	r3, #2
 800285e:	e0dc      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x1da>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b06      	cmp	r3, #6
 800286e:	d81c      	bhi.n	80028aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	3b05      	subs	r3, #5
 8002882:	221f      	movs	r2, #31
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	4019      	ands	r1, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3b05      	subs	r3, #5
 800289c:	fa00 f203 	lsl.w	r2, r0, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	635a      	str	r2, [r3, #52]	; 0x34
 80028a8:	e03c      	b.n	8002924 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d81c      	bhi.n	80028ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	3b23      	subs	r3, #35	; 0x23
 80028c4:	221f      	movs	r2, #31
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	4019      	ands	r1, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	3b23      	subs	r3, #35	; 0x23
 80028de:	fa00 f203 	lsl.w	r2, r0, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
 80028ea:	e01b      	b.n	8002924 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	3b41      	subs	r3, #65	; 0x41
 80028fe:	221f      	movs	r2, #31
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	4019      	ands	r1, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	3b41      	subs	r3, #65	; 0x41
 8002918:	fa00 f203 	lsl.w	r2, r0, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b09      	cmp	r3, #9
 800292a:	d91c      	bls.n	8002966 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68d9      	ldr	r1, [r3, #12]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	3b1e      	subs	r3, #30
 800293e:	2207      	movs	r2, #7
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	4019      	ands	r1, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6898      	ldr	r0, [r3, #8]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	3b1e      	subs	r3, #30
 8002958:	fa00 f203 	lsl.w	r2, r0, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	e019      	b.n	800299a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6919      	ldr	r1, [r3, #16]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	2207      	movs	r2, #7
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	4019      	ands	r1, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6898      	ldr	r0, [r3, #8]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	fa00 f203 	lsl.w	r2, r0, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d003      	beq.n	80029aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029a6:	2b11      	cmp	r3, #17
 80029a8:	d132      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1d      	ldr	r2, [pc, #116]	; (8002a24 <HAL_ADC_ConfigChannel+0x1e4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d125      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d126      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029d0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d11a      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_ADC_ConfigChannel+0x1e8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <HAL_ADC_ConfigChannel+0x1ec>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	0c9a      	lsrs	r2, r3, #18
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029f0:	e002      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f9      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x1b2>
 80029fe:	e007      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	40012400 	.word	0x40012400
 8002a28:	20000078 	.word	0x20000078
 8002a2c:	431bde83 	.word	0x431bde83

08002a30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d127      	bne.n	8002a9a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a5a:	f7ff fded 	bl	8002638 <HAL_GetTick>
 8002a5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a60:	e014      	b.n	8002a8c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a62:	f7ff fde9 	bl	8002638 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d90d      	bls.n	8002a8c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	f043 0210 	orr.w	r2, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e007      	b.n	8002a9c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d0e3      	beq.n	8002a62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad6:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	60d3      	str	r3, [r2, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <__NVIC_GetPriorityGrouping+0x18>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0307 	and.w	r3, r3, #7
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db0b      	blt.n	8002b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4906      	ldr	r1, [pc, #24]	; (8002b3c <__NVIC_EnableIRQ+0x34>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2001      	movs	r0, #1
 8002b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db0a      	blt.n	8002b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	490c      	ldr	r1, [pc, #48]	; (8002b8c <__NVIC_SetPriority+0x4c>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	440b      	add	r3, r1
 8002b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b68:	e00a      	b.n	8002b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4908      	ldr	r1, [pc, #32]	; (8002b90 <__NVIC_SetPriority+0x50>)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3b04      	subs	r3, #4
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	761a      	strb	r2, [r3, #24]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f1c3 0307 	rsb	r3, r3, #7
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	bf28      	it	cs
 8002bb2:	2304      	movcs	r3, #4
 8002bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d902      	bls.n	8002bc4 <NVIC_EncodePriority+0x30>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3b03      	subs	r3, #3
 8002bc2:	e000      	b.n	8002bc6 <NVIC_EncodePriority+0x32>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	4313      	orrs	r3, r2
         );
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c08:	d301      	bcc.n	8002c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00f      	b.n	8002c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <SysTick_Config+0x40>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c16:	210f      	movs	r1, #15
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c1c:	f7ff ff90 	bl	8002b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <SysTick_Config+0x40>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <SysTick_Config+0x40>)
 8002c28:	2207      	movs	r2, #7
 8002c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	e000e010 	.word	0xe000e010

08002c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ff2d 	bl	8002aa4 <__NVIC_SetPriorityGrouping>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c64:	f7ff ff42 	bl	8002aec <__NVIC_GetPriorityGrouping>
 8002c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f7ff ff90 	bl	8002b94 <NVIC_EncodePriority>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff5f 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff35 	bl	8002b08 <__NVIC_EnableIRQ>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ffa2 	bl	8002bf8 <SysTick_Config>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b08b      	sub	sp, #44	; 0x2c
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd2:	e127      	b.n	8002f24 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	f040 8116 	bne.w	8002f1e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b12      	cmp	r3, #18
 8002cf8:	d034      	beq.n	8002d64 <HAL_GPIO_Init+0xa4>
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d80d      	bhi.n	8002d1a <HAL_GPIO_Init+0x5a>
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d02b      	beq.n	8002d5a <HAL_GPIO_Init+0x9a>
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d804      	bhi.n	8002d10 <HAL_GPIO_Init+0x50>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d031      	beq.n	8002d6e <HAL_GPIO_Init+0xae>
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d01c      	beq.n	8002d48 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d0e:	e048      	b.n	8002da2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d043      	beq.n	8002d9c <HAL_GPIO_Init+0xdc>
 8002d14:	2b11      	cmp	r3, #17
 8002d16:	d01b      	beq.n	8002d50 <HAL_GPIO_Init+0x90>
          break;
 8002d18:	e043      	b.n	8002da2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d1a:	4a89      	ldr	r2, [pc, #548]	; (8002f40 <HAL_GPIO_Init+0x280>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d026      	beq.n	8002d6e <HAL_GPIO_Init+0xae>
 8002d20:	4a87      	ldr	r2, [pc, #540]	; (8002f40 <HAL_GPIO_Init+0x280>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d806      	bhi.n	8002d34 <HAL_GPIO_Init+0x74>
 8002d26:	4a87      	ldr	r2, [pc, #540]	; (8002f44 <HAL_GPIO_Init+0x284>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d020      	beq.n	8002d6e <HAL_GPIO_Init+0xae>
 8002d2c:	4a86      	ldr	r2, [pc, #536]	; (8002f48 <HAL_GPIO_Init+0x288>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01d      	beq.n	8002d6e <HAL_GPIO_Init+0xae>
          break;
 8002d32:	e036      	b.n	8002da2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d34:	4a85      	ldr	r2, [pc, #532]	; (8002f4c <HAL_GPIO_Init+0x28c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d019      	beq.n	8002d6e <HAL_GPIO_Init+0xae>
 8002d3a:	4a85      	ldr	r2, [pc, #532]	; (8002f50 <HAL_GPIO_Init+0x290>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d016      	beq.n	8002d6e <HAL_GPIO_Init+0xae>
 8002d40:	4a84      	ldr	r2, [pc, #528]	; (8002f54 <HAL_GPIO_Init+0x294>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_GPIO_Init+0xae>
          break;
 8002d46:	e02c      	b.n	8002da2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	623b      	str	r3, [r7, #32]
          break;
 8002d4e:	e028      	b.n	8002da2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	3304      	adds	r3, #4
 8002d56:	623b      	str	r3, [r7, #32]
          break;
 8002d58:	e023      	b.n	8002da2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	3308      	adds	r3, #8
 8002d60:	623b      	str	r3, [r7, #32]
          break;
 8002d62:	e01e      	b.n	8002da2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	623b      	str	r3, [r7, #32]
          break;
 8002d6c:	e019      	b.n	8002da2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d76:	2304      	movs	r3, #4
 8002d78:	623b      	str	r3, [r7, #32]
          break;
 8002d7a:	e012      	b.n	8002da2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d84:	2308      	movs	r3, #8
 8002d86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	611a      	str	r2, [r3, #16]
          break;
 8002d8e:	e008      	b.n	8002da2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d90:	2308      	movs	r3, #8
 8002d92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	615a      	str	r2, [r3, #20]
          break;
 8002d9a:	e002      	b.n	8002da2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	623b      	str	r3, [r7, #32]
          break;
 8002da0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2bff      	cmp	r3, #255	; 0xff
 8002da6:	d801      	bhi.n	8002dac <HAL_GPIO_Init+0xec>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	e001      	b.n	8002db0 <HAL_GPIO_Init+0xf0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2bff      	cmp	r3, #255	; 0xff
 8002db6:	d802      	bhi.n	8002dbe <HAL_GPIO_Init+0xfe>
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	e002      	b.n	8002dc4 <HAL_GPIO_Init+0x104>
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	3b08      	subs	r3, #8
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	210f      	movs	r1, #15
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	6a39      	ldr	r1, [r7, #32]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	431a      	orrs	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8096 	beq.w	8002f1e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002df2:	4b59      	ldr	r3, [pc, #356]	; (8002f58 <HAL_GPIO_Init+0x298>)
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	4a58      	ldr	r2, [pc, #352]	; (8002f58 <HAL_GPIO_Init+0x298>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6193      	str	r3, [r2, #24]
 8002dfe:	4b56      	ldr	r3, [pc, #344]	; (8002f58 <HAL_GPIO_Init+0x298>)
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e0a:	4a54      	ldr	r2, [pc, #336]	; (8002f5c <HAL_GPIO_Init+0x29c>)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e16:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	220f      	movs	r2, #15
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4b      	ldr	r2, [pc, #300]	; (8002f60 <HAL_GPIO_Init+0x2a0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_GPIO_Init+0x19e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a4a      	ldr	r2, [pc, #296]	; (8002f64 <HAL_GPIO_Init+0x2a4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00d      	beq.n	8002e5a <HAL_GPIO_Init+0x19a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a49      	ldr	r2, [pc, #292]	; (8002f68 <HAL_GPIO_Init+0x2a8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d007      	beq.n	8002e56 <HAL_GPIO_Init+0x196>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a48      	ldr	r2, [pc, #288]	; (8002f6c <HAL_GPIO_Init+0x2ac>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_GPIO_Init+0x192>
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e006      	b.n	8002e60 <HAL_GPIO_Init+0x1a0>
 8002e52:	2304      	movs	r3, #4
 8002e54:	e004      	b.n	8002e60 <HAL_GPIO_Init+0x1a0>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e002      	b.n	8002e60 <HAL_GPIO_Init+0x1a0>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_GPIO_Init+0x1a0>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e62:	f002 0203 	and.w	r2, r2, #3
 8002e66:	0092      	lsls	r2, r2, #2
 8002e68:	4093      	lsls	r3, r2
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e70:	493a      	ldr	r1, [pc, #232]	; (8002f5c <HAL_GPIO_Init+0x29c>)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	3302      	adds	r3, #2
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e8a:	4b39      	ldr	r3, [pc, #228]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4938      	ldr	r1, [pc, #224]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
 8002e96:	e006      	b.n	8002ea6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e98:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	4933      	ldr	r1, [pc, #204]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002eb2:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	492e      	ldr	r1, [pc, #184]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
 8002ebe:	e006      	b.n	8002ece <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	4929      	ldr	r1, [pc, #164]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	4924      	ldr	r1, [pc, #144]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
 8002ee6:	e006      	b.n	8002ef6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ee8:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	491f      	ldr	r1, [pc, #124]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d006      	beq.n	8002f10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f02:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	491a      	ldr	r1, [pc, #104]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60cb      	str	r3, [r1, #12]
 8002f0e:	e006      	b.n	8002f1e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	4915      	ldr	r1, [pc, #84]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	3301      	adds	r3, #1
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f47f aed0 	bne.w	8002cd4 <HAL_GPIO_Init+0x14>
  }
}
 8002f34:	bf00      	nop
 8002f36:	372c      	adds	r7, #44	; 0x2c
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	10210000 	.word	0x10210000
 8002f44:	10110000 	.word	0x10110000
 8002f48:	10120000 	.word	0x10120000
 8002f4c:	10310000 	.word	0x10310000
 8002f50:	10320000 	.word	0x10320000
 8002f54:	10220000 	.word	0x10220000
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	40010800 	.word	0x40010800
 8002f64:	40010c00 	.word	0x40010c00
 8002f68:	40011000 	.word	0x40011000
 8002f6c:	40011400 	.word	0x40011400
 8002f70:	40010400 	.word	0x40010400

08002f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e001      	b.n	8002f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	807b      	strh	r3, [r7, #2]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fb2:	787b      	ldrb	r3, [r7, #1]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb8:	887a      	ldrh	r2, [r7, #2]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fbe:	e003      	b.n	8002fc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	041a      	lsls	r2, r3, #16
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	611a      	str	r2, [r3, #16]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
}
 8002fde:	bf00      	nop
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	420e0020 	.word	0x420e0020

08002fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e26c      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8087 	beq.w	800311a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800300c:	4b92      	ldr	r3, [pc, #584]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b04      	cmp	r3, #4
 8003016:	d00c      	beq.n	8003032 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003018:	4b8f      	ldr	r3, [pc, #572]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b08      	cmp	r3, #8
 8003022:	d112      	bne.n	800304a <HAL_RCC_OscConfig+0x5e>
 8003024:	4b8c      	ldr	r3, [pc, #560]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003030:	d10b      	bne.n	800304a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003032:	4b89      	ldr	r3, [pc, #548]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d06c      	beq.n	8003118 <HAL_RCC_OscConfig+0x12c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d168      	bne.n	8003118 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e246      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x76>
 8003054:	4b80      	ldr	r3, [pc, #512]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a7f      	ldr	r2, [pc, #508]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e02e      	b.n	80030c0 <HAL_RCC_OscConfig+0xd4>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x98>
 800306a:	4b7b      	ldr	r3, [pc, #492]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a7a      	ldr	r2, [pc, #488]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4b78      	ldr	r3, [pc, #480]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a77      	ldr	r2, [pc, #476]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 800307c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e01d      	b.n	80030c0 <HAL_RCC_OscConfig+0xd4>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0xbc>
 800308e:	4b72      	ldr	r3, [pc, #456]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a71      	ldr	r2, [pc, #452]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b6f      	ldr	r3, [pc, #444]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a6e      	ldr	r2, [pc, #440]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0xd4>
 80030a8:	4b6b      	ldr	r3, [pc, #428]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a6a      	ldr	r2, [pc, #424]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b68      	ldr	r3, [pc, #416]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a67      	ldr	r2, [pc, #412]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7ff fab6 	bl	8002638 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7ff fab2 	bl	8002638 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1fa      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0xe4>
 80030ee:	e014      	b.n	800311a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7ff faa2 	bl	8002638 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7ff fa9e 	bl	8002638 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1e6      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	4b53      	ldr	r3, [pc, #332]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x10c>
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d063      	beq.n	80031ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003126:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003132:	4b49      	ldr	r3, [pc, #292]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b08      	cmp	r3, #8
 800313c:	d11c      	bne.n	8003178 <HAL_RCC_OscConfig+0x18c>
 800313e:	4b46      	ldr	r3, [pc, #280]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d116      	bne.n	8003178 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	4b43      	ldr	r3, [pc, #268]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_RCC_OscConfig+0x176>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d001      	beq.n	8003162 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e1ba      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003162:	4b3d      	ldr	r3, [pc, #244]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4939      	ldr	r1, [pc, #228]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003176:	e03a      	b.n	80031ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003180:	4b36      	ldr	r3, [pc, #216]	; (800325c <HAL_RCC_OscConfig+0x270>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7ff fa57 	bl	8002638 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800318e:	f7ff fa53 	bl	8002638 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e19b      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a0:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4927      	ldr	r1, [pc, #156]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]
 80031c0:	e015      	b.n	80031ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <HAL_RCC_OscConfig+0x270>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7ff fa36 	bl	8002638 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d0:	f7ff fa32 	bl	8002638 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e17a      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d03a      	beq.n	8003270 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d019      	beq.n	8003236 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003202:	4b17      	ldr	r3, [pc, #92]	; (8003260 <HAL_RCC_OscConfig+0x274>)
 8003204:	2201      	movs	r2, #1
 8003206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7ff fa16 	bl	8002638 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003210:	f7ff fa12 	bl	8002638 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e15a      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <HAL_RCC_OscConfig+0x26c>)
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800322e:	2001      	movs	r0, #1
 8003230:	f000 fada 	bl	80037e8 <RCC_Delay>
 8003234:	e01c      	b.n	8003270 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003236:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <HAL_RCC_OscConfig+0x274>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323c:	f7ff f9fc 	bl	8002638 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003242:	e00f      	b.n	8003264 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003244:	f7ff f9f8 	bl	8002638 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d908      	bls.n	8003264 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e140      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	42420000 	.word	0x42420000
 8003260:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	4b9e      	ldr	r3, [pc, #632]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1e9      	bne.n	8003244 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80a6 	beq.w	80033ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003282:	4b97      	ldr	r3, [pc, #604]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10d      	bne.n	80032aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	4b94      	ldr	r3, [pc, #592]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	4a93      	ldr	r2, [pc, #588]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003298:	61d3      	str	r3, [r2, #28]
 800329a:	4b91      	ldr	r3, [pc, #580]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a6:	2301      	movs	r3, #1
 80032a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	4b8e      	ldr	r3, [pc, #568]	; (80034e4 <HAL_RCC_OscConfig+0x4f8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d118      	bne.n	80032e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b6:	4b8b      	ldr	r3, [pc, #556]	; (80034e4 <HAL_RCC_OscConfig+0x4f8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a8a      	ldr	r2, [pc, #552]	; (80034e4 <HAL_RCC_OscConfig+0x4f8>)
 80032bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c2:	f7ff f9b9 	bl	8002638 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ca:	f7ff f9b5 	bl	8002638 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	; 0x64
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0fd      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	4b81      	ldr	r3, [pc, #516]	; (80034e4 <HAL_RCC_OscConfig+0x4f8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d106      	bne.n	80032fe <HAL_RCC_OscConfig+0x312>
 80032f0:	4b7b      	ldr	r3, [pc, #492]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4a7a      	ldr	r2, [pc, #488]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6213      	str	r3, [r2, #32]
 80032fc:	e02d      	b.n	800335a <HAL_RCC_OscConfig+0x36e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0x334>
 8003306:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	4a75      	ldr	r2, [pc, #468]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	6213      	str	r3, [r2, #32]
 8003312:	4b73      	ldr	r3, [pc, #460]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	4a72      	ldr	r2, [pc, #456]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003318:	f023 0304 	bic.w	r3, r3, #4
 800331c:	6213      	str	r3, [r2, #32]
 800331e:	e01c      	b.n	800335a <HAL_RCC_OscConfig+0x36e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b05      	cmp	r3, #5
 8003326:	d10c      	bne.n	8003342 <HAL_RCC_OscConfig+0x356>
 8003328:	4b6d      	ldr	r3, [pc, #436]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4a6c      	ldr	r2, [pc, #432]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 800332e:	f043 0304 	orr.w	r3, r3, #4
 8003332:	6213      	str	r3, [r2, #32]
 8003334:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4a69      	ldr	r2, [pc, #420]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6213      	str	r3, [r2, #32]
 8003340:	e00b      	b.n	800335a <HAL_RCC_OscConfig+0x36e>
 8003342:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	4a66      	ldr	r2, [pc, #408]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	6213      	str	r3, [r2, #32]
 800334e:	4b64      	ldr	r3, [pc, #400]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4a63      	ldr	r2, [pc, #396]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	f023 0304 	bic.w	r3, r3, #4
 8003358:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d015      	beq.n	800338e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7ff f969 	bl	8002638 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7ff f965 	bl	8002638 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0ab      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	4b57      	ldr	r3, [pc, #348]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ee      	beq.n	800336a <HAL_RCC_OscConfig+0x37e>
 800338c:	e014      	b.n	80033b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338e:	f7ff f953 	bl	8002638 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003394:	e00a      	b.n	80033ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7ff f94f 	bl	8002638 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e095      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ee      	bne.n	8003396 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d105      	bne.n	80033ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033be:	4b48      	ldr	r3, [pc, #288]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4a47      	ldr	r2, [pc, #284]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 80033c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8081 	beq.w	80034d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d4:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d061      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d146      	bne.n	8003476 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e8:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <HAL_RCC_OscConfig+0x4fc>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7ff f923 	bl	8002638 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f6:	f7ff f91f 	bl	8002638 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e067      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003408:	4b35      	ldr	r3, [pc, #212]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341c:	d108      	bne.n	8003430 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800341e:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	492d      	ldr	r1, [pc, #180]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a19      	ldr	r1, [r3, #32]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	430b      	orrs	r3, r1
 8003442:	4927      	ldr	r1, [pc, #156]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003448:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <HAL_RCC_OscConfig+0x4fc>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7ff f8f3 	bl	8002638 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003456:	f7ff f8ef 	bl	8002638 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e037      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x46a>
 8003474:	e02f      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <HAL_RCC_OscConfig+0x4fc>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7ff f8dc 	bl	8002638 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7ff f8d8 	bl	8002638 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e020      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003496:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x498>
 80034a2:	e018      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e013      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40007000 	.word	0x40007000
 80034e8:	42420060 	.word	0x42420060

080034ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0d0      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003500:	4b6a      	ldr	r3, [pc, #424]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d910      	bls.n	8003530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b67      	ldr	r3, [pc, #412]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 0207 	bic.w	r2, r3, #7
 8003516:	4965      	ldr	r1, [pc, #404]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b8      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d020      	beq.n	800357e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003548:	4b59      	ldr	r3, [pc, #356]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a58      	ldr	r2, [pc, #352]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003552:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003560:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800356a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	494d      	ldr	r1, [pc, #308]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d040      	beq.n	800360c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d115      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e07f      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e073      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ba:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06b      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ca:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4936      	ldr	r1, [pc, #216]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035dc:	f7ff f82c 	bl	8002638 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7ff f828 	bl	8002638 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e053      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 020c 	and.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	429a      	cmp	r2, r3
 800360a:	d1eb      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800360c:	4b27      	ldr	r3, [pc, #156]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d210      	bcs.n	800363c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 0207 	bic.w	r2, r3, #7
 8003622:	4922      	ldr	r1, [pc, #136]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362a:	4b20      	ldr	r3, [pc, #128]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e032      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4916      	ldr	r1, [pc, #88]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	490e      	ldr	r1, [pc, #56]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800367a:	f000 f821 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 800367e:	4601      	mov	r1, r0
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	fa21 f303 	lsr.w	r3, r1, r3
 8003692:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1d0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe ff8a 	bl	80025b4 <HAL_InitTick>

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40021000 	.word	0x40021000
 80036b4:	08006738 	.word	0x08006738
 80036b8:	20000078 	.word	0x20000078
 80036bc:	2000007c 	.word	0x2000007c

080036c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	b490      	push	{r4, r7}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036c6:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036c8:	1d3c      	adds	r4, r7, #4
 80036ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036ea:	4b23      	ldr	r3, [pc, #140]	; (8003778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d002      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x40>
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d003      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0x46>
 80036fe:	e02d      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003700:	4b1e      	ldr	r3, [pc, #120]	; (800377c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003702:	623b      	str	r3, [r7, #32]
      break;
 8003704:	e02d      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	0c9b      	lsrs	r3, r3, #18
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003712:	4413      	add	r3, r2
 8003714:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003718:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d013      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003724:	4b14      	ldr	r3, [pc, #80]	; (8003778 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	0c5b      	lsrs	r3, r3, #17
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003732:	4413      	add	r3, r2
 8003734:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003738:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	4a0f      	ldr	r2, [pc, #60]	; (800377c <HAL_RCC_GetSysClockFreq+0xbc>)
 800373e:	fb02 f203 	mul.w	r2, r2, r3
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
 800374a:	e004      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003750:	fb02 f303 	mul.w	r3, r2, r3
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	623b      	str	r3, [r7, #32]
      break;
 800375a:	e002      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <HAL_RCC_GetSysClockFreq+0xbc>)
 800375e:	623b      	str	r3, [r7, #32]
      break;
 8003760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003762:	6a3b      	ldr	r3, [r7, #32]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3728      	adds	r7, #40	; 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bc90      	pop	{r4, r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	08006710 	.word	0x08006710
 8003774:	08006720 	.word	0x08006720
 8003778:	40021000 	.word	0x40021000
 800377c:	007a1200 	.word	0x007a1200
 8003780:	003d0900 	.word	0x003d0900

08003784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003788:	4b02      	ldr	r3, [pc, #8]	; (8003794 <HAL_RCC_GetHCLKFreq+0x10>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	20000078 	.word	0x20000078

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff2 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037a0:	4601      	mov	r1, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4a03      	ldr	r2, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	08006748 	.word	0x08006748

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffde 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037c8:	4601      	mov	r1, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	0adb      	lsrs	r3, r3, #11
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4a03      	ldr	r2, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	08006748 	.word	0x08006748

080037e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <RCC_Delay+0x34>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <RCC_Delay+0x38>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0a5b      	lsrs	r3, r3, #9
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003804:	bf00      	nop
  }
  while (Delay --);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	60fa      	str	r2, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f9      	bne.n	8003804 <RCC_Delay+0x1c>
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000078 	.word	0x20000078
 8003820:	10624dd3 	.word	0x10624dd3

08003824 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d07d      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003840:	2300      	movs	r3, #0
 8003842:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003844:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10d      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	4b4c      	ldr	r3, [pc, #304]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	4a4b      	ldr	r2, [pc, #300]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385a:	61d3      	str	r3, [r2, #28]
 800385c:	4b49      	ldr	r3, [pc, #292]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003868:	2301      	movs	r3, #1
 800386a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	4b46      	ldr	r3, [pc, #280]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d118      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003878:	4b43      	ldr	r3, [pc, #268]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a42      	ldr	r2, [pc, #264]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800387e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003884:	f7fe fed8 	bl	8002638 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388a:	e008      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388c:	f7fe fed4 	bl	8002638 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e06d      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	4b3a      	ldr	r3, [pc, #232]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038aa:	4b36      	ldr	r3, [pc, #216]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d02e      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d027      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038c8:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038d2:	4b2e      	ldr	r3, [pc, #184]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038d8:	4b2c      	ldr	r3, [pc, #176]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038de:	4a29      	ldr	r2, [pc, #164]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d014      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fe fea3 	bl	8002638 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f4:	e00a      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fe fe9f 	bl	8002638 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e036      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ee      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4917      	ldr	r1, [pc, #92]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003926:	4313      	orrs	r3, r2
 8003928:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d105      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	4a13      	ldr	r2, [pc, #76]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003948:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	490b      	ldr	r1, [pc, #44]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	4904      	ldr	r1, [pc, #16]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	40007000 	.word	0x40007000
 800398c:	42420440 	.word	0x42420440

08003990 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b08d      	sub	sp, #52	; 0x34
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003998:	4b55      	ldr	r3, [pc, #340]	; (8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800399a:	f107 040c 	add.w	r4, r7, #12
 800399e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039a4:	4b53      	ldr	r3, [pc, #332]	; (8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	2300      	movs	r3, #0
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b2:	2300      	movs	r3, #0
 80039b4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	2300      	movs	r3, #0
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d07f      	beq.n	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d002      	beq.n	80039ce <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d048      	beq.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80039cc:	e08b      	b.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80039ce:	4b4a      	ldr	r3, [pc, #296]	; (8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80039d4:	4b48      	ldr	r3, [pc, #288]	; (8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d07f      	beq.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	0c9b      	lsrs	r3, r3, #18
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80039ec:	4413      	add	r3, r2
 80039ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039f2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d018      	beq.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039fe:	4b3e      	ldr	r3, [pc, #248]	; (8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	0c5b      	lsrs	r3, r3, #17
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a1e:	4a37      	ldr	r2, [pc, #220]	; (8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	fb02 f303 	mul.w	r3, r2, r3
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2e:	e004      	b.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	4a33      	ldr	r2, [pc, #204]	; (8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a34:	fb02 f303 	mul.w	r3, r2, r3
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a46:	d102      	bne.n	8003a4e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a4c:	e048      	b.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4a2c      	ldr	r2, [pc, #176]	; (8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a5c:	e040      	b.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003a5e:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6e:	d108      	bne.n	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a80:	e01f      	b.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a8c:	d109      	bne.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003a8e:	4b1a      	ldr	r3, [pc, #104]	; (8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003a9a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa0:	e00f      	b.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aac:	d11a      	bne.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003aae:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d014      	beq.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003aba:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ac0:	e010      	b.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003ac2:	e00f      	b.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ac4:	f7ff fe7c 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	0b9b      	lsrs	r3, r3, #14
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ade:	e002      	b.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003ae0:	bf00      	nop
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003ae4:	bf00      	nop
    }
  }
  return (frequency);
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3734      	adds	r7, #52	; 0x34
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd90      	pop	{r4, r7, pc}
 8003af0:	08006724 	.word	0x08006724
 8003af4:	08006734 	.word	0x08006734
 8003af8:	40021000 	.word	0x40021000
 8003afc:	007a1200 	.word	0x007a1200
 8003b00:	003d0900 	.word	0x003d0900
 8003b04:	aaaaaaab 	.word	0xaaaaaaab

08003b08 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e084      	b.n	8003c28 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	7c5b      	ldrb	r3, [r3, #17]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe fa14 	bl	8001f5c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fbd0 	bl	80042e0 <HAL_RTC_WaitForSynchro>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2204      	movs	r2, #4
 8003b4a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e06b      	b.n	8003c28 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fc89 	bl	8004468 <RTC_EnterInitMode>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2204      	movs	r2, #4
 8003b60:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e060      	b.n	8003c28 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0207 	bic.w	r2, r2, #7
 8003b74:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003b7e:	4b2c      	ldr	r3, [pc, #176]	; (8003c30 <HAL_RTC_Init+0x128>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a2b      	ldr	r2, [pc, #172]	; (8003c30 <HAL_RTC_Init+0x128>)
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003b8a:	4b29      	ldr	r3, [pc, #164]	; (8003c30 <HAL_RTC_Init+0x128>)
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	4926      	ldr	r1, [pc, #152]	; (8003c30 <HAL_RTC_Init+0x128>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ba4:	d003      	beq.n	8003bae <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e00e      	b.n	8003bcc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003bae:	2001      	movs	r0, #1
 8003bb0:	f7ff feee 	bl	8003990 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bb4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d104      	bne.n	8003bc6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e030      	b.n	8003c28 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f023 010f 	bic.w	r1, r3, #15
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	0c1a      	lsrs	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	b291      	uxth	r1, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fc5d 	bl	80044b8 <RTC_ExitInitMode>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2204      	movs	r2, #4
 8003c08:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00c      	b.n	8003c28 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
  }
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40006c00 	.word	0x40006c00

08003c34 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_RTC_SetTime+0x20>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e080      	b.n	8003d5a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	7c1b      	ldrb	r3, [r3, #16]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_RTC_SetTime+0x30>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e07a      	b.n	8003d5a <HAL_RTC_SetTime+0x126>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d113      	bne.n	8003c9e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003c80:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	785b      	ldrb	r3, [r3, #1]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a5b      	subs	r3, r3, r1
 8003c90:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003c92:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003c98:	4413      	add	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e01e      	b.n	8003cdc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fc4d 	bl	8004542 <RTC_Bcd2ToByte>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	461a      	mov	r2, r3
 8003cac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003cb0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fc42 	bl	8004542 <RTC_Bcd2ToByte>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003cca:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	789b      	ldrb	r3, [r3, #2]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fc36 	bl	8004542 <RTC_Bcd2ToByte>
 8003cd6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003cd8:	4423      	add	r3, r4
 8003cda:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003cdc:	6979      	ldr	r1, [r7, #20]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fb5b 	bl	800439a <RTC_WriteTimeCounter>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2204      	movs	r2, #4
 8003cee:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e02f      	b.n	8003d5a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0205 	bic.w	r2, r2, #5
 8003d08:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fb6c 	bl	80043e8 <RTC_ReadAlarmCounter>
 8003d10:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d18:	d018      	beq.n	8003d4c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d214      	bcs.n	8003d4c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003d28:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d2c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d2e:	6939      	ldr	r1, [r7, #16]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fb72 	bl	800441a <RTC_WriteAlarmCounter>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2204      	movs	r2, #4
 8003d40:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e006      	b.n	8003d5a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
  }
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd90      	pop	{r4, r7, pc}
	...

08003d64 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_RTC_GetTime+0x28>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0b5      	b.n	8003efc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e0ac      	b.n	8003efc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fac9 	bl	800433a <RTC_ReadTimeCounter>
 8003da8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	4a55      	ldr	r2, [pc, #340]	; (8003f04 <HAL_RTC_GetTime+0x1a0>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	0adb      	lsrs	r3, r3, #11
 8003db4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4b52      	ldr	r3, [pc, #328]	; (8003f04 <HAL_RTC_GetTime+0x1a0>)
 8003dba:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbe:	0adb      	lsrs	r3, r3, #11
 8003dc0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	4a4f      	ldr	r2, [pc, #316]	; (8003f08 <HAL_RTC_GetTime+0x1a4>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4a4a      	ldr	r2, [pc, #296]	; (8003f04 <HAL_RTC_GetTime+0x1a0>)
 8003ddc:	fba2 1203 	umull	r1, r2, r2, r3
 8003de0:	0ad2      	lsrs	r2, r2, #11
 8003de2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003de6:	fb01 f202 	mul.w	r2, r1, r2
 8003dea:	1a9a      	subs	r2, r3, r2
 8003dec:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <HAL_RTC_GetTime+0x1a4>)
 8003dee:	fba3 1302 	umull	r1, r3, r3, r2
 8003df2:	0959      	lsrs	r1, r3, #5
 8003df4:	460b      	mov	r3, r1
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a5b      	subs	r3, r3, r1
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	1ad1      	subs	r1, r2, r3
 8003dfe:	b2ca      	uxtb	r2, r1
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b17      	cmp	r3, #23
 8003e08:	d955      	bls.n	8003eb6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4a3f      	ldr	r2, [pc, #252]	; (8003f0c <HAL_RTC_GetTime+0x1a8>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003e16:	6939      	ldr	r1, [r7, #16]
 8003e18:	4b3c      	ldr	r3, [pc, #240]	; (8003f0c <HAL_RTC_GetTime+0x1a8>)
 8003e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e1e:	091a      	lsrs	r2, r3, #4
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1aca      	subs	r2, r1, r3
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fad9 	bl	80043e8 <RTC_ReadAlarmCounter>
 8003e36:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e3e:	d008      	beq.n	8003e52 <HAL_RTC_GetTime+0xee>
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d904      	bls.n	8003e52 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	61fb      	str	r3, [r7, #28]
 8003e50:	e002      	b.n	8003e58 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e56:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4a2d      	ldr	r2, [pc, #180]	; (8003f10 <HAL_RTC_GetTime+0x1ac>)
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003e66:	69b9      	ldr	r1, [r7, #24]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fa96 	bl	800439a <RTC_WriteTimeCounter>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e041      	b.n	8003efc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7e:	d00c      	beq.n	8003e9a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4413      	add	r3, r2
 8003e86:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003e88:	69f9      	ldr	r1, [r7, #28]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fac5 	bl	800441a <RTC_WriteAlarmCounter>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e030      	b.n	8003efc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003e9a:	69f9      	ldr	r1, [r7, #28]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fabc 	bl	800441a <RTC_WriteAlarmCounter>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e027      	b.n	8003efc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003eac:	6979      	ldr	r1, [r7, #20]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fb64 	bl	800457c <RTC_DateUpdate>
 8003eb4:	e003      	b.n	8003ebe <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01a      	beq.n	8003efa <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fb1d 	bl	8004508 <RTC_ByteToBcd2>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	785b      	ldrb	r3, [r3, #1]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fb14 	bl	8004508 <RTC_ByteToBcd2>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	789b      	ldrb	r3, [r3, #2]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fb0b 	bl	8004508 <RTC_ByteToBcd2>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	91a2b3c5 	.word	0x91a2b3c5
 8003f08:	88888889 	.word	0x88888889
 8003f0c:	aaaaaaab 	.word	0xaaaaaaab
 8003f10:	00015180 	.word	0x00015180

08003f14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	2300      	movs	r3, #0
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_RTC_SetDate+0x24>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e097      	b.n	800406c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	7c1b      	ldrb	r3, [r3, #16]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_RTC_SetDate+0x34>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e091      	b.n	800406c <HAL_RTC_SetDate+0x158>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2202      	movs	r2, #2
 8003f52:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10c      	bne.n	8003f74 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	78da      	ldrb	r2, [r3, #3]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	785a      	ldrb	r2, [r3, #1]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	789a      	ldrb	r2, [r3, #2]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	739a      	strb	r2, [r3, #14]
 8003f72:	e01a      	b.n	8003faa <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	78db      	ldrb	r3, [r3, #3]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fae2 	bl	8004542 <RTC_Bcd2ToByte>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	461a      	mov	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fad9 	bl	8004542 <RTC_Bcd2ToByte>
 8003f90:	4603      	mov	r3, r0
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	789b      	ldrb	r3, [r3, #2]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fad0 	bl	8004542 <RTC_Bcd2ToByte>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	7bdb      	ldrb	r3, [r3, #15]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	7b59      	ldrb	r1, [r3, #13]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	7b9b      	ldrb	r3, [r3, #14]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f000 fbbb 	bl	8004734 <RTC_WeekDayNum>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	7b1a      	ldrb	r2, [r3, #12]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f9b3 	bl	800433a <RTC_ReadTimeCounter>
 8003fd4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4a26      	ldr	r2, [pc, #152]	; (8004074 <HAL_RTC_SetDate+0x160>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	0adb      	lsrs	r3, r3, #11
 8003fe0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b18      	cmp	r3, #24
 8003fe6:	d93a      	bls.n	800405e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	4a23      	ldr	r2, [pc, #140]	; (8004078 <HAL_RTC_SetDate+0x164>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	4a22      	ldr	r2, [pc, #136]	; (800407c <HAL_RTC_SetDate+0x168>)
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003ffe:	69f9      	ldr	r1, [r7, #28]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f9ca 	bl	800439a <RTC_WriteTimeCounter>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d007      	beq.n	800401c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2204      	movs	r2, #4
 8004010:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e027      	b.n	800406c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 f9e3 	bl	80043e8 <RTC_ReadAlarmCounter>
 8004022:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402a:	d018      	beq.n	800405e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	429a      	cmp	r2, r3
 8004032:	d214      	bcs.n	800405e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800403a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800403e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004040:	69b9      	ldr	r1, [r7, #24]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f9e9 	bl	800441a <RTC_WriteAlarmCounter>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2204      	movs	r2, #4
 8004052:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e006      	b.n	800406c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	91a2b3c5 	.word	0x91a2b3c5
 8004078:	aaaaaaab 	.word	0xaaaaaaab
 800407c:	00015180 	.word	0x00015180

08004080 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800408c:	f107 0314 	add.w	r3, r7, #20
 8004090:	2100      	movs	r1, #0
 8004092:	460a      	mov	r2, r1
 8004094:	801a      	strh	r2, [r3, #0]
 8004096:	460a      	mov	r2, r1
 8004098:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_RTC_GetDate+0x26>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e03a      	b.n	8004120 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80040aa:	f107 0314 	add.w	r3, r7, #20
 80040ae:	2200      	movs	r2, #0
 80040b0:	4619      	mov	r1, r3
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff fe56 	bl	8003d64 <HAL_RTC_GetTime>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e02e      	b.n	8004120 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	7b1a      	ldrb	r2, [r3, #12]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	7bda      	ldrb	r2, [r3, #15]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	7b5a      	ldrb	r2, [r3, #13]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	7b9a      	ldrb	r2, [r3, #14]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01a      	beq.n	800411e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	78db      	ldrb	r3, [r3, #3]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fa0b 	bl	8004508 <RTC_ByteToBcd2>
 80040f2:	4603      	mov	r3, r0
 80040f4:	461a      	mov	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fa02 	bl	8004508 <RTC_ByteToBcd2>
 8004104:	4603      	mov	r3, r0
 8004106:	461a      	mov	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	789b      	ldrb	r3, [r3, #2]
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f9f9 	bl	8004508 <RTC_ByteToBcd2>
 8004116:	4603      	mov	r3, r0
 8004118:	461a      	mov	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b089      	sub	sp, #36	; 0x24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	2100      	movs	r1, #0
 800413e:	460a      	mov	r2, r1
 8004140:	801a      	strh	r2, [r3, #0]
 8004142:	460a      	mov	r2, r1
 8004144:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_RTC_SetAlarm_IT+0x2a>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e096      	b.n	8004284 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	7c1b      	ldrb	r3, [r3, #16]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_RTC_SetAlarm_IT+0x3a>
 800415e:	2302      	movs	r3, #2
 8004160:	e090      	b.n	8004284 <HAL_RTC_SetAlarm_IT+0x15c>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2202      	movs	r2, #2
 800416c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800416e:	f107 0314 	add.w	r3, r7, #20
 8004172:	2200      	movs	r2, #0
 8004174:	4619      	mov	r1, r3
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff fdf4 	bl	8003d64 <HAL_RTC_GetTime>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e07e      	b.n	8004284 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004186:	7d3b      	ldrb	r3, [r7, #20]
 8004188:	461a      	mov	r2, r3
 800418a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800418e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004192:	7d7b      	ldrb	r3, [r7, #21]
 8004194:	4619      	mov	r1, r3
 8004196:	460b      	mov	r3, r1
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	1a5b      	subs	r3, r3, r1
 800419c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800419e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80041a0:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80041a2:	4413      	add	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d113      	bne.n	80041d4 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80041b6:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	4619      	mov	r1, r3
 80041c0:	460b      	mov	r3, r1
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	1a5b      	subs	r3, r3, r1
 80041c6:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80041c8:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80041ce:	4413      	add	r3, r2
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	e01e      	b.n	8004212 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 f9b2 	bl	8004542 <RTC_Bcd2ToByte>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80041e6:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f9a7 	bl	8004542 <RTC_Bcd2ToByte>
 80041f4:	4603      	mov	r3, r0
 80041f6:	461a      	mov	r2, r3
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004200:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	789b      	ldrb	r3, [r3, #2]
 8004206:	4618      	mov	r0, r3
 8004208:	f000 f99b 	bl	8004542 <RTC_Bcd2ToByte>
 800420c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800420e:	4423      	add	r3, r4
 8004210:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	429a      	cmp	r2, r3
 8004218:	d205      	bcs.n	8004226 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004220:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004224:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004226:	69f9      	ldr	r1, [r7, #28]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f8f6 	bl	800441a <RTC_WriteAlarmCounter>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2204      	movs	r2, #4
 8004238:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e01f      	b.n	8004284 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0202 	mvn.w	r2, #2
 800424c:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0202 	orr.w	r2, r2, #2
 800425c:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RTC_SetAlarm_IT+0x164>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a0a      	ldr	r2, [pc, #40]	; (800428c <HAL_RTC_SetAlarm_IT+0x164>)
 8004264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004268:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <HAL_RTC_SetAlarm_IT+0x164>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <HAL_RTC_SetAlarm_IT+0x164>)
 8004270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004274:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004282:	2300      	movs	r3, #0
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3724      	adds	r7, #36	; 0x24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd90      	pop	{r4, r7, pc}
 800428c:	40010400 	.word	0x40010400

08004290 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00e      	beq.n	80042c4 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7fd fa8b 	bl	80017d0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f06f 0202 	mvn.w	r2, #2
 80042c2:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_RTC_AlarmIRQHandler+0x4c>)
 80042c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042ca:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	745a      	strb	r2, [r3, #17]
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40010400 	.word	0x40010400

080042e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e01d      	b.n	8004332 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0208 	bic.w	r2, r2, #8
 8004304:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004306:	f7fe f997 	bl	8002638 <HAL_GetTick>
 800430a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800430c:	e009      	b.n	8004322 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800430e:	f7fe f993 	bl	8002638 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800431c:	d901      	bls.n	8004322 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e007      	b.n	8004332 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ee      	beq.n	800430e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800433a:	b480      	push	{r7}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	827b      	strh	r3, [r7, #18]
 8004346:	2300      	movs	r3, #0
 8004348:	823b      	strh	r3, [r7, #16]
 800434a:	2300      	movs	r3, #0
 800434c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800436a:	8a7a      	ldrh	r2, [r7, #18]
 800436c:	8a3b      	ldrh	r3, [r7, #16]
 800436e:	429a      	cmp	r2, r3
 8004370:	d008      	beq.n	8004384 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004372:	8a3b      	ldrh	r3, [r7, #16]
 8004374:	041a      	lsls	r2, r3, #16
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	b29b      	uxth	r3, r3
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e004      	b.n	800438e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004384:	8a7b      	ldrh	r3, [r7, #18]
 8004386:	041a      	lsls	r2, r3, #16
 8004388:	89fb      	ldrh	r3, [r7, #14]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800438e:	697b      	ldr	r3, [r7, #20]
}
 8004390:	4618      	mov	r0, r3
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f85d 	bl	8004468 <RTC_EnterInitMode>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
 80043b8:	e011      	b.n	80043de <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	0c12      	lsrs	r2, r2, #16
 80043c2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	b292      	uxth	r2, r2
 80043cc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f872 	bl	80044b8 <RTC_ExitInitMode>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043de:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	81fb      	strh	r3, [r7, #14]
 80043f4:	2300      	movs	r3, #0
 80043f6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004408:	89fb      	ldrh	r3, [r7, #14]
 800440a:	041a      	lsls	r2, r3, #16
 800440c:	89bb      	ldrh	r3, [r7, #12]
 800440e:	4313      	orrs	r3, r2
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f81d 	bl	8004468 <RTC_EnterInitMode>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	e011      	b.n	800445e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	0c12      	lsrs	r2, r2, #16
 8004442:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	b292      	uxth	r2, r2
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f832 	bl	80044b8 <RTC_ExitInitMode>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800445e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004474:	f7fe f8e0 	bl	8002638 <HAL_GetTick>
 8004478:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800447a:	e009      	b.n	8004490 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800447c:	f7fe f8dc 	bl	8002638 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800448a:	d901      	bls.n	8004490 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e00f      	b.n	80044b0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0ee      	beq.n	800447c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0210 	orr.w	r2, r2, #16
 80044ac:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0210 	bic.w	r2, r2, #16
 80044d2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80044d4:	f7fe f8b0 	bl	8002638 <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80044da:	e009      	b.n	80044f0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80044dc:	f7fe f8ac 	bl	8002638 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044ea:	d901      	bls.n	80044f0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e007      	b.n	8004500 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ee      	beq.n	80044dc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004516:	e005      	b.n	8004524 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3301      	adds	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	3b0a      	subs	r3, #10
 8004522:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	2b09      	cmp	r3, #9
 8004528:	d8f6      	bhi.n	8004518 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	b2da      	uxtb	r2, r3
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	4313      	orrs	r3, r2
 8004536:	b2db      	uxtb	r3, r3
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004542:	b480      	push	{r7}
 8004544:	b085      	sub	sp, #20
 8004546:	af00      	add	r7, sp, #0
 8004548:	4603      	mov	r3, r0
 800454a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	091b      	lsrs	r3, r3, #4
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	4413      	add	r3, r2
 8004570:	b2db      	uxtb	r3, r3
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7bdb      	ldrb	r3, [r3, #15]
 800459a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	7b5b      	ldrb	r3, [r3, #13]
 80045a0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7b9b      	ldrb	r3, [r3, #14]
 80045a6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80045a8:	2300      	movs	r3, #0
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	e06f      	b.n	800468e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d011      	beq.n	80045d8 <RTC_DateUpdate+0x5c>
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d00e      	beq.n	80045d8 <RTC_DateUpdate+0x5c>
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d00b      	beq.n	80045d8 <RTC_DateUpdate+0x5c>
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b07      	cmp	r3, #7
 80045c4:	d008      	beq.n	80045d8 <RTC_DateUpdate+0x5c>
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d005      	beq.n	80045d8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b0a      	cmp	r3, #10
 80045d0:	d002      	beq.n	80045d8 <RTC_DateUpdate+0x5c>
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b0c      	cmp	r3, #12
 80045d6:	d117      	bne.n	8004608 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b1e      	cmp	r3, #30
 80045dc:	d803      	bhi.n	80045e6 <RTC_DateUpdate+0x6a>
      {
        day++;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3301      	adds	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80045e4:	e050      	b.n	8004688 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	d005      	beq.n	80045f8 <RTC_DateUpdate+0x7c>
        {
          month++;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	3301      	adds	r3, #1
 80045f0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80045f2:	2301      	movs	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80045f6:	e047      	b.n	8004688 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80045f8:	2301      	movs	r3, #1
 80045fa:	613b      	str	r3, [r7, #16]
          day = 1U;
 80045fc:	2301      	movs	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
          year++;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	3301      	adds	r3, #1
 8004604:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004606:	e03f      	b.n	8004688 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d008      	beq.n	8004620 <RTC_DateUpdate+0xa4>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b06      	cmp	r3, #6
 8004612:	d005      	beq.n	8004620 <RTC_DateUpdate+0xa4>
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b09      	cmp	r3, #9
 8004618:	d002      	beq.n	8004620 <RTC_DateUpdate+0xa4>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b0b      	cmp	r3, #11
 800461e:	d10c      	bne.n	800463a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b1d      	cmp	r3, #29
 8004624:	d803      	bhi.n	800462e <RTC_DateUpdate+0xb2>
      {
        day++;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3301      	adds	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800462c:	e02c      	b.n	8004688 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	3301      	adds	r3, #1
 8004632:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004634:	2301      	movs	r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004638:	e026      	b.n	8004688 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d123      	bne.n	8004688 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b1b      	cmp	r3, #27
 8004644:	d803      	bhi.n	800464e <RTC_DateUpdate+0xd2>
      {
        day++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3301      	adds	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e01c      	b.n	8004688 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b1c      	cmp	r3, #28
 8004652:	d111      	bne.n	8004678 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	b29b      	uxth	r3, r3
 8004658:	4618      	mov	r0, r3
 800465a:	f000 f839 	bl	80046d0 <RTC_IsLeapYear>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <RTC_DateUpdate+0xf0>
        {
          day++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3301      	adds	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e00d      	b.n	8004688 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3301      	adds	r3, #1
 8004670:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004672:	2301      	movs	r3, #1
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e007      	b.n	8004688 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b1d      	cmp	r3, #29
 800467c:	d104      	bne.n	8004688 <RTC_DateUpdate+0x10c>
      {
        month++;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	3301      	adds	r3, #1
 8004682:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004684:	2301      	movs	r3, #1
 8004686:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	3301      	adds	r3, #1
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d38b      	bcc.n	80045ae <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	6978      	ldr	r0, [r7, #20]
 80046ba:	f000 f83b 	bl	8004734 <RTC_WeekDayNum>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	731a      	strb	r2, [r3, #12]
}
 80046c6:	bf00      	nop
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e01d      	b.n	8004726 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	4a10      	ldr	r2, [pc, #64]	; (8004730 <RTC_IsLeapYear+0x60>)
 80046ee:	fba2 1203 	umull	r1, r2, r2, r3
 80046f2:	0952      	lsrs	r2, r2, #5
 80046f4:	2164      	movs	r1, #100	; 0x64
 80046f6:	fb01 f202 	mul.w	r2, r1, r2
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004702:	2301      	movs	r3, #1
 8004704:	e00f      	b.n	8004726 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	4a09      	ldr	r2, [pc, #36]	; (8004730 <RTC_IsLeapYear+0x60>)
 800470a:	fba2 1203 	umull	r1, r2, r2, r3
 800470e:	09d2      	lsrs	r2, r2, #7
 8004710:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004714:	fb01 f202 	mul.w	r2, r1, r2
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004724:	2300      	movs	r3, #0
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr
 8004730:	51eb851f 	.word	0x51eb851f

08004734 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
 8004740:	4613      	mov	r3, r2
 8004742:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004752:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d82d      	bhi.n	80047b6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800475a:	78fa      	ldrb	r2, [r7, #3]
 800475c:	4613      	mov	r3, r2
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4413      	add	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <RTC_WeekDayNum+0xe4>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	085a      	lsrs	r2, r3, #1
 800476e:	78bb      	ldrb	r3, [r7, #2]
 8004770:	441a      	add	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	441a      	add	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3b01      	subs	r3, #1
 800477a:	089b      	lsrs	r3, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	3b01      	subs	r3, #1
 8004782:	4926      	ldr	r1, [pc, #152]	; (800481c <RTC_WeekDayNum+0xe8>)
 8004784:	fba1 1303 	umull	r1, r3, r1, r3
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	1ad2      	subs	r2, r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	3b01      	subs	r3, #1
 8004790:	4922      	ldr	r1, [pc, #136]	; (800481c <RTC_WeekDayNum+0xe8>)
 8004792:	fba1 1303 	umull	r1, r3, r1, r3
 8004796:	09db      	lsrs	r3, r3, #7
 8004798:	4413      	add	r3, r2
 800479a:	1d1a      	adds	r2, r3, #4
 800479c:	4b20      	ldr	r3, [pc, #128]	; (8004820 <RTC_WeekDayNum+0xec>)
 800479e:	fba3 1302 	umull	r1, r3, r3, r2
 80047a2:	1ad1      	subs	r1, r2, r3
 80047a4:	0849      	lsrs	r1, r1, #1
 80047a6:	440b      	add	r3, r1
 80047a8:	0899      	lsrs	r1, r3, #2
 80047aa:	460b      	mov	r3, r1
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	1a5b      	subs	r3, r3, r1
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e029      	b.n	800480a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	4613      	mov	r3, r2
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4413      	add	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	4a15      	ldr	r2, [pc, #84]	; (8004818 <RTC_WeekDayNum+0xe4>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	085a      	lsrs	r2, r3, #1
 80047ca:	78bb      	ldrb	r3, [r7, #2]
 80047cc:	441a      	add	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	441a      	add	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	089b      	lsrs	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4910      	ldr	r1, [pc, #64]	; (800481c <RTC_WeekDayNum+0xe8>)
 80047dc:	fba1 1303 	umull	r1, r3, r1, r3
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	1ad2      	subs	r2, r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	490d      	ldr	r1, [pc, #52]	; (800481c <RTC_WeekDayNum+0xe8>)
 80047e8:	fba1 1303 	umull	r1, r3, r1, r3
 80047ec:	09db      	lsrs	r3, r3, #7
 80047ee:	4413      	add	r3, r2
 80047f0:	1c9a      	adds	r2, r3, #2
 80047f2:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <RTC_WeekDayNum+0xec>)
 80047f4:	fba3 1302 	umull	r1, r3, r3, r2
 80047f8:	1ad1      	subs	r1, r2, r3
 80047fa:	0849      	lsrs	r1, r1, #1
 80047fc:	440b      	add	r3, r1
 80047fe:	0899      	lsrs	r1, r3, #2
 8004800:	460b      	mov	r3, r1
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	1a5b      	subs	r3, r3, r1
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	b2db      	uxtb	r3, r3
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	38e38e39 	.word	0x38e38e39
 800481c:	51eb851f 	.word	0x51eb851f
 8004820:	24924925 	.word	0x24924925

08004824 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d024      	beq.n	8004884 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01d      	beq.n	8004884 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f821 	bl	800489e <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0204 	mvn.w	r2, #4
 8004864:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2204      	movs	r2, #4
 800486a:	745a      	strb	r2, [r3, #17]
 800486c:	e005      	b.n	800487a <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f80c 	bl	800488c <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0201 	mvn.w	r2, #1
 8004882:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr

0800489e <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e053      	b.n	800496a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fd fba7 	bl	8002030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	ea42 0103 	orr.w	r1, r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	0c1a      	lsrs	r2, r3, #16
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f002 0204 	and.w	r2, r2, #4
 8004948:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69da      	ldr	r2, [r3, #28]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004958:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b088      	sub	sp, #32
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_SPI_Transmit+0x22>
 8004990:	2302      	movs	r3, #2
 8004992:	e11e      	b.n	8004bd2 <HAL_SPI_Transmit+0x260>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800499c:	f7fd fe4c 	bl	8002638 <HAL_GetTick>
 80049a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d002      	beq.n	80049b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049b2:	2302      	movs	r3, #2
 80049b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049b6:	e103      	b.n	8004bc0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_SPI_Transmit+0x52>
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049c8:	e0fa      	b.n	8004bc0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2203      	movs	r2, #3
 80049ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a10:	d107      	bne.n	8004a22 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d007      	beq.n	8004a40 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a48:	d14b      	bne.n	8004ae2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_SPI_Transmit+0xe6>
 8004a52:	8afb      	ldrh	r3, [r7, #22]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d13e      	bne.n	8004ad6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	881a      	ldrh	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	1c9a      	adds	r2, r3, #2
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a7c:	e02b      	b.n	8004ad6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d112      	bne.n	8004ab2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	881a      	ldrh	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	1c9a      	adds	r2, r3, #2
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ab0:	e011      	b.n	8004ad6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ab2:	f7fd fdc1 	bl	8002638 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d803      	bhi.n	8004aca <HAL_SPI_Transmit+0x158>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac8:	d102      	bne.n	8004ad0 <HAL_SPI_Transmit+0x15e>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ad4:	e074      	b.n	8004bc0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1ce      	bne.n	8004a7e <HAL_SPI_Transmit+0x10c>
 8004ae0:	e04c      	b.n	8004b7c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_SPI_Transmit+0x17e>
 8004aea:	8afb      	ldrh	r3, [r7, #22]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d140      	bne.n	8004b72 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	7812      	ldrb	r2, [r2, #0]
 8004afc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b16:	e02c      	b.n	8004b72 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d113      	bne.n	8004b4e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	330c      	adds	r3, #12
 8004b30:	7812      	ldrb	r2, [r2, #0]
 8004b32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b4c:	e011      	b.n	8004b72 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b4e:	f7fd fd73 	bl	8002638 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d803      	bhi.n	8004b66 <HAL_SPI_Transmit+0x1f4>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b64:	d102      	bne.n	8004b6c <HAL_SPI_Transmit+0x1fa>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b70:	e026      	b.n	8004bc0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1cd      	bne.n	8004b18 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fb91 	bl	80052a8 <SPI_EndRxTxTransaction>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	77fb      	strb	r3, [r7, #31]
 8004bbc:	e000      	b.n	8004bc0 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004bbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b088      	sub	sp, #32
 8004bde:	af02      	add	r7, sp, #8
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	4613      	mov	r3, r2
 8004be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf6:	d112      	bne.n	8004c1e <HAL_SPI_Receive+0x44>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10e      	bne.n	8004c1e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2204      	movs	r2, #4
 8004c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c08:	88fa      	ldrh	r2, [r7, #6]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f8e9 	bl	8004dec <HAL_SPI_TransmitReceive>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	e0e2      	b.n	8004de4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_SPI_Receive+0x52>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e0db      	b.n	8004de4 <HAL_SPI_Receive+0x20a>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c34:	f7fd fd00 	bl	8002638 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
 8004c48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c4a:	e0c2      	b.n	8004dd2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Receive+0x7e>
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c5c:	e0b9      	b.n	8004dd2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2204      	movs	r2, #4
 8004c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	88fa      	ldrh	r2, [r7, #6]
 8004c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca4:	d107      	bne.n	8004cb6 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cb4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d007      	beq.n	8004cd4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d162      	bne.n	8004da2 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004cdc:	e02e      	b.n	8004d3c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d115      	bne.n	8004d18 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f103 020c 	add.w	r2, r3, #12
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	7812      	ldrb	r2, [r2, #0]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d16:	e011      	b.n	8004d3c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d18:	f7fd fc8e 	bl	8002638 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d803      	bhi.n	8004d30 <HAL_SPI_Receive+0x156>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d2e:	d102      	bne.n	8004d36 <HAL_SPI_Receive+0x15c>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d3a:	e04a      	b.n	8004dd2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1cb      	bne.n	8004cde <HAL_SPI_Receive+0x104>
 8004d46:	e031      	b.n	8004dac <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d113      	bne.n	8004d7e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	b292      	uxth	r2, r2
 8004d62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	1c9a      	adds	r2, r3, #2
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d7c:	e011      	b.n	8004da2 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d7e:	f7fd fc5b 	bl	8002638 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d803      	bhi.n	8004d96 <HAL_SPI_Receive+0x1bc>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d94:	d102      	bne.n	8004d9c <HAL_SPI_Receive+0x1c2>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004da0:	e017      	b.n	8004dd2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1cd      	bne.n	8004d48 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fa27 	bl	8005204 <SPI_EndRxTransaction>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
 8004dce:	e000      	b.n	8004dd2 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004dd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08c      	sub	sp, #48	; 0x30
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x26>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e18a      	b.n	8005128 <HAL_SPI_TransmitReceive+0x33c>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e1a:	f7fd fc0d 	bl	8002638 <HAL_GetTick>
 8004e1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d00f      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x70>
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e42:	d107      	bne.n	8004e54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <HAL_SPI_TransmitReceive+0x68>
 8004e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d003      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e5a:	e15b      	b.n	8005114 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x82>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x82>
 8004e68:	887b      	ldrh	r3, [r7, #2]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d103      	bne.n	8004e76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e74:	e14e      	b.n	8005114 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d003      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2205      	movs	r2, #5
 8004e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	887a      	ldrh	r2, [r7, #2]
 8004e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	887a      	ldrh	r2, [r7, #2]
 8004ea0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	887a      	ldrh	r2, [r7, #2]
 8004eac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	887a      	ldrh	r2, [r7, #2]
 8004eb2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d007      	beq.n	8004ede <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004edc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee6:	d178      	bne.n	8004fda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x10a>
 8004ef0:	8b7b      	ldrh	r3, [r7, #26]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d166      	bne.n	8004fc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	1c9a      	adds	r2, r3, #2
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f1a:	e053      	b.n	8004fc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d11b      	bne.n	8004f62 <HAL_SPI_TransmitReceive+0x176>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d016      	beq.n	8004f62 <HAL_SPI_TransmitReceive+0x176>
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d113      	bne.n	8004f62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	881a      	ldrh	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	1c9a      	adds	r2, r3, #2
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d119      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x1b8>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d014      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	b292      	uxth	r2, r2
 8004f86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	1c9a      	adds	r2, r3, #2
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fa4:	f7fd fb48 	bl	8002638 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d807      	bhi.n	8004fc4 <HAL_SPI_TransmitReceive+0x1d8>
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fba:	d003      	beq.n	8004fc4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fc2:	e0a7      	b.n	8005114 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1a6      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x130>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1a1      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x130>
 8004fd8:	e07c      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x1fc>
 8004fe2:	8b7b      	ldrh	r3, [r7, #26]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d16b      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	7812      	ldrb	r2, [r2, #0]
 8004ff4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800500e:	e057      	b.n	80050c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b02      	cmp	r3, #2
 800501c:	d11c      	bne.n	8005058 <HAL_SPI_TransmitReceive+0x26c>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d017      	beq.n	8005058 <HAL_SPI_TransmitReceive+0x26c>
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d114      	bne.n	8005058 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	7812      	ldrb	r2, [r2, #0]
 800503a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b01      	cmp	r3, #1
 8005064:	d119      	bne.n	800509a <HAL_SPI_TransmitReceive+0x2ae>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d014      	beq.n	800509a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005096:	2301      	movs	r3, #1
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800509a:	f7fd facd 	bl	8002638 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d803      	bhi.n	80050b2 <HAL_SPI_TransmitReceive+0x2c6>
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b0:	d102      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x2cc>
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d103      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050be:	e029      	b.n	8005114 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1a2      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x224>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d19d      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f8e5 	bl	80052a8 <SPI_EndRxTxTransaction>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d006      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050f0:	e010      	b.n	8005114 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	e000      	b.n	8005114 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005112:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005124:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005128:	4618      	mov	r0, r3
 800512a:	3730      	adds	r7, #48	; 0x30
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005140:	e04c      	b.n	80051dc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005148:	d048      	beq.n	80051dc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800514a:	f7fd fa75 	bl	8002638 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d902      	bls.n	8005160 <SPI_WaitFlagStateUntilTimeout+0x30>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d13d      	bne.n	80051dc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800516e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005178:	d111      	bne.n	800519e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005182:	d004      	beq.n	800518e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518c:	d107      	bne.n	800519e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a6:	d10f      	bne.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e00f      	b.n	80051fc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4013      	ands	r3, r2
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d1a3      	bne.n	8005142 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005218:	d111      	bne.n	800523e <SPI_EndRxTransaction+0x3a>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005222:	d004      	beq.n	800522e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800522c:	d107      	bne.n	800523e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005246:	d117      	bne.n	8005278 <SPI_EndRxTransaction+0x74>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005250:	d112      	bne.n	8005278 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2200      	movs	r2, #0
 800525a:	2101      	movs	r1, #1
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff ff67 	bl	8005130 <SPI_WaitFlagStateUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01a      	beq.n	800529e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e013      	b.n	80052a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2200      	movs	r2, #0
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff ff54 	bl	8005130 <SPI_WaitFlagStateUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e000      	b.n	80052a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2200      	movs	r2, #0
 80052bc:	2180      	movs	r1, #128	; 0x80
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff ff36 	bl	8005130 <SPI_WaitFlagStateUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f043 0220 	orr.w	r2, r3, #32
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e000      	b.n	80052dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e01d      	b.n	8005332 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fd f85a 	bl	80023c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f000 fa32 	bl	800578c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b06      	cmp	r3, #6
 800535a:	d007      	beq.n	800536c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b06      	cmp	r3, #6
 80053a8:	d007      	beq.n	80053ba <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d122      	bne.n	8005422 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d11b      	bne.n	8005422 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f06f 0202 	mvn.w	r2, #2
 80053f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f9a4 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 800540e:	e005      	b.n	800541c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f997 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f9a6 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b04      	cmp	r3, #4
 800542e:	d122      	bne.n	8005476 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b04      	cmp	r3, #4
 800543c:	d11b      	bne.n	8005476 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0204 	mvn.w	r2, #4
 8005446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f97a 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 8005462:	e005      	b.n	8005470 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f96d 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f97c 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b08      	cmp	r3, #8
 8005482:	d122      	bne.n	80054ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b08      	cmp	r3, #8
 8005490:	d11b      	bne.n	80054ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f06f 0208 	mvn.w	r2, #8
 800549a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2204      	movs	r2, #4
 80054a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f950 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 80054b6:	e005      	b.n	80054c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f943 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f952 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d122      	bne.n	800551e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d11b      	bne.n	800551e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f06f 0210 	mvn.w	r2, #16
 80054ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2208      	movs	r2, #8
 80054f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f926 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 800550a:	e005      	b.n	8005518 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f919 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f928 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b01      	cmp	r3, #1
 800552a:	d10e      	bne.n	800554a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f06f 0201 	mvn.w	r2, #1
 8005542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7fc f92f 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d10e      	bne.n	8005576 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005562:	2b80      	cmp	r3, #128	; 0x80
 8005564:	d107      	bne.n	8005576 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800556e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fa50 	bl	8005a16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d10e      	bne.n	80055a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d107      	bne.n	80055a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800559a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f8ec 	bl	800577a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d10e      	bne.n	80055ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	d107      	bne.n	80055ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f06f 0220 	mvn.w	r2, #32
 80055c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fa1b 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_TIM_ConfigClockSource+0x18>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e0a6      	b.n	800573c <HAL_TIM_ConfigClockSource+0x166>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800560c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005614:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d067      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x120>
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d80b      	bhi.n	8005642 <HAL_TIM_ConfigClockSource+0x6c>
 800562a:	2b10      	cmp	r3, #16
 800562c:	d073      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x140>
 800562e:	2b10      	cmp	r3, #16
 8005630:	d802      	bhi.n	8005638 <HAL_TIM_ConfigClockSource+0x62>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d06f      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005636:	e078      	b.n	800572a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005638:	2b20      	cmp	r3, #32
 800563a:	d06c      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x140>
 800563c:	2b30      	cmp	r3, #48	; 0x30
 800563e:	d06a      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005640:	e073      	b.n	800572a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005642:	2b70      	cmp	r3, #112	; 0x70
 8005644:	d00d      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x8c>
 8005646:	2b70      	cmp	r3, #112	; 0x70
 8005648:	d804      	bhi.n	8005654 <HAL_TIM_ConfigClockSource+0x7e>
 800564a:	2b50      	cmp	r3, #80	; 0x50
 800564c:	d033      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0xe0>
 800564e:	2b60      	cmp	r3, #96	; 0x60
 8005650:	d041      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005652:	e06a      	b.n	800572a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005658:	d066      	beq.n	8005728 <HAL_TIM_ConfigClockSource+0x152>
 800565a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565e:	d017      	beq.n	8005690 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005660:	e063      	b.n	800572a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6899      	ldr	r1, [r3, #8]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f000 f964 	bl	800593e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005684:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	609a      	str	r2, [r3, #8]
      break;
 800568e:	e04c      	b.n	800572a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	6899      	ldr	r1, [r3, #8]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f000 f94d 	bl	800593e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056b2:	609a      	str	r2, [r3, #8]
      break;
 80056b4:	e039      	b.n	800572a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 f8c4 	bl	8005850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2150      	movs	r1, #80	; 0x50
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f91b 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 80056d4:	e029      	b.n	800572a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6859      	ldr	r1, [r3, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f000 f8e2 	bl	80058ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2160      	movs	r1, #96	; 0x60
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f90b 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 80056f4:	e019      	b.n	800572a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	461a      	mov	r2, r3
 8005704:	f000 f8a4 	bl	8005850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2140      	movs	r1, #64	; 0x40
 800570e:	4618      	mov	r0, r3
 8005710:	f000 f8fb 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 8005714:	e009      	b.n	800572a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f000 f8f2 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 8005726:	e000      	b.n	800572a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005728:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a29      	ldr	r2, [pc, #164]	; (8005844 <TIM_Base_SetConfig+0xb8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00b      	beq.n	80057bc <TIM_Base_SetConfig+0x30>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057aa:	d007      	beq.n	80057bc <TIM_Base_SetConfig+0x30>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a26      	ldr	r2, [pc, #152]	; (8005848 <TIM_Base_SetConfig+0xbc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_Base_SetConfig+0x30>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a25      	ldr	r2, [pc, #148]	; (800584c <TIM_Base_SetConfig+0xc0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d108      	bne.n	80057ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a1c      	ldr	r2, [pc, #112]	; (8005844 <TIM_Base_SetConfig+0xb8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00b      	beq.n	80057ee <TIM_Base_SetConfig+0x62>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057dc:	d007      	beq.n	80057ee <TIM_Base_SetConfig+0x62>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a19      	ldr	r2, [pc, #100]	; (8005848 <TIM_Base_SetConfig+0xbc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_Base_SetConfig+0x62>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a18      	ldr	r2, [pc, #96]	; (800584c <TIM_Base_SetConfig+0xc0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d108      	bne.n	8005800 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a07      	ldr	r2, [pc, #28]	; (8005844 <TIM_Base_SetConfig+0xb8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d103      	bne.n	8005834 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	615a      	str	r2, [r3, #20]
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr
 8005844:	40012c00 	.word	0x40012c00
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800

08005850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0201 	bic.w	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800587a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f023 030a 	bic.w	r3, r3, #10
 800588c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	621a      	str	r2, [r3, #32]
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr

080058ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f023 0210 	bic.w	r2, r3, #16
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	031b      	lsls	r3, r3, #12
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	621a      	str	r2, [r3, #32]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr

0800590a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800590a:	b480      	push	{r7}
 800590c:	b085      	sub	sp, #20
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	f043 0307 	orr.w	r3, r3, #7
 800592c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	609a      	str	r2, [r3, #8]
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr

0800593e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005958:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	021a      	lsls	r2, r3, #8
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	431a      	orrs	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4313      	orrs	r3, r2
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	609a      	str	r2, [r3, #8]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005990:	2302      	movs	r3, #2
 8005992:	e032      	b.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059cc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e03f      	b.n	8005aba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fc fd1a 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2224      	movs	r2, #36	; 0x24
 8005a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f829 	bl	8005ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005afe:	f023 030c 	bic.w	r3, r3, #12
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a52      	ldr	r2, [pc, #328]	; (8005c70 <UART_SetConfig+0x1ac>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d14e      	bne.n	8005bca <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b2c:	f7fd fe48 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8005b30:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009a      	lsls	r2, r3, #2
 8005b3c:	441a      	add	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	4a4a      	ldr	r2, [pc, #296]	; (8005c74 <UART_SetConfig+0x1b0>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	0119      	lsls	r1, r3, #4
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009a      	lsls	r2, r3, #2
 8005b5c:	441a      	add	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b68:	4b42      	ldr	r3, [pc, #264]	; (8005c74 <UART_SetConfig+0x1b0>)
 8005b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	2064      	movs	r0, #100	; 0x64
 8005b72:	fb00 f303 	mul.w	r3, r0, r3
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	3332      	adds	r3, #50	; 0x32
 8005b7c:	4a3d      	ldr	r2, [pc, #244]	; (8005c74 <UART_SetConfig+0x1b0>)
 8005b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b88:	4419      	add	r1, r3
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009a      	lsls	r2, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ba0:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <UART_SetConfig+0x1b0>)
 8005ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2064      	movs	r0, #100	; 0x64
 8005baa:	fb00 f303 	mul.w	r3, r0, r3
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	3332      	adds	r3, #50	; 0x32
 8005bb4:	4a2f      	ldr	r2, [pc, #188]	; (8005c74 <UART_SetConfig+0x1b0>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	f003 020f 	and.w	r2, r3, #15
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005bc8:	e04d      	b.n	8005c66 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bca:	f7fd fde5 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8005bce:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009a      	lsls	r2, r3, #2
 8005bda:	441a      	add	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be6:	4a23      	ldr	r2, [pc, #140]	; (8005c74 <UART_SetConfig+0x1b0>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	0119      	lsls	r1, r3, #4
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009a      	lsls	r2, r3, #2
 8005bfa:	441a      	add	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c06:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <UART_SetConfig+0x1b0>)
 8005c08:	fba3 0302 	umull	r0, r3, r3, r2
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	2064      	movs	r0, #100	; 0x64
 8005c10:	fb00 f303 	mul.w	r3, r0, r3
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	3332      	adds	r3, #50	; 0x32
 8005c1a:	4a16      	ldr	r2, [pc, #88]	; (8005c74 <UART_SetConfig+0x1b0>)
 8005c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c26:	4419      	add	r1, r3
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	009a      	lsls	r2, r3, #2
 8005c32:	441a      	add	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <UART_SetConfig+0x1b0>)
 8005c40:	fba3 0302 	umull	r0, r3, r3, r2
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	2064      	movs	r0, #100	; 0x64
 8005c48:	fb00 f303 	mul.w	r3, r0, r3
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	3332      	adds	r3, #50	; 0x32
 8005c52:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <UART_SetConfig+0x1b0>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	f003 020f 	and.w	r2, r3, #15
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	440a      	add	r2, r1
 8005c64:	609a      	str	r2, [r3, #8]
}
 8005c66:	bf00      	nop
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40013800 	.word	0x40013800
 8005c74:	51eb851f 	.word	0x51eb851f

08005c78 <__errno>:
 8005c78:	4b01      	ldr	r3, [pc, #4]	; (8005c80 <__errno+0x8>)
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000084 	.word	0x20000084

08005c84 <__libc_init_array>:
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	2500      	movs	r5, #0
 8005c88:	4e0c      	ldr	r6, [pc, #48]	; (8005cbc <__libc_init_array+0x38>)
 8005c8a:	4c0d      	ldr	r4, [pc, #52]	; (8005cc0 <__libc_init_array+0x3c>)
 8005c8c:	1ba4      	subs	r4, r4, r6
 8005c8e:	10a4      	asrs	r4, r4, #2
 8005c90:	42a5      	cmp	r5, r4
 8005c92:	d109      	bne.n	8005ca8 <__libc_init_array+0x24>
 8005c94:	f000 fc34 	bl	8006500 <_init>
 8005c98:	2500      	movs	r5, #0
 8005c9a:	4e0a      	ldr	r6, [pc, #40]	; (8005cc4 <__libc_init_array+0x40>)
 8005c9c:	4c0a      	ldr	r4, [pc, #40]	; (8005cc8 <__libc_init_array+0x44>)
 8005c9e:	1ba4      	subs	r4, r4, r6
 8005ca0:	10a4      	asrs	r4, r4, #2
 8005ca2:	42a5      	cmp	r5, r4
 8005ca4:	d105      	bne.n	8005cb2 <__libc_init_array+0x2e>
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
 8005ca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cac:	4798      	blx	r3
 8005cae:	3501      	adds	r5, #1
 8005cb0:	e7ee      	b.n	8005c90 <__libc_init_array+0xc>
 8005cb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cb6:	4798      	blx	r3
 8005cb8:	3501      	adds	r5, #1
 8005cba:	e7f2      	b.n	8005ca2 <__libc_init_array+0x1e>
 8005cbc:	08006784 	.word	0x08006784
 8005cc0:	08006784 	.word	0x08006784
 8005cc4:	08006784 	.word	0x08006784
 8005cc8:	08006788 	.word	0x08006788

08005ccc <memset>:
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4402      	add	r2, r0
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d100      	bne.n	8005cd6 <memset+0xa>
 8005cd4:	4770      	bx	lr
 8005cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cda:	e7f9      	b.n	8005cd0 <memset+0x4>

08005cdc <siprintf>:
 8005cdc:	b40e      	push	{r1, r2, r3}
 8005cde:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ce2:	b500      	push	{lr}
 8005ce4:	b09c      	sub	sp, #112	; 0x70
 8005ce6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ce8:	9002      	str	r0, [sp, #8]
 8005cea:	9006      	str	r0, [sp, #24]
 8005cec:	9107      	str	r1, [sp, #28]
 8005cee:	9104      	str	r1, [sp, #16]
 8005cf0:	4808      	ldr	r0, [pc, #32]	; (8005d14 <siprintf+0x38>)
 8005cf2:	4909      	ldr	r1, [pc, #36]	; (8005d18 <siprintf+0x3c>)
 8005cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cf8:	9105      	str	r1, [sp, #20]
 8005cfa:	6800      	ldr	r0, [r0, #0]
 8005cfc:	a902      	add	r1, sp, #8
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	f000 f866 	bl	8005dd0 <_svfiprintf_r>
 8005d04:	2200      	movs	r2, #0
 8005d06:	9b02      	ldr	r3, [sp, #8]
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	b01c      	add	sp, #112	; 0x70
 8005d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d10:	b003      	add	sp, #12
 8005d12:	4770      	bx	lr
 8005d14:	20000084 	.word	0x20000084
 8005d18:	ffff0208 	.word	0xffff0208

08005d1c <__ssputs_r>:
 8005d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	688e      	ldr	r6, [r1, #8]
 8005d22:	4682      	mov	sl, r0
 8005d24:	429e      	cmp	r6, r3
 8005d26:	460c      	mov	r4, r1
 8005d28:	4690      	mov	r8, r2
 8005d2a:	4699      	mov	r9, r3
 8005d2c:	d837      	bhi.n	8005d9e <__ssputs_r+0x82>
 8005d2e:	898a      	ldrh	r2, [r1, #12]
 8005d30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d34:	d031      	beq.n	8005d9a <__ssputs_r+0x7e>
 8005d36:	2302      	movs	r3, #2
 8005d38:	6825      	ldr	r5, [r4, #0]
 8005d3a:	6909      	ldr	r1, [r1, #16]
 8005d3c:	1a6f      	subs	r7, r5, r1
 8005d3e:	6965      	ldr	r5, [r4, #20]
 8005d40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d44:	fb95 f5f3 	sdiv	r5, r5, r3
 8005d48:	f109 0301 	add.w	r3, r9, #1
 8005d4c:	443b      	add	r3, r7
 8005d4e:	429d      	cmp	r5, r3
 8005d50:	bf38      	it	cc
 8005d52:	461d      	movcc	r5, r3
 8005d54:	0553      	lsls	r3, r2, #21
 8005d56:	d530      	bpl.n	8005dba <__ssputs_r+0x9e>
 8005d58:	4629      	mov	r1, r5
 8005d5a:	f000 fb37 	bl	80063cc <_malloc_r>
 8005d5e:	4606      	mov	r6, r0
 8005d60:	b950      	cbnz	r0, 8005d78 <__ssputs_r+0x5c>
 8005d62:	230c      	movs	r3, #12
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d68:	f8ca 3000 	str.w	r3, [sl]
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d72:	81a3      	strh	r3, [r4, #12]
 8005d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d78:	463a      	mov	r2, r7
 8005d7a:	6921      	ldr	r1, [r4, #16]
 8005d7c:	f000 fab6 	bl	80062ec <memcpy>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	6126      	str	r6, [r4, #16]
 8005d8e:	443e      	add	r6, r7
 8005d90:	6026      	str	r6, [r4, #0]
 8005d92:	464e      	mov	r6, r9
 8005d94:	6165      	str	r5, [r4, #20]
 8005d96:	1bed      	subs	r5, r5, r7
 8005d98:	60a5      	str	r5, [r4, #8]
 8005d9a:	454e      	cmp	r6, r9
 8005d9c:	d900      	bls.n	8005da0 <__ssputs_r+0x84>
 8005d9e:	464e      	mov	r6, r9
 8005da0:	4632      	mov	r2, r6
 8005da2:	4641      	mov	r1, r8
 8005da4:	6820      	ldr	r0, [r4, #0]
 8005da6:	f000 faac 	bl	8006302 <memmove>
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	2000      	movs	r0, #0
 8005dae:	1b9b      	subs	r3, r3, r6
 8005db0:	60a3      	str	r3, [r4, #8]
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	441e      	add	r6, r3
 8005db6:	6026      	str	r6, [r4, #0]
 8005db8:	e7dc      	b.n	8005d74 <__ssputs_r+0x58>
 8005dba:	462a      	mov	r2, r5
 8005dbc:	f000 fb60 	bl	8006480 <_realloc_r>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d1e2      	bne.n	8005d8c <__ssputs_r+0x70>
 8005dc6:	6921      	ldr	r1, [r4, #16]
 8005dc8:	4650      	mov	r0, sl
 8005dca:	f000 fab3 	bl	8006334 <_free_r>
 8005dce:	e7c8      	b.n	8005d62 <__ssputs_r+0x46>

08005dd0 <_svfiprintf_r>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	461d      	mov	r5, r3
 8005dd6:	898b      	ldrh	r3, [r1, #12]
 8005dd8:	b09d      	sub	sp, #116	; 0x74
 8005dda:	061f      	lsls	r7, r3, #24
 8005ddc:	4680      	mov	r8, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	4616      	mov	r6, r2
 8005de2:	d50f      	bpl.n	8005e04 <_svfiprintf_r+0x34>
 8005de4:	690b      	ldr	r3, [r1, #16]
 8005de6:	b96b      	cbnz	r3, 8005e04 <_svfiprintf_r+0x34>
 8005de8:	2140      	movs	r1, #64	; 0x40
 8005dea:	f000 faef 	bl	80063cc <_malloc_r>
 8005dee:	6020      	str	r0, [r4, #0]
 8005df0:	6120      	str	r0, [r4, #16]
 8005df2:	b928      	cbnz	r0, 8005e00 <_svfiprintf_r+0x30>
 8005df4:	230c      	movs	r3, #12
 8005df6:	f8c8 3000 	str.w	r3, [r8]
 8005dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dfe:	e0c8      	b.n	8005f92 <_svfiprintf_r+0x1c2>
 8005e00:	2340      	movs	r3, #64	; 0x40
 8005e02:	6163      	str	r3, [r4, #20]
 8005e04:	2300      	movs	r3, #0
 8005e06:	9309      	str	r3, [sp, #36]	; 0x24
 8005e08:	2320      	movs	r3, #32
 8005e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e0e:	2330      	movs	r3, #48	; 0x30
 8005e10:	f04f 0b01 	mov.w	fp, #1
 8005e14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e18:	9503      	str	r5, [sp, #12]
 8005e1a:	4637      	mov	r7, r6
 8005e1c:	463d      	mov	r5, r7
 8005e1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e22:	b10b      	cbz	r3, 8005e28 <_svfiprintf_r+0x58>
 8005e24:	2b25      	cmp	r3, #37	; 0x25
 8005e26:	d13e      	bne.n	8005ea6 <_svfiprintf_r+0xd6>
 8005e28:	ebb7 0a06 	subs.w	sl, r7, r6
 8005e2c:	d00b      	beq.n	8005e46 <_svfiprintf_r+0x76>
 8005e2e:	4653      	mov	r3, sl
 8005e30:	4632      	mov	r2, r6
 8005e32:	4621      	mov	r1, r4
 8005e34:	4640      	mov	r0, r8
 8005e36:	f7ff ff71 	bl	8005d1c <__ssputs_r>
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f000 80a4 	beq.w	8005f88 <_svfiprintf_r+0x1b8>
 8005e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e42:	4453      	add	r3, sl
 8005e44:	9309      	str	r3, [sp, #36]	; 0x24
 8005e46:	783b      	ldrb	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 809d 	beq.w	8005f88 <_svfiprintf_r+0x1b8>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	9307      	str	r3, [sp, #28]
 8005e5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e60:	931a      	str	r3, [sp, #104]	; 0x68
 8005e62:	462f      	mov	r7, r5
 8005e64:	2205      	movs	r2, #5
 8005e66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005e6a:	4850      	ldr	r0, [pc, #320]	; (8005fac <_svfiprintf_r+0x1dc>)
 8005e6c:	f000 fa30 	bl	80062d0 <memchr>
 8005e70:	9b04      	ldr	r3, [sp, #16]
 8005e72:	b9d0      	cbnz	r0, 8005eaa <_svfiprintf_r+0xda>
 8005e74:	06d9      	lsls	r1, r3, #27
 8005e76:	bf44      	itt	mi
 8005e78:	2220      	movmi	r2, #32
 8005e7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e7e:	071a      	lsls	r2, r3, #28
 8005e80:	bf44      	itt	mi
 8005e82:	222b      	movmi	r2, #43	; 0x2b
 8005e84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e88:	782a      	ldrb	r2, [r5, #0]
 8005e8a:	2a2a      	cmp	r2, #42	; 0x2a
 8005e8c:	d015      	beq.n	8005eba <_svfiprintf_r+0xea>
 8005e8e:	462f      	mov	r7, r5
 8005e90:	2000      	movs	r0, #0
 8005e92:	250a      	movs	r5, #10
 8005e94:	9a07      	ldr	r2, [sp, #28]
 8005e96:	4639      	mov	r1, r7
 8005e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e9c:	3b30      	subs	r3, #48	; 0x30
 8005e9e:	2b09      	cmp	r3, #9
 8005ea0:	d94d      	bls.n	8005f3e <_svfiprintf_r+0x16e>
 8005ea2:	b1b8      	cbz	r0, 8005ed4 <_svfiprintf_r+0x104>
 8005ea4:	e00f      	b.n	8005ec6 <_svfiprintf_r+0xf6>
 8005ea6:	462f      	mov	r7, r5
 8005ea8:	e7b8      	b.n	8005e1c <_svfiprintf_r+0x4c>
 8005eaa:	4a40      	ldr	r2, [pc, #256]	; (8005fac <_svfiprintf_r+0x1dc>)
 8005eac:	463d      	mov	r5, r7
 8005eae:	1a80      	subs	r0, r0, r2
 8005eb0:	fa0b f000 	lsl.w	r0, fp, r0
 8005eb4:	4318      	orrs	r0, r3
 8005eb6:	9004      	str	r0, [sp, #16]
 8005eb8:	e7d3      	b.n	8005e62 <_svfiprintf_r+0x92>
 8005eba:	9a03      	ldr	r2, [sp, #12]
 8005ebc:	1d11      	adds	r1, r2, #4
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	9103      	str	r1, [sp, #12]
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	db01      	blt.n	8005eca <_svfiprintf_r+0xfa>
 8005ec6:	9207      	str	r2, [sp, #28]
 8005ec8:	e004      	b.n	8005ed4 <_svfiprintf_r+0x104>
 8005eca:	4252      	negs	r2, r2
 8005ecc:	f043 0302 	orr.w	r3, r3, #2
 8005ed0:	9207      	str	r2, [sp, #28]
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	783b      	ldrb	r3, [r7, #0]
 8005ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ed8:	d10c      	bne.n	8005ef4 <_svfiprintf_r+0x124>
 8005eda:	787b      	ldrb	r3, [r7, #1]
 8005edc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ede:	d133      	bne.n	8005f48 <_svfiprintf_r+0x178>
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	3702      	adds	r7, #2
 8005ee4:	1d1a      	adds	r2, r3, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	9203      	str	r2, [sp, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	bfb8      	it	lt
 8005eee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ef2:	9305      	str	r3, [sp, #20]
 8005ef4:	4d2e      	ldr	r5, [pc, #184]	; (8005fb0 <_svfiprintf_r+0x1e0>)
 8005ef6:	2203      	movs	r2, #3
 8005ef8:	7839      	ldrb	r1, [r7, #0]
 8005efa:	4628      	mov	r0, r5
 8005efc:	f000 f9e8 	bl	80062d0 <memchr>
 8005f00:	b138      	cbz	r0, 8005f12 <_svfiprintf_r+0x142>
 8005f02:	2340      	movs	r3, #64	; 0x40
 8005f04:	1b40      	subs	r0, r0, r5
 8005f06:	fa03 f000 	lsl.w	r0, r3, r0
 8005f0a:	9b04      	ldr	r3, [sp, #16]
 8005f0c:	3701      	adds	r7, #1
 8005f0e:	4303      	orrs	r3, r0
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	7839      	ldrb	r1, [r7, #0]
 8005f14:	2206      	movs	r2, #6
 8005f16:	4827      	ldr	r0, [pc, #156]	; (8005fb4 <_svfiprintf_r+0x1e4>)
 8005f18:	1c7e      	adds	r6, r7, #1
 8005f1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f1e:	f000 f9d7 	bl	80062d0 <memchr>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d038      	beq.n	8005f98 <_svfiprintf_r+0x1c8>
 8005f26:	4b24      	ldr	r3, [pc, #144]	; (8005fb8 <_svfiprintf_r+0x1e8>)
 8005f28:	bb13      	cbnz	r3, 8005f70 <_svfiprintf_r+0x1a0>
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	3307      	adds	r3, #7
 8005f2e:	f023 0307 	bic.w	r3, r3, #7
 8005f32:	3308      	adds	r3, #8
 8005f34:	9303      	str	r3, [sp, #12]
 8005f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f38:	444b      	add	r3, r9
 8005f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3c:	e76d      	b.n	8005e1a <_svfiprintf_r+0x4a>
 8005f3e:	fb05 3202 	mla	r2, r5, r2, r3
 8005f42:	2001      	movs	r0, #1
 8005f44:	460f      	mov	r7, r1
 8005f46:	e7a6      	b.n	8005e96 <_svfiprintf_r+0xc6>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	250a      	movs	r5, #10
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	3701      	adds	r7, #1
 8005f50:	9305      	str	r3, [sp, #20]
 8005f52:	4638      	mov	r0, r7
 8005f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f58:	3a30      	subs	r2, #48	; 0x30
 8005f5a:	2a09      	cmp	r2, #9
 8005f5c:	d903      	bls.n	8005f66 <_svfiprintf_r+0x196>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0c8      	beq.n	8005ef4 <_svfiprintf_r+0x124>
 8005f62:	9105      	str	r1, [sp, #20]
 8005f64:	e7c6      	b.n	8005ef4 <_svfiprintf_r+0x124>
 8005f66:	fb05 2101 	mla	r1, r5, r1, r2
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4607      	mov	r7, r0
 8005f6e:	e7f0      	b.n	8005f52 <_svfiprintf_r+0x182>
 8005f70:	ab03      	add	r3, sp, #12
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	4622      	mov	r2, r4
 8005f76:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <_svfiprintf_r+0x1ec>)
 8005f78:	a904      	add	r1, sp, #16
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	f3af 8000 	nop.w
 8005f80:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005f84:	4681      	mov	r9, r0
 8005f86:	d1d6      	bne.n	8005f36 <_svfiprintf_r+0x166>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	065b      	lsls	r3, r3, #25
 8005f8c:	f53f af35 	bmi.w	8005dfa <_svfiprintf_r+0x2a>
 8005f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f92:	b01d      	add	sp, #116	; 0x74
 8005f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f98:	ab03      	add	r3, sp, #12
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <_svfiprintf_r+0x1ec>)
 8005fa0:	a904      	add	r1, sp, #16
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	f000 f882 	bl	80060ac <_printf_i>
 8005fa8:	e7ea      	b.n	8005f80 <_svfiprintf_r+0x1b0>
 8005faa:	bf00      	nop
 8005fac:	08006750 	.word	0x08006750
 8005fb0:	08006756 	.word	0x08006756
 8005fb4:	0800675a 	.word	0x0800675a
 8005fb8:	00000000 	.word	0x00000000
 8005fbc:	08005d1d 	.word	0x08005d1d

08005fc0 <_printf_common>:
 8005fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	4691      	mov	r9, r2
 8005fc6:	461f      	mov	r7, r3
 8005fc8:	688a      	ldr	r2, [r1, #8]
 8005fca:	690b      	ldr	r3, [r1, #16]
 8005fcc:	4606      	mov	r6, r0
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	bfb8      	it	lt
 8005fd2:	4613      	movlt	r3, r2
 8005fd4:	f8c9 3000 	str.w	r3, [r9]
 8005fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fdc:	460c      	mov	r4, r1
 8005fde:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fe2:	b112      	cbz	r2, 8005fea <_printf_common+0x2a>
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	f8c9 3000 	str.w	r3, [r9]
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	0699      	lsls	r1, r3, #26
 8005fee:	bf42      	ittt	mi
 8005ff0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ff4:	3302      	addmi	r3, #2
 8005ff6:	f8c9 3000 	strmi.w	r3, [r9]
 8005ffa:	6825      	ldr	r5, [r4, #0]
 8005ffc:	f015 0506 	ands.w	r5, r5, #6
 8006000:	d107      	bne.n	8006012 <_printf_common+0x52>
 8006002:	f104 0a19 	add.w	sl, r4, #25
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	f8d9 2000 	ldr.w	r2, [r9]
 800600c:	1a9b      	subs	r3, r3, r2
 800600e:	42ab      	cmp	r3, r5
 8006010:	dc29      	bgt.n	8006066 <_printf_common+0xa6>
 8006012:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	3300      	adds	r3, #0
 800601a:	bf18      	it	ne
 800601c:	2301      	movne	r3, #1
 800601e:	0692      	lsls	r2, r2, #26
 8006020:	d42e      	bmi.n	8006080 <_printf_common+0xc0>
 8006022:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006026:	4639      	mov	r1, r7
 8006028:	4630      	mov	r0, r6
 800602a:	47c0      	blx	r8
 800602c:	3001      	adds	r0, #1
 800602e:	d021      	beq.n	8006074 <_printf_common+0xb4>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	68e5      	ldr	r5, [r4, #12]
 8006034:	f003 0306 	and.w	r3, r3, #6
 8006038:	2b04      	cmp	r3, #4
 800603a:	bf18      	it	ne
 800603c:	2500      	movne	r5, #0
 800603e:	f8d9 2000 	ldr.w	r2, [r9]
 8006042:	f04f 0900 	mov.w	r9, #0
 8006046:	bf08      	it	eq
 8006048:	1aad      	subeq	r5, r5, r2
 800604a:	68a3      	ldr	r3, [r4, #8]
 800604c:	6922      	ldr	r2, [r4, #16]
 800604e:	bf08      	it	eq
 8006050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006054:	4293      	cmp	r3, r2
 8006056:	bfc4      	itt	gt
 8006058:	1a9b      	subgt	r3, r3, r2
 800605a:	18ed      	addgt	r5, r5, r3
 800605c:	341a      	adds	r4, #26
 800605e:	454d      	cmp	r5, r9
 8006060:	d11a      	bne.n	8006098 <_printf_common+0xd8>
 8006062:	2000      	movs	r0, #0
 8006064:	e008      	b.n	8006078 <_printf_common+0xb8>
 8006066:	2301      	movs	r3, #1
 8006068:	4652      	mov	r2, sl
 800606a:	4639      	mov	r1, r7
 800606c:	4630      	mov	r0, r6
 800606e:	47c0      	blx	r8
 8006070:	3001      	adds	r0, #1
 8006072:	d103      	bne.n	800607c <_printf_common+0xbc>
 8006074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607c:	3501      	adds	r5, #1
 800607e:	e7c2      	b.n	8006006 <_printf_common+0x46>
 8006080:	2030      	movs	r0, #48	; 0x30
 8006082:	18e1      	adds	r1, r4, r3
 8006084:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800608e:	4422      	add	r2, r4
 8006090:	3302      	adds	r3, #2
 8006092:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006096:	e7c4      	b.n	8006022 <_printf_common+0x62>
 8006098:	2301      	movs	r3, #1
 800609a:	4622      	mov	r2, r4
 800609c:	4639      	mov	r1, r7
 800609e:	4630      	mov	r0, r6
 80060a0:	47c0      	blx	r8
 80060a2:	3001      	adds	r0, #1
 80060a4:	d0e6      	beq.n	8006074 <_printf_common+0xb4>
 80060a6:	f109 0901 	add.w	r9, r9, #1
 80060aa:	e7d8      	b.n	800605e <_printf_common+0x9e>

080060ac <_printf_i>:
 80060ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80060b4:	460c      	mov	r4, r1
 80060b6:	7e09      	ldrb	r1, [r1, #24]
 80060b8:	b085      	sub	sp, #20
 80060ba:	296e      	cmp	r1, #110	; 0x6e
 80060bc:	4617      	mov	r7, r2
 80060be:	4606      	mov	r6, r0
 80060c0:	4698      	mov	r8, r3
 80060c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060c4:	f000 80b3 	beq.w	800622e <_printf_i+0x182>
 80060c8:	d822      	bhi.n	8006110 <_printf_i+0x64>
 80060ca:	2963      	cmp	r1, #99	; 0x63
 80060cc:	d036      	beq.n	800613c <_printf_i+0x90>
 80060ce:	d80a      	bhi.n	80060e6 <_printf_i+0x3a>
 80060d0:	2900      	cmp	r1, #0
 80060d2:	f000 80b9 	beq.w	8006248 <_printf_i+0x19c>
 80060d6:	2958      	cmp	r1, #88	; 0x58
 80060d8:	f000 8083 	beq.w	80061e2 <_printf_i+0x136>
 80060dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80060e4:	e032      	b.n	800614c <_printf_i+0xa0>
 80060e6:	2964      	cmp	r1, #100	; 0x64
 80060e8:	d001      	beq.n	80060ee <_printf_i+0x42>
 80060ea:	2969      	cmp	r1, #105	; 0x69
 80060ec:	d1f6      	bne.n	80060dc <_printf_i+0x30>
 80060ee:	6820      	ldr	r0, [r4, #0]
 80060f0:	6813      	ldr	r3, [r2, #0]
 80060f2:	0605      	lsls	r5, r0, #24
 80060f4:	f103 0104 	add.w	r1, r3, #4
 80060f8:	d52a      	bpl.n	8006150 <_printf_i+0xa4>
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6011      	str	r1, [r2, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	da03      	bge.n	800610a <_printf_i+0x5e>
 8006102:	222d      	movs	r2, #45	; 0x2d
 8006104:	425b      	negs	r3, r3
 8006106:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800610a:	486f      	ldr	r0, [pc, #444]	; (80062c8 <_printf_i+0x21c>)
 800610c:	220a      	movs	r2, #10
 800610e:	e039      	b.n	8006184 <_printf_i+0xd8>
 8006110:	2973      	cmp	r1, #115	; 0x73
 8006112:	f000 809d 	beq.w	8006250 <_printf_i+0x1a4>
 8006116:	d808      	bhi.n	800612a <_printf_i+0x7e>
 8006118:	296f      	cmp	r1, #111	; 0x6f
 800611a:	d020      	beq.n	800615e <_printf_i+0xb2>
 800611c:	2970      	cmp	r1, #112	; 0x70
 800611e:	d1dd      	bne.n	80060dc <_printf_i+0x30>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	f043 0320 	orr.w	r3, r3, #32
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	e003      	b.n	8006132 <_printf_i+0x86>
 800612a:	2975      	cmp	r1, #117	; 0x75
 800612c:	d017      	beq.n	800615e <_printf_i+0xb2>
 800612e:	2978      	cmp	r1, #120	; 0x78
 8006130:	d1d4      	bne.n	80060dc <_printf_i+0x30>
 8006132:	2378      	movs	r3, #120	; 0x78
 8006134:	4865      	ldr	r0, [pc, #404]	; (80062cc <_printf_i+0x220>)
 8006136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800613a:	e055      	b.n	80061e8 <_printf_i+0x13c>
 800613c:	6813      	ldr	r3, [r2, #0]
 800613e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006142:	1d19      	adds	r1, r3, #4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6011      	str	r1, [r2, #0]
 8006148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800614c:	2301      	movs	r3, #1
 800614e:	e08c      	b.n	800626a <_printf_i+0x1be>
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006156:	6011      	str	r1, [r2, #0]
 8006158:	bf18      	it	ne
 800615a:	b21b      	sxthne	r3, r3
 800615c:	e7cf      	b.n	80060fe <_printf_i+0x52>
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	6825      	ldr	r5, [r4, #0]
 8006162:	1d18      	adds	r0, r3, #4
 8006164:	6010      	str	r0, [r2, #0]
 8006166:	0628      	lsls	r0, r5, #24
 8006168:	d501      	bpl.n	800616e <_printf_i+0xc2>
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	e002      	b.n	8006174 <_printf_i+0xc8>
 800616e:	0668      	lsls	r0, r5, #25
 8006170:	d5fb      	bpl.n	800616a <_printf_i+0xbe>
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	296f      	cmp	r1, #111	; 0x6f
 8006176:	bf14      	ite	ne
 8006178:	220a      	movne	r2, #10
 800617a:	2208      	moveq	r2, #8
 800617c:	4852      	ldr	r0, [pc, #328]	; (80062c8 <_printf_i+0x21c>)
 800617e:	2100      	movs	r1, #0
 8006180:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006184:	6865      	ldr	r5, [r4, #4]
 8006186:	2d00      	cmp	r5, #0
 8006188:	60a5      	str	r5, [r4, #8]
 800618a:	f2c0 8095 	blt.w	80062b8 <_printf_i+0x20c>
 800618e:	6821      	ldr	r1, [r4, #0]
 8006190:	f021 0104 	bic.w	r1, r1, #4
 8006194:	6021      	str	r1, [r4, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d13d      	bne.n	8006216 <_printf_i+0x16a>
 800619a:	2d00      	cmp	r5, #0
 800619c:	f040 808e 	bne.w	80062bc <_printf_i+0x210>
 80061a0:	4665      	mov	r5, ip
 80061a2:	2a08      	cmp	r2, #8
 80061a4:	d10b      	bne.n	80061be <_printf_i+0x112>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	07db      	lsls	r3, r3, #31
 80061aa:	d508      	bpl.n	80061be <_printf_i+0x112>
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	6862      	ldr	r2, [r4, #4]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	bfde      	ittt	le
 80061b4:	2330      	movle	r3, #48	; 0x30
 80061b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061ba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80061be:	ebac 0305 	sub.w	r3, ip, r5
 80061c2:	6123      	str	r3, [r4, #16]
 80061c4:	f8cd 8000 	str.w	r8, [sp]
 80061c8:	463b      	mov	r3, r7
 80061ca:	aa03      	add	r2, sp, #12
 80061cc:	4621      	mov	r1, r4
 80061ce:	4630      	mov	r0, r6
 80061d0:	f7ff fef6 	bl	8005fc0 <_printf_common>
 80061d4:	3001      	adds	r0, #1
 80061d6:	d14d      	bne.n	8006274 <_printf_i+0x1c8>
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061dc:	b005      	add	sp, #20
 80061de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061e2:	4839      	ldr	r0, [pc, #228]	; (80062c8 <_printf_i+0x21c>)
 80061e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80061e8:	6813      	ldr	r3, [r2, #0]
 80061ea:	6821      	ldr	r1, [r4, #0]
 80061ec:	1d1d      	adds	r5, r3, #4
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6015      	str	r5, [r2, #0]
 80061f2:	060a      	lsls	r2, r1, #24
 80061f4:	d50b      	bpl.n	800620e <_printf_i+0x162>
 80061f6:	07ca      	lsls	r2, r1, #31
 80061f8:	bf44      	itt	mi
 80061fa:	f041 0120 	orrmi.w	r1, r1, #32
 80061fe:	6021      	strmi	r1, [r4, #0]
 8006200:	b91b      	cbnz	r3, 800620a <_printf_i+0x15e>
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	f022 0220 	bic.w	r2, r2, #32
 8006208:	6022      	str	r2, [r4, #0]
 800620a:	2210      	movs	r2, #16
 800620c:	e7b7      	b.n	800617e <_printf_i+0xd2>
 800620e:	064d      	lsls	r5, r1, #25
 8006210:	bf48      	it	mi
 8006212:	b29b      	uxthmi	r3, r3
 8006214:	e7ef      	b.n	80061f6 <_printf_i+0x14a>
 8006216:	4665      	mov	r5, ip
 8006218:	fbb3 f1f2 	udiv	r1, r3, r2
 800621c:	fb02 3311 	mls	r3, r2, r1, r3
 8006220:	5cc3      	ldrb	r3, [r0, r3]
 8006222:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006226:	460b      	mov	r3, r1
 8006228:	2900      	cmp	r1, #0
 800622a:	d1f5      	bne.n	8006218 <_printf_i+0x16c>
 800622c:	e7b9      	b.n	80061a2 <_printf_i+0xf6>
 800622e:	6813      	ldr	r3, [r2, #0]
 8006230:	6825      	ldr	r5, [r4, #0]
 8006232:	1d18      	adds	r0, r3, #4
 8006234:	6961      	ldr	r1, [r4, #20]
 8006236:	6010      	str	r0, [r2, #0]
 8006238:	0628      	lsls	r0, r5, #24
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	d501      	bpl.n	8006242 <_printf_i+0x196>
 800623e:	6019      	str	r1, [r3, #0]
 8006240:	e002      	b.n	8006248 <_printf_i+0x19c>
 8006242:	066a      	lsls	r2, r5, #25
 8006244:	d5fb      	bpl.n	800623e <_printf_i+0x192>
 8006246:	8019      	strh	r1, [r3, #0]
 8006248:	2300      	movs	r3, #0
 800624a:	4665      	mov	r5, ip
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	e7b9      	b.n	80061c4 <_printf_i+0x118>
 8006250:	6813      	ldr	r3, [r2, #0]
 8006252:	1d19      	adds	r1, r3, #4
 8006254:	6011      	str	r1, [r2, #0]
 8006256:	681d      	ldr	r5, [r3, #0]
 8006258:	6862      	ldr	r2, [r4, #4]
 800625a:	2100      	movs	r1, #0
 800625c:	4628      	mov	r0, r5
 800625e:	f000 f837 	bl	80062d0 <memchr>
 8006262:	b108      	cbz	r0, 8006268 <_printf_i+0x1bc>
 8006264:	1b40      	subs	r0, r0, r5
 8006266:	6060      	str	r0, [r4, #4]
 8006268:	6863      	ldr	r3, [r4, #4]
 800626a:	6123      	str	r3, [r4, #16]
 800626c:	2300      	movs	r3, #0
 800626e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006272:	e7a7      	b.n	80061c4 <_printf_i+0x118>
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	462a      	mov	r2, r5
 8006278:	4639      	mov	r1, r7
 800627a:	4630      	mov	r0, r6
 800627c:	47c0      	blx	r8
 800627e:	3001      	adds	r0, #1
 8006280:	d0aa      	beq.n	80061d8 <_printf_i+0x12c>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	079b      	lsls	r3, r3, #30
 8006286:	d413      	bmi.n	80062b0 <_printf_i+0x204>
 8006288:	68e0      	ldr	r0, [r4, #12]
 800628a:	9b03      	ldr	r3, [sp, #12]
 800628c:	4298      	cmp	r0, r3
 800628e:	bfb8      	it	lt
 8006290:	4618      	movlt	r0, r3
 8006292:	e7a3      	b.n	80061dc <_printf_i+0x130>
 8006294:	2301      	movs	r3, #1
 8006296:	464a      	mov	r2, r9
 8006298:	4639      	mov	r1, r7
 800629a:	4630      	mov	r0, r6
 800629c:	47c0      	blx	r8
 800629e:	3001      	adds	r0, #1
 80062a0:	d09a      	beq.n	80061d8 <_printf_i+0x12c>
 80062a2:	3501      	adds	r5, #1
 80062a4:	68e3      	ldr	r3, [r4, #12]
 80062a6:	9a03      	ldr	r2, [sp, #12]
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	42ab      	cmp	r3, r5
 80062ac:	dcf2      	bgt.n	8006294 <_printf_i+0x1e8>
 80062ae:	e7eb      	b.n	8006288 <_printf_i+0x1dc>
 80062b0:	2500      	movs	r5, #0
 80062b2:	f104 0919 	add.w	r9, r4, #25
 80062b6:	e7f5      	b.n	80062a4 <_printf_i+0x1f8>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1ac      	bne.n	8006216 <_printf_i+0x16a>
 80062bc:	7803      	ldrb	r3, [r0, #0]
 80062be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062c6:	e76c      	b.n	80061a2 <_printf_i+0xf6>
 80062c8:	08006761 	.word	0x08006761
 80062cc:	08006772 	.word	0x08006772

080062d0 <memchr>:
 80062d0:	b510      	push	{r4, lr}
 80062d2:	b2c9      	uxtb	r1, r1
 80062d4:	4402      	add	r2, r0
 80062d6:	4290      	cmp	r0, r2
 80062d8:	4603      	mov	r3, r0
 80062da:	d101      	bne.n	80062e0 <memchr+0x10>
 80062dc:	2300      	movs	r3, #0
 80062de:	e003      	b.n	80062e8 <memchr+0x18>
 80062e0:	781c      	ldrb	r4, [r3, #0]
 80062e2:	3001      	adds	r0, #1
 80062e4:	428c      	cmp	r4, r1
 80062e6:	d1f6      	bne.n	80062d6 <memchr+0x6>
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd10      	pop	{r4, pc}

080062ec <memcpy>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	1e43      	subs	r3, r0, #1
 80062f0:	440a      	add	r2, r1
 80062f2:	4291      	cmp	r1, r2
 80062f4:	d100      	bne.n	80062f8 <memcpy+0xc>
 80062f6:	bd10      	pop	{r4, pc}
 80062f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006300:	e7f7      	b.n	80062f2 <memcpy+0x6>

08006302 <memmove>:
 8006302:	4288      	cmp	r0, r1
 8006304:	b510      	push	{r4, lr}
 8006306:	eb01 0302 	add.w	r3, r1, r2
 800630a:	d807      	bhi.n	800631c <memmove+0x1a>
 800630c:	1e42      	subs	r2, r0, #1
 800630e:	4299      	cmp	r1, r3
 8006310:	d00a      	beq.n	8006328 <memmove+0x26>
 8006312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006316:	f802 4f01 	strb.w	r4, [r2, #1]!
 800631a:	e7f8      	b.n	800630e <memmove+0xc>
 800631c:	4283      	cmp	r3, r0
 800631e:	d9f5      	bls.n	800630c <memmove+0xa>
 8006320:	1881      	adds	r1, r0, r2
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	42d3      	cmn	r3, r2
 8006326:	d100      	bne.n	800632a <memmove+0x28>
 8006328:	bd10      	pop	{r4, pc}
 800632a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800632e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006332:	e7f7      	b.n	8006324 <memmove+0x22>

08006334 <_free_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4605      	mov	r5, r0
 8006338:	2900      	cmp	r1, #0
 800633a:	d043      	beq.n	80063c4 <_free_r+0x90>
 800633c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006340:	1f0c      	subs	r4, r1, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	bfb8      	it	lt
 8006346:	18e4      	addlt	r4, r4, r3
 8006348:	f000 f8d0 	bl	80064ec <__malloc_lock>
 800634c:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <_free_r+0x94>)
 800634e:	6813      	ldr	r3, [r2, #0]
 8006350:	4610      	mov	r0, r2
 8006352:	b933      	cbnz	r3, 8006362 <_free_r+0x2e>
 8006354:	6063      	str	r3, [r4, #4]
 8006356:	6014      	str	r4, [r2, #0]
 8006358:	4628      	mov	r0, r5
 800635a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800635e:	f000 b8c6 	b.w	80064ee <__malloc_unlock>
 8006362:	42a3      	cmp	r3, r4
 8006364:	d90b      	bls.n	800637e <_free_r+0x4a>
 8006366:	6821      	ldr	r1, [r4, #0]
 8006368:	1862      	adds	r2, r4, r1
 800636a:	4293      	cmp	r3, r2
 800636c:	bf01      	itttt	eq
 800636e:	681a      	ldreq	r2, [r3, #0]
 8006370:	685b      	ldreq	r3, [r3, #4]
 8006372:	1852      	addeq	r2, r2, r1
 8006374:	6022      	streq	r2, [r4, #0]
 8006376:	6063      	str	r3, [r4, #4]
 8006378:	6004      	str	r4, [r0, #0]
 800637a:	e7ed      	b.n	8006358 <_free_r+0x24>
 800637c:	4613      	mov	r3, r2
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	b10a      	cbz	r2, 8006386 <_free_r+0x52>
 8006382:	42a2      	cmp	r2, r4
 8006384:	d9fa      	bls.n	800637c <_free_r+0x48>
 8006386:	6819      	ldr	r1, [r3, #0]
 8006388:	1858      	adds	r0, r3, r1
 800638a:	42a0      	cmp	r0, r4
 800638c:	d10b      	bne.n	80063a6 <_free_r+0x72>
 800638e:	6820      	ldr	r0, [r4, #0]
 8006390:	4401      	add	r1, r0
 8006392:	1858      	adds	r0, r3, r1
 8006394:	4282      	cmp	r2, r0
 8006396:	6019      	str	r1, [r3, #0]
 8006398:	d1de      	bne.n	8006358 <_free_r+0x24>
 800639a:	6810      	ldr	r0, [r2, #0]
 800639c:	6852      	ldr	r2, [r2, #4]
 800639e:	4401      	add	r1, r0
 80063a0:	6019      	str	r1, [r3, #0]
 80063a2:	605a      	str	r2, [r3, #4]
 80063a4:	e7d8      	b.n	8006358 <_free_r+0x24>
 80063a6:	d902      	bls.n	80063ae <_free_r+0x7a>
 80063a8:	230c      	movs	r3, #12
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	e7d4      	b.n	8006358 <_free_r+0x24>
 80063ae:	6820      	ldr	r0, [r4, #0]
 80063b0:	1821      	adds	r1, r4, r0
 80063b2:	428a      	cmp	r2, r1
 80063b4:	bf01      	itttt	eq
 80063b6:	6811      	ldreq	r1, [r2, #0]
 80063b8:	6852      	ldreq	r2, [r2, #4]
 80063ba:	1809      	addeq	r1, r1, r0
 80063bc:	6021      	streq	r1, [r4, #0]
 80063be:	6062      	str	r2, [r4, #4]
 80063c0:	605c      	str	r4, [r3, #4]
 80063c2:	e7c9      	b.n	8006358 <_free_r+0x24>
 80063c4:	bd38      	pop	{r3, r4, r5, pc}
 80063c6:	bf00      	nop
 80063c8:	2000012c 	.word	0x2000012c

080063cc <_malloc_r>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	1ccd      	adds	r5, r1, #3
 80063d0:	f025 0503 	bic.w	r5, r5, #3
 80063d4:	3508      	adds	r5, #8
 80063d6:	2d0c      	cmp	r5, #12
 80063d8:	bf38      	it	cc
 80063da:	250c      	movcc	r5, #12
 80063dc:	2d00      	cmp	r5, #0
 80063de:	4606      	mov	r6, r0
 80063e0:	db01      	blt.n	80063e6 <_malloc_r+0x1a>
 80063e2:	42a9      	cmp	r1, r5
 80063e4:	d903      	bls.n	80063ee <_malloc_r+0x22>
 80063e6:	230c      	movs	r3, #12
 80063e8:	6033      	str	r3, [r6, #0]
 80063ea:	2000      	movs	r0, #0
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
 80063ee:	f000 f87d 	bl	80064ec <__malloc_lock>
 80063f2:	4a21      	ldr	r2, [pc, #132]	; (8006478 <_malloc_r+0xac>)
 80063f4:	6814      	ldr	r4, [r2, #0]
 80063f6:	4621      	mov	r1, r4
 80063f8:	b991      	cbnz	r1, 8006420 <_malloc_r+0x54>
 80063fa:	4c20      	ldr	r4, [pc, #128]	; (800647c <_malloc_r+0xb0>)
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	b91b      	cbnz	r3, 8006408 <_malloc_r+0x3c>
 8006400:	4630      	mov	r0, r6
 8006402:	f000 f863 	bl	80064cc <_sbrk_r>
 8006406:	6020      	str	r0, [r4, #0]
 8006408:	4629      	mov	r1, r5
 800640a:	4630      	mov	r0, r6
 800640c:	f000 f85e 	bl	80064cc <_sbrk_r>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d124      	bne.n	800645e <_malloc_r+0x92>
 8006414:	230c      	movs	r3, #12
 8006416:	4630      	mov	r0, r6
 8006418:	6033      	str	r3, [r6, #0]
 800641a:	f000 f868 	bl	80064ee <__malloc_unlock>
 800641e:	e7e4      	b.n	80063ea <_malloc_r+0x1e>
 8006420:	680b      	ldr	r3, [r1, #0]
 8006422:	1b5b      	subs	r3, r3, r5
 8006424:	d418      	bmi.n	8006458 <_malloc_r+0x8c>
 8006426:	2b0b      	cmp	r3, #11
 8006428:	d90f      	bls.n	800644a <_malloc_r+0x7e>
 800642a:	600b      	str	r3, [r1, #0]
 800642c:	18cc      	adds	r4, r1, r3
 800642e:	50cd      	str	r5, [r1, r3]
 8006430:	4630      	mov	r0, r6
 8006432:	f000 f85c 	bl	80064ee <__malloc_unlock>
 8006436:	f104 000b 	add.w	r0, r4, #11
 800643a:	1d23      	adds	r3, r4, #4
 800643c:	f020 0007 	bic.w	r0, r0, #7
 8006440:	1ac3      	subs	r3, r0, r3
 8006442:	d0d3      	beq.n	80063ec <_malloc_r+0x20>
 8006444:	425a      	negs	r2, r3
 8006446:	50e2      	str	r2, [r4, r3]
 8006448:	e7d0      	b.n	80063ec <_malloc_r+0x20>
 800644a:	684b      	ldr	r3, [r1, #4]
 800644c:	428c      	cmp	r4, r1
 800644e:	bf16      	itet	ne
 8006450:	6063      	strne	r3, [r4, #4]
 8006452:	6013      	streq	r3, [r2, #0]
 8006454:	460c      	movne	r4, r1
 8006456:	e7eb      	b.n	8006430 <_malloc_r+0x64>
 8006458:	460c      	mov	r4, r1
 800645a:	6849      	ldr	r1, [r1, #4]
 800645c:	e7cc      	b.n	80063f8 <_malloc_r+0x2c>
 800645e:	1cc4      	adds	r4, r0, #3
 8006460:	f024 0403 	bic.w	r4, r4, #3
 8006464:	42a0      	cmp	r0, r4
 8006466:	d005      	beq.n	8006474 <_malloc_r+0xa8>
 8006468:	1a21      	subs	r1, r4, r0
 800646a:	4630      	mov	r0, r6
 800646c:	f000 f82e 	bl	80064cc <_sbrk_r>
 8006470:	3001      	adds	r0, #1
 8006472:	d0cf      	beq.n	8006414 <_malloc_r+0x48>
 8006474:	6025      	str	r5, [r4, #0]
 8006476:	e7db      	b.n	8006430 <_malloc_r+0x64>
 8006478:	2000012c 	.word	0x2000012c
 800647c:	20000130 	.word	0x20000130

08006480 <_realloc_r>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	4607      	mov	r7, r0
 8006484:	4614      	mov	r4, r2
 8006486:	460e      	mov	r6, r1
 8006488:	b921      	cbnz	r1, 8006494 <_realloc_r+0x14>
 800648a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800648e:	4611      	mov	r1, r2
 8006490:	f7ff bf9c 	b.w	80063cc <_malloc_r>
 8006494:	b922      	cbnz	r2, 80064a0 <_realloc_r+0x20>
 8006496:	f7ff ff4d 	bl	8006334 <_free_r>
 800649a:	4625      	mov	r5, r4
 800649c:	4628      	mov	r0, r5
 800649e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a0:	f000 f826 	bl	80064f0 <_malloc_usable_size_r>
 80064a4:	42a0      	cmp	r0, r4
 80064a6:	d20f      	bcs.n	80064c8 <_realloc_r+0x48>
 80064a8:	4621      	mov	r1, r4
 80064aa:	4638      	mov	r0, r7
 80064ac:	f7ff ff8e 	bl	80063cc <_malloc_r>
 80064b0:	4605      	mov	r5, r0
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d0f2      	beq.n	800649c <_realloc_r+0x1c>
 80064b6:	4631      	mov	r1, r6
 80064b8:	4622      	mov	r2, r4
 80064ba:	f7ff ff17 	bl	80062ec <memcpy>
 80064be:	4631      	mov	r1, r6
 80064c0:	4638      	mov	r0, r7
 80064c2:	f7ff ff37 	bl	8006334 <_free_r>
 80064c6:	e7e9      	b.n	800649c <_realloc_r+0x1c>
 80064c8:	4635      	mov	r5, r6
 80064ca:	e7e7      	b.n	800649c <_realloc_r+0x1c>

080064cc <_sbrk_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	2300      	movs	r3, #0
 80064d0:	4c05      	ldr	r4, [pc, #20]	; (80064e8 <_sbrk_r+0x1c>)
 80064d2:	4605      	mov	r5, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	f7fb fe70 	bl	80021bc <_sbrk>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_sbrk_r+0x1a>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_sbrk_r+0x1a>
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	20000740 	.word	0x20000740

080064ec <__malloc_lock>:
 80064ec:	4770      	bx	lr

080064ee <__malloc_unlock>:
 80064ee:	4770      	bx	lr

080064f0 <_malloc_usable_size_r>:
 80064f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064f4:	1f18      	subs	r0, r3, #4
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bfbc      	itt	lt
 80064fa:	580b      	ldrlt	r3, [r1, r0]
 80064fc:	18c0      	addlt	r0, r0, r3
 80064fe:	4770      	bx	lr

08006500 <_init>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	bf00      	nop
 8006504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006506:	bc08      	pop	{r3}
 8006508:	469e      	mov	lr, r3
 800650a:	4770      	bx	lr

0800650c <_fini>:
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650e:	bf00      	nop
 8006510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006512:	bc08      	pop	{r3}
 8006514:	469e      	mov	lr, r3
 8006516:	4770      	bx	lr
